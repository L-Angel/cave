// Generated from /Users/guhan/workspace/opensource/cave/cave-components/cave-sql/antlr4/CqlParser.g4 by ANTLR 4.10.1
package fun.langel.cql.antlr4;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class CqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.10.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		SPACE=1, SPEC_MYSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, ADD=5, 
		ALL=6, ALTER=7, ALWAYS=8, ANALYZE=9, AND=10, ARRAY=11, AS=12, ASC=13, 
		BEFORE=14, BETWEEN=15, BOTH=16, BUCKETS=17, BY=18, CALL=19, CASCADE=20, 
		CASE=21, CAST=22, CHANGE=23, CHARACTER=24, CHECK=25, COLLATE=26, COLUMN=27, 
		CONDITION=28, CONSTRAINT=29, CONTINUE=30, CONVERT=31, CREATE=32, CROSS=33, 
		CURRENT=34, CURRENT_USER=35, CURSOR=36, DATABASE=37, DATABASES=38, DECLARE=39, 
		DEFAULT=40, DELAYED=41, DELETE=42, DESC=43, DESCRIBE=44, DETERMINISTIC=45, 
		DIAGNOSTICS=46, DISTINCT=47, DISTINCTROW=48, DROP=49, EACH=50, ELSE=51, 
		ELSEIF=52, EMPTY=53, ENCLOSED=54, ESCAPED=55, EXCEPT=56, EXISTS=57, C_EXISTS=58, 
		C_SCRIPT=59, C_KEYVALUE=60, EXIT=61, EXPLAIN=62, FALSE=63, FETCH=64, FOR=65, 
		FORCE=66, FOREIGN=67, FROM=68, FULLTEXT=69, GENERATED=70, GET=71, GRANT=72, 
		GROUP=73, HAVING=74, HIGH_PRIORITY=75, HISTOGRAM=76, IF=77, IGNORE=78, 
		IGNORED=79, IN=80, INDEX=81, INFILE=82, INNER=83, INOUT=84, INSERT=85, 
		INTERVAL=86, INTO=87, IS=88, ITERATE=89, JOIN=90, KEY=91, KEYS=92, KILL=93, 
		LEADING=94, LEAVE=95, LEFT=96, LIKE=97, LIMIT=98, LINEAR=99, LINES=100, 
		LOAD=101, LOCK=102, LOOP=103, LOW_PRIORITY=104, MASTER_BIND=105, MASTER_SSL_VERIFY_SERVER_CERT=106, 
		MATCH=107, MAXVALUE=108, MODIFIES=109, NATURAL=110, NOT=111, NO_WRITE_TO_BINLOG=112, 
		NULL_LITERAL=113, NUMBER=114, ON=115, OPTIMIZE=116, OPTION=117, OPTIONAL=118, 
		OPTIONALLY=119, OR=120, ORDER=121, OUT=122, OVER=123, OUTER=124, OUTFILE=125, 
		PARTITION=126, PRIMARY=127, PROCEDURE=128, PURGE=129, RANGE=130, READ=131, 
		READS=132, REFERENCES=133, REGEXP=134, RELEASE=135, RENAME=136, REPEAT=137, 
		REPLACE=138, REQUIRE=139, RESIGNAL=140, RESTRICT=141, RETAIN=142, RETURN=143, 
		REVOKE=144, RIGHT=145, RLIKE=146, SCHEMA=147, SCHEMAS=148, SELECT=149, 
		SET=150, SEPARATOR=151, SHOW=152, SIGNAL=153, SPATIAL=154, SQL=155, SQLEXCEPTION=156, 
		SQLSTATE=157, SQLWARNING=158, SQL_BIG_RESULT=159, SQL_CALC_FOUND_ROWS=160, 
		SQL_SMALL_RESULT=161, SSL=162, STACKED=163, STARTING=164, STRAIGHT_JOIN=165, 
		TABLE=166, TERMINATED=167, THEN=168, TO=169, TRAILING=170, TRIGGER=171, 
		TRUE=172, UNDO=173, UNION=174, UNIQUE=175, UNLOCK=176, UNSIGNED=177, UPDATE=178, 
		USAGE=179, USE=180, USING=181, VALUES=182, WHEN=183, WHERE=184, WHILE=185, 
		WITH=186, WRITE=187, XOR=188, ZEROFILL=189, TINYINT=190, SMALLINT=191, 
		MEDIUMINT=192, MIDDLEINT=193, INT=194, INT1=195, INT2=196, INT3=197, INT4=198, 
		INT8=199, INTEGER=200, BIGINT=201, REAL=202, DOUBLE=203, PRECISION=204, 
		FLOAT=205, FLOAT4=206, FLOAT8=207, DECIMAL=208, DEC=209, NUMERIC=210, 
		DATE=211, TIME=212, TIMESTAMP=213, DATETIME=214, YEAR=215, CHAR=216, VARCHAR=217, 
		NVARCHAR=218, NATIONAL=219, BINARY=220, VARBINARY=221, TINYBLOB=222, BLOB=223, 
		MEDIUMBLOB=224, LONG=225, LONGBLOB=226, TINYTEXT=227, TEXT=228, MEDIUMTEXT=229, 
		LONGTEXT=230, ENUM=231, VARYING=232, SERIAL=233, YEAR_MONTH=234, DAY_HOUR=235, 
		DAY_MINUTE=236, DAY_SECOND=237, HOUR_MINUTE=238, HOUR_SECOND=239, MINUTE_SECOND=240, 
		SECOND_MICROSECOND=241, MINUTE_MICROSECOND=242, HOUR_MICROSECOND=243, 
		DAY_MICROSECOND=244, JSON_ARRAY=245, JSON_OBJECT=246, JSON_QUOTE=247, 
		JSON_CONTAINS=248, JSON_CONTAINS_PATH=249, JSON_EXTRACT=250, JSON_KEYS=251, 
		JSON_OVERLAPS=252, JSON_SEARCH=253, JSON_VALUE=254, JSON_ARRAY_APPEND=255, 
		JSON_ARRAY_INSERT=256, JSON_INSERT=257, JSON_MERGE=258, JSON_MERGE_PATCH=259, 
		JSON_MERGE_PRESERVE=260, JSON_REMOVE=261, JSON_REPLACE=262, JSON_SET=263, 
		JSON_UNQUOTE=264, JSON_DEPTH=265, JSON_LENGTH=266, JSON_TYPE=267, JSON_VALID=268, 
		JSON_TABLE=269, JSON_SCHEMA_VALID=270, JSON_SCHEMA_VALIDATION_REPORT=271, 
		JSON_PRETTY=272, JSON_STORAGE_FREE=273, JSON_STORAGE_SIZE=274, JSON_ARRAYAGG=275, 
		JSON_OBJECTAGG=276, AVG=277, BIT_AND=278, BIT_OR=279, BIT_XOR=280, COUNT=281, 
		CUME_DIST=282, DENSE_RANK=283, FIRST_VALUE=284, GROUP_CONCAT=285, LAG=286, 
		LAST_VALUE=287, LEAD=288, MAX=289, MIN=290, NTILE=291, NTH_VALUE=292, 
		PERCENT_RANK=293, RANK=294, ROW_NUMBER=295, STD=296, STDDEV=297, STDDEV_POP=298, 
		STDDEV_SAMP=299, SUM=300, VAR_POP=301, VAR_SAMP=302, VARIANCE=303, CURRENT_DATE=304, 
		CURRENT_TIME=305, CURRENT_TIMESTAMP=306, LOCALTIME=307, CURDATE=308, CURTIME=309, 
		DATE_ADD=310, DATE_SUB=311, EXTRACT=312, LOCALTIMESTAMP=313, NOW=314, 
		POSITION=315, SUBSTR=316, SUBSTRING=317, SYSDATE=318, TRIM=319, UTC_DATE=320, 
		UTC_TIME=321, UTC_TIMESTAMP=322, ACCOUNT=323, ACTION=324, AFTER=325, AGGREGATE=326, 
		ALGORITHM=327, ANY=328, AT=329, AUTHORS=330, AUTOCOMMIT=331, AUTOEXTEND_SIZE=332, 
		AUTO_INCREMENT=333, AVG_ROW_LENGTH=334, BEGIN=335, BINLOG=336, BIT=337, 
		BLOCK=338, BOOL=339, BOOLEAN=340, BTREE=341, CACHE=342, CASCADED=343, 
		CHAIN=344, CHANGED=345, CHANNEL=346, CHECKSUM=347, PAGE_CHECKSUM=348, 
		CIPHER=349, CLASS_ORIGIN=350, CLIENT=351, CLOSE=352, CLUSTERING=353, COALESCE=354, 
		CODE=355, COLUMNS=356, COLUMN_FORMAT=357, COLUMN_NAME=358, COMMENT=359, 
		COMMIT=360, COMPACT=361, COMPLETION=362, COMPRESSED=363, COMPRESSION=364, 
		CONCURRENT=365, CONNECT=366, CONNECTION=367, CONSISTENT=368, CONSTRAINT_CATALOG=369, 
		CONSTRAINT_SCHEMA=370, CONSTRAINT_NAME=371, CONTAINS=372, CONTEXT=373, 
		CONTRIBUTORS=374, COPY=375, CPU=376, CURSOR_NAME=377, DATA=378, DATAFILE=379, 
		DEALLOCATE=380, DEFAULT_AUTH=381, DEFINER=382, DELAY_KEY_WRITE=383, DES_KEY_FILE=384, 
		DIRECTORY=385, DISABLE=386, DISCARD=387, DISK=388, DO=389, DUMPFILE=390, 
		DUPLICATE=391, DYNAMIC=392, ENABLE=393, ENCRYPTION=394, END=395, ENDS=396, 
		ENGINE=397, ENGINES=398, ERROR=399, ERRORS=400, ESCAPE=401, EVEN=402, 
		EVENT=403, EVENTS=404, EVERY=405, EXCHANGE=406, EXCLUSIVE=407, EXPIRE=408, 
		EXPORT=409, EXTENDED=410, EXTENT_SIZE=411, FAST=412, FAULTS=413, FIELDS=414, 
		FILE_BLOCK_SIZE=415, FILTER=416, FIRST=417, FIXED=418, FLUSH=419, FOLLOWING=420, 
		FOLLOWS=421, FOUND=422, FULL=423, FUNCTION=424, GENERAL=425, GLOBAL=426, 
		GRANTS=427, GROUP_REPLICATION=428, HANDLER=429, HASH=430, HELP=431, HOST=432, 
		HOSTS=433, IDENTIFIED=434, IGNORE_SERVER_IDS=435, IMPORT=436, INDEXES=437, 
		INITIAL_SIZE=438, INPLACE=439, INSERT_METHOD=440, INSTALL=441, INSTANCE=442, 
		INSTANT=443, INVISIBLE=444, INVOKER=445, IO=446, IO_THREAD=447, IPC=448, 
		ISOLATION=449, ISSUER=450, JSON=451, KEY_BLOCK_SIZE=452, LANGUAGE=453, 
		LAST=454, LEAVES=455, LESS=456, LEVEL=457, LIST=458, LOCAL=459, LOGFILE=460, 
		LOGS=461, MASTER=462, MASTER_AUTO_POSITION=463, MASTER_CONNECT_RETRY=464, 
		MASTER_DELAY=465, MASTER_HEARTBEAT_PERIOD=466, MASTER_HOST=467, MASTER_LOG_FILE=468, 
		MASTER_LOG_POS=469, MASTER_PASSWORD=470, MASTER_PORT=471, MASTER_RETRY_COUNT=472, 
		MASTER_SSL=473, MASTER_SSL_CA=474, MASTER_SSL_CAPATH=475, MASTER_SSL_CERT=476, 
		MASTER_SSL_CIPHER=477, MASTER_SSL_CRL=478, MASTER_SSL_CRLPATH=479, MASTER_SSL_KEY=480, 
		MASTER_TLS_VERSION=481, MASTER_USER=482, MAX_CONNECTIONS_PER_HOUR=483, 
		MAX_QUERIES_PER_HOUR=484, MAX_ROWS=485, MAX_SIZE=486, MAX_UPDATES_PER_HOUR=487, 
		MAX_USER_CONNECTIONS=488, MEDIUM=489, MEMBER=490, MERGE=491, MESSAGE_TEXT=492, 
		MID=493, MIGRATE=494, MIN_ROWS=495, MODE=496, MODIFY=497, MUTEX=498, MYSQL=499, 
		MYSQL_ERRNO=500, NAME=501, NAMES=502, NCHAR=503, NEVER=504, NEXT=505, 
		NO=506, NOCOPY=507, NOWAIT=508, NODEGROUP=509, NONE=510, ODBC=511, OFFLINE=512, 
		OFFSET=513, OF=514, OJ=515, OLD_PASSWORD=516, ONE=517, ONLINE=518, ONLY=519, 
		OPEN=520, OPTIMIZER_COSTS=521, OPTIONS=522, OWNER=523, PACK_KEYS=524, 
		PAGE=525, PARSER=526, PARTIAL=527, PARTITIONING=528, PARTITIONS=529, PASSWORD=530, 
		PHASE=531, PLUGIN=532, PLUGIN_DIR=533, PLUGINS=534, PORT=535, PRECEDES=536, 
		PRECEDING=537, PREPARE=538, PRESERVE=539, PREV=540, PROCESSLIST=541, PROFILE=542, 
		PROFILES=543, PROXY=544, QUERY=545, QUICK=546, REBUILD=547, RECOVER=548, 
		RECURSIVE=549, REDO_BUFFER_SIZE=550, REDUNDANT=551, RELAY=552, RELAY_LOG_FILE=553, 
		RELAY_LOG_POS=554, RELAYLOG=555, REMOVE=556, REORGANIZE=557, REPAIR=558, 
		REPLICATE_DO_DB=559, REPLICATE_DO_TABLE=560, REPLICATE_IGNORE_DB=561, 
		REPLICATE_IGNORE_TABLE=562, REPLICATE_REWRITE_DB=563, REPLICATE_WILD_DO_TABLE=564, 
		REPLICATE_WILD_IGNORE_TABLE=565, REPLICATION=566, RESET=567, RESUME=568, 
		RETURNED_SQLSTATE=569, RETURNING=570, RETURNS=571, ROLE=572, ROLLBACK=573, 
		ROLLUP=574, ROTATE=575, ROW=576, ROWS=577, ROW_FORMAT=578, RTREE=579, 
		SAVEPOINT=580, SCHEDULE=581, SECURITY=582, SERVER=583, SESSION=584, SHARE=585, 
		SHARED=586, SIGNED=587, SIMPLE=588, SLAVE=589, SLOW=590, SNAPSHOT=591, 
		SOCKET=592, SOME=593, SONAME=594, SOUNDS=595, SOURCE=596, SQL_AFTER_GTIDS=597, 
		SQL_AFTER_MTS_GAPS=598, SQL_BEFORE_GTIDS=599, SQL_BUFFER_RESULT=600, SQL_CACHE=601, 
		SQL_NO_CACHE=602, SQL_THREAD=603, START=604, STARTS=605, STATS_AUTO_RECALC=606, 
		STATS_PERSISTENT=607, STATS_SAMPLE_PAGES=608, STATUS=609, STOP=610, STORAGE=611, 
		STORED=612, STRING=613, SUBCLASS_ORIGIN=614, SUBJECT=615, SUBPARTITION=616, 
		SUBPARTITIONS=617, SUSPEND=618, SWAPS=619, SWITCHES=620, TABLE_NAME=621, 
		TABLESPACE=622, TABLE_TYPE=623, TEMPORARY=624, TEMPTABLE=625, THAN=626, 
		TRADITIONAL=627, TRANSACTION=628, TRANSACTIONAL=629, TRIGGERS=630, TRUNCATE=631, 
		UNBOUNDED=632, UNDEFINED=633, UNDOFILE=634, UNDO_BUFFER_SIZE=635, UNINSTALL=636, 
		UNKNOWN=637, UNTIL=638, UPGRADE=639, USER=640, USE_FRM=641, USER_RESOURCES=642, 
		VALIDATION=643, VALUE=644, VARIABLES=645, VIEW=646, VIRTUAL=647, VISIBLE=648, 
		WAIT=649, WARNINGS=650, WINDOW=651, WITHOUT=652, WORK=653, WRAPPER=654, 
		X509=655, XA=656, XML=657, YES=658, EUR=659, USA=660, JIS=661, ISO=662, 
		INTERNAL=663, QUARTER=664, MONTH=665, DAY=666, HOUR=667, MINUTE=668, WEEK=669, 
		SECOND=670, MICROSECOND=671, TABLES=672, ROUTINE=673, EXECUTE=674, FILE=675, 
		PROCESS=676, RELOAD=677, SHUTDOWN=678, SUPER=679, PRIVILEGES=680, APPLICATION_PASSWORD_ADMIN=681, 
		AUDIT_ADMIN=682, BACKUP_ADMIN=683, BINLOG_ADMIN=684, BINLOG_ENCRYPTION_ADMIN=685, 
		CLONE_ADMIN=686, CONNECTION_ADMIN=687, ENCRYPTION_KEY_ADMIN=688, FIREWALL_ADMIN=689, 
		FIREWALL_USER=690, FLUSH_OPTIMIZER_COSTS=691, FLUSH_STATUS=692, FLUSH_TABLES=693, 
		FLUSH_USER_RESOURCES=694, ADMIN=695, GROUP_REPLICATION_ADMIN=696, INNODB_REDO_LOG_ARCHIVE=697, 
		INNODB_REDO_LOG_ENABLE=698, NDB_STORED_USER=699, PERSIST_RO_VARIABLES_ADMIN=700, 
		REPLICATION_APPLIER=701, REPLICATION_SLAVE_ADMIN=702, RESOURCE_GROUP_ADMIN=703, 
		RESOURCE_GROUP_USER=704, ROLE_ADMIN=705, SERVICE_CONNECTION_ADMIN=706, 
		SESSION_VARIABLES_ADMIN=707, SET_USER_ID=708, SHOW_ROUTINE=709, SYSTEM_VARIABLES_ADMIN=710, 
		TABLE_ENCRYPTION_ADMIN=711, VERSION_TOKEN_ADMIN=712, XA_RECOVER_ADMIN=713, 
		ARMSCII8=714, ASCII=715, BIG5=716, CP1250=717, CP1251=718, CP1256=719, 
		CP1257=720, CP850=721, CP852=722, CP866=723, CP932=724, DEC8=725, EUCJPMS=726, 
		EUCKR=727, GB18030=728, GB2312=729, GBK=730, GEOSTD8=731, GREEK=732, HEBREW=733, 
		HP8=734, KEYBCS2=735, KOI8R=736, KOI8U=737, LATIN1=738, LATIN2=739, LATIN5=740, 
		LATIN7=741, MACCE=742, MACROMAN=743, SJIS=744, SWE7=745, TIS620=746, UCS2=747, 
		UJIS=748, UTF16=749, UTF16LE=750, UTF32=751, UTF8=752, UTF8MB3=753, UTF8MB4=754, 
		ARCHIVE=755, BLACKHOLE=756, CSV=757, FEDERATED=758, INNODB=759, MEMORY=760, 
		MRG_MYISAM=761, MYISAM=762, NDB=763, NDBCLUSTER=764, PERFORMANCE_SCHEMA=765, 
		TOKUDB=766, REPEATABLE=767, COMMITTED=768, UNCOMMITTED=769, SERIALIZABLE=770, 
		GEOMETRYCOLLECTION=771, GEOMCOLLECTION=772, GEOMETRY=773, LINESTRING=774, 
		MULTILINESTRING=775, MULTIPOINT=776, MULTIPOLYGON=777, POINT=778, POLYGON=779, 
		ABS=780, ACOS=781, ADDDATE=782, ADDTIME=783, AES_DECRYPT=784, AES_ENCRYPT=785, 
		AREA=786, ASBINARY=787, ASIN=788, ASTEXT=789, ASWKB=790, ASWKT=791, ASYMMETRIC_DECRYPT=792, 
		ASYMMETRIC_DERIVE=793, ASYMMETRIC_ENCRYPT=794, ASYMMETRIC_SIGN=795, ASYMMETRIC_VERIFY=796, 
		ATAN=797, ATAN2=798, BENCHMARK=799, BIN=800, BIT_COUNT=801, BIT_LENGTH=802, 
		BUFFER=803, CATALOG_NAME=804, CEIL=805, CEILING=806, CENTROID=807, CHARACTER_LENGTH=808, 
		CHARSET=809, CHAR_LENGTH=810, COERCIBILITY=811, COLLATION=812, COMPRESS=813, 
		CONCAT=814, CONCAT_WS=815, CONNECTION_ID=816, CONV=817, CONVERT_TZ=818, 
		COS=819, COT=820, CRC32=821, CREATE_ASYMMETRIC_PRIV_KEY=822, CREATE_ASYMMETRIC_PUB_KEY=823, 
		CREATE_DH_PARAMETERS=824, CREATE_DIGEST=825, CROSSES=826, DATEDIFF=827, 
		DATE_FORMAT=828, DAYNAME=829, DAYOFMONTH=830, DAYOFWEEK=831, DAYOFYEAR=832, 
		DECODE=833, DEGREES=834, DES_DECRYPT=835, DES_ENCRYPT=836, DIMENSION=837, 
		DISJOINT=838, ELT=839, ENCODE=840, ENCRYPT=841, ENDPOINT=842, ENGINE_ATTRIBUTE=843, 
		ENVELOPE=844, EQUALS=845, EXP=846, EXPORT_SET=847, EXTERIORRING=848, EXTRACTVALUE=849, 
		FIELD=850, FIND_IN_SET=851, FLOOR=852, FORMAT=853, FOUND_ROWS=854, FROM_BASE64=855, 
		FROM_DAYS=856, FROM_UNIXTIME=857, GEOMCOLLFROMTEXT=858, GEOMCOLLFROMWKB=859, 
		GEOMETRYCOLLECTIONFROMTEXT=860, GEOMETRYCOLLECTIONFROMWKB=861, GEOMETRYFROMTEXT=862, 
		GEOMETRYFROMWKB=863, GEOMETRYN=864, GEOMETRYTYPE=865, GEOMFROMTEXT=866, 
		GEOMFROMWKB=867, GET_FORMAT=868, GET_LOCK=869, GLENGTH=870, GREATEST=871, 
		GTID_SUBSET=872, GTID_SUBTRACT=873, HEX=874, IFNULL=875, INET6_ATON=876, 
		INET6_NTOA=877, INET_ATON=878, INET_NTOA=879, INSTR=880, INTERIORRINGN=881, 
		INTERSECTS=882, ISCLOSED=883, ISEMPTY=884, ISNULL=885, ISSIMPLE=886, IS_FREE_LOCK=887, 
		IS_IPV4=888, IS_IPV4_COMPAT=889, IS_IPV4_MAPPED=890, IS_IPV6=891, IS_USED_LOCK=892, 
		LAST_INSERT_ID=893, LCASE=894, LEAST=895, LENGTH=896, LINEFROMTEXT=897, 
		LINEFROMWKB=898, LINESTRINGFROMTEXT=899, LINESTRINGFROMWKB=900, LN=901, 
		LOAD_FILE=902, LOCATE=903, LOG=904, LOG10=905, LOG2=906, LOWER=907, LPAD=908, 
		LTRIM=909, MAKEDATE=910, MAKETIME=911, MAKE_SET=912, MASTER_POS_WAIT=913, 
		MBRCONTAINS=914, MBRDISJOINT=915, MBREQUAL=916, MBRINTERSECTS=917, MBROVERLAPS=918, 
		MBRTOUCHES=919, MBRWITHIN=920, MD5=921, MLINEFROMTEXT=922, MLINEFROMWKB=923, 
		MONTHNAME=924, MPOINTFROMTEXT=925, MPOINTFROMWKB=926, MPOLYFROMTEXT=927, 
		MPOLYFROMWKB=928, MULTILINESTRINGFROMTEXT=929, MULTILINESTRINGFROMWKB=930, 
		MULTIPOINTFROMTEXT=931, MULTIPOINTFROMWKB=932, MULTIPOLYGONFROMTEXT=933, 
		MULTIPOLYGONFROMWKB=934, NAME_CONST=935, NULLIF=936, NUMGEOMETRIES=937, 
		NUMINTERIORRINGS=938, NUMPOINTS=939, OCT=940, OCTET_LENGTH=941, ORD=942, 
		OVERLAPS=943, PERIOD_ADD=944, PERIOD_DIFF=945, PI=946, POINTFROMTEXT=947, 
		POINTFROMWKB=948, POINTN=949, POLYFROMTEXT=950, POLYFROMWKB=951, POLYGONFROMTEXT=952, 
		POLYGONFROMWKB=953, POW=954, POWER=955, QUOTE=956, RADIANS=957, RAND=958, 
		RANDOM_BYTES=959, RELEASE_LOCK=960, REVERSE=961, ROUND=962, ROW_COUNT=963, 
		RPAD=964, RTRIM=965, SEC_TO_TIME=966, SECONDARY_ENGINE_ATTRIBUTE=967, 
		SESSION_USER=968, SHA=969, SHA1=970, SHA2=971, SCHEMA_NAME=972, SIGN=973, 
		SIN=974, SLEEP=975, SOUNDEX=976, SQL_THREAD_WAIT_AFTER_GTIDS=977, SQRT=978, 
		SRID=979, STARTPOINT=980, STRCMP=981, STR_TO_DATE=982, ST_AREA=983, ST_ASBINARY=984, 
		ST_ASTEXT=985, ST_ASWKB=986, ST_ASWKT=987, ST_BUFFER=988, ST_CENTROID=989, 
		ST_CONTAINS=990, ST_CROSSES=991, ST_DIFFERENCE=992, ST_DIMENSION=993, 
		ST_DISJOINT=994, ST_DISTANCE=995, ST_ENDPOINT=996, ST_ENVELOPE=997, ST_EQUALS=998, 
		ST_EXTERIORRING=999, ST_GEOMCOLLFROMTEXT=1000, ST_GEOMCOLLFROMTXT=1001, 
		ST_GEOMCOLLFROMWKB=1002, ST_GEOMETRYCOLLECTIONFROMTEXT=1003, ST_GEOMETRYCOLLECTIONFROMWKB=1004, 
		ST_GEOMETRYFROMTEXT=1005, ST_GEOMETRYFROMWKB=1006, ST_GEOMETRYN=1007, 
		ST_GEOMETRYTYPE=1008, ST_GEOMFROMTEXT=1009, ST_GEOMFROMWKB=1010, ST_INTERIORRINGN=1011, 
		ST_INTERSECTION=1012, ST_INTERSECTS=1013, ST_ISCLOSED=1014, ST_ISEMPTY=1015, 
		ST_ISSIMPLE=1016, ST_LINEFROMTEXT=1017, ST_LINEFROMWKB=1018, ST_LINESTRINGFROMTEXT=1019, 
		ST_LINESTRINGFROMWKB=1020, ST_NUMGEOMETRIES=1021, ST_NUMINTERIORRING=1022, 
		ST_NUMINTERIORRINGS=1023, ST_NUMPOINTS=1024, ST_OVERLAPS=1025, ST_POINTFROMTEXT=1026, 
		ST_POINTFROMWKB=1027, ST_POINTN=1028, ST_POLYFROMTEXT=1029, ST_POLYFROMWKB=1030, 
		ST_POLYGONFROMTEXT=1031, ST_POLYGONFROMWKB=1032, ST_SRID=1033, ST_STARTPOINT=1034, 
		ST_SYMDIFFERENCE=1035, ST_TOUCHES=1036, ST_UNION=1037, ST_WITHIN=1038, 
		ST_X=1039, ST_Y=1040, SUBDATE=1041, SUBSTRING_INDEX=1042, SUBTIME=1043, 
		SYSTEM_USER=1044, TAN=1045, TIMEDIFF=1046, TIMESTAMPADD=1047, TIMESTAMPDIFF=1048, 
		TIME_FORMAT=1049, TIME_TO_SEC=1050, TOUCHES=1051, TO_BASE64=1052, TO_DAYS=1053, 
		TO_SECONDS=1054, UCASE=1055, UNCOMPRESS=1056, UNCOMPRESSED_LENGTH=1057, 
		UNHEX=1058, UNIX_TIMESTAMP=1059, UPDATEXML=1060, UPPER=1061, UUID=1062, 
		UUID_SHORT=1063, VALIDATE_PASSWORD_STRENGTH=1064, VERSION=1065, WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=1066, 
		WEEKDAY=1067, WEEKOFYEAR=1068, WEIGHT_STRING=1069, WITHIN=1070, YEARWEEK=1071, 
		Y_FUNCTION=1072, X_FUNCTION=1073, VIA=1074, LASTVAL=1075, NEXTVAL=1076, 
		SETVAL=1077, PREVIOUS=1078, PERSISTENT=1079, BINLOG_MONITOR=1080, BINLOG_REPLAY=1081, 
		FEDERATED_ADMIN=1082, READ_ONLY_ADMIN=1083, REPLICA=1084, REPLICATION_MASTER_ADMIN=1085, 
		VAR_ASSIGN=1086, PLUS_ASSIGN=1087, MINUS_ASSIGN=1088, MULT_ASSIGN=1089, 
		DIV_ASSIGN=1090, MOD_ASSIGN=1091, AND_ASSIGN=1092, XOR_ASSIGN=1093, OR_ASSIGN=1094, 
		STAR=1095, DIVIDE=1096, MODULE=1097, PLUS=1098, MINUS=1099, DIV=1100, 
		MOD=1101, EQUAL_SYMBOL=1102, GREATER_SYMBOL=1103, LESS_SYMBOL=1104, EXCLAMATION_SYMBOL=1105, 
		BIT_NOT_OP=1106, BIT_OR_OP=1107, BIT_AND_OP=1108, BIT_XOR_OP=1109, DOT=1110, 
		LR_BRACKET=1111, RR_BRACKET=1112, COMMA=1113, SEMI=1114, AT_SIGN=1115, 
		ZERO_DECIMAL=1116, ONE_DECIMAL=1117, TWO_DECIMAL=1118, SINGLE_QUOTE_SYMB=1119, 
		DOUBLE_QUOTE_SYMB=1120, REVERSE_QUOTE_SYMB=1121, COLON_SYMB=1122, CHARSET_REVERSE_QOUTE_STRING=1123, 
		FILESIZE_LITERAL=1124, START_NATIONAL_STRING_LITERAL=1125, STRING_LITERAL=1126, 
		DECIMAL_LITERAL=1127, HEXADECIMAL_LITERAL=1128, REAL_LITERAL=1129, NULL_SPEC_LITERAL=1130, 
		BIT_STRING=1131, STRING_CHARSET_NAME=1132, DOT_ID=1133, ID=1134, REVERSE_QUOTE_ID=1135, 
		STRING_USER_NAME=1136, IP_ADDRESS=1137, STRING_USER_NAME_MARIADB=1138, 
		LOCAL_ID=1139, GLOBAL_ID=1140, ERROR_RECONGNIGION=1141, ENCRYPTED=1142, 
		ENCRYPTION_KEY_ID=1143;
	public static final int
		RULE_root = 0, RULE_sqlStatements = 1, RULE_sqlStatement = 2, RULE_emptyStatement_ = 3, 
		RULE_ddlStatement = 4, RULE_dmlStatement = 5, RULE_transactionStatement = 6, 
		RULE_replicationStatement = 7, RULE_preparedStatement = 8, RULE_compoundStatement = 9, 
		RULE_administrationStatement = 10, RULE_utilityStatement = 11, RULE_createDatabase = 12, 
		RULE_createEvent = 13, RULE_createIndex = 14, RULE_createLogfileGroup = 15, 
		RULE_createProcedure = 16, RULE_createFunction = 17, RULE_createRole = 18, 
		RULE_createServer = 19, RULE_createTable = 20, RULE_createTablespaceInnodb = 21, 
		RULE_createTablespaceNdb = 22, RULE_createTrigger = 23, RULE_withClause = 24, 
		RULE_commonTableExpressions = 25, RULE_cteName = 26, RULE_cteColumnName = 27, 
		RULE_createView = 28, RULE_createDatabaseOption = 29, RULE_charSet = 30, 
		RULE_ownerStatement = 31, RULE_scheduleExpression = 32, RULE_timestampValue = 33, 
		RULE_intervalExpr = 34, RULE_intervalType = 35, RULE_enableType = 36, 
		RULE_indexType = 37, RULE_indexOption = 38, RULE_procedureParameter = 39, 
		RULE_functionParameter = 40, RULE_routineOption = 41, RULE_serverOption = 42, 
		RULE_createDefinitions = 43, RULE_createDefinition = 44, RULE_columnDefinition = 45, 
		RULE_columnConstraint = 46, RULE_tableConstraint = 47, RULE_referenceDefinition = 48, 
		RULE_referenceAction = 49, RULE_referenceControlType = 50, RULE_indexColumnDefinition = 51, 
		RULE_tableOption = 52, RULE_tableType = 53, RULE_tablespaceStorage = 54, 
		RULE_partitionDefinitions = 55, RULE_partitionFunctionDefinition = 56, 
		RULE_subpartitionFunctionDefinition = 57, RULE_partitionDefinition = 58, 
		RULE_partitionDefinerAtom = 59, RULE_partitionDefinerVector = 60, RULE_subpartitionDefinition = 61, 
		RULE_partitionOption = 62, RULE_alterDatabase = 63, RULE_alterEvent = 64, 
		RULE_alterFunction = 65, RULE_alterInstance = 66, RULE_alterLogfileGroup = 67, 
		RULE_alterProcedure = 68, RULE_alterServer = 69, RULE_alterTable = 70, 
		RULE_alterTablespace = 71, RULE_alterView = 72, RULE_alterSpecification = 73, 
		RULE_dropDatabase = 74, RULE_dropEvent = 75, RULE_dropIndex = 76, RULE_dropLogfileGroup = 77, 
		RULE_dropProcedure = 78, RULE_dropFunction = 79, RULE_dropServer = 80, 
		RULE_dropTable = 81, RULE_dropTablespace = 82, RULE_dropTrigger = 83, 
		RULE_dropView = 84, RULE_dropRole = 85, RULE_setRole = 86, RULE_renameTable = 87, 
		RULE_renameTableClause = 88, RULE_truncateTable = 89, RULE_callStatement = 90, 
		RULE_deleteStatement = 91, RULE_doStatement = 92, RULE_handlerStatement = 93, 
		RULE_insertStatement = 94, RULE_loadDataStatement = 95, RULE_loadXmlStatement = 96, 
		RULE_replaceStatement = 97, RULE_selectStatement = 98, RULE_updateStatement = 99, 
		RULE_insertStatementValue = 100, RULE_updatedElement = 101, RULE_assignmentField = 102, 
		RULE_lockClause = 103, RULE_singleDeleteStatement = 104, RULE_multipleDeleteStatement = 105, 
		RULE_handlerOpenStatement = 106, RULE_handlerReadIndexStatement = 107, 
		RULE_handlerReadStatement = 108, RULE_handlerCloseStatement = 109, RULE_singleUpdateStatement = 110, 
		RULE_multipleUpdateStatement = 111, RULE_orderByClause = 112, RULE_orderByExpression = 113, 
		RULE_tableSources = 114, RULE_tableSource = 115, RULE_tableSourceItem = 116, 
		RULE_indexHint = 117, RULE_indexHintType = 118, RULE_joinPart = 119, RULE_queryExpression = 120, 
		RULE_queryExpressionNointo = 121, RULE_querySpecification = 122, RULE_querySpecificationNointo = 123, 
		RULE_unionParenthesis = 124, RULE_unionStatement = 125, RULE_selectSpec = 126, 
		RULE_selectElements = 127, RULE_selectElement = 128, RULE_selectIntoExpression = 129, 
		RULE_selectFieldsInto = 130, RULE_selectLinesInto = 131, RULE_fromClause = 132, 
		RULE_groupByClause = 133, RULE_havingClause = 134, RULE_windowClause = 135, 
		RULE_groupByItem = 136, RULE_limitClause = 137, RULE_limitClauseAtom = 138, 
		RULE_startTransaction = 139, RULE_beginWork = 140, RULE_commitWork = 141, 
		RULE_rollbackWork = 142, RULE_savepointStatement = 143, RULE_rollbackStatement = 144, 
		RULE_releaseStatement = 145, RULE_lockTables = 146, RULE_unlockTables = 147, 
		RULE_setAutocommitStatement = 148, RULE_setTransactionStatement = 149, 
		RULE_transactionMode = 150, RULE_lockTableElement = 151, RULE_lockAction = 152, 
		RULE_transactionOption = 153, RULE_transactionLevel = 154, RULE_changeMaster = 155, 
		RULE_changeReplicationFilter = 156, RULE_purgeBinaryLogs = 157, RULE_resetMaster = 158, 
		RULE_resetSlave = 159, RULE_startSlave = 160, RULE_stopSlave = 161, RULE_startGroupReplication = 162, 
		RULE_stopGroupReplication = 163, RULE_masterOption = 164, RULE_stringMasterOption = 165, 
		RULE_decimalMasterOption = 166, RULE_boolMasterOption = 167, RULE_channelOption = 168, 
		RULE_replicationFilter = 169, RULE_tablePair = 170, RULE_threadType = 171, 
		RULE_untilOption = 172, RULE_connectionOption = 173, RULE_gtuidSet = 174, 
		RULE_xaStartTransaction = 175, RULE_xaEndTransaction = 176, RULE_xaPrepareStatement = 177, 
		RULE_xaCommitWork = 178, RULE_xaRollbackWork = 179, RULE_xaRecoverWork = 180, 
		RULE_prepareStatement = 181, RULE_executeStatement = 182, RULE_deallocatePrepare = 183, 
		RULE_routineBody = 184, RULE_blockStatement = 185, RULE_caseStatement = 186, 
		RULE_ifStatement = 187, RULE_iterateStatement = 188, RULE_leaveStatement = 189, 
		RULE_loopStatement = 190, RULE_repeatStatement = 191, RULE_returnStatement = 192, 
		RULE_whileStatement = 193, RULE_cursorStatement = 194, RULE_declareVariable = 195, 
		RULE_declareCondition = 196, RULE_declareCursor = 197, RULE_declareHandler = 198, 
		RULE_handlerConditionValue = 199, RULE_procedureSqlStatement = 200, RULE_caseAlternative = 201, 
		RULE_elifAlternative = 202, RULE_alterUser = 203, RULE_createUser = 204, 
		RULE_dropUser = 205, RULE_grantStatement = 206, RULE_roleOption = 207, 
		RULE_grantProxy = 208, RULE_renameUser = 209, RULE_revokeStatement = 210, 
		RULE_revokeProxy = 211, RULE_setPasswordStatement = 212, RULE_userSpecification = 213, 
		RULE_userAuthOption = 214, RULE_tlsOption = 215, RULE_userResourceOption = 216, 
		RULE_userPasswordOption = 217, RULE_userLockOption = 218, RULE_privelegeClause = 219, 
		RULE_privilege = 220, RULE_privilegeLevel = 221, RULE_renameUserClause = 222, 
		RULE_analyzeTable = 223, RULE_checkTable = 224, RULE_checksumTable = 225, 
		RULE_optimizeTable = 226, RULE_repairTable = 227, RULE_checkTableOption = 228, 
		RULE_createUdfunction = 229, RULE_installPlugin = 230, RULE_uninstallPlugin = 231, 
		RULE_setStatement = 232, RULE_showStatement = 233, RULE_variableClause = 234, 
		RULE_showCommonEntity = 235, RULE_showFilter = 236, RULE_showGlobalInfoClause = 237, 
		RULE_showSchemaEntity = 238, RULE_showProfileType = 239, RULE_binlogStatement = 240, 
		RULE_cacheIndexStatement = 241, RULE_flushStatement = 242, RULE_killStatement = 243, 
		RULE_loadIndexIntoCache = 244, RULE_resetStatement = 245, RULE_shutdownStatement = 246, 
		RULE_tableIndexes = 247, RULE_flushOption = 248, RULE_flushTableOption = 249, 
		RULE_loadedTableIndexes = 250, RULE_simpleDescribeStatement = 251, RULE_fullDescribeStatement = 252, 
		RULE_helpStatement = 253, RULE_useStatement = 254, RULE_signalStatement = 255, 
		RULE_resignalStatement = 256, RULE_signalConditionInformation = 257, RULE_diagnosticsStatement = 258, 
		RULE_diagnosticsConditionInformationName = 259, RULE_describeObjectClause = 260, 
		RULE_fullId = 261, RULE_tableName = 262, RULE_roleName = 263, RULE_fullColumnName = 264, 
		RULE_indexColumnName = 265, RULE_userName = 266, RULE_mysqlVariable = 267, 
		RULE_charsetName = 268, RULE_collationName = 269, RULE_engineName = 270, 
		RULE_uuidSet = 271, RULE_xid = 272, RULE_xuidStringId = 273, RULE_authPlugin = 274, 
		RULE_uid = 275, RULE_simpleId = 276, RULE_dottedId = 277, RULE_decimalLiteral = 278, 
		RULE_fileSizeLiteral = 279, RULE_stringLiteral = 280, RULE_booleanLiteral = 281, 
		RULE_hexadecimalLiteral = 282, RULE_nullNotnull = 283, RULE_constant = 284, 
		RULE_dataType = 285, RULE_collectionOptions = 286, RULE_convertedDataType = 287, 
		RULE_lengthOneDimension = 288, RULE_lengthTwoDimension = 289, RULE_lengthTwoOptionalDimension = 290, 
		RULE_uidList = 291, RULE_tables = 292, RULE_indexColumnNames = 293, RULE_expressions = 294, 
		RULE_expressionsWithDefaults = 295, RULE_constants = 296, RULE_simpleStrings = 297, 
		RULE_userVariables = 298, RULE_defaultValue = 299, RULE_currentTimestamp = 300, 
		RULE_expressionOrDefault = 301, RULE_ifExists = 302, RULE_ifNotExists = 303, 
		RULE_functionCall = 304, RULE_specificFunction = 305, RULE_caseFuncAlternative = 306, 
		RULE_levelsInWeightString = 307, RULE_levelInWeightListElement = 308, 
		RULE_aggregateWindowedFunction = 309, RULE_nonAggregateWindowedFunction = 310, 
		RULE_overClause = 311, RULE_windowSpec = 312, RULE_windowName = 313, RULE_frameClause = 314, 
		RULE_frameUnits = 315, RULE_frameExtent = 316, RULE_frameBetween = 317, 
		RULE_frameRange = 318, RULE_partitionClause = 319, RULE_scalarFunctionName = 320, 
		RULE_passwordFunctionClause = 321, RULE_functionArgs = 322, RULE_functionArg = 323, 
		RULE_expression = 324, RULE_predicate = 325, RULE_expressionAtom = 326, 
		RULE_cqlWhereFunction = 327, RULE_unaryOperator = 328, RULE_comparisonOperator = 329, 
		RULE_logicalOperator = 330, RULE_bitOperator = 331, RULE_mathOperator = 332, 
		RULE_jsonOperator = 333, RULE_charsetNameBase = 334, RULE_transactionLevelBase = 335, 
		RULE_privilegesBase = 336, RULE_intervalTypeBase = 337, RULE_dataTypeBase = 338, 
		RULE_keywordsCanBeId = 339, RULE_functionNameBase = 340;
	private static String[] makeRuleNames() {
		return new String[] {
			"root", "sqlStatements", "sqlStatement", "emptyStatement_", "ddlStatement", 
			"dmlStatement", "transactionStatement", "replicationStatement", "preparedStatement", 
			"compoundStatement", "administrationStatement", "utilityStatement", "createDatabase", 
			"createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
			"createFunction", "createRole", "createServer", "createTable", "createTablespaceInnodb", 
			"createTablespaceNdb", "createTrigger", "withClause", "commonTableExpressions", 
			"cteName", "cteColumnName", "createView", "createDatabaseOption", "charSet", 
			"ownerStatement", "scheduleExpression", "timestampValue", "intervalExpr", 
			"intervalType", "enableType", "indexType", "indexOption", "procedureParameter", 
			"functionParameter", "routineOption", "serverOption", "createDefinitions", 
			"createDefinition", "columnDefinition", "columnConstraint", "tableConstraint", 
			"referenceDefinition", "referenceAction", "referenceControlType", "indexColumnDefinition", 
			"tableOption", "tableType", "tablespaceStorage", "partitionDefinitions", 
			"partitionFunctionDefinition", "subpartitionFunctionDefinition", "partitionDefinition", 
			"partitionDefinerAtom", "partitionDefinerVector", "subpartitionDefinition", 
			"partitionOption", "alterDatabase", "alterEvent", "alterFunction", "alterInstance", 
			"alterLogfileGroup", "alterProcedure", "alterServer", "alterTable", "alterTablespace", 
			"alterView", "alterSpecification", "dropDatabase", "dropEvent", "dropIndex", 
			"dropLogfileGroup", "dropProcedure", "dropFunction", "dropServer", "dropTable", 
			"dropTablespace", "dropTrigger", "dropView", "dropRole", "setRole", "renameTable", 
			"renameTableClause", "truncateTable", "callStatement", "deleteStatement", 
			"doStatement", "handlerStatement", "insertStatement", "loadDataStatement", 
			"loadXmlStatement", "replaceStatement", "selectStatement", "updateStatement", 
			"insertStatementValue", "updatedElement", "assignmentField", "lockClause", 
			"singleDeleteStatement", "multipleDeleteStatement", "handlerOpenStatement", 
			"handlerReadIndexStatement", "handlerReadStatement", "handlerCloseStatement", 
			"singleUpdateStatement", "multipleUpdateStatement", "orderByClause", 
			"orderByExpression", "tableSources", "tableSource", "tableSourceItem", 
			"indexHint", "indexHintType", "joinPart", "queryExpression", "queryExpressionNointo", 
			"querySpecification", "querySpecificationNointo", "unionParenthesis", 
			"unionStatement", "selectSpec", "selectElements", "selectElement", "selectIntoExpression", 
			"selectFieldsInto", "selectLinesInto", "fromClause", "groupByClause", 
			"havingClause", "windowClause", "groupByItem", "limitClause", "limitClauseAtom", 
			"startTransaction", "beginWork", "commitWork", "rollbackWork", "savepointStatement", 
			"rollbackStatement", "releaseStatement", "lockTables", "unlockTables", 
			"setAutocommitStatement", "setTransactionStatement", "transactionMode", 
			"lockTableElement", "lockAction", "transactionOption", "transactionLevel", 
			"changeMaster", "changeReplicationFilter", "purgeBinaryLogs", "resetMaster", 
			"resetSlave", "startSlave", "stopSlave", "startGroupReplication", "stopGroupReplication", 
			"masterOption", "stringMasterOption", "decimalMasterOption", "boolMasterOption", 
			"channelOption", "replicationFilter", "tablePair", "threadType", "untilOption", 
			"connectionOption", "gtuidSet", "xaStartTransaction", "xaEndTransaction", 
			"xaPrepareStatement", "xaCommitWork", "xaRollbackWork", "xaRecoverWork", 
			"prepareStatement", "executeStatement", "deallocatePrepare", "routineBody", 
			"blockStatement", "caseStatement", "ifStatement", "iterateStatement", 
			"leaveStatement", "loopStatement", "repeatStatement", "returnStatement", 
			"whileStatement", "cursorStatement", "declareVariable", "declareCondition", 
			"declareCursor", "declareHandler", "handlerConditionValue", "procedureSqlStatement", 
			"caseAlternative", "elifAlternative", "alterUser", "createUser", "dropUser", 
			"grantStatement", "roleOption", "grantProxy", "renameUser", "revokeStatement", 
			"revokeProxy", "setPasswordStatement", "userSpecification", "userAuthOption", 
			"tlsOption", "userResourceOption", "userPasswordOption", "userLockOption", 
			"privelegeClause", "privilege", "privilegeLevel", "renameUserClause", 
			"analyzeTable", "checkTable", "checksumTable", "optimizeTable", "repairTable", 
			"checkTableOption", "createUdfunction", "installPlugin", "uninstallPlugin", 
			"setStatement", "showStatement", "variableClause", "showCommonEntity", 
			"showFilter", "showGlobalInfoClause", "showSchemaEntity", "showProfileType", 
			"binlogStatement", "cacheIndexStatement", "flushStatement", "killStatement", 
			"loadIndexIntoCache", "resetStatement", "shutdownStatement", "tableIndexes", 
			"flushOption", "flushTableOption", "loadedTableIndexes", "simpleDescribeStatement", 
			"fullDescribeStatement", "helpStatement", "useStatement", "signalStatement", 
			"resignalStatement", "signalConditionInformation", "diagnosticsStatement", 
			"diagnosticsConditionInformationName", "describeObjectClause", "fullId", 
			"tableName", "roleName", "fullColumnName", "indexColumnName", "userName", 
			"mysqlVariable", "charsetName", "collationName", "engineName", "uuidSet", 
			"xid", "xuidStringId", "authPlugin", "uid", "simpleId", "dottedId", "decimalLiteral", 
			"fileSizeLiteral", "stringLiteral", "booleanLiteral", "hexadecimalLiteral", 
			"nullNotnull", "constant", "dataType", "collectionOptions", "convertedDataType", 
			"lengthOneDimension", "lengthTwoDimension", "lengthTwoOptionalDimension", 
			"uidList", "tables", "indexColumnNames", "expressions", "expressionsWithDefaults", 
			"constants", "simpleStrings", "userVariables", "defaultValue", "currentTimestamp", 
			"expressionOrDefault", "ifExists", "ifNotExists", "functionCall", "specificFunction", 
			"caseFuncAlternative", "levelsInWeightString", "levelInWeightListElement", 
			"aggregateWindowedFunction", "nonAggregateWindowedFunction", "overClause", 
			"windowSpec", "windowName", "frameClause", "frameUnits", "frameExtent", 
			"frameBetween", "frameRange", "partitionClause", "scalarFunctionName", 
			"passwordFunctionClause", "functionArgs", "functionArg", "expression", 
			"predicate", "expressionAtom", "cqlWhereFunction", "unaryOperator", "comparisonOperator", 
			"logicalOperator", "bitOperator", "mathOperator", "jsonOperator", "charsetNameBase", 
			"transactionLevelBase", "privilegesBase", "intervalTypeBase", "dataTypeBase", 
			"keywordsCanBeId", "functionNameBase"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", 
			"'ANALYZE'", "'AND'", "'ARRAY'", "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", 
			"'BOTH'", "'BUCKETS'", "'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", 
			"'CHANGE'", "'CHARACTER'", "'CHECK'", "'COLLATE'", "'COLUMN'", "'CONDITION'", 
			"'CONSTRAINT'", "'CONTINUE'", "'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT'", 
			"'CURRENT_USER'", "'CURSOR'", "'DATABASE'", "'DATABASES'", "'DECLARE'", 
			"'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", 
			"'DIAGNOSTICS'", "'DISTINCT'", "'DISTINCTROW'", "'DROP'", "'EACH'", "'ELSE'", 
			"'ELSEIF'", "'EMPTY'", "'ENCLOSED'", "'ESCAPED'", "'EXCEPT'", "'EXISTS'", 
			"'C_EXISTS'", "'C_SCRIPT'", "'C_KEYVALUE'", "'EXIT'", "'EXPLAIN'", "'FALSE'", 
			"'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", "'FROM'", "'FULLTEXT'", "'GENERATED'", 
			"'GET'", "'GRANT'", "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", "'HISTOGRAM'", 
			"'IF'", "'IGNORE'", "'IGNORED'", "'IN'", "'INDEX'", "'INFILE'", "'INNER'", 
			"'INOUT'", "'INSERT'", "'INTERVAL'", "'INTO'", "'IS'", "'ITERATE'", "'JOIN'", 
			"'KEY'", "'KEYS'", "'KILL'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", 
			"'LIMIT'", "'LINEAR'", "'LINES'", "'LOAD'", "'LOCK'", "'LOOP'", "'LOW_PRIORITY'", 
			"'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", 
			"'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", 
			"'NUMBER'", "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONAL'", "'OPTIONALLY'", 
			"'OR'", "'ORDER'", "'OUT'", "'OVER'", "'OUTER'", "'OUTFILE'", "'PARTITION'", 
			"'PRIMARY'", "'PROCEDURE'", "'PURGE'", "'RANGE'", "'READ'", "'READS'", 
			"'REFERENCES'", "'REGEXP'", "'RELEASE'", "'RENAME'", "'REPEAT'", "'REPLACE'", 
			"'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", "'RETAIN'", "'RETURN'", "'REVOKE'", 
			"'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", "'SET'", "'SEPARATOR'", 
			"'SHOW'", "'SIGNAL'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", 
			"'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", 
			"'SSL'", "'STACKED'", "'STARTING'", "'STRAIGHT_JOIN'", "'TABLE'", "'TERMINATED'", 
			"'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", "'UNDO'", "'UNION'", 
			"'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", "'USAGE'", "'USE'", 
			"'USING'", "'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", "'WITH'", "'WRITE'", 
			"'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", "'MEDIUMINT'", "'MIDDLEINT'", 
			"'INT'", "'INT1'", "'INT2'", "'INT3'", "'INT4'", "'INT8'", "'INTEGER'", 
			"'BIGINT'", "'REAL'", "'DOUBLE'", "'PRECISION'", "'FLOAT'", "'FLOAT4'", 
			"'FLOAT8'", "'DECIMAL'", "'DEC'", "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'", 
			"'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", "'NVARCHAR'", "'NATIONAL'", 
			"'BINARY'", "'VARBINARY'", "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONG'", 
			"'LONGBLOB'", "'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", 
			"'VARYING'", "'SERIAL'", "'YEAR_MONTH'", "'DAY_HOUR'", "'DAY_MINUTE'", 
			"'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", 
			"'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
			"'DAY_MICROSECOND'", "'JSON_ARRAY'", "'JSON_OBJECT'", "'JSON_QUOTE'", 
			"'JSON_CONTAINS'", "'JSON_CONTAINS_PATH'", "'JSON_EXTRACT'", "'JSON_KEYS'", 
			"'JSON_OVERLAPS'", "'JSON_SEARCH'", "'JSON_VALUE'", "'JSON_ARRAY_APPEND'", 
			"'JSON_ARRAY_INSERT'", "'JSON_INSERT'", "'JSON_MERGE'", "'JSON_MERGE_PATCH'", 
			"'JSON_MERGE_PRESERVE'", "'JSON_REMOVE'", "'JSON_REPLACE'", "'JSON_SET'", 
			"'JSON_UNQUOTE'", "'JSON_DEPTH'", "'JSON_LENGTH'", "'JSON_TYPE'", "'JSON_VALID'", 
			"'JSON_TABLE'", "'JSON_SCHEMA_VALID'", "'JSON_SCHEMA_VALIDATION_REPORT'", 
			"'JSON_PRETTY'", "'JSON_STORAGE_FREE'", "'JSON_STORAGE_SIZE'", "'JSON_ARRAYAGG'", 
			"'JSON_OBJECTAGG'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", 
			"'CUME_DIST'", "'DENSE_RANK'", "'FIRST_VALUE'", "'GROUP_CONCAT'", "'LAG'", 
			"'LAST_VALUE'", "'LEAD'", "'MAX'", "'MIN'", "'NTILE'", "'NTH_VALUE'", 
			"'PERCENT_RANK'", "'RANK'", "'ROW_NUMBER'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
			"'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", 
			"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", 
			"'CURTIME'", "'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", 
			"'NOW'", "'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", 
			"'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", 
			"'AFTER'", "'AGGREGATE'", "'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", 
			"'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", 
			"'BEGIN'", "'BINLOG'", "'BIT'", "'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", 
			"'CACHE'", "'CASCADED'", "'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", 
			"'PAGE_CHECKSUM'", "'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", 
			"'CLUSTERING'", "'COALESCE'", "'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", 
			"'COLUMN_NAME'", "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPLETION'", 
			"'COMPRESSED'", "'COMPRESSION'", "'CONCURRENT'", "'CONNECT'", "'CONNECTION'", 
			"'CONSISTENT'", "'CONSTRAINT_CATALOG'", "'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", 
			"'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", "'CPU'", "'CURSOR_NAME'", 
			"'DATA'", "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", "'DEFINER'", 
			"'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", "'DISCARD'", 
			"'DISK'", "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", 
			"'ENCRYPTION'", "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", "'ERROR'", 
			"'ERRORS'", "'ESCAPE'", "'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", 
			"'EXCLUSIVE'", "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", 
			"'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", 
			"'FIXED'", "'FLUSH'", "'FOLLOWING'", "'FOLLOWS'", "'FOUND'", "'FULL'", 
			"'FUNCTION'", "'GENERAL'", "'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'", 
			"'HANDLER'", "'HASH'", "'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", 
			"'IGNORE_SERVER_IDS'", "'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", 
			"'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", "'INSTANT'", "'INVISIBLE'", 
			"'INVOKER'", "'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", "'ISSUER'", 
			"'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", "'LAST'", "'LEAVES'", "'LESS'", 
			"'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", 
			"'MASTER_CONNECT_RETRY'", "'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", 
			"'MASTER_HOST'", "'MASTER_LOG_FILE'", "'MASTER_LOG_POS'", "'MASTER_PASSWORD'", 
			"'MASTER_PORT'", "'MASTER_RETRY_COUNT'", "'MASTER_SSL'", "'MASTER_SSL_CA'", 
			"'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", "'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", 
			"'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", "'MASTER_USER'", 
			"'MAX_CONNECTIONS_PER_HOUR'", "'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", 
			"'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", "'MAX_USER_CONNECTIONS'", "'MEDIUM'", 
			"'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'", "'MID'", "'MIGRATE'", "'MIN_ROWS'", 
			"'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", "'MYSQL_ERRNO'", "'NAME'", 
			"'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", "'NO'", "'NOCOPY'", "'NOWAIT'", 
			"'NODEGROUP'", "'NONE'", "'ODBC'", "'OFFLINE'", "'OFFSET'", "'OF'", "'OJ'", 
			"'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", 
			"'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", "'PARSER'", "'PARTIAL'", 
			"'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", "'PHASE'", "'PLUGIN'", 
			"'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", "'PRECEDING'", "'PREPARE'", 
			"'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", "'PROFILES'", "'PROXY'", 
			"'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", "'RECURSIVE'", "'REDO_BUFFER_SIZE'", 
			"'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'", 
			"'REMOVE'", "'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", 
			"'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", 
			"'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", 
			"'RESET'", "'RESUME'", "'RETURNED_SQLSTATE'", "'RETURNING'", "'RETURNS'", 
			"'ROLE'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", "'ROW'", "'ROWS'", "'ROW_FORMAT'", 
			"'RTREE'", "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", "'SERVER'", "'SESSION'", 
			"'SHARE'", "'SHARED'", "'SIGNED'", "'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", 
			"'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", 
			"'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", 
			"'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'", "'START'", "'STARTS'", 
			"'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", 
			"'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", "'STRING'", "'SUBCLASS_ORIGIN'", 
			"'SUBJECT'", "'SUBPARTITION'", "'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", 
			"'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", "'TABLE_TYPE'", "'TEMPORARY'", 
			"'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", "'TRANSACTION'", "'TRANSACTIONAL'", 
			"'TRIGGERS'", "'TRUNCATE'", "'UNBOUNDED'", "'UNDEFINED'", "'UNDOFILE'", 
			"'UNDO_BUFFER_SIZE'", "'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", 
			"'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'", "'VALUE'", 
			"'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", "'WAIT'", "'WARNINGS'", 
			"'WINDOW'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", "'XA'", "'XML'", 
			"'YES'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", 
			"'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'", 
			"'TABLES'", "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", "'RELOAD'", 
			"'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", "'APPLICATION_PASSWORD_ADMIN'", 
			"'AUDIT_ADMIN'", "'BACKUP_ADMIN'", "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", 
			"'CLONE_ADMIN'", "'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", "'FIREWALL_ADMIN'", 
			"'FIREWALL_USER'", "'FLUSH_OPTIMIZER_COSTS'", "'FLUSH_STATUS'", "'FLUSH_TABLES'", 
			"'FLUSH_USER_RESOURCES'", "'ADMIN'", "'GROUP_REPLICATION_ADMIN'", "'INNODB_REDO_LOG_ARCHIVE'", 
			"'INNODB_REDO_LOG_ENABLE'", "'NDB_STORED_USER'", "'PERSIST_RO_VARIABLES_ADMIN'", 
			"'REPLICATION_APPLIER'", "'REPLICATION_SLAVE_ADMIN'", "'RESOURCE_GROUP_ADMIN'", 
			"'RESOURCE_GROUP_USER'", "'ROLE_ADMIN'", "'SERVICE_CONNECTION_ADMIN'", 
			null, "'SET_USER_ID'", "'SHOW_ROUTINE'", "'SYSTEM_VARIABLES_ADMIN'", 
			"'TABLE_ENCRYPTION_ADMIN'", "'VERSION_TOKEN_ADMIN'", "'XA_RECOVER_ADMIN'", 
			"'ARMSCII8'", "'ASCII'", "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", 
			"'CP1257'", "'CP850'", "'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", 
			"'EUCKR'", "'GB18030'", "'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", 
			"'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", 
			"'LATIN5'", "'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", 
			"'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'", "'UTF8'", 
			"'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", "'CSV'", "'FEDERATED'", 
			"'INNODB'", "'MEMORY'", "'MRG_MYISAM'", "'MYISAM'", "'NDB'", "'NDBCLUSTER'", 
			"'PERFORMANCE_SCHEMA'", "'TOKUDB'", "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", 
			"'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", "'GEOMETRY'", 
			"'LINESTRING'", "'MULTILINESTRING'", "'MULTIPOINT'", "'MULTIPOLYGON'", 
			"'POINT'", "'POLYGON'", "'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", 
			"'AES_DECRYPT'", "'AES_ENCRYPT'", "'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", 
			"'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", "'ASYMMETRIC_DERIVE'", 
			"'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", "'ATAN'", 
			"'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", "'BUFFER'", 
			"'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
			"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
			"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
			"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
			"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
			"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
			"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
			"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENGINE_ATTRIBUTE'", 
			"'ENVELOPE'", "'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", 
			"'EXTRACTVALUE'", "'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", 
			"'FOUND_ROWS'", "'FROM_BASE64'", "'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", 
			"'GEOMCOLLFROMWKB'", "'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", 
			"'GEOMETRYFROMTEXT'", "'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", 
			"'GEOMFROMTEXT'", "'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", 
			"'GREATEST'", "'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", 
			"'INET6_ATON'", "'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", 
			"'INTERIORRINGN'", "'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", 
			"'ISSIMPLE'", "'IS_FREE_LOCK'", "'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", 
			"'IS_IPV6'", "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", 
			"'LENGTH'", "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", 
			"'LINESTRINGFROMWKB'", "'LN'", "'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", 
			"'LOG2'", "'LOWER'", "'LPAD'", "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", 
			"'MAKE_SET'", "'MASTER_POS_WAIT'", "'MBRCONTAINS'", "'MBRDISJOINT'", 
			"'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", "'MBRTOUCHES'", "'MBRWITHIN'", 
			"'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", "'MONTHNAME'", "'MPOINTFROMTEXT'", 
			"'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", 
			"'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", 
			"'MULTIPOLYGONFROMTEXT'", "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", 
			"'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", 
			"'ORD'", "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
			"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
			"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
			"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
			"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SECONDARY_ENGINE_ATTRIBUTE'", 
			"'SESSION_USER'", "'SHA'", "'SHA1'", "'SHA2'", "'SCHEMA_NAME'", "'SIGN'", 
			"'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", 
			"'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", 
			"'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", 
			"'ST_CONTAINS'", "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", 
			"'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", 
			"'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", 
			"'ST_GEOMCOLLFROMWKB'", "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
			"'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
			"'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
			"'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", 
			"'ST_LINEFROMTEXT'", "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
			"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
			"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
			"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
			"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
			"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
			"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
			"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
			"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
			"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
			"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", 
			"'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", 
			"'WEIGHT_STRING'", "'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "'VIA'", "'LASTVAL'", 
			"'NEXTVAL'", "'SETVAL'", "'PREVIOUS'", "'PERSISTENT'", "'BINLOG_MONITOR'", 
			"'BINLOG_REPLAY'", "'FEDERATED_ADMIN'", "'READ_ONLY_ADMIN'", "'REPLICA'", 
			"'REPLICATION_MASTER_ADMIN'", "':='", "'+='", "'-='", "'*='", "'/='", 
			"'%='", "'&='", "'^='", "'|='", "'*'", "'/'", "'%'", "'+'", "'-'", "'DIV'", 
			"'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", 
			"'('", "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", "'''", "'\"'", 
			"'`'", "':'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
			"ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "ARRAY", "AS", "ASC", 
			"BEFORE", "BETWEEN", "BOTH", "BUCKETS", "BY", "CALL", "CASCADE", "CASE", 
			"CAST", "CHANGE", "CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", 
			"CONSTRAINT", "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_USER", 
			"CURSOR", "DATABASE", "DATABASES", "DECLARE", "DEFAULT", "DELAYED", "DELETE", 
			"DESC", "DESCRIBE", "DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", "DISTINCTROW", 
			"DROP", "EACH", "ELSE", "ELSEIF", "EMPTY", "ENCLOSED", "ESCAPED", "EXCEPT", 
			"EXISTS", "C_EXISTS", "C_SCRIPT", "C_KEYVALUE", "EXIT", "EXPLAIN", "FALSE", 
			"FETCH", "FOR", "FORCE", "FOREIGN", "FROM", "FULLTEXT", "GENERATED", 
			"GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", "HISTOGRAM", "IF", 
			"IGNORE", "IGNORED", "IN", "INDEX", "INFILE", "INNER", "INOUT", "INSERT", 
			"INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", "LEADING", 
			"LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", "LOCK", 
			"LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
			"MATCH", "MAXVALUE", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", 
			"NULL_LITERAL", "NUMBER", "ON", "OPTIMIZE", "OPTION", "OPTIONAL", "OPTIONALLY", 
			"OR", "ORDER", "OUT", "OVER", "OUTER", "OUTFILE", "PARTITION", "PRIMARY", 
			"PROCEDURE", "PURGE", "RANGE", "READ", "READS", "REFERENCES", "REGEXP", 
			"RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", 
			"RETAIN", "RETURN", "REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", 
			"SELECT", "SET", "SEPARATOR", "SHOW", "SIGNAL", "SPATIAL", "SQL", "SQLEXCEPTION", 
			"SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", 
			"SSL", "STACKED", "STARTING", "STRAIGHT_JOIN", "TABLE", "TERMINATED", 
			"THEN", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", 
			"UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "VALUES", "WHEN", 
			"WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", "SMALLINT", 
			"MEDIUMINT", "MIDDLEINT", "INT", "INT1", "INT2", "INT3", "INT4", "INT8", 
			"INTEGER", "BIGINT", "REAL", "DOUBLE", "PRECISION", "FLOAT", "FLOAT4", 
			"FLOAT8", "DECIMAL", "DEC", "NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", 
			"YEAR", "CHAR", "VARCHAR", "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", 
			"TINYBLOB", "BLOB", "MEDIUMBLOB", "LONG", "LONGBLOB", "TINYTEXT", "TEXT", 
			"MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", "SERIAL", "YEAR_MONTH", 
			"DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", 
			"MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", 
			"DAY_MICROSECOND", "JSON_ARRAY", "JSON_OBJECT", "JSON_QUOTE", "JSON_CONTAINS", 
			"JSON_CONTAINS_PATH", "JSON_EXTRACT", "JSON_KEYS", "JSON_OVERLAPS", "JSON_SEARCH", 
			"JSON_VALUE", "JSON_ARRAY_APPEND", "JSON_ARRAY_INSERT", "JSON_INSERT", 
			"JSON_MERGE", "JSON_MERGE_PATCH", "JSON_MERGE_PRESERVE", "JSON_REMOVE", 
			"JSON_REPLACE", "JSON_SET", "JSON_UNQUOTE", "JSON_DEPTH", "JSON_LENGTH", 
			"JSON_TYPE", "JSON_VALID", "JSON_TABLE", "JSON_SCHEMA_VALID", "JSON_SCHEMA_VALIDATION_REPORT", 
			"JSON_PRETTY", "JSON_STORAGE_FREE", "JSON_STORAGE_SIZE", "JSON_ARRAYAGG", 
			"JSON_OBJECTAGG", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", "CUME_DIST", 
			"DENSE_RANK", "FIRST_VALUE", "GROUP_CONCAT", "LAG", "LAST_VALUE", "LEAD", 
			"MAX", "MIN", "NTILE", "NTH_VALUE", "PERCENT_RANK", "RANK", "ROW_NUMBER", 
			"STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", 
			"VARIANCE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", 
			"CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", 
			"NOW", "POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", 
			"UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", 
			"ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", 
			"AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", "BINLOG", "BIT", "BLOCK", 
			"BOOL", "BOOLEAN", "BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", 
			"CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", "CIPHER", "CLASS_ORIGIN", "CLIENT", 
			"CLOSE", "CLUSTERING", "COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", 
			"COLUMN_NAME", "COMMENT", "COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", 
			"COMPRESSION", "CONCURRENT", "CONNECT", "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", 
			"CONSTRAINT_SCHEMA", "CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", 
			"COPY", "CPU", "CURSOR_NAME", "DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", 
			"DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", "DISABLE", 
			"DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", "ENABLE", 
			"ENCRYPTION", "END", "ENDS", "ENGINE", "ENGINES", "ERROR", "ERRORS", 
			"ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", 
			"EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", "FAST", "FAULTS", "FIELDS", 
			"FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWING", 
			"FOLLOWS", "FOUND", "FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", 
			"GROUP_REPLICATION", "HANDLER", "HASH", "HELP", "HOST", "HOSTS", "IDENTIFIED", 
			"IGNORE_SERVER_IDS", "IMPORT", "INDEXES", "INITIAL_SIZE", "INPLACE", 
			"INSERT_METHOD", "INSTALL", "INSTANCE", "INSTANT", "INVISIBLE", "INVOKER", 
			"IO", "IO_THREAD", "IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", 
			"LANGUAGE", "LAST", "LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", 
			"LOGS", "MASTER", "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", 
			"MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", 
			"MASTER_PASSWORD", "MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", 
			"MASTER_SSL_CA", "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", 
			"MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", "MASTER_TLS_VERSION", 
			"MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS", 
			"MAX_SIZE", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", "MEDIUM", 
			"MEMBER", "MERGE", "MESSAGE_TEXT", "MID", "MIGRATE", "MIN_ROWS", "MODE", 
			"MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", "NAME", "NAMES", "NCHAR", 
			"NEVER", "NEXT", "NO", "NOCOPY", "NOWAIT", "NODEGROUP", "NONE", "ODBC", 
			"OFFLINE", "OFFSET", "OF", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", "ONLY", 
			"OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", "PACK_KEYS", "PAGE", "PARSER", 
			"PARTIAL", "PARTITIONING", "PARTITIONS", "PASSWORD", "PHASE", "PLUGIN", 
			"PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", "PRECEDING", "PREPARE", 
			"PRESERVE", "PREV", "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", "QUERY", 
			"QUICK", "REBUILD", "RECOVER", "RECURSIVE", "REDO_BUFFER_SIZE", "REDUNDANT", 
			"RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE", 
			"REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", 
			"REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", 
			"REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", "RESUME", "RETURNED_SQLSTATE", 
			"RETURNING", "RETURNS", "ROLE", "ROLLBACK", "ROLLUP", "ROTATE", "ROW", 
			"ROWS", "ROW_FORMAT", "RTREE", "SAVEPOINT", "SCHEDULE", "SECURITY", "SERVER", 
			"SESSION", "SHARE", "SHARED", "SIGNED", "SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", 
			"SOCKET", "SOME", "SONAME", "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", 
			"SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", 
			"SQL_THREAD", "START", "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", 
			"STATS_SAMPLE_PAGES", "STATUS", "STOP", "STORAGE", "STORED", "STRING", 
			"SUBCLASS_ORIGIN", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", "SUSPEND", 
			"SWAPS", "SWITCHES", "TABLE_NAME", "TABLESPACE", "TABLE_TYPE", "TEMPORARY", 
			"TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", "TRANSACTIONAL", "TRIGGERS", 
			"TRUNCATE", "UNBOUNDED", "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", 
			"UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", 
			"VALIDATION", "VALUE", "VARIABLES", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", 
			"WARNINGS", "WINDOW", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", "XML", 
			"YES", "EUR", "USA", "JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", 
			"HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", "TABLES", "ROUTINE", 
			"EXECUTE", "FILE", "PROCESS", "RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", 
			"APPLICATION_PASSWORD_ADMIN", "AUDIT_ADMIN", "BACKUP_ADMIN", "BINLOG_ADMIN", 
			"BINLOG_ENCRYPTION_ADMIN", "CLONE_ADMIN", "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", 
			"FIREWALL_ADMIN", "FIREWALL_USER", "FLUSH_OPTIMIZER_COSTS", "FLUSH_STATUS", 
			"FLUSH_TABLES", "FLUSH_USER_RESOURCES", "ADMIN", "GROUP_REPLICATION_ADMIN", 
			"INNODB_REDO_LOG_ARCHIVE", "INNODB_REDO_LOG_ENABLE", "NDB_STORED_USER", 
			"PERSIST_RO_VARIABLES_ADMIN", "REPLICATION_APPLIER", "REPLICATION_SLAVE_ADMIN", 
			"RESOURCE_GROUP_ADMIN", "RESOURCE_GROUP_USER", "ROLE_ADMIN", "SERVICE_CONNECTION_ADMIN", 
			"SESSION_VARIABLES_ADMIN", "SET_USER_ID", "SHOW_ROUTINE", "SYSTEM_VARIABLES_ADMIN", 
			"TABLE_ENCRYPTION_ADMIN", "VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", 
			"ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", 
			"CP850", "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB18030", 
			"GB2312", "GBK", "GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", 
			"KOI8U", "LATIN1", "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", 
			"SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", 
			"UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", 
			"INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", 
			"TOKUDB", "REPEATABLE", "COMMITTED", "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", 
			"GEOMCOLLECTION", "GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", 
			"MULTIPOLYGON", "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", 
			"AES_DECRYPT", "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", 
			"ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", 
			"ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", 
			"BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", 
			"CENTROID", "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", 
			"COLLATION", "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", 
			"CONVERT_TZ", "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
			"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
			"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
			"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
			"ENCRYPT", "ENDPOINT", "ENGINE_ATTRIBUTE", "ENVELOPE", "EQUALS", "EXP", 
			"EXPORT_SET", "EXTERIORRING", "EXTRACTVALUE", "FIELD", "FIND_IN_SET", 
			"FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", 
			"GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", "GEOMETRYCOLLECTIONFROMTEXT", 
			"GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN", 
			"GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", "GET_FORMAT", "GET_LOCK", 
			"GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", "HEX", "IFNULL", 
			"INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", "INSTR", "INTERIORRINGN", 
			"INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", "ISSIMPLE", "IS_FREE_LOCK", 
			"IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", "IS_IPV6", "IS_USED_LOCK", 
			"LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", "LINEFROMTEXT", "LINEFROMWKB", 
			"LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", "LN", "LOAD_FILE", "LOCATE", 
			"LOG", "LOG10", "LOG2", "LOWER", "LPAD", "LTRIM", "MAKEDATE", "MAKETIME", 
			"MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", "MBRDISJOINT", "MBREQUAL", 
			"MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", "MBRWITHIN", "MD5", "MLINEFROMTEXT", 
			"MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", "MPOINTFROMWKB", "MPOLYFROMTEXT", 
			"MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", "MULTILINESTRINGFROMWKB", 
			"MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", 
			"NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", 
			"OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", 
			"PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", 
			"POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
			"RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", 
			"RPAD", "RTRIM", "SEC_TO_TIME", "SECONDARY_ENGINE_ATTRIBUTE", "SESSION_USER", 
			"SHA", "SHA1", "SHA2", "SCHEMA_NAME", "SIGN", "SIN", "SLEEP", "SOUNDEX", 
			"SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", "SRID", "STARTPOINT", "STRCMP", 
			"STR_TO_DATE", "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", 
			"ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", "ST_DIFFERENCE", 
			"ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", "ST_ENVELOPE", 
			"ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT", 
			"ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", "ST_GEOMETRYCOLLECTIONFROMWKB", 
			"ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", "ST_GEOMETRYTYPE", 
			"ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", "ST_INTERIORRINGN", "ST_INTERSECTION", 
			"ST_INTERSECTS", "ST_ISCLOSED", "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", 
			"ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", 
			"ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", "ST_NUMPOINTS", "ST_OVERLAPS", 
			"ST_POINTFROMTEXT", "ST_POINTFROMWKB", "ST_POINTN", "ST_POLYFROMTEXT", 
			"ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", "ST_SRID", 
			"ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", "ST_UNION", "ST_WITHIN", 
			"ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER", 
			"TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", "TIME_TO_SEC", 
			"TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", "UCASE", "UNCOMPRESS", 
			"UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER", 
			"UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", "VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", 
			"WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", 
			"X_FUNCTION", "VIA", "LASTVAL", "NEXTVAL", "SETVAL", "PREVIOUS", "PERSISTENT", 
			"BINLOG_MONITOR", "BINLOG_REPLAY", "FEDERATED_ADMIN", "READ_ONLY_ADMIN", 
			"REPLICA", "REPLICATION_MASTER_ADMIN", "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", 
			"MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", 
			"OR_ASSIGN", "STAR", "DIVIDE", "MODULE", "PLUS", "MINUS", "DIV", "MOD", 
			"EQUAL_SYMBOL", "GREATER_SYMBOL", "LESS_SYMBOL", "EXCLAMATION_SYMBOL", 
			"BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", "DOT", "LR_BRACKET", 
			"RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", "ONE_DECIMAL", 
			"TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", 
			"COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", "START_NATIONAL_STRING_LITERAL", 
			"STRING_LITERAL", "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "REAL_LITERAL", 
			"NULL_SPEC_LITERAL", "BIT_STRING", "STRING_CHARSET_NAME", "DOT_ID", "ID", 
			"REVERSE_QUOTE_ID", "STRING_USER_NAME", "IP_ADDRESS", "STRING_USER_NAME_MARIADB", 
			"LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION", "ENCRYPTED", "ENCRYPTION_KEY_ID"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "CqlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public CqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class RootContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(CqlParser.EOF, 0); }
		public SqlStatementsContext sqlStatements() {
			return getRuleContext(SqlStatementsContext.class,0);
		}
		public List<TerminalNode> MINUS() { return getTokens(CqlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(CqlParser.MINUS, i);
		}
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitRoot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(683);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << ANALYZE) | (1L << CALL) | (1L << CHANGE) | (1L << CHECK) | (1L << CREATE) | (1L << DELETE) | (1L << DESC) | (1L << DESCRIBE) | (1L << DROP) | (1L << EXPLAIN))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (GET - 71)) | (1L << (GRANT - 71)) | (1L << (INSERT - 71)) | (1L << (KILL - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)))) != 0) || ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (RELEASE - 135)) | (1L << (RENAME - 135)) | (1L << (REPLACE - 135)) | (1L << (RESIGNAL - 135)) | (1L << (REVOKE - 135)) | (1L << (SELECT - 135)) | (1L << (SET - 135)) | (1L << (SHOW - 135)) | (1L << (SIGNAL - 135)) | (1L << (UNLOCK - 135)) | (1L << (UPDATE - 135)) | (1L << (USE - 135)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BEGIN - 335)) | (1L << (BINLOG - 335)) | (1L << (CACHE - 335)) | (1L << (CHECKSUM - 335)) | (1L << (COMMIT - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DO - 335)))) != 0) || ((((_la - 419)) & ~0x3f) == 0 && ((1L << (_la - 419)) & ((1L << (FLUSH - 419)) | (1L << (HANDLER - 419)) | (1L << (HELP - 419)) | (1L << (INSTALL - 419)))) != 0) || ((((_la - 538)) & ~0x3f) == 0 && ((1L << (_la - 538)) & ((1L << (PREPARE - 538)) | (1L << (REPAIR - 538)) | (1L << (RESET - 538)) | (1L << (ROLLBACK - 538)) | (1L << (SAVEPOINT - 538)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (START - 604)) | (1L << (STOP - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (XA - 604)))) != 0) || _la==EXECUTE || _la==SHUTDOWN || _la==LR_BRACKET || _la==SEMI) {
				{
				setState(682);
				sqlStatements();
				}
			}

			setState(687);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUS) {
				{
				setState(685);
				match(MINUS);
				setState(686);
				match(MINUS);
				}
			}

			setState(689);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementsContext extends ParserRuleContext {
		public List<SqlStatementContext> sqlStatement() {
			return getRuleContexts(SqlStatementContext.class);
		}
		public SqlStatementContext sqlStatement(int i) {
			return getRuleContext(SqlStatementContext.class,i);
		}
		public List<EmptyStatement_Context> emptyStatement_() {
			return getRuleContexts(EmptyStatement_Context.class);
		}
		public EmptyStatement_Context emptyStatement_(int i) {
			return getRuleContext(EmptyStatement_Context.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(CqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(CqlParser.SEMI, i);
		}
		public List<TerminalNode> MINUS() { return getTokens(CqlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(CqlParser.MINUS, i);
		}
		public SqlStatementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatements; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSqlStatements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementsContext sqlStatements() throws RecognitionException {
		SqlStatementsContext _localctx = new SqlStatementsContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_sqlStatements);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(702);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(700);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALTER:
					case ANALYZE:
					case CALL:
					case CHANGE:
					case CHECK:
					case CREATE:
					case DELETE:
					case DESC:
					case DESCRIBE:
					case DROP:
					case EXPLAIN:
					case GET:
					case GRANT:
					case INSERT:
					case KILL:
					case LOAD:
					case LOCK:
					case OPTIMIZE:
					case PURGE:
					case RELEASE:
					case RENAME:
					case REPLACE:
					case RESIGNAL:
					case REVOKE:
					case SELECT:
					case SET:
					case SHOW:
					case SIGNAL:
					case UNLOCK:
					case UPDATE:
					case USE:
					case BEGIN:
					case BINLOG:
					case CACHE:
					case CHECKSUM:
					case COMMIT:
					case DEALLOCATE:
					case DO:
					case FLUSH:
					case HANDLER:
					case HELP:
					case INSTALL:
					case PREPARE:
					case REPAIR:
					case RESET:
					case ROLLBACK:
					case SAVEPOINT:
					case START:
					case STOP:
					case TRUNCATE:
					case UNINSTALL:
					case XA:
					case EXECUTE:
					case SHUTDOWN:
					case LR_BRACKET:
						{
						setState(691);
						sqlStatement();
						setState(694);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==MINUS) {
							{
							setState(692);
							match(MINUS);
							setState(693);
							match(MINUS);
							}
						}

						setState(697);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
						case 1:
							{
							setState(696);
							match(SEMI);
							}
							break;
						}
						}
						break;
					case SEMI:
						{
						setState(699);
						emptyStatement_();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(704);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			}
			setState(714);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case LR_BRACKET:
				{
				setState(705);
				sqlStatement();
				setState(711);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
				case 1:
					{
					setState(708);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==MINUS) {
						{
						setState(706);
						match(MINUS);
						setState(707);
						match(MINUS);
						}
					}

					setState(710);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case SEMI:
				{
				setState(713);
				emptyStatement_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementContext extends ParserRuleContext {
		public DdlStatementContext ddlStatement() {
			return getRuleContext(DdlStatementContext.class,0);
		}
		public DmlStatementContext dmlStatement() {
			return getRuleContext(DmlStatementContext.class,0);
		}
		public TransactionStatementContext transactionStatement() {
			return getRuleContext(TransactionStatementContext.class,0);
		}
		public ReplicationStatementContext replicationStatement() {
			return getRuleContext(ReplicationStatementContext.class,0);
		}
		public PreparedStatementContext preparedStatement() {
			return getRuleContext(PreparedStatementContext.class,0);
		}
		public AdministrationStatementContext administrationStatement() {
			return getRuleContext(AdministrationStatementContext.class,0);
		}
		public UtilityStatementContext utilityStatement() {
			return getRuleContext(UtilityStatementContext.class,0);
		}
		public SqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementContext sqlStatement() throws RecognitionException {
		SqlStatementContext _localctx = new SqlStatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sqlStatement);
		try {
			setState(723);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(716);
				ddlStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(717);
				dmlStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(718);
				transactionStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(719);
				replicationStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(720);
				preparedStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(721);
				administrationStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(722);
				utilityStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EmptyStatement_Context extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(CqlParser.SEMI, 0); }
		public EmptyStatement_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_emptyStatement_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitEmptyStatement_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EmptyStatement_Context emptyStatement_() throws RecognitionException {
		EmptyStatement_Context _localctx = new EmptyStatement_Context(_ctx, getState());
		enterRule(_localctx, 6, RULE_emptyStatement_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(725);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DdlStatementContext extends ParserRuleContext {
		public CreateDatabaseContext createDatabase() {
			return getRuleContext(CreateDatabaseContext.class,0);
		}
		public CreateEventContext createEvent() {
			return getRuleContext(CreateEventContext.class,0);
		}
		public CreateIndexContext createIndex() {
			return getRuleContext(CreateIndexContext.class,0);
		}
		public CreateLogfileGroupContext createLogfileGroup() {
			return getRuleContext(CreateLogfileGroupContext.class,0);
		}
		public CreateProcedureContext createProcedure() {
			return getRuleContext(CreateProcedureContext.class,0);
		}
		public CreateFunctionContext createFunction() {
			return getRuleContext(CreateFunctionContext.class,0);
		}
		public CreateServerContext createServer() {
			return getRuleContext(CreateServerContext.class,0);
		}
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public CreateTablespaceInnodbContext createTablespaceInnodb() {
			return getRuleContext(CreateTablespaceInnodbContext.class,0);
		}
		public CreateTablespaceNdbContext createTablespaceNdb() {
			return getRuleContext(CreateTablespaceNdbContext.class,0);
		}
		public CreateTriggerContext createTrigger() {
			return getRuleContext(CreateTriggerContext.class,0);
		}
		public CreateViewContext createView() {
			return getRuleContext(CreateViewContext.class,0);
		}
		public CreateRoleContext createRole() {
			return getRuleContext(CreateRoleContext.class,0);
		}
		public AlterDatabaseContext alterDatabase() {
			return getRuleContext(AlterDatabaseContext.class,0);
		}
		public AlterEventContext alterEvent() {
			return getRuleContext(AlterEventContext.class,0);
		}
		public AlterFunctionContext alterFunction() {
			return getRuleContext(AlterFunctionContext.class,0);
		}
		public AlterInstanceContext alterInstance() {
			return getRuleContext(AlterInstanceContext.class,0);
		}
		public AlterLogfileGroupContext alterLogfileGroup() {
			return getRuleContext(AlterLogfileGroupContext.class,0);
		}
		public AlterProcedureContext alterProcedure() {
			return getRuleContext(AlterProcedureContext.class,0);
		}
		public AlterServerContext alterServer() {
			return getRuleContext(AlterServerContext.class,0);
		}
		public AlterTableContext alterTable() {
			return getRuleContext(AlterTableContext.class,0);
		}
		public AlterTablespaceContext alterTablespace() {
			return getRuleContext(AlterTablespaceContext.class,0);
		}
		public AlterViewContext alterView() {
			return getRuleContext(AlterViewContext.class,0);
		}
		public DropDatabaseContext dropDatabase() {
			return getRuleContext(DropDatabaseContext.class,0);
		}
		public DropEventContext dropEvent() {
			return getRuleContext(DropEventContext.class,0);
		}
		public DropIndexContext dropIndex() {
			return getRuleContext(DropIndexContext.class,0);
		}
		public DropLogfileGroupContext dropLogfileGroup() {
			return getRuleContext(DropLogfileGroupContext.class,0);
		}
		public DropProcedureContext dropProcedure() {
			return getRuleContext(DropProcedureContext.class,0);
		}
		public DropFunctionContext dropFunction() {
			return getRuleContext(DropFunctionContext.class,0);
		}
		public DropServerContext dropServer() {
			return getRuleContext(DropServerContext.class,0);
		}
		public DropTableContext dropTable() {
			return getRuleContext(DropTableContext.class,0);
		}
		public DropTablespaceContext dropTablespace() {
			return getRuleContext(DropTablespaceContext.class,0);
		}
		public DropTriggerContext dropTrigger() {
			return getRuleContext(DropTriggerContext.class,0);
		}
		public DropViewContext dropView() {
			return getRuleContext(DropViewContext.class,0);
		}
		public DropRoleContext dropRole() {
			return getRuleContext(DropRoleContext.class,0);
		}
		public SetRoleContext setRole() {
			return getRuleContext(SetRoleContext.class,0);
		}
		public RenameTableContext renameTable() {
			return getRuleContext(RenameTableContext.class,0);
		}
		public TruncateTableContext truncateTable() {
			return getRuleContext(TruncateTableContext.class,0);
		}
		public DdlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddlStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDdlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DdlStatementContext ddlStatement() throws RecognitionException {
		DdlStatementContext _localctx = new DdlStatementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_ddlStatement);
		try {
			setState(765);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(727);
				createDatabase();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(728);
				createEvent();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(729);
				createIndex();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(730);
				createLogfileGroup();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(731);
				createProcedure();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(732);
				createFunction();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(733);
				createServer();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(734);
				createTable();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(735);
				createTablespaceInnodb();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(736);
				createTablespaceNdb();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(737);
				createTrigger();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(738);
				createView();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(739);
				createRole();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(740);
				alterDatabase();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(741);
				alterEvent();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(742);
				alterFunction();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(743);
				alterInstance();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(744);
				alterLogfileGroup();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(745);
				alterProcedure();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(746);
				alterServer();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(747);
				alterTable();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(748);
				alterTablespace();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(749);
				alterView();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(750);
				dropDatabase();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(751);
				dropEvent();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(752);
				dropIndex();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(753);
				dropLogfileGroup();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(754);
				dropProcedure();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(755);
				dropFunction();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(756);
				dropServer();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(757);
				dropTable();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(758);
				dropTablespace();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(759);
				dropTrigger();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(760);
				dropView();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(761);
				dropRole();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(762);
				setRole();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(763);
				renameTable();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(764);
				truncateTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DmlStatementContext extends ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public CallStatementContext callStatement() {
			return getRuleContext(CallStatementContext.class,0);
		}
		public LoadDataStatementContext loadDataStatement() {
			return getRuleContext(LoadDataStatementContext.class,0);
		}
		public LoadXmlStatementContext loadXmlStatement() {
			return getRuleContext(LoadXmlStatementContext.class,0);
		}
		public DoStatementContext doStatement() {
			return getRuleContext(DoStatementContext.class,0);
		}
		public HandlerStatementContext handlerStatement() {
			return getRuleContext(HandlerStatementContext.class,0);
		}
		public DmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dmlStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DmlStatementContext dmlStatement() throws RecognitionException {
		DmlStatementContext _localctx = new DmlStatementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_dmlStatement);
		try {
			setState(777);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(767);
				selectStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(768);
				insertStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(769);
				updateStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(770);
				deleteStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(771);
				replaceStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(772);
				callStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(773);
				loadDataStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(774);
				loadXmlStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(775);
				doStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(776);
				handlerStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionStatementContext extends ParserRuleContext {
		public StartTransactionContext startTransaction() {
			return getRuleContext(StartTransactionContext.class,0);
		}
		public BeginWorkContext beginWork() {
			return getRuleContext(BeginWorkContext.class,0);
		}
		public CommitWorkContext commitWork() {
			return getRuleContext(CommitWorkContext.class,0);
		}
		public RollbackWorkContext rollbackWork() {
			return getRuleContext(RollbackWorkContext.class,0);
		}
		public SavepointStatementContext savepointStatement() {
			return getRuleContext(SavepointStatementContext.class,0);
		}
		public RollbackStatementContext rollbackStatement() {
			return getRuleContext(RollbackStatementContext.class,0);
		}
		public ReleaseStatementContext releaseStatement() {
			return getRuleContext(ReleaseStatementContext.class,0);
		}
		public LockTablesContext lockTables() {
			return getRuleContext(LockTablesContext.class,0);
		}
		public UnlockTablesContext unlockTables() {
			return getRuleContext(UnlockTablesContext.class,0);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionStatementContext transactionStatement() throws RecognitionException {
		TransactionStatementContext _localctx = new TransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_transactionStatement);
		try {
			setState(788);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(779);
				startTransaction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(780);
				beginWork();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(781);
				commitWork();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(782);
				rollbackWork();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(783);
				savepointStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(784);
				rollbackStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(785);
				releaseStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(786);
				lockTables();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(787);
				unlockTables();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationStatementContext extends ParserRuleContext {
		public ChangeMasterContext changeMaster() {
			return getRuleContext(ChangeMasterContext.class,0);
		}
		public ChangeReplicationFilterContext changeReplicationFilter() {
			return getRuleContext(ChangeReplicationFilterContext.class,0);
		}
		public PurgeBinaryLogsContext purgeBinaryLogs() {
			return getRuleContext(PurgeBinaryLogsContext.class,0);
		}
		public ResetMasterContext resetMaster() {
			return getRuleContext(ResetMasterContext.class,0);
		}
		public ResetSlaveContext resetSlave() {
			return getRuleContext(ResetSlaveContext.class,0);
		}
		public StartSlaveContext startSlave() {
			return getRuleContext(StartSlaveContext.class,0);
		}
		public StopSlaveContext stopSlave() {
			return getRuleContext(StopSlaveContext.class,0);
		}
		public StartGroupReplicationContext startGroupReplication() {
			return getRuleContext(StartGroupReplicationContext.class,0);
		}
		public StopGroupReplicationContext stopGroupReplication() {
			return getRuleContext(StopGroupReplicationContext.class,0);
		}
		public XaStartTransactionContext xaStartTransaction() {
			return getRuleContext(XaStartTransactionContext.class,0);
		}
		public XaEndTransactionContext xaEndTransaction() {
			return getRuleContext(XaEndTransactionContext.class,0);
		}
		public XaPrepareStatementContext xaPrepareStatement() {
			return getRuleContext(XaPrepareStatementContext.class,0);
		}
		public XaCommitWorkContext xaCommitWork() {
			return getRuleContext(XaCommitWorkContext.class,0);
		}
		public XaRollbackWorkContext xaRollbackWork() {
			return getRuleContext(XaRollbackWorkContext.class,0);
		}
		public XaRecoverWorkContext xaRecoverWork() {
			return getRuleContext(XaRecoverWorkContext.class,0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitReplicationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicationStatementContext replicationStatement() throws RecognitionException {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_replicationStatement);
		try {
			setState(805);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(790);
				changeMaster();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(791);
				changeReplicationFilter();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(792);
				purgeBinaryLogs();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(793);
				resetMaster();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(794);
				resetSlave();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(795);
				startSlave();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(796);
				stopSlave();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(797);
				startGroupReplication();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(798);
				stopGroupReplication();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(799);
				xaStartTransaction();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(800);
				xaEndTransaction();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(801);
				xaPrepareStatement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(802);
				xaCommitWork();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(803);
				xaRollbackWork();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(804);
				xaRecoverWork();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparedStatementContext extends ParserRuleContext {
		public PrepareStatementContext prepareStatement() {
			return getRuleContext(PrepareStatementContext.class,0);
		}
		public ExecuteStatementContext executeStatement() {
			return getRuleContext(ExecuteStatementContext.class,0);
		}
		public DeallocatePrepareContext deallocatePrepare() {
			return getRuleContext(DeallocatePrepareContext.class,0);
		}
		public PreparedStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparedStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPreparedStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparedStatementContext preparedStatement() throws RecognitionException {
		PreparedStatementContext _localctx = new PreparedStatementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_preparedStatement);
		try {
			setState(810);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PREPARE:
				enterOuterAlt(_localctx, 1);
				{
				setState(807);
				prepareStatement();
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(808);
				executeStatement();
				}
				break;
			case DROP:
			case DEALLOCATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(809);
				deallocatePrepare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompoundStatementContext extends ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return getRuleContext(BlockStatementContext.class,0);
		}
		public CaseStatementContext caseStatement() {
			return getRuleContext(CaseStatementContext.class,0);
		}
		public IfStatementContext ifStatement() {
			return getRuleContext(IfStatementContext.class,0);
		}
		public LeaveStatementContext leaveStatement() {
			return getRuleContext(LeaveStatementContext.class,0);
		}
		public LoopStatementContext loopStatement() {
			return getRuleContext(LoopStatementContext.class,0);
		}
		public RepeatStatementContext repeatStatement() {
			return getRuleContext(RepeatStatementContext.class,0);
		}
		public WhileStatementContext whileStatement() {
			return getRuleContext(WhileStatementContext.class,0);
		}
		public IterateStatementContext iterateStatement() {
			return getRuleContext(IterateStatementContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public CursorStatementContext cursorStatement() {
			return getRuleContext(CursorStatementContext.class,0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCompoundStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompoundStatementContext compoundStatement() throws RecognitionException {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_compoundStatement);
		try {
			setState(822);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(812);
				blockStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(813);
				caseStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(814);
				ifStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(815);
				leaveStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(816);
				loopStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(817);
				repeatStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(818);
				whileStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(819);
				iterateStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(820);
				returnStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(821);
				cursorStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AdministrationStatementContext extends ParserRuleContext {
		public AlterUserContext alterUser() {
			return getRuleContext(AlterUserContext.class,0);
		}
		public CreateUserContext createUser() {
			return getRuleContext(CreateUserContext.class,0);
		}
		public DropUserContext dropUser() {
			return getRuleContext(DropUserContext.class,0);
		}
		public GrantStatementContext grantStatement() {
			return getRuleContext(GrantStatementContext.class,0);
		}
		public GrantProxyContext grantProxy() {
			return getRuleContext(GrantProxyContext.class,0);
		}
		public RenameUserContext renameUser() {
			return getRuleContext(RenameUserContext.class,0);
		}
		public RevokeStatementContext revokeStatement() {
			return getRuleContext(RevokeStatementContext.class,0);
		}
		public RevokeProxyContext revokeProxy() {
			return getRuleContext(RevokeProxyContext.class,0);
		}
		public AnalyzeTableContext analyzeTable() {
			return getRuleContext(AnalyzeTableContext.class,0);
		}
		public CheckTableContext checkTable() {
			return getRuleContext(CheckTableContext.class,0);
		}
		public ChecksumTableContext checksumTable() {
			return getRuleContext(ChecksumTableContext.class,0);
		}
		public OptimizeTableContext optimizeTable() {
			return getRuleContext(OptimizeTableContext.class,0);
		}
		public RepairTableContext repairTable() {
			return getRuleContext(RepairTableContext.class,0);
		}
		public CreateUdfunctionContext createUdfunction() {
			return getRuleContext(CreateUdfunctionContext.class,0);
		}
		public InstallPluginContext installPlugin() {
			return getRuleContext(InstallPluginContext.class,0);
		}
		public UninstallPluginContext uninstallPlugin() {
			return getRuleContext(UninstallPluginContext.class,0);
		}
		public SetStatementContext setStatement() {
			return getRuleContext(SetStatementContext.class,0);
		}
		public ShowStatementContext showStatement() {
			return getRuleContext(ShowStatementContext.class,0);
		}
		public BinlogStatementContext binlogStatement() {
			return getRuleContext(BinlogStatementContext.class,0);
		}
		public CacheIndexStatementContext cacheIndexStatement() {
			return getRuleContext(CacheIndexStatementContext.class,0);
		}
		public FlushStatementContext flushStatement() {
			return getRuleContext(FlushStatementContext.class,0);
		}
		public KillStatementContext killStatement() {
			return getRuleContext(KillStatementContext.class,0);
		}
		public LoadIndexIntoCacheContext loadIndexIntoCache() {
			return getRuleContext(LoadIndexIntoCacheContext.class,0);
		}
		public ResetStatementContext resetStatement() {
			return getRuleContext(ResetStatementContext.class,0);
		}
		public ShutdownStatementContext shutdownStatement() {
			return getRuleContext(ShutdownStatementContext.class,0);
		}
		public AdministrationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_administrationStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAdministrationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AdministrationStatementContext administrationStatement() throws RecognitionException {
		AdministrationStatementContext _localctx = new AdministrationStatementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_administrationStatement);
		try {
			setState(849);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(824);
				alterUser();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(825);
				createUser();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(826);
				dropUser();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(827);
				grantStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(828);
				grantProxy();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(829);
				renameUser();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(830);
				revokeStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(831);
				revokeProxy();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(832);
				analyzeTable();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(833);
				checkTable();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(834);
				checksumTable();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(835);
				optimizeTable();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(836);
				repairTable();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(837);
				createUdfunction();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(838);
				installPlugin();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(839);
				uninstallPlugin();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(840);
				setStatement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(841);
				showStatement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(842);
				binlogStatement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(843);
				cacheIndexStatement();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(844);
				flushStatement();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(845);
				killStatement();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(846);
				loadIndexIntoCache();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(847);
				resetStatement();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(848);
				shutdownStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UtilityStatementContext extends ParserRuleContext {
		public SimpleDescribeStatementContext simpleDescribeStatement() {
			return getRuleContext(SimpleDescribeStatementContext.class,0);
		}
		public FullDescribeStatementContext fullDescribeStatement() {
			return getRuleContext(FullDescribeStatementContext.class,0);
		}
		public HelpStatementContext helpStatement() {
			return getRuleContext(HelpStatementContext.class,0);
		}
		public UseStatementContext useStatement() {
			return getRuleContext(UseStatementContext.class,0);
		}
		public SignalStatementContext signalStatement() {
			return getRuleContext(SignalStatementContext.class,0);
		}
		public ResignalStatementContext resignalStatement() {
			return getRuleContext(ResignalStatementContext.class,0);
		}
		public DiagnosticsStatementContext diagnosticsStatement() {
			return getRuleContext(DiagnosticsStatementContext.class,0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utilityStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitUtilityStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UtilityStatementContext utilityStatement() throws RecognitionException {
		UtilityStatementContext _localctx = new UtilityStatementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_utilityStatement);
		try {
			setState(858);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(851);
				simpleDescribeStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(852);
				fullDescribeStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(853);
				helpStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(854);
				useStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(855);
				signalStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(856);
				resignalStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(857);
				diagnosticsStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseContext extends ParserRuleContext {
		public Token dbFormat;
		public TerminalNode CREATE() { return getToken(CqlParser.CREATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(CqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(CqlParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabase; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCreateDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseContext createDatabase() throws RecognitionException {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_createDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(860);
			match(CREATE);
			setState(861);
			((CreateDatabaseContext)_localctx).dbFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				((CreateDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(863);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(862);
				ifNotExists();
				}
			}

			setState(865);
			uid();
			setState(869);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==CHAR || _la==CHARSET) {
				{
				{
				setState(866);
				createDatabaseOption();
				}
				}
				setState(871);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateEventContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(CqlParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(CqlParser.EVENT, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(CqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(CqlParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(CqlParser.SCHEDULE, 0); }
		public ScheduleExpressionContext scheduleExpression() {
			return getRuleContext(ScheduleExpressionContext.class,0);
		}
		public TerminalNode DO() { return getToken(CqlParser.DO, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(CqlParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(CqlParser.PRESERVE, 0); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(CqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(CqlParser.NOT, 0); }
		public CreateEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createEvent; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCreateEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateEventContext createEvent() throws RecognitionException {
		CreateEventContext _localctx = new CreateEventContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_createEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(872);
			match(CREATE);
			setState(874);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(873);
				ownerStatement();
				}
			}

			setState(876);
			match(EVENT);
			setState(878);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(877);
				ifNotExists();
				}
			}

			setState(880);
			fullId();
			setState(881);
			match(ON);
			setState(882);
			match(SCHEDULE);
			setState(883);
			scheduleExpression();
			setState(890);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(884);
				match(ON);
				setState(885);
				match(COMPLETION);
				setState(887);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(886);
					match(NOT);
					}
				}

				setState(889);
				match(PRESERVE);
				}
			}

			setState(893);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(892);
				enableType();
				}
			}

			setState(897);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(895);
				match(COMMENT);
				setState(896);
				match(STRING_LITERAL);
				}
			}

			setState(899);
			match(DO);
			setState(900);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexContext extends ParserRuleContext {
		public Token intimeAction;
		public Token indexCategory;
		public Token algType;
		public Token lockType;
		public TerminalNode CREATE() { return getToken(CqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(CqlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ON() { return getToken(CqlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode OR() { return getToken(CqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(CqlParser.REPLACE, 0); }
		public TerminalNode IF() { return getToken(CqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(CqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(CqlParser.EXISTS, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(CqlParser.WAIT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(CqlParser.NOWAIT, 0); }
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(CqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(CqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> LOCK() { return getTokens(CqlParser.LOCK); }
		public TerminalNode LOCK(int i) {
			return getToken(CqlParser.LOCK, i);
		}
		public TerminalNode ONLINE() { return getToken(CqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(CqlParser.OFFLINE, 0); }
		public TerminalNode UNIQUE() { return getToken(CqlParser.UNIQUE, 0); }
		public TerminalNode FULLTEXT() { return getToken(CqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(CqlParser.SPATIAL, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(CqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(CqlParser.DEFAULT, i);
		}
		public List<TerminalNode> INPLACE() { return getTokens(CqlParser.INPLACE); }
		public TerminalNode INPLACE(int i) {
			return getToken(CqlParser.INPLACE, i);
		}
		public List<TerminalNode> COPY() { return getTokens(CqlParser.COPY); }
		public TerminalNode COPY(int i) {
			return getToken(CqlParser.COPY, i);
		}
		public List<TerminalNode> NOCOPY() { return getTokens(CqlParser.NOCOPY); }
		public TerminalNode NOCOPY(int i) {
			return getToken(CqlParser.NOCOPY, i);
		}
		public List<TerminalNode> INSTANT() { return getTokens(CqlParser.INSTANT); }
		public TerminalNode INSTANT(int i) {
			return getToken(CqlParser.INSTANT, i);
		}
		public List<TerminalNode> NONE() { return getTokens(CqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(CqlParser.NONE, i);
		}
		public List<TerminalNode> SHARED() { return getTokens(CqlParser.SHARED); }
		public TerminalNode SHARED(int i) {
			return getToken(CqlParser.SHARED, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(CqlParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(CqlParser.EXCLUSIVE, i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(CqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(CqlParser.EQUAL_SYMBOL, i);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndex; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexContext createIndex() throws RecognitionException {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_createIndex);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(902);
			match(CREATE);
			setState(905);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(903);
				match(OR);
				setState(904);
				match(REPLACE);
				}
			}

			setState(908);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(907);
				((CreateIndexContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((CreateIndexContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(911);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) {
				{
				setState(910);
				((CreateIndexContext)_localctx).indexCategory = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) ) {
					((CreateIndexContext)_localctx).indexCategory = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(913);
			match(INDEX);
			setState(917);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(914);
				match(IF);
				setState(915);
				match(NOT);
				setState(916);
				match(EXISTS);
				}
			}

			setState(919);
			uid();
			setState(921);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(920);
				indexType();
				}
			}

			setState(923);
			match(ON);
			setState(924);
			tableName();
			setState(925);
			indexColumnNames();
			setState(929);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WAIT:
				{
				setState(926);
				match(WAIT);
				setState(927);
				decimalLiteral();
				}
				break;
			case NOWAIT:
				{
				setState(928);
				match(NOWAIT);
				}
				break;
			case EOF:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case IGNORED:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case NOT:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case USING:
			case WITH:
			case ALGORITHM:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case CLUSTERING:
			case COMMENT:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case INVISIBLE:
			case KEY_BLOCK_SIZE:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case VISIBLE:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case ENGINE_ATTRIBUTE:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case MINUS:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			setState(934);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
				{
				{
				setState(931);
				indexOption();
				}
				}
				setState(936);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(949);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,36,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(947);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALGORITHM:
						{
						setState(937);
						match(ALGORITHM);
						setState(939);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(938);
							match(EQUAL_SYMBOL);
							}
						}

						setState(941);
						((CreateIndexContext)_localctx).algType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE || _la==INSTANT || _la==NOCOPY) ) {
							((CreateIndexContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LOCK:
						{
						setState(942);
						match(LOCK);
						setState(944);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(943);
							match(EQUAL_SYMBOL);
							}
						}

						setState(946);
						((CreateIndexContext)_localctx).lockType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							((CreateIndexContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(951);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,36,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLogfileGroupContext extends ParserRuleContext {
		public Token undoFile;
		public FileSizeLiteralContext initSize;
		public FileSizeLiteralContext undoSize;
		public FileSizeLiteralContext redoSize;
		public Token comment;
		public TerminalNode CREATE() { return getToken(CqlParser.CREATE, 0); }
		public TerminalNode LOGFILE() { return getToken(CqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(CqlParser.GROUP, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADD() { return getToken(CqlParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(CqlParser.UNDOFILE, 0); }
		public TerminalNode ENGINE() { return getToken(CqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(CqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(CqlParser.STRING_LITERAL, i);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(CqlParser.INITIAL_SIZE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(CqlParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(CqlParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(CqlParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(CqlParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(CqlParser.COMMENT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(CqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(CqlParser.EQUAL_SYMBOL, i);
		}
		public List<FileSizeLiteralContext> fileSizeLiteral() {
			return getRuleContexts(FileSizeLiteralContext.class);
		}
		public FileSizeLiteralContext fileSizeLiteral(int i) {
			return getRuleContext(FileSizeLiteralContext.class,i);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLogfileGroup; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCreateLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLogfileGroupContext createLogfileGroup() throws RecognitionException {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_createLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(952);
			match(CREATE);
			setState(953);
			match(LOGFILE);
			setState(954);
			match(GROUP);
			setState(955);
			uid();
			setState(956);
			match(ADD);
			setState(957);
			match(UNDOFILE);
			setState(958);
			((CreateLogfileGroupContext)_localctx).undoFile = match(STRING_LITERAL);
			setState(964);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(959);
				match(INITIAL_SIZE);
				setState(961);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(960);
					match(EQUAL_SYMBOL);
					}
				}

				setState(963);
				((CreateLogfileGroupContext)_localctx).initSize = fileSizeLiteral();
				}
			}

			setState(971);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNDO_BUFFER_SIZE) {
				{
				setState(966);
				match(UNDO_BUFFER_SIZE);
				setState(968);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(967);
					match(EQUAL_SYMBOL);
					}
				}

				setState(970);
				((CreateLogfileGroupContext)_localctx).undoSize = fileSizeLiteral();
				}
			}

			setState(978);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REDO_BUFFER_SIZE) {
				{
				setState(973);
				match(REDO_BUFFER_SIZE);
				setState(975);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(974);
					match(EQUAL_SYMBOL);
					}
				}

				setState(977);
				((CreateLogfileGroupContext)_localctx).redoSize = fileSizeLiteral();
				}
			}

			setState(985);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(980);
				match(NODEGROUP);
				setState(982);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(981);
					match(EQUAL_SYMBOL);
					}
				}

				setState(984);
				uid();
				}
			}

			setState(988);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(987);
				match(WAIT);
				}
			}

			setState(995);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(990);
				match(COMMENT);
				setState(992);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(991);
					match(EQUAL_SYMBOL);
					}
				}

				setState(994);
				((CreateLogfileGroupContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(997);
			match(ENGINE);
			setState(999);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(998);
				match(EQUAL_SYMBOL);
				}
			}

			setState(1001);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateProcedureContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(CqlParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(CqlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<ProcedureParameterContext> procedureParameter() {
			return getRuleContexts(ProcedureParameterContext.class);
		}
		public ProcedureParameterContext procedureParameter(int i) {
			return getRuleContext(ProcedureParameterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedure; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCreateProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateProcedureContext createProcedure() throws RecognitionException {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1003);
			match(CREATE);
			setState(1005);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1004);
				ownerStatement();
				}
			}

			setState(1007);
			match(PROCEDURE);
			setState(1008);
			fullId();
			setState(1009);
			match(LR_BRACKET);
			setState(1011);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (IN - 34)) | (1L << (INOUT - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (OUT - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
				{
				setState(1010);
				procedureParameter();
				}
			}

			setState(1017);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1013);
				match(COMMA);
				setState(1014);
				procedureParameter();
				}
				}
				setState(1019);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1020);
			match(RR_BRACKET);
			setState(1024);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,52,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1021);
					routineOption();
					}
					} 
				}
				setState(1026);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,52,_ctx);
			}
			setState(1027);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(CqlParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(CqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode RETURNS() { return getToken(CqlParser.RETURNS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<FunctionParameterContext> functionParameter() {
			return getRuleContexts(FunctionParameterContext.class);
		}
		public FunctionParameterContext functionParameter(int i) {
			return getRuleContext(FunctionParameterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCreateFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionContext createFunction() throws RecognitionException {
		CreateFunctionContext _localctx = new CreateFunctionContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_createFunction);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1029);
			match(CREATE);
			setState(1031);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1030);
				ownerStatement();
				}
			}

			setState(1033);
			match(FUNCTION);
			setState(1034);
			fullId();
			setState(1035);
			match(LR_BRACKET);
			setState(1037);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
				{
				setState(1036);
				functionParameter();
				}
			}

			setState(1043);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1039);
				match(COMMA);
				setState(1040);
				functionParameter();
				}
				}
				setState(1045);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1046);
			match(RR_BRACKET);
			setState(1047);
			match(RETURNS);
			setState(1048);
			dataType();
			setState(1052);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,56,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1049);
					routineOption();
					}
					} 
				}
				setState(1054);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,56,_ctx);
			}
			setState(1057);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case CURRENT:
			case DATABASE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DIAGNOSTICS:
			case DROP:
			case EXCEPT:
			case EXPLAIN:
			case GET:
			case GRANT:
			case GROUP:
			case IGNORED:
			case INSERT:
			case KILL:
			case LEFT:
			case LOAD:
			case LOCK:
			case NUMBER:
			case OPTIMIZE:
			case OPTIONAL:
			case ORDER:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case RIGHT:
			case SCHEMA:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case STACKED:
			case UNLOCK:
			case UPDATE:
			case USE:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case LR_BRACKET:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				{
				setState(1055);
				routineBody();
				}
				break;
			case RETURN:
				{
				setState(1056);
				returnStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateRoleContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(CqlParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(CqlParser.ROLE, 0); }
		public List<RoleNameContext> roleName() {
			return getRuleContexts(RoleNameContext.class);
		}
		public RoleNameContext roleName(int i) {
			return getRuleContext(RoleNameContext.class,i);
		}
		public TerminalNode IF() { return getToken(CqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(CqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(CqlParser.EXISTS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public CreateRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRole; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCreateRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateRoleContext createRole() throws RecognitionException {
		CreateRoleContext _localctx = new CreateRoleContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_createRole);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1059);
			match(CREATE);
			setState(1060);
			match(ROLE);
			setState(1064);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1061);
				match(IF);
				setState(1062);
				match(NOT);
				setState(1063);
				match(EXISTS);
				}
			}

			setState(1066);
			roleName();
			setState(1071);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1067);
				match(COMMA);
				setState(1068);
				roleName();
				}
				}
				setState(1073);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateServerContext extends ParserRuleContext {
		public Token wrapperName;
		public TerminalNode CREATE() { return getToken(CqlParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(CqlParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(CqlParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(CqlParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(CqlParser.WRAPPER, 0); }
		public TerminalNode OPTIONS() { return getToken(CqlParser.OPTIONS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode MYSQL() { return getToken(CqlParser.MYSQL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createServer; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCreateServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateServerContext createServer() throws RecognitionException {
		CreateServerContext _localctx = new CreateServerContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_createServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1074);
			match(CREATE);
			setState(1075);
			match(SERVER);
			setState(1076);
			uid();
			setState(1077);
			match(FOREIGN);
			setState(1078);
			match(DATA);
			setState(1079);
			match(WRAPPER);
			setState(1080);
			((CreateServerContext)_localctx).wrapperName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==MYSQL || _la==STRING_LITERAL) ) {
				((CreateServerContext)_localctx).wrapperName = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1081);
			match(OPTIONS);
			setState(1082);
			match(LR_BRACKET);
			setState(1083);
			serverOption();
			setState(1088);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1084);
				match(COMMA);
				setState(1085);
				serverOption();
				}
				}
				setState(1090);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1091);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableContext extends ParserRuleContext {
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
	 
		public CreateTableContext() { }
		public void copyFrom(CreateTableContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CopyCreateTableContext extends CreateTableContext {
		public TableNameContext parenthesisTable;
		public TerminalNode CREATE() { return getToken(CqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(CqlParser.TABLE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(CqlParser.LIKE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode OR() { return getToken(CqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(CqlParser.REPLACE, 0); }
		public TerminalNode TEMPORARY() { return getToken(CqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CopyCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCopyCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ColumnCreateTableContext extends CreateTableContext {
		public TerminalNode CREATE() { return getToken(CqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(CqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public TerminalNode OR() { return getToken(CqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(CqlParser.REPLACE, 0); }
		public TerminalNode TEMPORARY() { return getToken(CqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public ColumnCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitColumnCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class QueryCreateTableContext extends CreateTableContext {
		public Token keyViolate;
		public TerminalNode CREATE() { return getToken(CqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(CqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode OR() { return getToken(CqlParser.OR, 0); }
		public List<TerminalNode> REPLACE() { return getTokens(CqlParser.REPLACE); }
		public TerminalNode REPLACE(int i) {
			return getToken(CqlParser.REPLACE, i);
		}
		public TerminalNode TEMPORARY() { return getToken(CqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode AS() { return getToken(CqlParser.AS, 0); }
		public TerminalNode IGNORE() { return getToken(CqlParser.IGNORE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public QueryCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitQueryCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_createTable);
		int _la;
		try {
			int _alt;
			setState(1183);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
			case 1:
				_localctx = new CopyCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1093);
				match(CREATE);
				setState(1096);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1094);
					match(OR);
					setState(1095);
					match(REPLACE);
					}
				}

				setState(1099);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1098);
					match(TEMPORARY);
					}
				}

				setState(1101);
				match(TABLE);
				setState(1103);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1102);
					ifNotExists();
					}
				}

				setState(1105);
				tableName();
				setState(1113);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LIKE:
					{
					setState(1106);
					match(LIKE);
					setState(1107);
					tableName();
					}
					break;
				case LR_BRACKET:
					{
					setState(1108);
					match(LR_BRACKET);
					setState(1109);
					match(LIKE);
					setState(1110);
					((CopyCreateTableContext)_localctx).parenthesisTable = tableName();
					setState(1111);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new QueryCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1115);
				match(CREATE);
				setState(1118);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1116);
					match(OR);
					setState(1117);
					match(REPLACE);
					}
				}

				setState(1121);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1120);
					match(TEMPORARY);
					}
				}

				setState(1123);
				match(TABLE);
				setState(1125);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1124);
					ifNotExists();
					}
				}

				setState(1127);
				tableName();
				setState(1129);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
				case 1:
					{
					setState(1128);
					createDefinitions();
					}
					break;
				}
				setState(1141);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (CHARACTER - 24)) | (1L << (COLLATE - 24)) | (1L << (DEFAULT - 24)) | (1L << (INDEX - 24)))) != 0) || _la==UNION || _la==CHAR || ((((_la - 333)) & ~0x3f) == 0 && ((1L << (_la - 333)) & ((1L << (AUTO_INCREMENT - 333)) | (1L << (AVG_ROW_LENGTH - 333)) | (1L << (CHECKSUM - 333)) | (1L << (PAGE_CHECKSUM - 333)) | (1L << (COMMENT - 333)) | (1L << (COMPRESSION - 333)) | (1L << (CONNECTION - 333)) | (1L << (DATA - 333)) | (1L << (DELAY_KEY_WRITE - 333)) | (1L << (ENCRYPTION - 333)))) != 0) || ((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (ENGINE - 397)) | (1L << (INSERT_METHOD - 397)) | (1L << (KEY_BLOCK_SIZE - 397)))) != 0) || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (MAX_ROWS - 485)) | (1L << (MIN_ROWS - 485)) | (1L << (PACK_KEYS - 485)) | (1L << (PASSWORD - 485)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (ROW_FORMAT - 578)) | (1L << (STATS_AUTO_RECALC - 578)) | (1L << (STATS_PERSISTENT - 578)) | (1L << (STATS_SAMPLE_PAGES - 578)) | (1L << (STORAGE - 578)) | (1L << (TABLESPACE - 578)) | (1L << (TABLE_TYPE - 578)))) != 0) || _la==CHARSET) {
					{
					setState(1131);
					tableOption();
					setState(1138);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (CHARACTER - 24)) | (1L << (COLLATE - 24)) | (1L << (DEFAULT - 24)) | (1L << (INDEX - 24)))) != 0) || _la==UNION || _la==CHAR || ((((_la - 333)) & ~0x3f) == 0 && ((1L << (_la - 333)) & ((1L << (AUTO_INCREMENT - 333)) | (1L << (AVG_ROW_LENGTH - 333)) | (1L << (CHECKSUM - 333)) | (1L << (PAGE_CHECKSUM - 333)) | (1L << (COMMENT - 333)) | (1L << (COMPRESSION - 333)) | (1L << (CONNECTION - 333)) | (1L << (DATA - 333)) | (1L << (DELAY_KEY_WRITE - 333)) | (1L << (ENCRYPTION - 333)))) != 0) || ((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (ENGINE - 397)) | (1L << (INSERT_METHOD - 397)) | (1L << (KEY_BLOCK_SIZE - 397)))) != 0) || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (MAX_ROWS - 485)) | (1L << (MIN_ROWS - 485)) | (1L << (PACK_KEYS - 485)) | (1L << (PASSWORD - 485)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (ROW_FORMAT - 578)) | (1L << (STATS_AUTO_RECALC - 578)) | (1L << (STATS_PERSISTENT - 578)) | (1L << (STATS_SAMPLE_PAGES - 578)) | (1L << (STORAGE - 578)) | (1L << (TABLESPACE - 578)) | (1L << (TABLE_TYPE - 578)))) != 0) || _la==CHARSET || _la==COMMA) {
						{
						{
						setState(1133);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1132);
							match(COMMA);
							}
						}

						setState(1135);
						tableOption();
						}
						}
						setState(1140);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1144);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1143);
					partitionDefinitions();
					}
				}

				setState(1147);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==REPLACE) {
					{
					setState(1146);
					((QueryCreateTableContext)_localctx).keyViolate = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IGNORE || _la==REPLACE) ) {
						((QueryCreateTableContext)_localctx).keyViolate = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1150);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1149);
					match(AS);
					}
				}

				setState(1152);
				selectStatement();
				}
				break;
			case 3:
				_localctx = new ColumnCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1154);
				match(CREATE);
				setState(1157);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1155);
					match(OR);
					setState(1156);
					match(REPLACE);
					}
				}

				setState(1160);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1159);
					match(TEMPORARY);
					}
				}

				setState(1162);
				match(TABLE);
				setState(1164);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1163);
					ifNotExists();
					}
				}

				setState(1166);
				tableName();
				setState(1167);
				createDefinitions();
				setState(1178);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
				case 1:
					{
					setState(1168);
					tableOption();
					setState(1175);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,79,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1170);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(1169);
								match(COMMA);
								}
							}

							setState(1172);
							tableOption();
							}
							} 
						}
						setState(1177);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,79,_ctx);
					}
					}
					break;
				}
				setState(1181);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1180);
					partitionDefinitions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceInnodbContext extends ParserRuleContext {
		public Token datafile;
		public FileSizeLiteralContext fileBlockSize;
		public TerminalNode CREATE() { return getToken(CqlParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(CqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ADD() { return getToken(CqlParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(CqlParser.DATAFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(CqlParser.FILE_BLOCK_SIZE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(CqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(CqlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode ENGINE() { return getToken(CqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public CreateTablespaceInnodbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceInnodb; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCreateTablespaceInnodb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceInnodbContext createTablespaceInnodb() throws RecognitionException {
		CreateTablespaceInnodbContext _localctx = new CreateTablespaceInnodbContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_createTablespaceInnodb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1185);
			match(CREATE);
			setState(1186);
			match(TABLESPACE);
			setState(1187);
			uid();
			setState(1188);
			match(ADD);
			setState(1189);
			match(DATAFILE);
			setState(1190);
			((CreateTablespaceInnodbContext)_localctx).datafile = match(STRING_LITERAL);
			setState(1194);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILE_BLOCK_SIZE) {
				{
				setState(1191);
				match(FILE_BLOCK_SIZE);
				setState(1192);
				match(EQUAL_SYMBOL);
				setState(1193);
				((CreateTablespaceInnodbContext)_localctx).fileBlockSize = fileSizeLiteral();
				}
			}

			setState(1201);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(1196);
				match(ENGINE);
				setState(1198);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1197);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1200);
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceNdbContext extends ParserRuleContext {
		public Token datafile;
		public FileSizeLiteralContext extentSize;
		public FileSizeLiteralContext initialSize;
		public FileSizeLiteralContext autoextendSize;
		public FileSizeLiteralContext maxSize;
		public Token comment;
		public TerminalNode CREATE() { return getToken(CqlParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(CqlParser.TABLESPACE, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADD() { return getToken(CqlParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(CqlParser.DATAFILE, 0); }
		public TerminalNode USE() { return getToken(CqlParser.USE, 0); }
		public TerminalNode LOGFILE() { return getToken(CqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(CqlParser.GROUP, 0); }
		public TerminalNode ENGINE() { return getToken(CqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(CqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(CqlParser.STRING_LITERAL, i);
		}
		public TerminalNode EXTENT_SIZE() { return getToken(CqlParser.EXTENT_SIZE, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(CqlParser.INITIAL_SIZE, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(CqlParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode MAX_SIZE() { return getToken(CqlParser.MAX_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(CqlParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(CqlParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(CqlParser.COMMENT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(CqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(CqlParser.EQUAL_SYMBOL, i);
		}
		public List<FileSizeLiteralContext> fileSizeLiteral() {
			return getRuleContexts(FileSizeLiteralContext.class);
		}
		public FileSizeLiteralContext fileSizeLiteral(int i) {
			return getRuleContext(FileSizeLiteralContext.class,i);
		}
		public CreateTablespaceNdbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceNdb; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCreateTablespaceNdb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceNdbContext createTablespaceNdb() throws RecognitionException {
		CreateTablespaceNdbContext _localctx = new CreateTablespaceNdbContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_createTablespaceNdb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1203);
			match(CREATE);
			setState(1204);
			match(TABLESPACE);
			setState(1205);
			uid();
			setState(1206);
			match(ADD);
			setState(1207);
			match(DATAFILE);
			setState(1208);
			((CreateTablespaceNdbContext)_localctx).datafile = match(STRING_LITERAL);
			setState(1209);
			match(USE);
			setState(1210);
			match(LOGFILE);
			setState(1211);
			match(GROUP);
			setState(1212);
			uid();
			setState(1218);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENT_SIZE) {
				{
				setState(1213);
				match(EXTENT_SIZE);
				setState(1215);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1214);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1217);
				((CreateTablespaceNdbContext)_localctx).extentSize = fileSizeLiteral();
				}
			}

			setState(1225);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(1220);
				match(INITIAL_SIZE);
				setState(1222);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1221);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1224);
				((CreateTablespaceNdbContext)_localctx).initialSize = fileSizeLiteral();
				}
			}

			setState(1232);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOEXTEND_SIZE) {
				{
				setState(1227);
				match(AUTOEXTEND_SIZE);
				setState(1229);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1228);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1231);
				((CreateTablespaceNdbContext)_localctx).autoextendSize = fileSizeLiteral();
				}
			}

			setState(1239);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_SIZE) {
				{
				setState(1234);
				match(MAX_SIZE);
				setState(1236);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1235);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1238);
				((CreateTablespaceNdbContext)_localctx).maxSize = fileSizeLiteral();
				}
			}

			setState(1246);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(1241);
				match(NODEGROUP);
				setState(1243);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1242);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1245);
				uid();
				}
			}

			setState(1249);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(1248);
				match(WAIT);
				}
			}

			setState(1256);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(1251);
				match(COMMENT);
				setState(1253);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1252);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1255);
				((CreateTablespaceNdbContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(1258);
			match(ENGINE);
			setState(1260);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(1259);
				match(EQUAL_SYMBOL);
				}
			}

			setState(1262);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTriggerContext extends ParserRuleContext {
		public FullIdContext thisTrigger;
		public Token triggerTime;
		public Token triggerEvent;
		public Token triggerPlace;
		public FullIdContext otherTrigger;
		public TerminalNode CREATE() { return getToken(CqlParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(CqlParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(CqlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(CqlParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(CqlParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(CqlParser.ROW, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public TerminalNode BEFORE() { return getToken(CqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(CqlParser.AFTER, 0); }
		public TerminalNode INSERT() { return getToken(CqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(CqlParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(CqlParser.DELETE, 0); }
		public TerminalNode OR() { return getToken(CqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(CqlParser.REPLACE, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode FOLLOWS() { return getToken(CqlParser.FOLLOWS, 0); }
		public TerminalNode PRECEDES() { return getToken(CqlParser.PRECEDES, 0); }
		public CreateTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigger; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCreateTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTriggerContext createTrigger() throws RecognitionException {
		CreateTriggerContext _localctx = new CreateTriggerContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_createTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1264);
			match(CREATE);
			setState(1267);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1265);
				match(OR);
				setState(1266);
				match(REPLACE);
				}
			}

			setState(1270);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1269);
				ownerStatement();
				}
			}

			setState(1272);
			match(TRIGGER);
			setState(1273);
			((CreateTriggerContext)_localctx).thisTrigger = fullId();
			setState(1274);
			((CreateTriggerContext)_localctx).triggerTime = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEFORE || _la==AFTER) ) {
				((CreateTriggerContext)_localctx).triggerTime = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1275);
			((CreateTriggerContext)_localctx).triggerEvent = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
				((CreateTriggerContext)_localctx).triggerEvent = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1276);
			match(ON);
			setState(1277);
			tableName();
			setState(1278);
			match(FOR);
			setState(1279);
			match(EACH);
			setState(1280);
			match(ROW);
			setState(1283);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
			case 1:
				{
				setState(1281);
				((CreateTriggerContext)_localctx).triggerPlace = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWS || _la==PRECEDES) ) {
					((CreateTriggerContext)_localctx).triggerPlace = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1282);
				((CreateTriggerContext)_localctx).otherTrigger = fullId();
				}
				break;
			}
			setState(1285);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(CqlParser.WITH, 0); }
		public CommonTableExpressionsContext commonTableExpressions() {
			return getRuleContext(CommonTableExpressionsContext.class,0);
		}
		public TerminalNode RECURSIVE() { return getToken(CqlParser.RECURSIVE, 0); }
		public WithClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitWithClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithClauseContext withClause() throws RecognitionException {
		WithClauseContext _localctx = new WithClauseContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_withClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1287);
			match(WITH);
			setState(1289);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
			case 1:
				{
				setState(1288);
				match(RECURSIVE);
				}
				break;
			}
			setState(1291);
			commonTableExpressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommonTableExpressionsContext extends ParserRuleContext {
		public CteNameContext cteName() {
			return getRuleContext(CteNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(CqlParser.AS, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(CqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(CqlParser.LR_BRACKET, i);
		}
		public DmlStatementContext dmlStatement() {
			return getRuleContext(DmlStatementContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(CqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(CqlParser.RR_BRACKET, i);
		}
		public List<CteColumnNameContext> cteColumnName() {
			return getRuleContexts(CteColumnNameContext.class);
		}
		public CteColumnNameContext cteColumnName(int i) {
			return getRuleContext(CteColumnNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public CommonTableExpressionsContext commonTableExpressions() {
			return getRuleContext(CommonTableExpressionsContext.class,0);
		}
		public CommonTableExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonTableExpressions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCommonTableExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommonTableExpressionsContext commonTableExpressions() throws RecognitionException {
		CommonTableExpressionsContext _localctx = new CommonTableExpressionsContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_commonTableExpressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1293);
			cteName();
			setState(1305);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(1294);
				match(LR_BRACKET);
				setState(1295);
				cteColumnName();
				setState(1300);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1296);
					match(COMMA);
					setState(1297);
					cteColumnName();
					}
					}
					setState(1302);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1303);
				match(RR_BRACKET);
				}
			}

			setState(1307);
			match(AS);
			setState(1308);
			match(LR_BRACKET);
			setState(1309);
			dmlStatement();
			setState(1310);
			match(RR_BRACKET);
			setState(1313);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1311);
				match(COMMA);
				setState(1312);
				commonTableExpressions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CteNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CteNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cteName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCteName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CteNameContext cteName() throws RecognitionException {
		CteNameContext _localctx = new CteNameContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_cteName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1315);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CteColumnNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CteColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cteColumnName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCteColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CteColumnNameContext cteColumnName() throws RecognitionException {
		CteColumnNameContext _localctx = new CteColumnNameContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_cteColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1317);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateViewContext extends ParserRuleContext {
		public Token algType;
		public Token secContext;
		public Token checkOption;
		public TerminalNode CREATE() { return getToken(CqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(CqlParser.VIEW, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(CqlParser.AS, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode OR() { return getToken(CqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(CqlParser.REPLACE, 0); }
		public TerminalNode ALGORITHM() { return getToken(CqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode SQL() { return getToken(CqlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(CqlParser.SECURITY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(CqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(CqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(CqlParser.OPTION, 0); }
		public TerminalNode UNDEFINED() { return getToken(CqlParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(CqlParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(CqlParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(CqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(CqlParser.INVOKER, 0); }
		public TerminalNode CASCADED() { return getToken(CqlParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(CqlParser.LOCAL, 0); }
		public CreateViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createView; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCreateView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateViewContext createView() throws RecognitionException {
		CreateViewContext _localctx = new CreateViewContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_createView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1319);
			match(CREATE);
			setState(1322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1320);
				match(OR);
				setState(1321);
				match(REPLACE);
				}
			}

			setState(1327);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(1324);
				match(ALGORITHM);
				setState(1325);
				match(EQUAL_SYMBOL);
				setState(1326);
				((CreateViewContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((CreateViewContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1329);
				ownerStatement();
				}
			}

			setState(1335);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(1332);
				match(SQL);
				setState(1333);
				match(SECURITY);
				setState(1334);
				((CreateViewContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((CreateViewContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1337);
			match(VIEW);
			setState(1338);
			fullId();
			setState(1343);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(1339);
				match(LR_BRACKET);
				setState(1340);
				uidList();
				setState(1341);
				match(RR_BRACKET);
				}
			}

			setState(1345);
			match(AS);
			setState(1347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1346);
				withClause();
				}
			}

			setState(1349);
			selectStatement();
			setState(1356);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1350);
				match(WITH);
				setState(1352);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(1351);
					((CreateViewContext)_localctx).checkOption = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						((CreateViewContext)_localctx).checkOption = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1354);
				match(CHECK);
				setState(1355);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseOptionContext extends ParserRuleContext {
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(CqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(CqlParser.DEFAULT, i);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode COLLATE() { return getToken(CqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCreateDatabaseOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseOptionContext createDatabaseOption() throws RecognitionException {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_createDatabaseOption);
		int _la;
		try {
			setState(1377);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1359);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1358);
					match(DEFAULT);
					}
				}

				setState(1361);
				charSet();
				setState(1363);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1362);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1367);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(1365);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(1366);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1370);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1369);
					match(DEFAULT);
					}
				}

				setState(1372);
				match(COLLATE);
				setState(1374);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1373);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1376);
				collationName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharSetContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(CqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(CqlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(CqlParser.CHARSET, 0); }
		public TerminalNode CHAR() { return getToken(CqlParser.CHAR, 0); }
		public CharSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charSet; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCharSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharSetContext charSet() throws RecognitionException {
		CharSetContext _localctx = new CharSetContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_charSet);
		try {
			setState(1384);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARACTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1379);
				match(CHARACTER);
				setState(1380);
				match(SET);
				}
				break;
			case CHARSET:
				enterOuterAlt(_localctx, 2);
				{
				setState(1381);
				match(CHARSET);
				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(1382);
				match(CHAR);
				setState(1383);
				match(SET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OwnerStatementContext extends ParserRuleContext {
		public TerminalNode DEFINER() { return getToken(CqlParser.DEFINER, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(CqlParser.CURRENT_USER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public OwnerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ownerStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitOwnerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OwnerStatementContext ownerStatement() throws RecognitionException {
		OwnerStatementContext _localctx = new OwnerStatementContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_ownerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1386);
			match(DEFINER);
			setState(1387);
			match(EQUAL_SYMBOL);
			setState(1394);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case STACKED:
			case SERIAL:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case MEMORY:
			case CATALOG_NAME:
			case ENGINE_ATTRIBUTE:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SCHEMA_NAME:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case STRING_LITERAL:
			case ID:
			case STRING_USER_NAME:
			case STRING_USER_NAME_MARIADB:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				{
				setState(1388);
				userName();
				}
				break;
			case CURRENT_USER:
				{
				setState(1389);
				match(CURRENT_USER);
				setState(1392);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1390);
					match(LR_BRACKET);
					setState(1391);
					match(RR_BRACKET);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScheduleExpressionContext extends ParserRuleContext {
		public ScheduleExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scheduleExpression; }
	 
		public ScheduleExpressionContext() { }
		public void copyFrom(ScheduleExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PreciseScheduleContext extends ScheduleExpressionContext {
		public TerminalNode AT() { return getToken(CqlParser.AT, 0); }
		public TimestampValueContext timestampValue() {
			return getRuleContext(TimestampValueContext.class,0);
		}
		public List<IntervalExprContext> intervalExpr() {
			return getRuleContexts(IntervalExprContext.class);
		}
		public IntervalExprContext intervalExpr(int i) {
			return getRuleContext(IntervalExprContext.class,i);
		}
		public PreciseScheduleContext(ScheduleExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPreciseSchedule(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalScheduleContext extends ScheduleExpressionContext {
		public TimestampValueContext startTimestamp;
		public IntervalExprContext intervalExpr;
		public List<IntervalExprContext> startIntervals = new ArrayList<IntervalExprContext>();
		public TimestampValueContext endTimestamp;
		public List<IntervalExprContext> endIntervals = new ArrayList<IntervalExprContext>();
		public TerminalNode EVERY() { return getToken(CqlParser.EVERY, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode STARTS() { return getToken(CqlParser.STARTS, 0); }
		public TerminalNode ENDS() { return getToken(CqlParser.ENDS, 0); }
		public List<TimestampValueContext> timestampValue() {
			return getRuleContexts(TimestampValueContext.class);
		}
		public TimestampValueContext timestampValue(int i) {
			return getRuleContext(TimestampValueContext.class,i);
		}
		public List<IntervalExprContext> intervalExpr() {
			return getRuleContexts(IntervalExprContext.class);
		}
		public IntervalExprContext intervalExpr(int i) {
			return getRuleContext(IntervalExprContext.class,i);
		}
		public IntervalScheduleContext(ScheduleExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitIntervalSchedule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScheduleExpressionContext scheduleExpression() throws RecognitionException {
		ScheduleExpressionContext _localctx = new ScheduleExpressionContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_scheduleExpression);
		int _la;
		try {
			setState(1430);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT:
				_localctx = new PreciseScheduleContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1396);
				match(AT);
				setState(1397);
				timestampValue();
				setState(1401);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==PLUS) {
					{
					{
					setState(1398);
					intervalExpr();
					}
					}
					setState(1403);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case EVERY:
				_localctx = new IntervalScheduleContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1404);
				match(EVERY);
				setState(1407);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
				case 1:
					{
					setState(1405);
					decimalLiteral();
					}
					break;
				case 2:
					{
					setState(1406);
					expression(0);
					}
					break;
				}
				setState(1409);
				intervalType();
				setState(1418);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STARTS) {
					{
					setState(1410);
					match(STARTS);
					setState(1411);
					((IntervalScheduleContext)_localctx).startTimestamp = timestampValue();
					setState(1415);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==PLUS) {
						{
						{
						setState(1412);
						((IntervalScheduleContext)_localctx).intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx).startIntervals.add(((IntervalScheduleContext)_localctx).intervalExpr);
						}
						}
						setState(1417);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1428);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENDS) {
					{
					setState(1420);
					match(ENDS);
					setState(1421);
					((IntervalScheduleContext)_localctx).endTimestamp = timestampValue();
					setState(1425);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==PLUS) {
						{
						{
						setState(1422);
						((IntervalScheduleContext)_localctx).intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx).endIntervals.add(((IntervalScheduleContext)_localctx).intervalExpr);
						}
						}
						setState(1427);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimestampValueContext extends ParserRuleContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(CqlParser.CURRENT_TIMESTAMP, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TimestampValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestampValue; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTimestampValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimestampValueContext timestampValue() throws RecognitionException {
		TimestampValueContext _localctx = new TimestampValueContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_timestampValue);
		try {
			setState(1436);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1432);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1433);
				stringLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1434);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1435);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalExprContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(CqlParser.PLUS, 0); }
		public TerminalNode INTERVAL() { return getToken(CqlParser.INTERVAL, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitIntervalExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalExprContext intervalExpr() throws RecognitionException {
		IntervalExprContext _localctx = new IntervalExprContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_intervalExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1438);
			match(PLUS);
			setState(1439);
			match(INTERVAL);
			setState(1442);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
			case 1:
				{
				setState(1440);
				decimalLiteral();
				}
				break;
			case 2:
				{
				setState(1441);
				expression(0);
				}
				break;
			}
			setState(1444);
			intervalType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeContext extends ParserRuleContext {
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public TerminalNode YEAR() { return getToken(CqlParser.YEAR, 0); }
		public TerminalNode YEAR_MONTH() { return getToken(CqlParser.YEAR_MONTH, 0); }
		public TerminalNode DAY_HOUR() { return getToken(CqlParser.DAY_HOUR, 0); }
		public TerminalNode DAY_MINUTE() { return getToken(CqlParser.DAY_MINUTE, 0); }
		public TerminalNode DAY_SECOND() { return getToken(CqlParser.DAY_SECOND, 0); }
		public TerminalNode HOUR_MINUTE() { return getToken(CqlParser.HOUR_MINUTE, 0); }
		public TerminalNode HOUR_SECOND() { return getToken(CqlParser.HOUR_SECOND, 0); }
		public TerminalNode MINUTE_SECOND() { return getToken(CqlParser.MINUTE_SECOND, 0); }
		public TerminalNode SECOND_MICROSECOND() { return getToken(CqlParser.SECOND_MICROSECOND, 0); }
		public TerminalNode MINUTE_MICROSECOND() { return getToken(CqlParser.MINUTE_MICROSECOND, 0); }
		public TerminalNode HOUR_MICROSECOND() { return getToken(CqlParser.HOUR_MICROSECOND, 0); }
		public TerminalNode DAY_MICROSECOND() { return getToken(CqlParser.DAY_MICROSECOND, 0); }
		public IntervalTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitIntervalType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeContext intervalType() throws RecognitionException {
		IntervalTypeContext _localctx = new IntervalTypeContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_intervalType);
		try {
			setState(1459);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
				enterOuterAlt(_localctx, 1);
				{
				setState(1446);
				intervalTypeBase();
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(1447);
				match(YEAR);
				}
				break;
			case YEAR_MONTH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1448);
				match(YEAR_MONTH);
				}
				break;
			case DAY_HOUR:
				enterOuterAlt(_localctx, 4);
				{
				setState(1449);
				match(DAY_HOUR);
				}
				break;
			case DAY_MINUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1450);
				match(DAY_MINUTE);
				}
				break;
			case DAY_SECOND:
				enterOuterAlt(_localctx, 6);
				{
				setState(1451);
				match(DAY_SECOND);
				}
				break;
			case HOUR_MINUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1452);
				match(HOUR_MINUTE);
				}
				break;
			case HOUR_SECOND:
				enterOuterAlt(_localctx, 8);
				{
				setState(1453);
				match(HOUR_SECOND);
				}
				break;
			case MINUTE_SECOND:
				enterOuterAlt(_localctx, 9);
				{
				setState(1454);
				match(MINUTE_SECOND);
				}
				break;
			case SECOND_MICROSECOND:
				enterOuterAlt(_localctx, 10);
				{
				setState(1455);
				match(SECOND_MICROSECOND);
				}
				break;
			case MINUTE_MICROSECOND:
				enterOuterAlt(_localctx, 11);
				{
				setState(1456);
				match(MINUTE_MICROSECOND);
				}
				break;
			case HOUR_MICROSECOND:
				enterOuterAlt(_localctx, 12);
				{
				setState(1457);
				match(HOUR_MICROSECOND);
				}
				break;
			case DAY_MICROSECOND:
				enterOuterAlt(_localctx, 13);
				{
				setState(1458);
				match(DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EnableTypeContext extends ParserRuleContext {
		public TerminalNode ENABLE() { return getToken(CqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(CqlParser.DISABLE, 0); }
		public TerminalNode ON() { return getToken(CqlParser.ON, 0); }
		public TerminalNode SLAVE() { return getToken(CqlParser.SLAVE, 0); }
		public EnableTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enableType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitEnableType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnableTypeContext enableType() throws RecognitionException {
		EnableTypeContext _localctx = new EnableTypeContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_enableType);
		try {
			setState(1466);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1461);
				match(ENABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1462);
				match(DISABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1463);
				match(DISABLE);
				setState(1464);
				match(ON);
				setState(1465);
				match(SLAVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexTypeContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(CqlParser.USING, 0); }
		public TerminalNode BTREE() { return getToken(CqlParser.BTREE, 0); }
		public TerminalNode HASH() { return getToken(CqlParser.HASH, 0); }
		public TerminalNode RTREE() { return getToken(CqlParser.RTREE, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitIndexType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexTypeContext indexType() throws RecognitionException {
		IndexTypeContext _localctx = new IndexTypeContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_indexType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1468);
			match(USING);
			setState(1469);
			_la = _input.LA(1);
			if ( !(_la==BTREE || _la==HASH || _la==RTREE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionContext extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(CqlParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode WITH() { return getToken(CqlParser.WITH, 0); }
		public TerminalNode PARSER() { return getToken(CqlParser.PARSER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(CqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode VISIBLE() { return getToken(CqlParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(CqlParser.INVISIBLE, 0); }
		public TerminalNode ENGINE_ATTRIBUTE() { return getToken(CqlParser.ENGINE_ATTRIBUTE, 0); }
		public TerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return getToken(CqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		public TerminalNode CLUSTERING() { return getToken(CqlParser.CLUSTERING, 0); }
		public TerminalNode YES() { return getToken(CqlParser.YES, 0); }
		public TerminalNode NO() { return getToken(CqlParser.NO, 0); }
		public TerminalNode IGNORED() { return getToken(CqlParser.IGNORED, 0); }
		public TerminalNode NOT() { return getToken(CqlParser.NOT, 0); }
		public IndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionContext indexOption() throws RecognitionException {
		IndexOptionContext _localctx = new IndexOptionContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_indexOption);
		int _la;
		try {
			setState(1501);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KEY_BLOCK_SIZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1471);
				match(KEY_BLOCK_SIZE);
				setState(1473);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1472);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1475);
				fileSizeLiteral();
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1476);
				indexType();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1477);
				match(WITH);
				setState(1478);
				match(PARSER);
				setState(1479);
				uid();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1480);
				match(COMMENT);
				setState(1481);
				match(STRING_LITERAL);
				}
				break;
			case INVISIBLE:
			case VISIBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1482);
				_la = _input.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ENGINE_ATTRIBUTE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1483);
				match(ENGINE_ATTRIBUTE);
				setState(1485);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1484);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1487);
				match(STRING_LITERAL);
				}
				break;
			case SECONDARY_ENGINE_ATTRIBUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1488);
				match(SECONDARY_ENGINE_ATTRIBUTE);
				setState(1490);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1489);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1492);
				match(STRING_LITERAL);
				}
				break;
			case CLUSTERING:
				enterOuterAlt(_localctx, 8);
				{
				setState(1493);
				match(CLUSTERING);
				setState(1494);
				match(EQUAL_SYMBOL);
				setState(1495);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case IGNORED:
			case NOT:
				enterOuterAlt(_localctx, 9);
				{
				setState(1499);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case IGNORED:
					{
					setState(1496);
					match(IGNORED);
					}
					break;
				case NOT:
					{
					setState(1497);
					match(NOT);
					setState(1498);
					match(IGNORED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureParameterContext extends ParserRuleContext {
		public Token direction;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode IN() { return getToken(CqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(CqlParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(CqlParser.INOUT, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureParameter; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitProcedureParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureParameterContext procedureParameter() throws RecognitionException {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_procedureParameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1504);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (IN - 80)) | (1L << (INOUT - 80)) | (1L << (OUT - 80)))) != 0)) {
				{
				setState(1503);
				((ProcedureParameterContext)_localctx).direction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (IN - 80)) | (1L << (INOUT - 80)) | (1L << (OUT - 80)))) != 0)) ) {
					((ProcedureParameterContext)_localctx).direction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1506);
			uid();
			setState(1507);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionParameterContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameter; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitFunctionParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionParameterContext functionParameter() throws RecognitionException {
		FunctionParameterContext _localctx = new FunctionParameterContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_functionParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1509);
			uid();
			setState(1510);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineOptionContext extends ParserRuleContext {
		public RoutineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineOption; }
	 
		public RoutineOptionContext() { }
		public void copyFrom(RoutineOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class RoutineBehaviorContext extends RoutineOptionContext {
		public TerminalNode DETERMINISTIC() { return getToken(CqlParser.DETERMINISTIC, 0); }
		public TerminalNode NOT() { return getToken(CqlParser.NOT, 0); }
		public RoutineBehaviorContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitRoutineBehavior(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineLanguageContext extends RoutineOptionContext {
		public TerminalNode LANGUAGE() { return getToken(CqlParser.LANGUAGE, 0); }
		public TerminalNode SQL() { return getToken(CqlParser.SQL, 0); }
		public RoutineLanguageContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitRoutineLanguage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineCommentContext extends RoutineOptionContext {
		public TerminalNode COMMENT() { return getToken(CqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public RoutineCommentContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitRoutineComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineSecurityContext extends RoutineOptionContext {
		public Token context;
		public TerminalNode SQL() { return getToken(CqlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(CqlParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(CqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(CqlParser.INVOKER, 0); }
		public RoutineSecurityContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitRoutineSecurity(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineDataContext extends RoutineOptionContext {
		public TerminalNode CONTAINS() { return getToken(CqlParser.CONTAINS, 0); }
		public TerminalNode SQL() { return getToken(CqlParser.SQL, 0); }
		public TerminalNode NO() { return getToken(CqlParser.NO, 0); }
		public TerminalNode READS() { return getToken(CqlParser.READS, 0); }
		public TerminalNode DATA() { return getToken(CqlParser.DATA, 0); }
		public TerminalNode MODIFIES() { return getToken(CqlParser.MODIFIES, 0); }
		public RoutineDataContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitRoutineData(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineOptionContext routineOption() throws RecognitionException {
		RoutineOptionContext _localctx = new RoutineOptionContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_routineOption);
		int _la;
		try {
			setState(1535);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT:
				_localctx = new RoutineCommentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1512);
				match(COMMENT);
				setState(1513);
				match(STRING_LITERAL);
				}
				break;
			case LANGUAGE:
				_localctx = new RoutineLanguageContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1514);
				match(LANGUAGE);
				setState(1515);
				match(SQL);
				}
				break;
			case DETERMINISTIC:
			case NOT:
				_localctx = new RoutineBehaviorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1517);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1516);
					match(NOT);
					}
				}

				setState(1519);
				match(DETERMINISTIC);
				}
				break;
			case MODIFIES:
			case READS:
			case CONTAINS:
			case NO:
				_localctx = new RoutineDataContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1530);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONTAINS:
					{
					setState(1520);
					match(CONTAINS);
					setState(1521);
					match(SQL);
					}
					break;
				case NO:
					{
					setState(1522);
					match(NO);
					setState(1523);
					match(SQL);
					}
					break;
				case READS:
					{
					setState(1524);
					match(READS);
					setState(1525);
					match(SQL);
					setState(1526);
					match(DATA);
					}
					break;
				case MODIFIES:
					{
					setState(1527);
					match(MODIFIES);
					setState(1528);
					match(SQL);
					setState(1529);
					match(DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SQL:
				_localctx = new RoutineSecurityContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1532);
				match(SQL);
				setState(1533);
				match(SECURITY);
				setState(1534);
				((RoutineSecurityContext)_localctx).context = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((RoutineSecurityContext)_localctx).context = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerOptionContext extends ParserRuleContext {
		public TerminalNode HOST() { return getToken(CqlParser.HOST, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode DATABASE() { return getToken(CqlParser.DATABASE, 0); }
		public TerminalNode USER() { return getToken(CqlParser.USER, 0); }
		public TerminalNode PASSWORD() { return getToken(CqlParser.PASSWORD, 0); }
		public TerminalNode SOCKET() { return getToken(CqlParser.SOCKET, 0); }
		public TerminalNode OWNER() { return getToken(CqlParser.OWNER, 0); }
		public TerminalNode PORT() { return getToken(CqlParser.PORT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ServerOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitServerOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerOptionContext serverOption() throws RecognitionException {
		ServerOptionContext _localctx = new ServerOptionContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_serverOption);
		try {
			setState(1551);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HOST:
				enterOuterAlt(_localctx, 1);
				{
				setState(1537);
				match(HOST);
				setState(1538);
				match(STRING_LITERAL);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1539);
				match(DATABASE);
				setState(1540);
				match(STRING_LITERAL);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1541);
				match(USER);
				setState(1542);
				match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(1543);
				match(PASSWORD);
				setState(1544);
				match(STRING_LITERAL);
				}
				break;
			case SOCKET:
				enterOuterAlt(_localctx, 5);
				{
				setState(1545);
				match(SOCKET);
				setState(1546);
				match(STRING_LITERAL);
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 6);
				{
				setState(1547);
				match(OWNER);
				setState(1548);
				match(STRING_LITERAL);
				}
				break;
			case PORT:
				enterOuterAlt(_localctx, 7);
				{
				setState(1549);
				match(PORT);
				setState(1550);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public List<CreateDefinitionContext> createDefinition() {
			return getRuleContexts(CreateDefinitionContext.class);
		}
		public CreateDefinitionContext createDefinition(int i) {
			return getRuleContext(CreateDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public CreateDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinitions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCreateDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionsContext createDefinitions() throws RecognitionException {
		CreateDefinitionsContext _localctx = new CreateDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_createDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1553);
			match(LR_BRACKET);
			setState(1554);
			createDefinition();
			setState(1559);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1555);
				match(COMMA);
				setState(1556);
				createDefinition();
				}
				}
				setState(1561);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1562);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionContext extends ParserRuleContext {
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinition; }
	 
		public CreateDefinitionContext() { }
		public void copyFrom(CreateDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ColumnDeclarationContext extends CreateDefinitionContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public ColumnDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitColumnDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstraintDeclarationContext extends CreateDefinitionContext {
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public ConstraintDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitConstraintDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IndexDeclarationContext extends CreateDefinitionContext {
		public IndexColumnDefinitionContext indexColumnDefinition() {
			return getRuleContext(IndexColumnDefinitionContext.class,0);
		}
		public IndexDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionContext createDefinition() throws RecognitionException {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_createDefinition);
		try {
			setState(1569);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				_localctx = new ColumnDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1564);
				uid();
				setState(1565);
				columnDefinition();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				_localctx = new ConstraintDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1567);
				tableConstraint();
				}
				break;
			case FULLTEXT:
			case INDEX:
			case KEY:
			case SPATIAL:
				_localctx = new IndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1568);
				indexColumnDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_columnDefinition);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1571);
			dataType();
			setState(1575);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,147,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1572);
					columnConstraint();
					}
					} 
				}
				setState(1577);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,147,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
	 
		public ColumnConstraintContext() { }
		public void copyFrom(ColumnConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class StorageColumnConstraintContext extends ColumnConstraintContext {
		public Token storageval;
		public TerminalNode STORAGE() { return getToken(CqlParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(CqlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(CqlParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(CqlParser.DEFAULT, 0); }
		public StorageColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitStorageColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class VisibilityColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode VISIBLE() { return getToken(CqlParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(CqlParser.INVISIBLE, 0); }
		public VisibilityColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitVisibilityColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AutoIncrementColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(CqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode ON() { return getToken(CqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(CqlParser.UPDATE, 0); }
		public CurrentTimestampContext currentTimestamp() {
			return getRuleContext(CurrentTimestampContext.class,0);
		}
		public AutoIncrementColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAutoIncrementColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CommentColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COMMENT() { return getToken(CqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public CommentColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCommentColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UniqueKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode UNIQUE() { return getToken(CqlParser.UNIQUE, 0); }
		public TerminalNode KEY() { return getToken(CqlParser.KEY, 0); }
		public UniqueKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitUniqueKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SerialDefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode SERIAL() { return getToken(CqlParser.SERIAL, 0); }
		public TerminalNode DEFAULT() { return getToken(CqlParser.DEFAULT, 0); }
		public TerminalNode VALUE() { return getToken(CqlParser.VALUE, 0); }
		public SerialDefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSerialDefaultColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GeneratedColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AS() { return getToken(CqlParser.AS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode GENERATED() { return getToken(CqlParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(CqlParser.ALWAYS, 0); }
		public TerminalNode VIRTUAL() { return getToken(CqlParser.VIRTUAL, 0); }
		public TerminalNode STORED() { return getToken(CqlParser.STORED, 0); }
		public GeneratedColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitGeneratedColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FormatColumnConstraintContext extends ColumnConstraintContext {
		public Token colformat;
		public TerminalNode COLUMN_FORMAT() { return getToken(CqlParser.COLUMN_FORMAT, 0); }
		public TerminalNode FIXED() { return getToken(CqlParser.FIXED, 0); }
		public TerminalNode DYNAMIC() { return getToken(CqlParser.DYNAMIC, 0); }
		public TerminalNode DEFAULT() { return getToken(CqlParser.DEFAULT, 0); }
		public FormatColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitFormatColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollateColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COLLATE() { return getToken(CqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCollateColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode KEY() { return getToken(CqlParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(CqlParser.PRIMARY, 0); }
		public PrimaryKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPrimaryKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CheckColumnConstraintContext extends ColumnConstraintContext {
		public UidContext name;
		public TerminalNode CHECK() { return getToken(CqlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(CqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CheckColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCheckColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NullColumnConstraintContext extends ColumnConstraintContext {
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public NullColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitNullColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode DEFAULT() { return getToken(CqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public DefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDefaultColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ReferenceColumnConstraintContext extends ColumnConstraintContext {
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public ReferenceColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitReferenceColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_columnConstraint);
		int _la;
		try {
			setState(1631);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL_LITERAL:
			case NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1578);
				nullNotnull();
				}
				break;
			case DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1579);
				match(DEFAULT);
				setState(1580);
				defaultValue();
				}
				break;
			case VISIBLE:
				_localctx = new VisibilityColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1581);
				match(VISIBLE);
				}
				break;
			case INVISIBLE:
				_localctx = new VisibilityColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1582);
				match(INVISIBLE);
				}
				break;
			case ON:
			case AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1587);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTO_INCREMENT:
					{
					setState(1583);
					match(AUTO_INCREMENT);
					}
					break;
				case ON:
					{
					setState(1584);
					match(ON);
					setState(1585);
					match(UPDATE);
					setState(1586);
					currentTimestamp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KEY:
			case PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1590);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(1589);
					match(PRIMARY);
					}
				}

				setState(1592);
				match(KEY);
				}
				break;
			case UNIQUE:
				_localctx = new UniqueKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1593);
				match(UNIQUE);
				setState(1595);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,150,_ctx) ) {
				case 1:
					{
					setState(1594);
					match(KEY);
					}
					break;
				}
				}
				break;
			case COMMENT:
				_localctx = new CommentColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1597);
				match(COMMENT);
				setState(1598);
				match(STRING_LITERAL);
				}
				break;
			case COLUMN_FORMAT:
				_localctx = new FormatColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1599);
				match(COLUMN_FORMAT);
				setState(1600);
				((FormatColumnConstraintContext)_localctx).colformat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DYNAMIC || _la==FIXED) ) {
					((FormatColumnConstraintContext)_localctx).colformat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case STORAGE:
				_localctx = new StorageColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1601);
				match(STORAGE);
				setState(1602);
				((StorageColumnConstraintContext)_localctx).storageval = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					((StorageColumnConstraintContext)_localctx).storageval = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case REFERENCES:
				_localctx = new ReferenceColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1603);
				referenceDefinition();
				}
				break;
			case COLLATE:
				_localctx = new CollateColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1604);
				match(COLLATE);
				setState(1605);
				collationName();
				}
				break;
			case AS:
			case GENERATED:
				_localctx = new GeneratedColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1608);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GENERATED) {
					{
					setState(1606);
					match(GENERATED);
					setState(1607);
					match(ALWAYS);
					}
				}

				setState(1610);
				match(AS);
				setState(1611);
				match(LR_BRACKET);
				setState(1612);
				expression(0);
				setState(1613);
				match(RR_BRACKET);
				setState(1615);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORED || _la==VIRTUAL) {
					{
					setState(1614);
					_la = _input.LA(1);
					if ( !(_la==STORED || _la==VIRTUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case SERIAL:
				_localctx = new SerialDefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(1617);
				match(SERIAL);
				setState(1618);
				match(DEFAULT);
				setState(1619);
				match(VALUE);
				}
				break;
			case CHECK:
			case CONSTRAINT:
				_localctx = new CheckColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(1624);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1620);
					match(CONSTRAINT);
					setState(1622);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
						{
						setState(1621);
						((CheckColumnConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1626);
				match(CHECK);
				setState(1627);
				match(LR_BRACKET);
				setState(1628);
				expression(0);
				setState(1629);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintContext extends ParserRuleContext {
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
	 
		public TableConstraintContext() { }
		public void copyFrom(TableConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UniqueKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext index;
		public TerminalNode UNIQUE() { return getToken(CqlParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(CqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(CqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(CqlParser.KEY, 0); }
		public UniqueKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitUniqueKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CheckTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public TerminalNode CHECK() { return getToken(CqlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(CqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CheckTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCheckTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode PRIMARY() { return getToken(CqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(CqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(CqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public PrimaryKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPrimaryKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ForeignKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode FOREIGN() { return getToken(CqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(CqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(CqlParser.CONSTRAINT, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ForeignKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitForeignKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_tableConstraint);
		int _la;
		try {
			setState(1702);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1637);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1633);
					match(CONSTRAINT);
					setState(1635);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
						{
						setState(1634);
						((PrimaryKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1639);
				match(PRIMARY);
				setState(1640);
				match(KEY);
				setState(1642);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
					{
					setState(1641);
					((PrimaryKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1645);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1644);
					indexType();
					}
				}

				setState(1647);
				indexColumnNames();
				setState(1651);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(1648);
					indexOption();
					}
					}
					setState(1653);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new UniqueKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1658);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1654);
					match(CONSTRAINT);
					setState(1656);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
						{
						setState(1655);
						((UniqueKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1660);
				match(UNIQUE);
				setState(1662);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1661);
					((UniqueKeyTableConstraintContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((UniqueKeyTableConstraintContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1665);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
					{
					setState(1664);
					((UniqueKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1668);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1667);
					indexType();
					}
				}

				setState(1670);
				indexColumnNames();
				setState(1674);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(1671);
					indexOption();
					}
					}
					setState(1676);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1681);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1677);
					match(CONSTRAINT);
					setState(1679);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
						{
						setState(1678);
						((ForeignKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1683);
				match(FOREIGN);
				setState(1684);
				match(KEY);
				setState(1686);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
					{
					setState(1685);
					((ForeignKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1688);
				indexColumnNames();
				setState(1689);
				referenceDefinition();
				}
				break;
			case 4:
				_localctx = new CheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1695);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1691);
					match(CONSTRAINT);
					setState(1693);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
						{
						setState(1692);
						((CheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1697);
				match(CHECK);
				setState(1698);
				match(LR_BRACKET);
				setState(1699);
				expression(0);
				setState(1700);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceDefinitionContext extends ParserRuleContext {
		public Token matchType;
		public TerminalNode REFERENCES() { return getToken(CqlParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(CqlParser.MATCH, 0); }
		public ReferenceActionContext referenceAction() {
			return getRuleContext(ReferenceActionContext.class,0);
		}
		public TerminalNode FULL() { return getToken(CqlParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(CqlParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(CqlParser.SIMPLE, 0); }
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceDefinition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitReferenceDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceDefinitionContext referenceDefinition() throws RecognitionException {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_referenceDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1704);
			match(REFERENCES);
			setState(1705);
			tableName();
			setState(1707);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,173,_ctx) ) {
			case 1:
				{
				setState(1706);
				indexColumnNames();
				}
				break;
			}
			setState(1711);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MATCH) {
				{
				setState(1709);
				match(MATCH);
				setState(1710);
				((ReferenceDefinitionContext)_localctx).matchType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
					((ReferenceDefinitionContext)_localctx).matchType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1714);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
			case 1:
				{
				setState(1713);
				referenceAction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceActionContext extends ParserRuleContext {
		public ReferenceControlTypeContext onDelete;
		public ReferenceControlTypeContext onUpdate;
		public List<TerminalNode> ON() { return getTokens(CqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(CqlParser.ON, i);
		}
		public TerminalNode DELETE() { return getToken(CqlParser.DELETE, 0); }
		public List<ReferenceControlTypeContext> referenceControlType() {
			return getRuleContexts(ReferenceControlTypeContext.class);
		}
		public ReferenceControlTypeContext referenceControlType(int i) {
			return getRuleContext(ReferenceControlTypeContext.class,i);
		}
		public TerminalNode UPDATE() { return getToken(CqlParser.UPDATE, 0); }
		public ReferenceActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceAction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitReferenceAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceActionContext referenceAction() throws RecognitionException {
		ReferenceActionContext _localctx = new ReferenceActionContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_referenceAction);
		try {
			setState(1732);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,178,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1716);
				match(ON);
				setState(1717);
				match(DELETE);
				setState(1718);
				((ReferenceActionContext)_localctx).onDelete = referenceControlType();
				setState(1722);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,176,_ctx) ) {
				case 1:
					{
					setState(1719);
					match(ON);
					setState(1720);
					match(UPDATE);
					setState(1721);
					((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1724);
				match(ON);
				setState(1725);
				match(UPDATE);
				setState(1726);
				((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
				setState(1730);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,177,_ctx) ) {
				case 1:
					{
					setState(1727);
					match(ON);
					setState(1728);
					match(DELETE);
					setState(1729);
					((ReferenceActionContext)_localctx).onDelete = referenceControlType();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceControlTypeContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(CqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(CqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(CqlParser.SET, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(CqlParser.NULL_LITERAL, 0); }
		public TerminalNode NO() { return getToken(CqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(CqlParser.ACTION, 0); }
		public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceControlType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitReferenceControlType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceControlTypeContext referenceControlType() throws RecognitionException {
		ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_referenceControlType);
		try {
			setState(1740);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESTRICT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1734);
				match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1735);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(1736);
				match(SET);
				setState(1737);
				match(NULL_LITERAL);
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 4);
				{
				setState(1738);
				match(NO);
				setState(1739);
				match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnDefinitionContext extends ParserRuleContext {
		public IndexColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnDefinition; }
	 
		public IndexColumnDefinitionContext() { }
		public void copyFrom(IndexColumnDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecialIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(CqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(CqlParser.SPATIAL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(CqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(CqlParser.KEY, 0); }
		public SpecialIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSpecialIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(CqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(CqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public SimpleIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSimpleIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnDefinitionContext indexColumnDefinition() throws RecognitionException {
		IndexColumnDefinitionContext _localctx = new IndexColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_indexColumnDefinition);
		int _la;
		try {
			setState(1770);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX:
			case KEY:
				_localctx = new SimpleIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1742);
				((SimpleIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((SimpleIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1744);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
					{
					setState(1743);
					uid();
					}
				}

				setState(1747);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1746);
					indexType();
					}
				}

				setState(1749);
				indexColumnNames();
				setState(1753);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(1750);
					indexOption();
					}
					}
					setState(1755);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case FULLTEXT:
			case SPATIAL:
				_localctx = new SpecialIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1756);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1758);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1757);
					((SpecialIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((SpecialIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1761);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
					{
					setState(1760);
					uid();
					}
				}

				setState(1763);
				indexColumnNames();
				setState(1767);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(1764);
					indexOption();
					}
					}
					setState(1769);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableOptionContext extends ParserRuleContext {
		public TableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOption; }
	 
		public TableOptionContext() { }
		public void copyFrom(TableOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableOptionEngineContext extends TableOptionContext {
		public TerminalNode ENGINE() { return getToken(CqlParser.ENGINE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TableOptionEngineContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionMaxRowsContext extends TableOptionContext {
		public TerminalNode MAX_ROWS() { return getToken(CqlParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMaxRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionMaxRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCollateContext extends TableOptionContext {
		public TerminalNode COLLATE() { return getToken(CqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(CqlParser.DEFAULT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCollateContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionCollate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPersistentContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_PERSISTENT() { return getToken(CqlParser.STATS_PERSISTENT, 0); }
		public TerminalNode DEFAULT() { return getToken(CqlParser.DEFAULT, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(CqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(CqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPersistentContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionPersistent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionTablespaceContext extends TableOptionContext {
		public TerminalNode TABLESPACE() { return getToken(CqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TablespaceStorageContext tablespaceStorage() {
			return getRuleContext(TablespaceStorageContext.class,0);
		}
		public TableOptionTablespaceContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPackKeysContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode PACK_KEYS() { return getToken(CqlParser.PACK_KEYS, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(CqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(CqlParser.ONE_DECIMAL, 0); }
		public TerminalNode DEFAULT() { return getToken(CqlParser.DEFAULT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPackKeysContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionPackKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPasswordContext extends TableOptionContext {
		public TerminalNode PASSWORD() { return getToken(CqlParser.PASSWORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPasswordContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionPassword(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionUnionContext extends TableOptionContext {
		public TerminalNode UNION() { return getToken(CqlParser.UNION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionUnionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionUnion(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionSamplePageContext extends TableOptionContext {
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(CqlParser.STATS_SAMPLE_PAGES, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionSamplePageContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionSamplePage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCharsetContext extends TableOptionContext {
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(CqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(CqlParser.DEFAULT, i);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCharsetContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionIndexDirectoryContext extends TableOptionContext {
		public TerminalNode INDEX() { return getToken(CqlParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(CqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionIndexDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionIndexDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionTableTypeContext extends TableOptionContext {
		public TerminalNode TABLE_TYPE() { return getToken(CqlParser.TABLE_TYPE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TableTypeContext tableType() {
			return getRuleContext(TableTypeContext.class,0);
		}
		public TableOptionTableTypeContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionTableType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionKeyBlockSizeContext extends TableOptionContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(CqlParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionKeyBlockSizeContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionKeyBlockSize(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionEncryptionContext extends TableOptionContext {
		public TerminalNode ENCRYPTION() { return getToken(CqlParser.ENCRYPTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionEncryptionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionEncryption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionDataDirectoryContext extends TableOptionContext {
		public TerminalNode DATA() { return getToken(CqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(CqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDataDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionDataDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionRecalculationContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_AUTO_RECALC() { return getToken(CqlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode DEFAULT() { return getToken(CqlParser.DEFAULT, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(CqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(CqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRecalculationContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionRecalculation(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionAutoIncrementContext extends TableOptionContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(CqlParser.AUTO_INCREMENT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAutoIncrementContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionAutoIncrement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionChecksumContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode CHECKSUM() { return getToken(CqlParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(CqlParser.PAGE_CHECKSUM, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(CqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(CqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionChecksumContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionChecksum(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionDelayContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode DELAY_KEY_WRITE() { return getToken(CqlParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(CqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(CqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDelayContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionDelay(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionConnectionContext extends TableOptionContext {
		public TerminalNode CONNECTION() { return getToken(CqlParser.CONNECTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionConnectionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionConnection(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCommentContext extends TableOptionContext {
		public TerminalNode COMMENT() { return getToken(CqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCommentContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionAverageContext extends TableOptionContext {
		public TerminalNode AVG_ROW_LENGTH() { return getToken(CqlParser.AVG_ROW_LENGTH, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAverageContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionAverage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionRowFormatContext extends TableOptionContext {
		public Token rowFormat;
		public TerminalNode ROW_FORMAT() { return getToken(CqlParser.ROW_FORMAT, 0); }
		public TerminalNode DEFAULT() { return getToken(CqlParser.DEFAULT, 0); }
		public TerminalNode DYNAMIC() { return getToken(CqlParser.DYNAMIC, 0); }
		public TerminalNode FIXED() { return getToken(CqlParser.FIXED, 0); }
		public TerminalNode COMPRESSED() { return getToken(CqlParser.COMPRESSED, 0); }
		public TerminalNode REDUNDANT() { return getToken(CqlParser.REDUNDANT, 0); }
		public TerminalNode COMPACT() { return getToken(CqlParser.COMPACT, 0); }
		public TerminalNode ID() { return getToken(CqlParser.ID, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRowFormatContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionRowFormat(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCompressionContext extends TableOptionContext {
		public TerminalNode COMPRESSION() { return getToken(CqlParser.COMPRESSION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode ID() { return getToken(CqlParser.ID, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCompressionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionCompression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionInsertMethodContext extends TableOptionContext {
		public Token insertMethod;
		public TerminalNode INSERT_METHOD() { return getToken(CqlParser.INSERT_METHOD, 0); }
		public TerminalNode NO() { return getToken(CqlParser.NO, 0); }
		public TerminalNode FIRST() { return getToken(CqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(CqlParser.LAST, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionInsertMethodContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionInsertMethod(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionMinRowsContext extends TableOptionContext {
		public TerminalNode MIN_ROWS() { return getToken(CqlParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMinRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableOptionMinRows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableOptionContext tableOption() throws RecognitionException {
		TableOptionContext _localctx = new TableOptionContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_tableOption);
		int _la;
		try {
			setState(1917);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
			case 1:
				_localctx = new TableOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1772);
				match(ENGINE);
				setState(1774);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1773);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1777);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONNECT || ((((_la - 755)) & ~0x3f) == 0 && ((1L << (_la - 755)) & ((1L << (ARCHIVE - 755)) | (1L << (BLACKHOLE - 755)) | (1L << (CSV - 755)) | (1L << (FEDERATED - 755)) | (1L << (INNODB - 755)) | (1L << (MEMORY - 755)) | (1L << (MRG_MYISAM - 755)) | (1L << (MYISAM - 755)) | (1L << (NDB - 755)) | (1L << (NDBCLUSTER - 755)) | (1L << (PERFORMANCE_SCHEMA - 755)) | (1L << (TOKUDB - 755)))) != 0) || ((((_la - 1126)) & ~0x3f) == 0 && ((1L << (_la - 1126)) & ((1L << (STRING_LITERAL - 1126)) | (1L << (ID - 1126)) | (1L << (REVERSE_QUOTE_ID - 1126)))) != 0)) {
					{
					setState(1776);
					engineName();
					}
				}

				}
				break;
			case 2:
				_localctx = new TableOptionAutoIncrementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1779);
				match(AUTO_INCREMENT);
				setState(1781);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1780);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1783);
				decimalLiteral();
				}
				break;
			case 3:
				_localctx = new TableOptionAverageContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1784);
				match(AVG_ROW_LENGTH);
				setState(1786);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1785);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1788);
				decimalLiteral();
				}
				break;
			case 4:
				_localctx = new TableOptionCharsetContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1790);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1789);
					match(DEFAULT);
					}
				}

				setState(1792);
				charSet();
				setState(1794);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1793);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1798);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(1796);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(1797);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				_localctx = new TableOptionChecksumContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1800);
				_la = _input.LA(1);
				if ( !(_la==CHECKSUM || _la==PAGE_CHECKSUM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1802);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1801);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1804);
				((TableOptionChecksumContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionChecksumContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 6:
				_localctx = new TableOptionCollateContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1806);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1805);
					match(DEFAULT);
					}
				}

				setState(1808);
				match(COLLATE);
				setState(1810);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1809);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1812);
				collationName();
				}
				break;
			case 7:
				_localctx = new TableOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1813);
				match(COMMENT);
				setState(1815);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1814);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1817);
				match(STRING_LITERAL);
				}
				break;
			case 8:
				_localctx = new TableOptionCompressionContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1818);
				match(COMPRESSION);
				setState(1820);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1819);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1822);
				_la = _input.LA(1);
				if ( !(_la==STRING_LITERAL || _la==ID) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				_localctx = new TableOptionConnectionContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1823);
				match(CONNECTION);
				setState(1825);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1824);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1827);
				match(STRING_LITERAL);
				}
				break;
			case 10:
				_localctx = new TableOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1828);
				match(DATA);
				setState(1829);
				match(DIRECTORY);
				setState(1831);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1830);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1833);
				match(STRING_LITERAL);
				}
				break;
			case 11:
				_localctx = new TableOptionDelayContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1834);
				match(DELAY_KEY_WRITE);
				setState(1836);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1835);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1838);
				((TableOptionDelayContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionDelayContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 12:
				_localctx = new TableOptionEncryptionContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1839);
				match(ENCRYPTION);
				setState(1841);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1840);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1843);
				match(STRING_LITERAL);
				}
				break;
			case 13:
				_localctx = new TableOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1844);
				match(INDEX);
				setState(1845);
				match(DIRECTORY);
				setState(1847);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1846);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1849);
				match(STRING_LITERAL);
				}
				break;
			case 14:
				_localctx = new TableOptionInsertMethodContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(1850);
				match(INSERT_METHOD);
				setState(1852);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1851);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1854);
				((TableOptionInsertMethodContext)_localctx).insertMethod = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NO) ) {
					((TableOptionInsertMethodContext)_localctx).insertMethod = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				_localctx = new TableOptionKeyBlockSizeContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(1855);
				match(KEY_BLOCK_SIZE);
				setState(1857);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1856);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1859);
				fileSizeLiteral();
				}
				break;
			case 16:
				_localctx = new TableOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(1860);
				match(MAX_ROWS);
				setState(1862);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1861);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1864);
				decimalLiteral();
				}
				break;
			case 17:
				_localctx = new TableOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(1865);
				match(MIN_ROWS);
				setState(1867);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1866);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1869);
				decimalLiteral();
				}
				break;
			case 18:
				_localctx = new TableOptionPackKeysContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(1870);
				match(PACK_KEYS);
				setState(1872);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1871);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1874);
				((TableOptionPackKeysContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPackKeysContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 19:
				_localctx = new TableOptionPasswordContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(1875);
				match(PASSWORD);
				setState(1877);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1876);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1879);
				match(STRING_LITERAL);
				}
				break;
			case 20:
				_localctx = new TableOptionRowFormatContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(1880);
				match(ROW_FORMAT);
				setState(1882);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1881);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1884);
				((TableOptionRowFormatContext)_localctx).rowFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || ((((_la - 361)) & ~0x3f) == 0 && ((1L << (_la - 361)) & ((1L << (COMPACT - 361)) | (1L << (COMPRESSED - 361)) | (1L << (DYNAMIC - 361)) | (1L << (FIXED - 361)))) != 0) || _la==REDUNDANT || _la==ID) ) {
					((TableOptionRowFormatContext)_localctx).rowFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 21:
				_localctx = new TableOptionRecalculationContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(1885);
				match(STATS_AUTO_RECALC);
				setState(1887);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1886);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1889);
				((TableOptionRecalculationContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionRecalculationContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 22:
				_localctx = new TableOptionPersistentContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(1890);
				match(STATS_PERSISTENT);
				setState(1892);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1891);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1894);
				((TableOptionPersistentContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPersistentContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 23:
				_localctx = new TableOptionSamplePageContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(1895);
				match(STATS_SAMPLE_PAGES);
				setState(1897);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1896);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1899);
				decimalLiteral();
				}
				break;
			case 24:
				_localctx = new TableOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(1900);
				match(TABLESPACE);
				setState(1901);
				uid();
				setState(1903);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
				case 1:
					{
					setState(1902);
					tablespaceStorage();
					}
					break;
				}
				}
				break;
			case 25:
				_localctx = new TableOptionTableTypeContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(1905);
				match(TABLE_TYPE);
				setState(1906);
				match(EQUAL_SYMBOL);
				setState(1907);
				tableType();
				}
				break;
			case 26:
				_localctx = new TableOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(1908);
				tablespaceStorage();
				}
				break;
			case 27:
				_localctx = new TableOptionUnionContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(1909);
				match(UNION);
				setState(1911);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1910);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1913);
				match(LR_BRACKET);
				setState(1914);
				tables();
				setState(1915);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableTypeContext extends ParserRuleContext {
		public TerminalNode MYSQL() { return getToken(CqlParser.MYSQL, 0); }
		public TerminalNode ODBC() { return getToken(CqlParser.ODBC, 0); }
		public TableTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableTypeContext tableType() throws RecognitionException {
		TableTypeContext _localctx = new TableTypeContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_tableType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1919);
			_la = _input.LA(1);
			if ( !(_la==MYSQL || _la==ODBC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceStorageContext extends ParserRuleContext {
		public TerminalNode STORAGE() { return getToken(CqlParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(CqlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(CqlParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(CqlParser.DEFAULT, 0); }
		public TablespaceStorageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceStorage; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTablespaceStorage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceStorageContext tablespaceStorage() throws RecognitionException {
		TablespaceStorageContext _localctx = new TablespaceStorageContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_tablespaceStorage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1921);
			match(STORAGE);
			setState(1922);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionsContext extends ParserRuleContext {
		public DecimalLiteralContext count;
		public DecimalLiteralContext subCount;
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public List<TerminalNode> BY() { return getTokens(CqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(CqlParser.BY, i);
		}
		public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
			return getRuleContext(PartitionFunctionDefinitionContext.class,0);
		}
		public TerminalNode PARTITIONS() { return getToken(CqlParser.PARTITIONS, 0); }
		public TerminalNode SUBPARTITION() { return getToken(CqlParser.SUBPARTITION, 0); }
		public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
			return getRuleContext(SubpartitionFunctionDefinitionContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode SUBPARTITIONS() { return getToken(CqlParser.SUBPARTITIONS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinitions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPartitionDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionsContext partitionDefinitions() throws RecognitionException {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_partitionDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1924);
			match(PARTITION);
			setState(1925);
			match(BY);
			setState(1926);
			partitionFunctionDefinition();
			setState(1929);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITIONS) {
				{
				setState(1927);
				match(PARTITIONS);
				setState(1928);
				((PartitionDefinitionsContext)_localctx).count = decimalLiteral();
				}
			}

			setState(1938);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUBPARTITION) {
				{
				setState(1931);
				match(SUBPARTITION);
				setState(1932);
				match(BY);
				setState(1933);
				subpartitionFunctionDefinition();
				setState(1936);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITIONS) {
					{
					setState(1934);
					match(SUBPARTITIONS);
					setState(1935);
					((PartitionDefinitionsContext)_localctx).subCount = decimalLiteral();
					}
				}

				}
			}

			setState(1951);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,221,_ctx) ) {
			case 1:
				{
				setState(1940);
				match(LR_BRACKET);
				setState(1941);
				partitionDefinition();
				setState(1946);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1942);
					match(COMMA);
					setState(1943);
					partitionDefinition();
					}
					}
					setState(1948);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1949);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionFunctionDefinitionContext extends ParserRuleContext {
		public PartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionFunctionDefinition; }
	 
		public PartitionFunctionDefinitionContext() { }
		public void copyFrom(PartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionFunctionKeyContext extends PartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(CqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(CqlParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(CqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(CqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(CqlParser.TWO_DECIMAL, 0); }
		public PartitionFunctionKeyContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPartitionFunctionKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionHashContext extends PartitionFunctionDefinitionContext {
		public TerminalNode HASH() { return getToken(CqlParser.HASH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(CqlParser.LINEAR, 0); }
		public PartitionFunctionHashContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPartitionFunctionHash(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionListContext extends PartitionFunctionDefinitionContext {
		public TerminalNode LIST() { return getToken(CqlParser.LIST, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMNS() { return getToken(CqlParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PartitionFunctionListContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPartitionFunctionList(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionRangeContext extends PartitionFunctionDefinitionContext {
		public TerminalNode RANGE() { return getToken(CqlParser.RANGE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMNS() { return getToken(CqlParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PartitionFunctionRangeContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPartitionFunctionRange(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionFunctionDefinitionContext partitionFunctionDefinition() throws RecognitionException {
		PartitionFunctionDefinitionContext _localctx = new PartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_partitionFunctionDefinition);
		int _la;
		try {
			setState(1998);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
			case 1:
				_localctx = new PartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1954);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1953);
					match(LINEAR);
					}
				}

				setState(1956);
				match(HASH);
				setState(1957);
				match(LR_BRACKET);
				setState(1958);
				expression(0);
				setState(1959);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new PartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1962);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1961);
					match(LINEAR);
					}
				}

				setState(1964);
				match(KEY);
				setState(1968);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(1965);
					match(ALGORITHM);
					setState(1966);
					match(EQUAL_SYMBOL);
					setState(1967);
					((PartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((PartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1970);
				match(LR_BRACKET);
				setState(1971);
				uidList();
				setState(1972);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new PartitionFunctionRangeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1974);
				match(RANGE);
				setState(1984);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(1975);
					match(LR_BRACKET);
					setState(1976);
					expression(0);
					setState(1977);
					match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(1979);
					match(COLUMNS);
					setState(1980);
					match(LR_BRACKET);
					setState(1981);
					uidList();
					setState(1982);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new PartitionFunctionListContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1986);
				match(LIST);
				setState(1996);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(1987);
					match(LR_BRACKET);
					setState(1988);
					expression(0);
					setState(1989);
					match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(1991);
					match(COLUMNS);
					setState(1992);
					match(LR_BRACKET);
					setState(1993);
					uidList();
					setState(1994);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionFunctionDefinitionContext extends ParserRuleContext {
		public SubpartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionFunctionDefinition; }
	 
		public SubpartitionFunctionDefinitionContext() { }
		public void copyFrom(SubpartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubPartitionFunctionHashContext extends SubpartitionFunctionDefinitionContext {
		public TerminalNode HASH() { return getToken(CqlParser.HASH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(CqlParser.LINEAR, 0); }
		public SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSubPartitionFunctionHash(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubPartitionFunctionKeyContext extends SubpartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(CqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(CqlParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(CqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(CqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(CqlParser.TWO_DECIMAL, 0); }
		public SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSubPartitionFunctionKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() throws RecognitionException {
		SubpartitionFunctionDefinitionContext _localctx = new SubpartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_subpartitionFunctionDefinition);
		int _la;
		try {
			setState(2021);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				_localctx = new SubPartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2001);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(2000);
					match(LINEAR);
					}
				}

				setState(2003);
				match(HASH);
				setState(2004);
				match(LR_BRACKET);
				setState(2005);
				expression(0);
				setState(2006);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new SubPartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2009);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(2008);
					match(LINEAR);
					}
				}

				setState(2011);
				match(KEY);
				setState(2015);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(2012);
					match(ALGORITHM);
					setState(2013);
					match(EQUAL_SYMBOL);
					setState(2014);
					((SubPartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((SubPartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2017);
				match(LR_BRACKET);
				setState(2018);
				uidList();
				setState(2019);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionContext extends ParserRuleContext {
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinition; }
	 
		public PartitionDefinitionContext() { }
		public void copyFrom(PartitionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionComparisonContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(CqlParser.VALUES, 0); }
		public TerminalNode LESS() { return getToken(CqlParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(CqlParser.THAN, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(CqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(CqlParser.LR_BRACKET, i);
		}
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(CqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(CqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionComparisonContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPartitionComparison(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionListAtomContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(CqlParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(CqlParser.IN, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(CqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(CqlParser.LR_BRACKET, i);
		}
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(CqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(CqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionListAtomContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPartitionListAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionListVectorContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(CqlParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(CqlParser.IN, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(CqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(CqlParser.LR_BRACKET, i);
		}
		public List<PartitionDefinerVectorContext> partitionDefinerVector() {
			return getRuleContexts(PartitionDefinerVectorContext.class);
		}
		public PartitionDefinerVectorContext partitionDefinerVector(int i) {
			return getRuleContext(PartitionDefinerVectorContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(CqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(CqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionListVectorContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPartitionListVector(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionSimpleContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public PartitionSimpleContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPartitionSimple(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionContext partitionDefinition() throws RecognitionException {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_partitionDefinition);
		int _la;
		try {
			setState(2169);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
			case 1:
				_localctx = new PartitionComparisonContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2023);
				match(PARTITION);
				setState(2024);
				uid();
				setState(2025);
				match(VALUES);
				setState(2026);
				match(LESS);
				setState(2027);
				match(THAN);
				setState(2028);
				match(LR_BRACKET);
				setState(2029);
				partitionDefinerAtom();
				setState(2034);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2030);
					match(COMMA);
					setState(2031);
					partitionDefinerAtom();
					}
					}
					setState(2036);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2037);
				match(RR_BRACKET);
				setState(2041);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 359)) & ~0x3f) == 0 && ((1L << (_la - 359)) & ((1L << (COMMENT - 359)) | (1L << (DATA - 359)) | (1L << (ENGINE - 359)))) != 0) || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (MAX_ROWS - 485)) | (1L << (MIN_ROWS - 485)) | (1L << (NODEGROUP - 485)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(2038);
					partitionOption();
					}
					}
					setState(2043);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2055);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2044);
					match(LR_BRACKET);
					setState(2045);
					subpartitionDefinition();
					setState(2050);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2046);
						match(COMMA);
						setState(2047);
						subpartitionDefinition();
						}
						}
						setState(2052);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2053);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				_localctx = new PartitionComparisonContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2057);
				match(PARTITION);
				setState(2058);
				uid();
				setState(2059);
				match(VALUES);
				setState(2060);
				match(LESS);
				setState(2061);
				match(THAN);
				setState(2062);
				partitionDefinerAtom();
				setState(2066);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 359)) & ~0x3f) == 0 && ((1L << (_la - 359)) & ((1L << (COMMENT - 359)) | (1L << (DATA - 359)) | (1L << (ENGINE - 359)))) != 0) || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (MAX_ROWS - 485)) | (1L << (MIN_ROWS - 485)) | (1L << (NODEGROUP - 485)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(2063);
					partitionOption();
					}
					}
					setState(2068);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2080);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2069);
					match(LR_BRACKET);
					setState(2070);
					subpartitionDefinition();
					setState(2075);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2071);
						match(COMMA);
						setState(2072);
						subpartitionDefinition();
						}
						}
						setState(2077);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2078);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 3:
				_localctx = new PartitionListAtomContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2082);
				match(PARTITION);
				setState(2083);
				uid();
				setState(2084);
				match(VALUES);
				setState(2085);
				match(IN);
				setState(2086);
				match(LR_BRACKET);
				setState(2087);
				partitionDefinerAtom();
				setState(2092);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2088);
					match(COMMA);
					setState(2089);
					partitionDefinerAtom();
					}
					}
					setState(2094);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2095);
				match(RR_BRACKET);
				setState(2099);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 359)) & ~0x3f) == 0 && ((1L << (_la - 359)) & ((1L << (COMMENT - 359)) | (1L << (DATA - 359)) | (1L << (ENGINE - 359)))) != 0) || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (MAX_ROWS - 485)) | (1L << (MIN_ROWS - 485)) | (1L << (NODEGROUP - 485)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(2096);
					partitionOption();
					}
					}
					setState(2101);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2113);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2102);
					match(LR_BRACKET);
					setState(2103);
					subpartitionDefinition();
					setState(2108);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2104);
						match(COMMA);
						setState(2105);
						subpartitionDefinition();
						}
						}
						setState(2110);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2111);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				_localctx = new PartitionListVectorContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2115);
				match(PARTITION);
				setState(2116);
				uid();
				setState(2117);
				match(VALUES);
				setState(2118);
				match(IN);
				setState(2119);
				match(LR_BRACKET);
				setState(2120);
				partitionDefinerVector();
				setState(2125);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2121);
					match(COMMA);
					setState(2122);
					partitionDefinerVector();
					}
					}
					setState(2127);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2128);
				match(RR_BRACKET);
				setState(2132);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 359)) & ~0x3f) == 0 && ((1L << (_la - 359)) & ((1L << (COMMENT - 359)) | (1L << (DATA - 359)) | (1L << (ENGINE - 359)))) != 0) || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (MAX_ROWS - 485)) | (1L << (MIN_ROWS - 485)) | (1L << (NODEGROUP - 485)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(2129);
					partitionOption();
					}
					}
					setState(2134);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2146);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2135);
					match(LR_BRACKET);
					setState(2136);
					subpartitionDefinition();
					setState(2141);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2137);
						match(COMMA);
						setState(2138);
						subpartitionDefinition();
						}
						}
						setState(2143);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2144);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 5:
				_localctx = new PartitionSimpleContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2148);
				match(PARTITION);
				setState(2149);
				uid();
				setState(2153);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 359)) & ~0x3f) == 0 && ((1L << (_la - 359)) & ((1L << (COMMENT - 359)) | (1L << (DATA - 359)) | (1L << (ENGINE - 359)))) != 0) || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (MAX_ROWS - 485)) | (1L << (MIN_ROWS - 485)) | (1L << (NODEGROUP - 485)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(2150);
					partitionOption();
					}
					}
					setState(2155);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2167);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2156);
					match(LR_BRACKET);
					setState(2157);
					subpartitionDefinition();
					setState(2162);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2158);
						match(COMMA);
						setState(2159);
						subpartitionDefinition();
						}
						}
						setState(2164);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2165);
					match(RR_BRACKET);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinerAtomContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode MAXVALUE() { return getToken(CqlParser.MAXVALUE, 0); }
		public PartitionDefinerAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerAtom; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPartitionDefinerAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinerAtomContext partitionDefinerAtom() throws RecognitionException {
		PartitionDefinerAtomContext _localctx = new PartitionDefinerAtomContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_partitionDefinerAtom);
		try {
			setState(2174);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2171);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2172);
				expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2173);
				match(MAXVALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinerVectorContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public PartitionDefinerVectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerVector; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPartitionDefinerVector(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinerVectorContext partitionDefinerVector() throws RecognitionException {
		PartitionDefinerVectorContext _localctx = new PartitionDefinerVectorContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_partitionDefinerVector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2176);
			match(LR_BRACKET);
			setState(2177);
			partitionDefinerAtom();
			setState(2180); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2178);
				match(COMMA);
				setState(2179);
				partitionDefinerAtom();
				}
				}
				setState(2182); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COMMA );
			setState(2184);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionDefinitionContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(CqlParser.SUBPARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionDefinition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSubpartitionDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubpartitionDefinitionContext subpartitionDefinition() throws RecognitionException {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_subpartitionDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2186);
			match(SUBPARTITION);
			setState(2187);
			uid();
			setState(2191);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DEFAULT || _la==INDEX || ((((_la - 359)) & ~0x3f) == 0 && ((1L << (_la - 359)) & ((1L << (COMMENT - 359)) | (1L << (DATA - 359)) | (1L << (ENGINE - 359)))) != 0) || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (MAX_ROWS - 485)) | (1L << (MIN_ROWS - 485)) | (1L << (NODEGROUP - 485)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
				{
				{
				setState(2188);
				partitionOption();
				}
				}
				setState(2193);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionOptionContext extends ParserRuleContext {
		public PartitionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionOption; }
	 
		public PartitionOptionContext() { }
		public void copyFrom(PartitionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionOptionCommentContext extends PartitionOptionContext {
		public Token comment;
		public TerminalNode COMMENT() { return getToken(CqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionCommentContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPartitionOptionComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionNodeGroupContext extends PartitionOptionContext {
		public UidContext nodegroup;
		public TerminalNode NODEGROUP() { return getToken(CqlParser.NODEGROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionNodeGroupContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPartitionOptionNodeGroup(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionIndexDirectoryContext extends PartitionOptionContext {
		public Token indexDirectory;
		public TerminalNode INDEX() { return getToken(CqlParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(CqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionIndexDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPartitionOptionIndexDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionMaxRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext maxRows;
		public TerminalNode MAX_ROWS() { return getToken(CqlParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMaxRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPartitionOptionMaxRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionTablespaceContext extends PartitionOptionContext {
		public UidContext tablespace;
		public TerminalNode TABLESPACE() { return getToken(CqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionTablespaceContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPartitionOptionTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionEngineContext extends PartitionOptionContext {
		public TerminalNode ENGINE() { return getToken(CqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(CqlParser.DEFAULT, 0); }
		public TerminalNode STORAGE() { return getToken(CqlParser.STORAGE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionEngineContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPartitionOptionEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionMinRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext minRows;
		public TerminalNode MIN_ROWS() { return getToken(CqlParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMinRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPartitionOptionMinRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionDataDirectoryContext extends PartitionOptionContext {
		public Token dataDirectory;
		public TerminalNode DATA() { return getToken(CqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(CqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionDataDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPartitionOptionDataDirectory(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionOptionContext partitionOption() throws RecognitionException {
		PartitionOptionContext _localctx = new PartitionOptionContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_partitionOption);
		int _la;
		try {
			setState(2242);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
			case ENGINE:
			case STORAGE:
				_localctx = new PartitionOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2195);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2194);
					match(DEFAULT);
					}
				}

				setState(2198);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(2197);
					match(STORAGE);
					}
				}

				setState(2200);
				match(ENGINE);
				setState(2202);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2201);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2204);
				engineName();
				}
				break;
			case COMMENT:
				_localctx = new PartitionOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2205);
				match(COMMENT);
				setState(2207);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2206);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2209);
				((PartitionOptionCommentContext)_localctx).comment = match(STRING_LITERAL);
				}
				break;
			case DATA:
				_localctx = new PartitionOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2210);
				match(DATA);
				setState(2211);
				match(DIRECTORY);
				setState(2213);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2212);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2215);
				((PartitionOptionDataDirectoryContext)_localctx).dataDirectory = match(STRING_LITERAL);
				}
				break;
			case INDEX:
				_localctx = new PartitionOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2216);
				match(INDEX);
				setState(2217);
				match(DIRECTORY);
				setState(2219);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2218);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2221);
				((PartitionOptionIndexDirectoryContext)_localctx).indexDirectory = match(STRING_LITERAL);
				}
				break;
			case MAX_ROWS:
				_localctx = new PartitionOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2222);
				match(MAX_ROWS);
				setState(2224);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2223);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2226);
				((PartitionOptionMaxRowsContext)_localctx).maxRows = decimalLiteral();
				}
				break;
			case MIN_ROWS:
				_localctx = new PartitionOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2227);
				match(MIN_ROWS);
				setState(2229);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2228);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2231);
				((PartitionOptionMinRowsContext)_localctx).minRows = decimalLiteral();
				}
				break;
			case TABLESPACE:
				_localctx = new PartitionOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2232);
				match(TABLESPACE);
				setState(2234);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2233);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2236);
				((PartitionOptionTablespaceContext)_localctx).tablespace = uid();
				}
				break;
			case NODEGROUP:
				_localctx = new PartitionOptionNodeGroupContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2237);
				match(NODEGROUP);
				setState(2239);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2238);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2241);
				((PartitionOptionNodeGroupContext)_localctx).nodegroup = uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseContext extends ParserRuleContext {
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabase; }
	 
		public AlterDatabaseContext() { }
		public void copyFrom(AlterDatabaseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterUpgradeNameContext extends AlterDatabaseContext {
		public Token dbFormat;
		public TerminalNode ALTER() { return getToken(CqlParser.ALTER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode UPGRADE() { return getToken(CqlParser.UPGRADE, 0); }
		public TerminalNode DATA() { return getToken(CqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(CqlParser.DIRECTORY, 0); }
		public TerminalNode NAME() { return getToken(CqlParser.NAME, 0); }
		public TerminalNode DATABASE() { return getToken(CqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(CqlParser.SCHEMA, 0); }
		public AlterUpgradeNameContext(AlterDatabaseContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterUpgradeName(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterSimpleDatabaseContext extends AlterDatabaseContext {
		public Token dbFormat;
		public TerminalNode ALTER() { return getToken(CqlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(CqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(CqlParser.SCHEMA, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public AlterSimpleDatabaseContext(AlterDatabaseContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterSimpleDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseContext alterDatabase() throws RecognitionException {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_alterDatabase);
		int _la;
		try {
			setState(2262);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,267,_ctx) ) {
			case 1:
				_localctx = new AlterSimpleDatabaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2244);
				match(ALTER);
				setState(2245);
				((AlterSimpleDatabaseContext)_localctx).dbFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterSimpleDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2247);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,265,_ctx) ) {
				case 1:
					{
					setState(2246);
					uid();
					}
					break;
				}
				setState(2250); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2249);
					createDatabaseOption();
					}
					}
					setState(2252); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==CHAR || _la==CHARSET );
				}
				break;
			case 2:
				_localctx = new AlterUpgradeNameContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2254);
				match(ALTER);
				setState(2255);
				((AlterUpgradeNameContext)_localctx).dbFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterUpgradeNameContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2256);
				uid();
				setState(2257);
				match(UPGRADE);
				setState(2258);
				match(DATA);
				setState(2259);
				match(DIRECTORY);
				setState(2260);
				match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterEventContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(CqlParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(CqlParser.EVENT, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(CqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(CqlParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(CqlParser.SCHEDULE, 0); }
		public ScheduleExpressionContext scheduleExpression() {
			return getRuleContext(ScheduleExpressionContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(CqlParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(CqlParser.PRESERVE, 0); }
		public TerminalNode RENAME() { return getToken(CqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(CqlParser.TO, 0); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(CqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode DO() { return getToken(CqlParser.DO, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TerminalNode NOT() { return getToken(CqlParser.NOT, 0); }
		public AlterEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEvent; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEventContext alterEvent() throws RecognitionException {
		AlterEventContext _localctx = new AlterEventContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_alterEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2264);
			match(ALTER);
			setState(2266);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2265);
				ownerStatement();
				}
			}

			setState(2268);
			match(EVENT);
			setState(2269);
			fullId();
			setState(2273);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
			case 1:
				{
				setState(2270);
				match(ON);
				setState(2271);
				match(SCHEDULE);
				setState(2272);
				scheduleExpression();
				}
				break;
			}
			setState(2281);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2275);
				match(ON);
				setState(2276);
				match(COMPLETION);
				setState(2278);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2277);
					match(NOT);
					}
				}

				setState(2280);
				match(PRESERVE);
				}
			}

			setState(2286);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				{
				setState(2283);
				match(RENAME);
				setState(2284);
				match(TO);
				setState(2285);
				fullId();
				}
				break;
			}
			setState(2289);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(2288);
				enableType();
				}
			}

			setState(2293);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(2291);
				match(COMMENT);
				setState(2292);
				match(STRING_LITERAL);
				}
			}

			setState(2297);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
			case 1:
				{
				setState(2295);
				match(DO);
				setState(2296);
				routineBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFunctionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(CqlParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(CqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionContext alterFunction() throws RecognitionException {
		AlterFunctionContext _localctx = new AlterFunctionContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_alterFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2299);
			match(ALTER);
			setState(2300);
			match(FUNCTION);
			setState(2301);
			fullId();
			setState(2305);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & ((1L << (MODIFIES - 109)) | (1L << (NOT - 109)) | (1L << (READS - 109)) | (1L << (SQL - 109)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				setState(2302);
				routineOption();
				}
				}
				setState(2307);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterInstanceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(CqlParser.ALTER, 0); }
		public TerminalNode INSTANCE() { return getToken(CqlParser.INSTANCE, 0); }
		public TerminalNode ROTATE() { return getToken(CqlParser.ROTATE, 0); }
		public TerminalNode INNODB() { return getToken(CqlParser.INNODB, 0); }
		public TerminalNode MASTER() { return getToken(CqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(CqlParser.KEY, 0); }
		public AlterInstanceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterInstance; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterInstance(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterInstanceContext alterInstance() throws RecognitionException {
		AlterInstanceContext _localctx = new AlterInstanceContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_alterInstance);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2308);
			match(ALTER);
			setState(2309);
			match(INSTANCE);
			setState(2310);
			match(ROTATE);
			setState(2311);
			match(INNODB);
			setState(2312);
			match(MASTER);
			setState(2313);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLogfileGroupContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(CqlParser.ALTER, 0); }
		public TerminalNode LOGFILE() { return getToken(CqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(CqlParser.GROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ADD() { return getToken(CqlParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(CqlParser.UNDOFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENGINE() { return getToken(CqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(CqlParser.INITIAL_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(CqlParser.WAIT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(CqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(CqlParser.EQUAL_SYMBOL, i);
		}
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroup; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLogfileGroupContext alterLogfileGroup() throws RecognitionException {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_alterLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2315);
			match(ALTER);
			setState(2316);
			match(LOGFILE);
			setState(2317);
			match(GROUP);
			setState(2318);
			uid();
			setState(2319);
			match(ADD);
			setState(2320);
			match(UNDOFILE);
			setState(2321);
			match(STRING_LITERAL);
			setState(2327);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2322);
				match(INITIAL_SIZE);
				setState(2324);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2323);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2326);
				fileSizeLiteral();
				}
			}

			setState(2330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2329);
				match(WAIT);
				}
			}

			setState(2332);
			match(ENGINE);
			setState(2334);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(2333);
				match(EQUAL_SYMBOL);
				}
			}

			setState(2336);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterProcedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(CqlParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(CqlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedure; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterProcedureContext alterProcedure() throws RecognitionException {
		AlterProcedureContext _localctx = new AlterProcedureContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_alterProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2338);
			match(ALTER);
			setState(2339);
			match(PROCEDURE);
			setState(2340);
			fullId();
			setState(2344);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & ((1L << (MODIFIES - 109)) | (1L << (NOT - 109)) | (1L << (READS - 109)) | (1L << (SQL - 109)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				setState(2341);
				routineOption();
				}
				}
				setState(2346);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterServerContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(CqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(CqlParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode OPTIONS() { return getToken(CqlParser.OPTIONS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServer; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterServerContext alterServer() throws RecognitionException {
		AlterServerContext _localctx = new AlterServerContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_alterServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2347);
			match(ALTER);
			setState(2348);
			match(SERVER);
			setState(2349);
			uid();
			setState(2350);
			match(OPTIONS);
			setState(2351);
			match(LR_BRACKET);
			setState(2352);
			serverOption();
			setState(2357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2353);
				match(COMMA);
				setState(2354);
				serverOption();
				}
				}
				setState(2359);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2360);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableContext extends ParserRuleContext {
		public Token intimeAction;
		public TerminalNode ALTER() { return getToken(CqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(CqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode IGNORE() { return getToken(CqlParser.IGNORE, 0); }
		public List<AlterSpecificationContext> alterSpecification() {
			return getRuleContexts(AlterSpecificationContext.class);
		}
		public AlterSpecificationContext alterSpecification(int i) {
			return getRuleContext(AlterSpecificationContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode ONLINE() { return getToken(CqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(CqlParser.OFFLINE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableContext alterTable() throws RecognitionException {
		AlterTableContext _localctx = new AlterTableContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_alterTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2362);
			match(ALTER);
			setState(2364);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(2363);
				((AlterTableContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((AlterTableContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2367);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2366);
				match(IGNORE);
				}
			}

			setState(2369);
			match(TABLE);
			setState(2370);
			tableName();
			setState(2379);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
			case 1:
				{
				setState(2371);
				alterSpecification();
				setState(2376);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2372);
					match(COMMA);
					setState(2373);
					alterSpecification();
					}
					}
					setState(2378);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(2382);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2381);
				partitionDefinitions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceContext extends ParserRuleContext {
		public Token objectAction;
		public TerminalNode ALTER() { return getToken(CqlParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(CqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATAFILE() { return getToken(CqlParser.DATAFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENGINE() { return getToken(CqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode ADD() { return getToken(CqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(CqlParser.DROP, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(CqlParser.INITIAL_SIZE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(CqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(CqlParser.EQUAL_SYMBOL, i);
		}
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(CqlParser.WAIT, 0); }
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespace; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceContext alterTablespace() throws RecognitionException {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_alterTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2384);
			match(ALTER);
			setState(2385);
			match(TABLESPACE);
			setState(2386);
			uid();
			setState(2387);
			((AlterTablespaceContext)_localctx).objectAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
				((AlterTablespaceContext)_localctx).objectAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2388);
			match(DATAFILE);
			setState(2389);
			match(STRING_LITERAL);
			setState(2393);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2390);
				match(INITIAL_SIZE);
				setState(2391);
				match(EQUAL_SYMBOL);
				setState(2392);
				fileSizeLiteral();
				}
			}

			setState(2396);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2395);
				match(WAIT);
				}
			}

			setState(2398);
			match(ENGINE);
			setState(2400);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(2399);
				match(EQUAL_SYMBOL);
				}
			}

			setState(2402);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewContext extends ParserRuleContext {
		public Token algType;
		public Token secContext;
		public Token checkOpt;
		public TerminalNode ALTER() { return getToken(CqlParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(CqlParser.VIEW, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(CqlParser.AS, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode ALGORITHM() { return getToken(CqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode SQL() { return getToken(CqlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(CqlParser.SECURITY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(CqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(CqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(CqlParser.OPTION, 0); }
		public TerminalNode UNDEFINED() { return getToken(CqlParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(CqlParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(CqlParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(CqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(CqlParser.INVOKER, 0); }
		public TerminalNode CASCADED() { return getToken(CqlParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(CqlParser.LOCAL, 0); }
		public AlterViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterView; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewContext alterView() throws RecognitionException {
		AlterViewContext _localctx = new AlterViewContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_alterView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2404);
			match(ALTER);
			setState(2408);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(2405);
				match(ALGORITHM);
				setState(2406);
				match(EQUAL_SYMBOL);
				setState(2407);
				((AlterViewContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((AlterViewContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2411);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2410);
				ownerStatement();
				}
			}

			setState(2416);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(2413);
				match(SQL);
				setState(2414);
				match(SECURITY);
				setState(2415);
				((AlterViewContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((AlterViewContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2418);
			match(VIEW);
			setState(2419);
			fullId();
			setState(2424);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(2420);
				match(LR_BRACKET);
				setState(2421);
				uidList();
				setState(2422);
				match(RR_BRACKET);
				}
			}

			setState(2426);
			match(AS);
			setState(2427);
			selectStatement();
			setState(2434);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2428);
				match(WITH);
				setState(2430);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(2429);
					((AlterViewContext)_localctx).checkOpt = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						((AlterViewContext)_localctx).checkOpt = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2432);
				match(CHECK);
				setState(2433);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSpecificationContext extends ParserRuleContext {
		public AlterSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSpecification; }
	 
		public AlterSpecificationContext() { }
		public void copyFrom(AlterSpecificationContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterByDisableKeysContext extends AlterSpecificationContext {
		public TerminalNode DISABLE() { return getToken(CqlParser.DISABLE, 0); }
		public TerminalNode KEYS() { return getToken(CqlParser.KEYS, 0); }
		public AlterByDisableKeysContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByDisableKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDefaultCharsetContext extends AlterSpecificationContext {
		public TerminalNode CHARACTER() { return getToken(CqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(CqlParser.SET, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(CqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(CqlParser.EQUAL_SYMBOL, i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(CqlParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(CqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public AlterByDefaultCharsetContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByDefaultCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRenameColumnContext extends AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public TerminalNode RENAME() { return getToken(CqlParser.RENAME, 0); }
		public TerminalNode COLUMN() { return getToken(CqlParser.COLUMN, 0); }
		public TerminalNode TO() { return getToken(CqlParser.TO, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByRenameColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByRenameColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByConvertCharsetContext extends AlterSpecificationContext {
		public TerminalNode CONVERT() { return getToken(CqlParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(CqlParser.TO, 0); }
		public TerminalNode CHARACTER() { return getToken(CqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(CqlParser.SET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(CqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public AlterByConvertCharsetContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByConvertCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddPartitionContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(CqlParser.ADD, 0); }
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public AlterByAddPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByAddPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddForeignKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public UidContext indexName;
		public TerminalNode ADD() { return getToken(CqlParser.ADD, 0); }
		public TerminalNode FOREIGN() { return getToken(CqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(CqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(CqlParser.CONSTRAINT, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByAddForeignKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByAddForeignKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRenameIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode RENAME() { return getToken(CqlParser.RENAME, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode TO() { return getToken(CqlParser.TO, 0); }
		public TerminalNode INDEX() { return getToken(CqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(CqlParser.KEY, 0); }
		public AlterByRenameIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByRenameIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRemovePartitioningContext extends AlterSpecificationContext {
		public TerminalNode REMOVE() { return getToken(CqlParser.REMOVE, 0); }
		public TerminalNode PARTITIONING() { return getToken(CqlParser.PARTITIONING, 0); }
		public AlterByRemovePartitioningContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByRemovePartitioning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRenameContext extends AlterSpecificationContext {
		public Token renameFormat;
		public TerminalNode RENAME() { return getToken(CqlParser.RENAME, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode TO() { return getToken(CqlParser.TO, 0); }
		public TerminalNode AS() { return getToken(CqlParser.AS, 0); }
		public AlterByRenameContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByRename(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByOptimizePartitionContext extends AlterSpecificationContext {
		public TerminalNode OPTIMIZE() { return getToken(CqlParser.OPTIMIZE, 0); }
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(CqlParser.ALL, 0); }
		public AlterByOptimizePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByOptimizePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByImportTablespaceContext extends AlterSpecificationContext {
		public TerminalNode IMPORT() { return getToken(CqlParser.IMPORT, 0); }
		public TerminalNode TABLESPACE() { return getToken(CqlParser.TABLESPACE, 0); }
		public AlterByImportTablespaceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByImportTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByCoalescePartitionContext extends AlterSpecificationContext {
		public TerminalNode COALESCE() { return getToken(CqlParser.COALESCE, 0); }
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public AlterByCoalescePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByCoalescePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropConstraintCheckContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(CqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(CqlParser.CONSTRAINT, 0); }
		public TerminalNode CHECK() { return getToken(CqlParser.CHECK, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public AlterByDropConstraintCheckContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByDropConstraintCheck(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddColumnsContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(CqlParser.ADD, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<ColumnDefinitionContext> columnDefinition() {
			return getRuleContexts(ColumnDefinitionContext.class);
		}
		public ColumnDefinitionContext columnDefinition(int i) {
			return getRuleContext(ColumnDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMN() { return getToken(CqlParser.COLUMN, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public AlterByAddColumnsContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByAddColumns(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAlterIndexVisibilityContext extends AlterSpecificationContext {
		public TerminalNode ALTER() { return getToken(CqlParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(CqlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VISIBLE() { return getToken(CqlParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(CqlParser.INVISIBLE, 0); }
		public AlterByAlterIndexVisibilityContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByAlterIndexVisibility(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropForeignKeyContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(CqlParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(CqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(CqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public AlterByDropForeignKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByDropForeignKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddCheckTableConstraintContext extends AlterSpecificationContext {
		public UidContext name;
		public TerminalNode ADD() { return getToken(CqlParser.ADD, 0); }
		public TerminalNode CHECK() { return getToken(CqlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(CqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public AlterByAddCheckTableConstraintContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByAddCheckTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRebuildPartitionContext extends AlterSpecificationContext {
		public TerminalNode REBUILD() { return getToken(CqlParser.REBUILD, 0); }
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(CqlParser.ALL, 0); }
		public AlterByRebuildPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByRebuildPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByUpgradePartitioningContext extends AlterSpecificationContext {
		public TerminalNode UPGRADE() { return getToken(CqlParser.UPGRADE, 0); }
		public TerminalNode PARTITIONING() { return getToken(CqlParser.PARTITIONING, 0); }
		public AlterByUpgradePartitioningContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByUpgradePartitioning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRepairPartitionContext extends AlterSpecificationContext {
		public TerminalNode REPAIR() { return getToken(CqlParser.REPAIR, 0); }
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(CqlParser.ALL, 0); }
		public AlterByRepairPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByRepairPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByExchangePartitionContext extends AlterSpecificationContext {
		public Token validationFormat;
		public TerminalNode EXCHANGE() { return getToken(CqlParser.EXCHANGE, 0); }
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(CqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(CqlParser.WITH, i);
		}
		public TerminalNode TABLE() { return getToken(CqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode VALIDATION() { return getToken(CqlParser.VALIDATION, 0); }
		public TerminalNode WITHOUT() { return getToken(CqlParser.WITHOUT, 0); }
		public AlterByExchangePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByExchangePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode ADD() { return getToken(CqlParser.ADD, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(CqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(CqlParser.KEY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public AlterByAddIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByAddIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropColumnContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(CqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(CqlParser.COLUMN, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(CqlParser.RESTRICT, 0); }
		public AlterByDropColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByDropColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByImportPartitionContext extends AlterSpecificationContext {
		public TerminalNode IMPORT() { return getToken(CqlParser.IMPORT, 0); }
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public TerminalNode TABLESPACE() { return getToken(CqlParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(CqlParser.ALL, 0); }
		public AlterByImportPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByImportPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByChangeDefaultContext extends AlterSpecificationContext {
		public TerminalNode ALTER() { return getToken(CqlParser.ALTER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SET() { return getToken(CqlParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(CqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public TerminalNode DROP() { return getToken(CqlParser.DROP, 0); }
		public TerminalNode COLUMN() { return getToken(CqlParser.COLUMN, 0); }
		public AlterByChangeDefaultContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByChangeDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByForceContext extends AlterSpecificationContext {
		public TerminalNode FORCE() { return getToken(CqlParser.FORCE, 0); }
		public AlterByForceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByForce(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropPartitionContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(CqlParser.DROP, 0); }
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public AlterByDropPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByDropPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddSpecialIndexContext extends AlterSpecificationContext {
		public Token keyType;
		public Token indexFormat;
		public TerminalNode ADD() { return getToken(CqlParser.ADD, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(CqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(CqlParser.SPATIAL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(CqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(CqlParser.KEY, 0); }
		public AlterByAddSpecialIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByAddSpecialIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByModifyColumnContext extends AlterSpecificationContext {
		public TerminalNode MODIFY() { return getToken(CqlParser.MODIFY, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(CqlParser.COLUMN, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(CqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(CqlParser.AFTER, 0); }
		public AlterByModifyColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByModifyColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByTableOptionContext extends AlterSpecificationContext {
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public AlterByTableOptionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByTableOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropPrimaryKeyContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(CqlParser.DROP, 0); }
		public TerminalNode PRIMARY() { return getToken(CqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(CqlParser.KEY, 0); }
		public AlterByDropPrimaryKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByDropPrimaryKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByLockContext extends AlterSpecificationContext {
		public Token lockType;
		public TerminalNode LOCK() { return getToken(CqlParser.LOCK, 0); }
		public TerminalNode DEFAULT() { return getToken(CqlParser.DEFAULT, 0); }
		public TerminalNode NONE() { return getToken(CqlParser.NONE, 0); }
		public TerminalNode SHARED() { return getToken(CqlParser.SHARED, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(CqlParser.EXCLUSIVE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public AlterByLockContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByLock(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDiscardPartitionContext extends AlterSpecificationContext {
		public TerminalNode DISCARD() { return getToken(CqlParser.DISCARD, 0); }
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public TerminalNode TABLESPACE() { return getToken(CqlParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(CqlParser.ALL, 0); }
		public AlterByDiscardPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByDiscardPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDiscardTablespaceContext extends AlterSpecificationContext {
		public TerminalNode DISCARD() { return getToken(CqlParser.DISCARD, 0); }
		public TerminalNode TABLESPACE() { return getToken(CqlParser.TABLESPACE, 0); }
		public AlterByDiscardTablespaceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByDiscardTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByValidateContext extends AlterSpecificationContext {
		public Token validationFormat;
		public TerminalNode VALIDATION() { return getToken(CqlParser.VALIDATION, 0); }
		public TerminalNode WITHOUT() { return getToken(CqlParser.WITHOUT, 0); }
		public TerminalNode WITH() { return getToken(CqlParser.WITH, 0); }
		public AlterByValidateContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByValidate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddPrimaryKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode ADD() { return getToken(CqlParser.ADD, 0); }
		public TerminalNode PRIMARY() { return getToken(CqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(CqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(CqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByAddPrimaryKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByAddPrimaryKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByCheckPartitionContext extends AlterSpecificationContext {
		public TerminalNode CHECK() { return getToken(CqlParser.CHECK, 0); }
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(CqlParser.ALL, 0); }
		public AlterByCheckPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByCheckPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByEnableKeysContext extends AlterSpecificationContext {
		public TerminalNode ENABLE() { return getToken(CqlParser.ENABLE, 0); }
		public TerminalNode KEYS() { return getToken(CqlParser.KEYS, 0); }
		public AlterByEnableKeysContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByEnableKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByReorganizePartitionContext extends AlterSpecificationContext {
		public TerminalNode REORGANIZE() { return getToken(CqlParser.REORGANIZE, 0); }
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode INTO() { return getToken(CqlParser.INTO, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public AlterByReorganizePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByReorganizePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterBySetAlgorithmContext extends AlterSpecificationContext {
		public Token algType;
		public TerminalNode ALGORITHM() { return getToken(CqlParser.ALGORITHM, 0); }
		public TerminalNode DEFAULT() { return getToken(CqlParser.DEFAULT, 0); }
		public TerminalNode INSTANT() { return getToken(CqlParser.INSTANT, 0); }
		public TerminalNode INPLACE() { return getToken(CqlParser.INPLACE, 0); }
		public TerminalNode COPY() { return getToken(CqlParser.COPY, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public AlterBySetAlgorithmContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterBySetAlgorithm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAnalyzePartitionContext extends AlterSpecificationContext {
		public TerminalNode ANALYZE() { return getToken(CqlParser.ANALYZE, 0); }
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(CqlParser.ALL, 0); }
		public AlterByAnalyzePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByAnalyzePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByChangeColumnContext extends AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public UidContext afterColumn;
		public TerminalNode CHANGE() { return getToken(CqlParser.CHANGE, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLUMN() { return getToken(CqlParser.COLUMN, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(CqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(CqlParser.AFTER, 0); }
		public AlterByChangeColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByChangeColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddUniqueKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext indexName;
		public TerminalNode ADD() { return getToken(CqlParser.ADD, 0); }
		public TerminalNode UNIQUE() { return getToken(CqlParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(CqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(CqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(CqlParser.KEY, 0); }
		public AlterByAddUniqueKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByAddUniqueKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByTruncatePartitionContext extends AlterSpecificationContext {
		public TerminalNode TRUNCATE() { return getToken(CqlParser.TRUNCATE, 0); }
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(CqlParser.ALL, 0); }
		public AlterByTruncatePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByTruncatePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode DROP() { return getToken(CqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(CqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(CqlParser.KEY, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public AlterByDropIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddColumnContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(CqlParser.ADD, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(CqlParser.COLUMN, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(CqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(CqlParser.AFTER, 0); }
		public AlterByAddColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByAddColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByOrderContext extends AlterSpecificationContext {
		public TerminalNode ORDER() { return getToken(CqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(CqlParser.BY, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public AlterByOrderContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterByOrder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSpecificationContext alterSpecification() throws RecognitionException {
		AlterSpecificationContext _localctx = new AlterSpecificationContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_alterSpecification);
		int _la;
		try {
			int _alt;
			setState(2838);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
			case 1:
				_localctx = new AlterByTableOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2436);
				tableOption();
				setState(2443);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,298,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2438);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2437);
							match(COMMA);
							}
						}

						setState(2440);
						tableOption();
						}
						} 
					}
					setState(2445);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,298,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new AlterByAddColumnContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2446);
				match(ADD);
				setState(2448);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2447);
					match(COLUMN);
					}
				}

				setState(2451);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2450);
					ifNotExists();
					}
				}

				setState(2453);
				uid();
				setState(2454);
				columnDefinition();
				setState(2458);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2455);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2456);
					match(AFTER);
					setState(2457);
					uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				_localctx = new AlterByAddColumnsContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2460);
				match(ADD);
				setState(2462);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2461);
					match(COLUMN);
					}
				}

				setState(2465);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2464);
					ifNotExists();
					}
				}

				setState(2467);
				match(LR_BRACKET);
				setState(2468);
				uid();
				setState(2469);
				columnDefinition();
				setState(2476);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2470);
					match(COMMA);
					setState(2471);
					uid();
					setState(2472);
					columnDefinition();
					}
					}
					setState(2478);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2479);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new AlterByAddIndexContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2481);
				match(ADD);
				setState(2482);
				((AlterByAddIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByAddIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2484);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2483);
					ifNotExists();
					}
				}

				setState(2487);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
					{
					setState(2486);
					uid();
					}
				}

				setState(2490);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2489);
					indexType();
					}
				}

				setState(2492);
				indexColumnNames();
				setState(2496);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(2493);
					indexOption();
					}
					}
					setState(2498);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 5:
				_localctx = new AlterByAddPrimaryKeyContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2499);
				match(ADD);
				setState(2504);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2500);
					match(CONSTRAINT);
					setState(2502);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
						{
						setState(2501);
						((AlterByAddPrimaryKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2506);
				match(PRIMARY);
				setState(2507);
				match(KEY);
				setState(2509);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
					{
					setState(2508);
					((AlterByAddPrimaryKeyContext)_localctx).index = uid();
					}
				}

				setState(2512);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2511);
					indexType();
					}
				}

				setState(2514);
				indexColumnNames();
				setState(2518);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(2515);
					indexOption();
					}
					}
					setState(2520);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 6:
				_localctx = new AlterByAddUniqueKeyContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2521);
				match(ADD);
				setState(2526);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2522);
					match(CONSTRAINT);
					setState(2524);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
						{
						setState(2523);
						((AlterByAddUniqueKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2528);
				match(UNIQUE);
				setState(2530);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(2529);
					((AlterByAddUniqueKeyContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddUniqueKeyContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2533);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
					{
					setState(2532);
					((AlterByAddUniqueKeyContext)_localctx).indexName = uid();
					}
				}

				setState(2536);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2535);
					indexType();
					}
				}

				setState(2538);
				indexColumnNames();
				setState(2542);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(2539);
					indexOption();
					}
					}
					setState(2544);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				_localctx = new AlterByAddSpecialIndexContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2545);
				match(ADD);
				setState(2546);
				((AlterByAddSpecialIndexContext)_localctx).keyType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
					((AlterByAddSpecialIndexContext)_localctx).keyType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2548);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(2547);
					((AlterByAddSpecialIndexContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddSpecialIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2551);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
					{
					setState(2550);
					uid();
					}
				}

				setState(2553);
				indexColumnNames();
				setState(2557);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(2554);
					indexOption();
					}
					}
					setState(2559);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 8:
				_localctx = new AlterByAddForeignKeyContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2560);
				match(ADD);
				setState(2565);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2561);
					match(CONSTRAINT);
					setState(2563);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
						{
						setState(2562);
						((AlterByAddForeignKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2567);
				match(FOREIGN);
				setState(2568);
				match(KEY);
				setState(2570);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2569);
					ifNotExists();
					}
				}

				setState(2573);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
					{
					setState(2572);
					((AlterByAddForeignKeyContext)_localctx).indexName = uid();
					}
				}

				setState(2575);
				indexColumnNames();
				setState(2576);
				referenceDefinition();
				}
				break;
			case 9:
				_localctx = new AlterByAddCheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2578);
				match(ADD);
				setState(2583);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2579);
					match(CONSTRAINT);
					setState(2581);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
						{
						setState(2580);
						((AlterByAddCheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2585);
				match(CHECK);
				setState(2586);
				match(LR_BRACKET);
				setState(2587);
				expression(0);
				setState(2588);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new AlterBySetAlgorithmContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2590);
				match(ALGORITHM);
				setState(2592);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2591);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2594);
				((AlterBySetAlgorithmContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE || _la==INSTANT) ) {
					((AlterBySetAlgorithmContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 11:
				_localctx = new AlterByChangeDefaultContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2595);
				match(ALTER);
				setState(2597);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2596);
					match(COLUMN);
					}
				}

				setState(2599);
				uid();
				setState(2605);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET:
					{
					setState(2600);
					match(SET);
					setState(2601);
					match(DEFAULT);
					setState(2602);
					defaultValue();
					}
					break;
				case DROP:
					{
					setState(2603);
					match(DROP);
					setState(2604);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 12:
				_localctx = new AlterByChangeColumnContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2607);
				match(CHANGE);
				setState(2609);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2608);
					match(COLUMN);
					}
				}

				setState(2612);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2611);
					ifExists();
					}
				}

				setState(2614);
				((AlterByChangeColumnContext)_localctx).oldColumn = uid();
				setState(2615);
				((AlterByChangeColumnContext)_localctx).newColumn = uid();
				setState(2616);
				columnDefinition();
				setState(2620);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2617);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2618);
					match(AFTER);
					setState(2619);
					((AlterByChangeColumnContext)_localctx).afterColumn = uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 13:
				_localctx = new AlterByRenameColumnContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(2622);
				match(RENAME);
				setState(2623);
				match(COLUMN);
				setState(2624);
				((AlterByRenameColumnContext)_localctx).oldColumn = uid();
				setState(2625);
				match(TO);
				setState(2626);
				((AlterByRenameColumnContext)_localctx).newColumn = uid();
				}
				break;
			case 14:
				_localctx = new AlterByLockContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(2628);
				match(LOCK);
				setState(2630);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2629);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2632);
				((AlterByLockContext)_localctx).lockType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
					((AlterByLockContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				_localctx = new AlterByModifyColumnContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(2633);
				match(MODIFY);
				setState(2635);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2634);
					match(COLUMN);
					}
				}

				setState(2638);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2637);
					ifExists();
					}
				}

				setState(2640);
				uid();
				setState(2641);
				columnDefinition();
				setState(2645);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2642);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2643);
					match(AFTER);
					setState(2644);
					uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 16:
				_localctx = new AlterByDropColumnContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(2647);
				match(DROP);
				setState(2649);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2648);
					match(COLUMN);
					}
				}

				setState(2652);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2651);
					ifExists();
					}
				}

				setState(2654);
				uid();
				setState(2656);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RESTRICT) {
					{
					setState(2655);
					match(RESTRICT);
					}
				}

				}
				break;
			case 17:
				_localctx = new AlterByDropConstraintCheckContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(2658);
				match(DROP);
				setState(2659);
				_la = _input.LA(1);
				if ( !(_la==CHECK || _la==CONSTRAINT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2661);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2660);
					ifExists();
					}
				}

				setState(2663);
				uid();
				}
				break;
			case 18:
				_localctx = new AlterByDropPrimaryKeyContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(2664);
				match(DROP);
				setState(2665);
				match(PRIMARY);
				setState(2666);
				match(KEY);
				}
				break;
			case 19:
				_localctx = new AlterByRenameIndexContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(2667);
				match(RENAME);
				setState(2668);
				((AlterByRenameIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByRenameIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2669);
				uid();
				setState(2670);
				match(TO);
				setState(2671);
				uid();
				}
				break;
			case 20:
				_localctx = new AlterByAlterIndexVisibilityContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(2673);
				match(ALTER);
				setState(2674);
				match(INDEX);
				setState(2675);
				uid();
				setState(2676);
				_la = _input.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 21:
				_localctx = new AlterByDropIndexContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(2678);
				match(DROP);
				setState(2679);
				((AlterByDropIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByDropIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2681);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2680);
					ifExists();
					}
				}

				setState(2683);
				uid();
				}
				break;
			case 22:
				_localctx = new AlterByDropForeignKeyContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(2684);
				match(DROP);
				setState(2685);
				match(FOREIGN);
				setState(2686);
				match(KEY);
				setState(2688);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2687);
					ifExists();
					}
				}

				setState(2690);
				uid();
				}
				break;
			case 23:
				_localctx = new AlterByDisableKeysContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(2691);
				match(DISABLE);
				setState(2692);
				match(KEYS);
				}
				break;
			case 24:
				_localctx = new AlterByEnableKeysContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(2693);
				match(ENABLE);
				setState(2694);
				match(KEYS);
				}
				break;
			case 25:
				_localctx = new AlterByRenameContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(2695);
				match(RENAME);
				setState(2697);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS || _la==TO) {
					{
					setState(2696);
					((AlterByRenameContext)_localctx).renameFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==AS || _la==TO) ) {
						((AlterByRenameContext)_localctx).renameFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2701);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
				case 1:
					{
					setState(2699);
					uid();
					}
					break;
				case 2:
					{
					setState(2700);
					fullId();
					}
					break;
				}
				}
				break;
			case 26:
				_localctx = new AlterByOrderContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(2703);
				match(ORDER);
				setState(2704);
				match(BY);
				setState(2705);
				uidList();
				}
				break;
			case 27:
				_localctx = new AlterByConvertCharsetContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(2706);
				match(CONVERT);
				setState(2707);
				match(TO);
				setState(2708);
				match(CHARACTER);
				setState(2709);
				match(SET);
				setState(2710);
				charsetName();
				setState(2713);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2711);
					match(COLLATE);
					setState(2712);
					collationName();
					}
				}

				}
				break;
			case 28:
				_localctx = new AlterByDefaultCharsetContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(2716);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2715);
					match(DEFAULT);
					}
				}

				setState(2718);
				match(CHARACTER);
				setState(2719);
				match(SET);
				setState(2720);
				match(EQUAL_SYMBOL);
				setState(2721);
				charsetName();
				setState(2725);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2722);
					match(COLLATE);
					setState(2723);
					match(EQUAL_SYMBOL);
					setState(2724);
					collationName();
					}
				}

				}
				break;
			case 29:
				_localctx = new AlterByDiscardTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(2727);
				match(DISCARD);
				setState(2728);
				match(TABLESPACE);
				}
				break;
			case 30:
				_localctx = new AlterByImportTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(2729);
				match(IMPORT);
				setState(2730);
				match(TABLESPACE);
				}
				break;
			case 31:
				_localctx = new AlterByForceContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(2731);
				match(FORCE);
				}
				break;
			case 32:
				_localctx = new AlterByValidateContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(2732);
				((AlterByValidateContext)_localctx).validationFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
					((AlterByValidateContext)_localctx).validationFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2733);
				match(VALIDATION);
				}
				break;
			case 33:
				_localctx = new AlterByAddPartitionContext(_localctx);
				enterOuterAlt(_localctx, 33);
				{
				setState(2734);
				match(ADD);
				setState(2735);
				match(PARTITION);
				setState(2737);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2736);
					ifNotExists();
					}
				}

				setState(2739);
				match(LR_BRACKET);
				setState(2740);
				partitionDefinition();
				setState(2745);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2741);
					match(COMMA);
					setState(2742);
					partitionDefinition();
					}
					}
					setState(2747);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2748);
				match(RR_BRACKET);
				}
				break;
			case 34:
				_localctx = new AlterByDropPartitionContext(_localctx);
				enterOuterAlt(_localctx, 34);
				{
				setState(2750);
				match(DROP);
				setState(2751);
				match(PARTITION);
				setState(2753);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2752);
					ifExists();
					}
				}

				setState(2755);
				uidList();
				}
				break;
			case 35:
				_localctx = new AlterByDiscardPartitionContext(_localctx);
				enterOuterAlt(_localctx, 35);
				{
				setState(2756);
				match(DISCARD);
				setState(2757);
				match(PARTITION);
				setState(2760);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(2758);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2759);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2762);
				match(TABLESPACE);
				}
				break;
			case 36:
				_localctx = new AlterByImportPartitionContext(_localctx);
				enterOuterAlt(_localctx, 36);
				{
				setState(2763);
				match(IMPORT);
				setState(2764);
				match(PARTITION);
				setState(2767);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(2765);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2766);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2769);
				match(TABLESPACE);
				}
				break;
			case 37:
				_localctx = new AlterByTruncatePartitionContext(_localctx);
				enterOuterAlt(_localctx, 37);
				{
				setState(2770);
				match(TRUNCATE);
				setState(2771);
				match(PARTITION);
				setState(2774);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(2772);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2773);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 38:
				_localctx = new AlterByCoalescePartitionContext(_localctx);
				enterOuterAlt(_localctx, 38);
				{
				setState(2776);
				match(COALESCE);
				setState(2777);
				match(PARTITION);
				setState(2778);
				decimalLiteral();
				}
				break;
			case 39:
				_localctx = new AlterByReorganizePartitionContext(_localctx);
				enterOuterAlt(_localctx, 39);
				{
				setState(2779);
				match(REORGANIZE);
				setState(2780);
				match(PARTITION);
				setState(2781);
				uidList();
				setState(2782);
				match(INTO);
				setState(2783);
				match(LR_BRACKET);
				setState(2784);
				partitionDefinition();
				setState(2789);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2785);
					match(COMMA);
					setState(2786);
					partitionDefinition();
					}
					}
					setState(2791);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2792);
				match(RR_BRACKET);
				}
				break;
			case 40:
				_localctx = new AlterByExchangePartitionContext(_localctx);
				enterOuterAlt(_localctx, 40);
				{
				setState(2794);
				match(EXCHANGE);
				setState(2795);
				match(PARTITION);
				setState(2796);
				uid();
				setState(2797);
				match(WITH);
				setState(2798);
				match(TABLE);
				setState(2799);
				tableName();
				setState(2802);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(2800);
					((AlterByExchangePartitionContext)_localctx).validationFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
						((AlterByExchangePartitionContext)_localctx).validationFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2801);
					match(VALIDATION);
					}
				}

				}
				break;
			case 41:
				_localctx = new AlterByAnalyzePartitionContext(_localctx);
				enterOuterAlt(_localctx, 41);
				{
				setState(2804);
				match(ANALYZE);
				setState(2805);
				match(PARTITION);
				setState(2808);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(2806);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2807);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 42:
				_localctx = new AlterByCheckPartitionContext(_localctx);
				enterOuterAlt(_localctx, 42);
				{
				setState(2810);
				match(CHECK);
				setState(2811);
				match(PARTITION);
				setState(2814);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(2812);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2813);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 43:
				_localctx = new AlterByOptimizePartitionContext(_localctx);
				enterOuterAlt(_localctx, 43);
				{
				setState(2816);
				match(OPTIMIZE);
				setState(2817);
				match(PARTITION);
				setState(2820);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(2818);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2819);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 44:
				_localctx = new AlterByRebuildPartitionContext(_localctx);
				enterOuterAlt(_localctx, 44);
				{
				setState(2822);
				match(REBUILD);
				setState(2823);
				match(PARTITION);
				setState(2826);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(2824);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2825);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 45:
				_localctx = new AlterByRepairPartitionContext(_localctx);
				enterOuterAlt(_localctx, 45);
				{
				setState(2828);
				match(REPAIR);
				setState(2829);
				match(PARTITION);
				setState(2832);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(2830);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2831);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 46:
				_localctx = new AlterByRemovePartitioningContext(_localctx);
				enterOuterAlt(_localctx, 46);
				{
				setState(2834);
				match(REMOVE);
				setState(2835);
				match(PARTITIONING);
				}
				break;
			case 47:
				_localctx = new AlterByUpgradePartitioningContext(_localctx);
				enterOuterAlt(_localctx, 47);
				{
				setState(2836);
				match(UPGRADE);
				setState(2837);
				match(PARTITIONING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDatabaseContext extends ParserRuleContext {
		public Token dbFormat;
		public TerminalNode DROP() { return getToken(CqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(CqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(CqlParser.SCHEMA, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabase; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDropDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDatabaseContext dropDatabase() throws RecognitionException {
		DropDatabaseContext _localctx = new DropDatabaseContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_dropDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2840);
			match(DROP);
			setState(2841);
			((DropDatabaseContext)_localctx).dbFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				((DropDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2843);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2842);
				ifExists();
				}
			}

			setState(2845);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropEventContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(CqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(CqlParser.EVENT, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropEvent; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDropEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropEventContext dropEvent() throws RecognitionException {
		DropEventContext _localctx = new DropEventContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_dropEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2847);
			match(DROP);
			setState(2848);
			match(EVENT);
			setState(2850);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2849);
				ifExists();
				}
			}

			setState(2852);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexContext extends ParserRuleContext {
		public Token intimeAction;
		public Token algType;
		public Token lockType;
		public TerminalNode DROP() { return getToken(CqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(CqlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ON() { return getToken(CqlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(CqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(CqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> LOCK() { return getTokens(CqlParser.LOCK); }
		public TerminalNode LOCK(int i) {
			return getToken(CqlParser.LOCK, i);
		}
		public TerminalNode ONLINE() { return getToken(CqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(CqlParser.OFFLINE, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(CqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(CqlParser.DEFAULT, i);
		}
		public List<TerminalNode> INPLACE() { return getTokens(CqlParser.INPLACE); }
		public TerminalNode INPLACE(int i) {
			return getToken(CqlParser.INPLACE, i);
		}
		public List<TerminalNode> COPY() { return getTokens(CqlParser.COPY); }
		public TerminalNode COPY(int i) {
			return getToken(CqlParser.COPY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(CqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(CqlParser.NONE, i);
		}
		public List<TerminalNode> SHARED() { return getTokens(CqlParser.SHARED); }
		public TerminalNode SHARED(int i) {
			return getToken(CqlParser.SHARED, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(CqlParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(CqlParser.EXCLUSIVE, i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(CqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(CqlParser.EQUAL_SYMBOL, i);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndex; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexContext dropIndex() throws RecognitionException {
		DropIndexContext _localctx = new DropIndexContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_dropIndex);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2854);
			match(DROP);
			setState(2855);
			match(INDEX);
			setState(2857);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,366,_ctx) ) {
			case 1:
				{
				setState(2856);
				((DropIndexContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((DropIndexContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2859);
			uid();
			setState(2860);
			match(ON);
			setState(2861);
			tableName();
			setState(2874);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,370,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(2872);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALGORITHM:
						{
						setState(2862);
						match(ALGORITHM);
						setState(2864);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(2863);
							match(EQUAL_SYMBOL);
							}
						}

						setState(2866);
						((DropIndexContext)_localctx).algType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
							((DropIndexContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LOCK:
						{
						setState(2867);
						match(LOCK);
						setState(2869);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(2868);
							match(EQUAL_SYMBOL);
							}
						}

						setState(2871);
						((DropIndexContext)_localctx).lockType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							((DropIndexContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(2876);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,370,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropLogfileGroupContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(CqlParser.DROP, 0); }
		public TerminalNode LOGFILE() { return getToken(CqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(CqlParser.GROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(CqlParser.ENGINE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLogfileGroup; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDropLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropLogfileGroupContext dropLogfileGroup() throws RecognitionException {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_dropLogfileGroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2877);
			match(DROP);
			setState(2878);
			match(LOGFILE);
			setState(2879);
			match(GROUP);
			setState(2880);
			uid();
			setState(2881);
			match(ENGINE);
			setState(2882);
			match(EQUAL_SYMBOL);
			setState(2883);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropProcedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(CqlParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(CqlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropProcedure; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDropProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropProcedureContext dropProcedure() throws RecognitionException {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_dropProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2885);
			match(DROP);
			setState(2886);
			match(PROCEDURE);
			setState(2888);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2887);
				ifExists();
				}
			}

			setState(2890);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFunctionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(CqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(CqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDropFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropFunctionContext dropFunction() throws RecognitionException {
		DropFunctionContext _localctx = new DropFunctionContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_dropFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2892);
			match(DROP);
			setState(2893);
			match(FUNCTION);
			setState(2895);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2894);
				ifExists();
				}
			}

			setState(2897);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropServerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(CqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(CqlParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropServer; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDropServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropServerContext dropServer() throws RecognitionException {
		DropServerContext _localctx = new DropServerContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_dropServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2899);
			match(DROP);
			setState(2900);
			match(SERVER);
			setState(2902);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2901);
				ifExists();
				}
			}

			setState(2904);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(CqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(CqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(CqlParser.TEMPORARY, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(CqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(CqlParser.CASCADE, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDropTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableContext dropTable() throws RecognitionException {
		DropTableContext _localctx = new DropTableContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_dropTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2906);
			match(DROP);
			setState(2908);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(2907);
				match(TEMPORARY);
				}
			}

			setState(2910);
			match(TABLE);
			setState(2912);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2911);
				ifExists();
				}
			}

			setState(2914);
			tables();
			setState(2916);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2915);
				((DropTableContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropTableContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTablespaceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(CqlParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(CqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(CqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public DropTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTablespace; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDropTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTablespaceContext dropTablespace() throws RecognitionException {
		DropTablespaceContext _localctx = new DropTablespaceContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_dropTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2918);
			match(DROP);
			setState(2919);
			match(TABLESPACE);
			setState(2920);
			uid();
			setState(2926);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(2921);
				match(ENGINE);
				setState(2923);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2922);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2925);
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTriggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(CqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(CqlParser.TRIGGER, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrigger; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDropTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTriggerContext dropTrigger() throws RecognitionException {
		DropTriggerContext _localctx = new DropTriggerContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_dropTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2928);
			match(DROP);
			setState(2929);
			match(TRIGGER);
			setState(2931);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2930);
				ifExists();
				}
			}

			setState(2933);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropViewContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(CqlParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(CqlParser.VIEW, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public TerminalNode RESTRICT() { return getToken(CqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(CqlParser.CASCADE, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropView; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDropView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropViewContext dropView() throws RecognitionException {
		DropViewContext _localctx = new DropViewContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_dropView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2935);
			match(DROP);
			setState(2936);
			match(VIEW);
			setState(2938);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2937);
				ifExists();
				}
			}

			setState(2940);
			fullId();
			setState(2945);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2941);
				match(COMMA);
				setState(2942);
				fullId();
				}
				}
				setState(2947);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2949);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2948);
				((DropViewContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropViewContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropRoleContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(CqlParser.DROP, 0); }
		public TerminalNode ROLE() { return getToken(CqlParser.ROLE, 0); }
		public List<RoleNameContext> roleName() {
			return getRuleContexts(RoleNameContext.class);
		}
		public RoleNameContext roleName(int i) {
			return getRuleContext(RoleNameContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public DropRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRole; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDropRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRoleContext dropRole() throws RecognitionException {
		DropRoleContext _localctx = new DropRoleContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_dropRole);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2951);
			match(DROP);
			setState(2952);
			match(ROLE);
			setState(2954);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2953);
				ifExists();
				}
			}

			setState(2956);
			roleName();
			setState(2961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2957);
				match(COMMA);
				setState(2958);
				roleName();
				}
				}
				setState(2963);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetRoleContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(CqlParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(CqlParser.DEFAULT, 0); }
		public TerminalNode ROLE() { return getToken(CqlParser.ROLE, 0); }
		public TerminalNode TO() { return getToken(CqlParser.TO, 0); }
		public TerminalNode NONE() { return getToken(CqlParser.NONE, 0); }
		public TerminalNode ALL() { return getToken(CqlParser.ALL, 0); }
		public List<RoleNameContext> roleName() {
			return getRuleContexts(RoleNameContext.class);
		}
		public RoleNameContext roleName(int i) {
			return getRuleContext(RoleNameContext.class,i);
		}
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public RoleOptionContext roleOption() {
			return getRuleContext(RoleOptionContext.class,0);
		}
		public SetRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setRole; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSetRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetRoleContext setRole() throws RecognitionException {
		SetRoleContext _localctx = new SetRoleContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_setRole);
		int _la;
		try {
			setState(2997);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2964);
				match(SET);
				setState(2965);
				match(DEFAULT);
				setState(2966);
				match(ROLE);
				setState(2977);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
				case 1:
					{
					setState(2967);
					match(NONE);
					}
					break;
				case 2:
					{
					setState(2968);
					match(ALL);
					}
					break;
				case 3:
					{
					setState(2969);
					roleName();
					setState(2974);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2970);
						match(COMMA);
						setState(2971);
						roleName();
						}
						}
						setState(2976);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(2979);
				match(TO);
				setState(2982);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
				case 1:
					{
					setState(2980);
					userName();
					}
					break;
				case 2:
					{
					setState(2981);
					uid();
					}
					break;
				}
				setState(2991);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2984);
					match(COMMA);
					setState(2987);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
					case 1:
						{
						setState(2985);
						userName();
						}
						break;
					case 2:
						{
						setState(2986);
						uid();
						}
						break;
					}
					}
					}
					setState(2993);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2994);
				match(SET);
				setState(2995);
				match(ROLE);
				setState(2996);
				roleOption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(CqlParser.RENAME, 0); }
		public TerminalNode TABLE() { return getToken(CqlParser.TABLE, 0); }
		public List<RenameTableClauseContext> renameTableClause() {
			return getRuleContexts(RenameTableClauseContext.class);
		}
		public RenameTableClauseContext renameTableClause(int i) {
			return getRuleContext(RenameTableClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public RenameTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitRenameTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableContext renameTable() throws RecognitionException {
		RenameTableContext _localctx = new RenameTableContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_renameTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2999);
			match(RENAME);
			setState(3000);
			match(TABLE);
			setState(3001);
			renameTableClause();
			setState(3006);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3002);
				match(COMMA);
				setState(3003);
				renameTableClause();
				}
				}
				setState(3008);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableClauseContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(CqlParser.TO, 0); }
		public RenameTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitRenameTableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableClauseContext renameTableClause() throws RecognitionException {
		RenameTableClauseContext _localctx = new RenameTableClauseContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_renameTableClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3009);
			tableName();
			setState(3010);
			match(TO);
			setState(3011);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncateTableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(CqlParser.TRUNCATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(CqlParser.TABLE, 0); }
		public TruncateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTruncateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateTableContext truncateTable() throws RecognitionException {
		TruncateTableContext _localctx = new TruncateTableContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_truncateTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3013);
			match(TRUNCATE);
			setState(3015);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(3014);
				match(TABLE);
				}
			}

			setState(3017);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallStatementContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(CqlParser.CALL, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public ConstantsContext constants() {
			return getRuleContext(ConstantsContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCallStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallStatementContext callStatement() throws RecognitionException {
		CallStatementContext _localctx = new CallStatementContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_callStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3019);
			match(CALL);
			setState(3020);
			fullId();
			setState(3027);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
			case 1:
				{
				setState(3021);
				match(LR_BRACKET);
				setState(3024);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
				case 1:
					{
					setState(3022);
					constants();
					}
					break;
				case 2:
					{
					setState(3023);
					expressions();
					}
					break;
				}
				setState(3026);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementContext extends ParserRuleContext {
		public SingleDeleteStatementContext singleDeleteStatement() {
			return getRuleContext(SingleDeleteStatementContext.class,0);
		}
		public MultipleDeleteStatementContext multipleDeleteStatement() {
			return getRuleContext(MultipleDeleteStatementContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_deleteStatement);
		try {
			setState(3031);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3029);
				singleDeleteStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3030);
				multipleDeleteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(CqlParser.DO, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_doStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3033);
			match(DO);
			setState(3034);
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerStatementContext extends ParserRuleContext {
		public HandlerOpenStatementContext handlerOpenStatement() {
			return getRuleContext(HandlerOpenStatementContext.class,0);
		}
		public HandlerReadIndexStatementContext handlerReadIndexStatement() {
			return getRuleContext(HandlerReadIndexStatementContext.class,0);
		}
		public HandlerReadStatementContext handlerReadStatement() {
			return getRuleContext(HandlerReadStatementContext.class,0);
		}
		public HandlerCloseStatementContext handlerCloseStatement() {
			return getRuleContext(HandlerCloseStatementContext.class,0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitHandlerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerStatementContext handlerStatement() throws RecognitionException {
		HandlerStatementContext _localctx = new HandlerStatementContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_handlerStatement);
		try {
			setState(3040);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3036);
				handlerOpenStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3037);
				handlerReadIndexStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3038);
				handlerReadStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3039);
				handlerCloseStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public UpdatedElementContext duplicatedFirst;
		public List<UpdatedElementContext> duplicatedElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode INSERT() { return getToken(CqlParser.INSERT, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(CqlParser.SET, 0); }
		public TerminalNode IGNORE() { return getToken(CqlParser.IGNORE, 0); }
		public TerminalNode INTO() { return getToken(CqlParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(CqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(CqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(CqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(CqlParser.RR_BRACKET, i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode ON() { return getToken(CqlParser.ON, 0); }
		public TerminalNode DUPLICATE() { return getToken(CqlParser.DUPLICATE, 0); }
		public TerminalNode KEY() { return getToken(CqlParser.KEY, 0); }
		public TerminalNode UPDATE() { return getToken(CqlParser.UPDATE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(CqlParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(CqlParser.DELAYED, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(CqlParser.HIGH_PRIORITY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitInsertStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_insertStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3042);
			match(INSERT);
			setState(3044);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (DELAYED - 41)) | (1L << (HIGH_PRIORITY - 41)) | (1L << (LOW_PRIORITY - 41)))) != 0)) {
				{
				setState(3043);
				((InsertStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (DELAYED - 41)) | (1L << (HIGH_PRIORITY - 41)) | (1L << (LOW_PRIORITY - 41)))) != 0)) ) {
					((InsertStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3047);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3046);
				match(IGNORE);
				}
			}

			setState(3050);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(3049);
				match(INTO);
				}
			}

			setState(3052);
			tableName();
			setState(3059);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3053);
				match(PARTITION);
				setState(3054);
				match(LR_BRACKET);
				setState(3056);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
					{
					setState(3055);
					((InsertStatementContext)_localctx).partitions = uidList();
					}
				}

				setState(3058);
				match(RR_BRACKET);
				}
			}

			setState(3077);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(3065);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
				case 1:
					{
					setState(3061);
					match(LR_BRACKET);
					setState(3062);
					((InsertStatementContext)_localctx).columns = uidList();
					setState(3063);
					match(RR_BRACKET);
					}
					break;
				}
				setState(3067);
				insertStatementValue();
				}
				break;
			case SET:
				{
				setState(3068);
				match(SET);
				setState(3069);
				((InsertStatementContext)_localctx).setFirst = updatedElement();
				setState(3074);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3070);
					match(COMMA);
					setState(3071);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).setElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(3076);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3091);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3079);
				match(ON);
				setState(3080);
				match(DUPLICATE);
				setState(3081);
				match(KEY);
				setState(3082);
				match(UPDATE);
				setState(3083);
				((InsertStatementContext)_localctx).duplicatedFirst = updatedElement();
				setState(3088);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3084);
					match(COMMA);
					setState(3085);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).duplicatedElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(3090);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadDataStatementContext extends ParserRuleContext {
		public Token priority;
		public Token filename;
		public Token violation;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public Token linesFormat;
		public TerminalNode LOAD() { return getToken(CqlParser.LOAD, 0); }
		public TerminalNode DATA() { return getToken(CqlParser.DATA, 0); }
		public TerminalNode INFILE() { return getToken(CqlParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(CqlParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(CqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode LOCAL() { return getToken(CqlParser.LOCAL, 0); }
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(CqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(CqlParser.LR_BRACKET, i);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(CqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(CqlParser.RR_BRACKET, i);
		}
		public TerminalNode CHARACTER() { return getToken(CqlParser.CHARACTER, 0); }
		public List<TerminalNode> SET() { return getTokens(CqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(CqlParser.SET, i);
		}
		public List<TerminalNode> LINES() { return getTokens(CqlParser.LINES); }
		public TerminalNode LINES(int i) {
			return getToken(CqlParser.LINES, i);
		}
		public List<TerminalNode> IGNORE() { return getTokens(CqlParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(CqlParser.IGNORE, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(CqlParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(CqlParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(CqlParser.REPLACE, 0); }
		public TerminalNode FIELDS() { return getToken(CqlParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(CqlParser.COLUMNS, 0); }
		public TerminalNode ROWS() { return getToken(CqlParser.ROWS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public LoadDataStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitLoadDataStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadDataStatementContext loadDataStatement() throws RecognitionException {
		LoadDataStatementContext _localctx = new LoadDataStatementContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_loadDataStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3093);
			match(LOAD);
			setState(3094);
			match(DATA);
			setState(3096);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(3095);
				((LoadDataStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((LoadDataStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3099);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(3098);
				match(LOCAL);
				}
			}

			setState(3101);
			match(INFILE);
			setState(3102);
			((LoadDataStatementContext)_localctx).filename = match(STRING_LITERAL);
			setState(3104);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(3103);
				((LoadDataStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadDataStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3106);
			match(INTO);
			setState(3107);
			match(TABLE);
			setState(3108);
			tableName();
			setState(3114);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3109);
				match(PARTITION);
				setState(3110);
				match(LR_BRACKET);
				setState(3111);
				uidList();
				setState(3112);
				match(RR_BRACKET);
				}
			}

			setState(3119);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(3116);
				match(CHARACTER);
				setState(3117);
				match(SET);
				setState(3118);
				((LoadDataStatementContext)_localctx).charset = charsetName();
				}
			}

			setState(3127);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS || _la==FIELDS) {
				{
				setState(3121);
				((LoadDataStatementContext)_localctx).fieldsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((LoadDataStatementContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3123); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3122);
					selectFieldsInto();
					}
					}
					setState(3125); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
				}
			}

			setState(3135);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINES) {
				{
				setState(3129);
				match(LINES);
				setState(3131); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3130);
					selectLinesInto();
					}
					}
					setState(3133); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STARTING || _la==TERMINATED );
				}
			}

			setState(3141);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3137);
				match(IGNORE);
				setState(3138);
				decimalLiteral();
				setState(3139);
				((LoadDataStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadDataStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3154);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
			case 1:
				{
				setState(3143);
				match(LR_BRACKET);
				setState(3144);
				assignmentField();
				setState(3149);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3145);
					match(COMMA);
					setState(3146);
					assignmentField();
					}
					}
					setState(3151);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3152);
				match(RR_BRACKET);
				}
				break;
			}
			setState(3165);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
			case 1:
				{
				setState(3156);
				match(SET);
				setState(3157);
				updatedElement();
				setState(3162);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3158);
					match(COMMA);
					setState(3159);
					updatedElement();
					}
					}
					setState(3164);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadXmlStatementContext extends ParserRuleContext {
		public Token priority;
		public Token filename;
		public Token violation;
		public CharsetNameContext charset;
		public Token tag;
		public Token linesFormat;
		public TerminalNode LOAD() { return getToken(CqlParser.LOAD, 0); }
		public TerminalNode XML() { return getToken(CqlParser.XML, 0); }
		public TerminalNode INFILE() { return getToken(CqlParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(CqlParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(CqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(CqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(CqlParser.STRING_LITERAL, i);
		}
		public TerminalNode LOCAL() { return getToken(CqlParser.LOCAL, 0); }
		public TerminalNode CHARACTER() { return getToken(CqlParser.CHARACTER, 0); }
		public List<TerminalNode> SET() { return getTokens(CqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(CqlParser.SET, i);
		}
		public List<TerminalNode> ROWS() { return getTokens(CqlParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(CqlParser.ROWS, i);
		}
		public TerminalNode IDENTIFIED() { return getToken(CqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(CqlParser.BY, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(CqlParser.LESS_SYMBOL, 0); }
		public TerminalNode GREATER_SYMBOL() { return getToken(CqlParser.GREATER_SYMBOL, 0); }
		public List<TerminalNode> IGNORE() { return getTokens(CqlParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(CqlParser.IGNORE, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(CqlParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(CqlParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(CqlParser.REPLACE, 0); }
		public TerminalNode LINES() { return getToken(CqlParser.LINES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public LoadXmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadXmlStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitLoadXmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadXmlStatementContext loadXmlStatement() throws RecognitionException {
		LoadXmlStatementContext _localctx = new LoadXmlStatementContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_loadXmlStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3167);
			match(LOAD);
			setState(3168);
			match(XML);
			setState(3170);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(3169);
				((LoadXmlStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((LoadXmlStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3173);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(3172);
				match(LOCAL);
				}
			}

			setState(3175);
			match(INFILE);
			setState(3176);
			((LoadXmlStatementContext)_localctx).filename = match(STRING_LITERAL);
			setState(3178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(3177);
				((LoadXmlStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadXmlStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3180);
			match(INTO);
			setState(3181);
			match(TABLE);
			setState(3182);
			tableName();
			setState(3186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(3183);
				match(CHARACTER);
				setState(3184);
				match(SET);
				setState(3185);
				((LoadXmlStatementContext)_localctx).charset = charsetName();
				}
			}

			setState(3194);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS) {
				{
				setState(3188);
				match(ROWS);
				setState(3189);
				match(IDENTIFIED);
				setState(3190);
				match(BY);
				setState(3191);
				match(LESS_SYMBOL);
				setState(3192);
				((LoadXmlStatementContext)_localctx).tag = match(STRING_LITERAL);
				setState(3193);
				match(GREATER_SYMBOL);
				}
			}

			setState(3200);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3196);
				match(IGNORE);
				setState(3197);
				decimalLiteral();
				setState(3198);
				((LoadXmlStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadXmlStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3213);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
			case 1:
				{
				setState(3202);
				match(LR_BRACKET);
				setState(3203);
				assignmentField();
				setState(3208);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3204);
					match(COMMA);
					setState(3205);
					assignmentField();
					}
					}
					setState(3210);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3211);
				match(RR_BRACKET);
				}
				break;
			}
			setState(3224);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,430,_ctx) ) {
			case 1:
				{
				setState(3215);
				match(SET);
				setState(3216);
				updatedElement();
				setState(3221);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3217);
					match(COMMA);
					setState(3218);
					updatedElement();
					}
					}
					setState(3223);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode REPLACE() { return getToken(CqlParser.REPLACE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(CqlParser.SET, 0); }
		public TerminalNode INTO() { return getToken(CqlParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(CqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(CqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(CqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(CqlParser.RR_BRACKET, i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(CqlParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(CqlParser.DELAYED, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitReplaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceStatementContext replaceStatement() throws RecognitionException {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_replaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3226);
			match(REPLACE);
			setState(3228);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DELAYED || _la==LOW_PRIORITY) {
				{
				setState(3227);
				((ReplaceStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DELAYED || _la==LOW_PRIORITY) ) {
					((ReplaceStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3231);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(3230);
				match(INTO);
				}
			}

			setState(3233);
			tableName();
			setState(3239);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3234);
				match(PARTITION);
				setState(3235);
				match(LR_BRACKET);
				setState(3236);
				((ReplaceStatementContext)_localctx).partitions = uidList();
				setState(3237);
				match(RR_BRACKET);
				}
			}

			setState(3257);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(3245);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
				case 1:
					{
					setState(3241);
					match(LR_BRACKET);
					setState(3242);
					((ReplaceStatementContext)_localctx).columns = uidList();
					setState(3243);
					match(RR_BRACKET);
					}
					break;
				}
				setState(3247);
				insertStatementValue();
				}
				break;
			case SET:
				{
				setState(3248);
				match(SET);
				setState(3249);
				((ReplaceStatementContext)_localctx).setFirst = updatedElement();
				setState(3254);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3250);
					match(COMMA);
					setState(3251);
					((ReplaceStatementContext)_localctx).updatedElement = updatedElement();
					((ReplaceStatementContext)_localctx).setElements.add(((ReplaceStatementContext)_localctx).updatedElement);
					}
					}
					setState(3256);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementContext extends ParserRuleContext {
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
	 
		public SelectStatementContext() { }
		public void copyFrom(SelectStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnionSelectContext extends SelectStatementContext {
		public Token unionType;
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public List<UnionStatementContext> unionStatement() {
			return getRuleContexts(UnionStatementContext.class);
		}
		public UnionStatementContext unionStatement(int i) {
			return getRuleContext(UnionStatementContext.class,i);
		}
		public TerminalNode UNION() { return getToken(CqlParser.UNION, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(CqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(CqlParser.DISTINCT, 0); }
		public UnionSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitUnionSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnionParenthesisSelectContext extends SelectStatementContext {
		public Token unionType;
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public List<UnionParenthesisContext> unionParenthesis() {
			return getRuleContexts(UnionParenthesisContext.class);
		}
		public UnionParenthesisContext unionParenthesis(int i) {
			return getRuleContext(UnionParenthesisContext.class,i);
		}
		public TerminalNode UNION() { return getToken(CqlParser.UNION, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(CqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(CqlParser.DISTINCT, 0); }
		public UnionParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitUnionParenthesisSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleSelectContext extends SelectStatementContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public SimpleSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSimpleSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ParenthesisSelectContext extends SelectStatementContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public ParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitParenthesisSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_selectStatement);
		int _la;
		try {
			int _alt;
			setState(3314);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
			case 1:
				_localctx = new SimpleSelectContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3259);
				querySpecification();
				setState(3261);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
				case 1:
					{
					setState(3260);
					lockClause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3263);
				queryExpression();
				setState(3265);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
				case 1:
					{
					setState(3264);
					lockClause();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new UnionSelectContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3267);
				querySpecificationNointo();
				setState(3269); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3268);
						unionStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3271); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,439,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(3281);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(3273);
					match(UNION);
					setState(3275);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(3274);
						((UnionSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(3279);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case SELECT:
						{
						setState(3277);
						querySpecification();
						}
						break;
					case LR_BRACKET:
						{
						setState(3278);
						queryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(3284);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
				case 1:
					{
					setState(3283);
					orderByClause();
					}
					break;
				}
				setState(3287);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(3286);
					limitClause();
					}
				}

				setState(3290);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
				case 1:
					{
					setState(3289);
					lockClause();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new UnionParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3292);
				queryExpressionNointo();
				setState(3294); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3293);
						unionParenthesis();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3296); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,446,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(3303);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(3298);
					match(UNION);
					setState(3300);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(3299);
						((UnionParenthesisSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionParenthesisSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(3302);
					queryExpression();
					}
				}

				setState(3306);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
				case 1:
					{
					setState(3305);
					orderByClause();
					}
					break;
				}
				setState(3309);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(3308);
					limitClause();
					}
				}

				setState(3312);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
				case 1:
					{
					setState(3311);
					lockClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStatementContext extends ParserRuleContext {
		public SingleUpdateStatementContext singleUpdateStatement() {
			return getRuleContext(SingleUpdateStatementContext.class,0);
		}
		public MultipleUpdateStatementContext multipleUpdateStatement() {
			return getRuleContext(MultipleUpdateStatementContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_updateStatement);
		try {
			setState(3318);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3316);
				singleUpdateStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3317);
				multipleUpdateStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementValueContext extends ParserRuleContext {
		public Token insertFormat;
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(CqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(CqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(CqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(CqlParser.RR_BRACKET, i);
		}
		public TerminalNode VALUES() { return getToken(CqlParser.VALUES, 0); }
		public TerminalNode VALUE() { return getToken(CqlParser.VALUE, 0); }
		public List<ExpressionsWithDefaultsContext> expressionsWithDefaults() {
			return getRuleContexts(ExpressionsWithDefaultsContext.class);
		}
		public ExpressionsWithDefaultsContext expressionsWithDefaults(int i) {
			return getRuleContext(ExpressionsWithDefaultsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public InsertStatementValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatementValue; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitInsertStatementValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementValueContext insertStatementValue() throws RecognitionException {
		InsertStatementValueContext _localctx = new InsertStatementValueContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_insertStatementValue);
		int _la;
		try {
			setState(3338);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case LR_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(3320);
				selectStatement();
				}
				break;
			case VALUES:
			case VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3321);
				((InsertStatementValueContext)_localctx).insertFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==VALUES || _la==VALUE) ) {
					((InsertStatementValueContext)_localctx).insertFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3322);
				match(LR_BRACKET);
				setState(3324);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
				case 1:
					{
					setState(3323);
					expressionsWithDefaults();
					}
					break;
				}
				setState(3326);
				match(RR_BRACKET);
				setState(3335);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3327);
					match(COMMA);
					setState(3328);
					match(LR_BRACKET);
					setState(3330);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
					case 1:
						{
						setState(3329);
						expressionsWithDefaults();
						}
						break;
					}
					setState(3332);
					match(RR_BRACKET);
					}
					}
					setState(3337);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdatedElementContext extends ParserRuleContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(CqlParser.DEFAULT, 0); }
		public UpdatedElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updatedElement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitUpdatedElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdatedElementContext updatedElement() throws RecognitionException {
		UpdatedElementContext _localctx = new UpdatedElementContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_updatedElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3340);
			fullColumnName();
			setState(3341);
			match(EQUAL_SYMBOL);
			setState(3344);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
			case 1:
				{
				setState(3342);
				expression(0);
				}
				break;
			case 2:
				{
				setState(3343);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentFieldContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(CqlParser.LOCAL_ID, 0); }
		public AssignmentFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentField; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAssignmentField(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentFieldContext assignmentField() throws RecognitionException {
		AssignmentFieldContext _localctx = new AssignmentFieldContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_assignmentField);
		try {
			setState(3348);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3346);
				uid();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3347);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(CqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(CqlParser.UPDATE, 0); }
		public TerminalNode LOCK() { return getToken(CqlParser.LOCK, 0); }
		public TerminalNode IN() { return getToken(CqlParser.IN, 0); }
		public TerminalNode SHARE() { return getToken(CqlParser.SHARE, 0); }
		public TerminalNode MODE() { return getToken(CqlParser.MODE, 0); }
		public LockClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitLockClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockClauseContext lockClause() throws RecognitionException {
		LockClauseContext _localctx = new LockClauseContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_lockClause);
		try {
			setState(3356);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3350);
				match(FOR);
				setState(3351);
				match(UPDATE);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(3352);
				match(LOCK);
				setState(3353);
				match(IN);
				setState(3354);
				match(SHARE);
				setState(3355);
				match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(CqlParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(CqlParser.FROM, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(CqlParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(CqlParser.IGNORE, 0); }
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode WHERE() { return getToken(CqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(CqlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(CqlParser.LOW_PRIORITY, 0); }
		public SingleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleDeleteStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSingleDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleDeleteStatementContext singleDeleteStatement() throws RecognitionException {
		SingleDeleteStatementContext _localctx = new SingleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_singleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3358);
			match(DELETE);
			setState(3360);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3359);
				((SingleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3363);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(3362);
				match(QUICK);
				}
			}

			setState(3366);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3365);
				match(IGNORE);
				}
			}

			setState(3368);
			match(FROM);
			setState(3369);
			tableName();
			setState(3375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3370);
				match(PARTITION);
				setState(3371);
				match(LR_BRACKET);
				setState(3372);
				uidList();
				setState(3373);
				match(RR_BRACKET);
				}
			}

			setState(3379);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3377);
				match(WHERE);
				setState(3378);
				expression(0);
				}
			}

			setState(3382);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3381);
				orderByClause();
				}
			}

			setState(3386);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3384);
				match(LIMIT);
				setState(3385);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(CqlParser.DELETE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode FROM() { return getToken(CqlParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode USING() { return getToken(CqlParser.USING, 0); }
		public TerminalNode QUICK() { return getToken(CqlParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(CqlParser.IGNORE, 0); }
		public TerminalNode WHERE() { return getToken(CqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(CqlParser.LOW_PRIORITY, 0); }
		public List<TerminalNode> DOT() { return getTokens(CqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(CqlParser.DOT, i);
		}
		public List<TerminalNode> STAR() { return getTokens(CqlParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(CqlParser.STAR, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public MultipleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleDeleteStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitMultipleDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleDeleteStatementContext multipleDeleteStatement() throws RecognitionException {
		MultipleDeleteStatementContext _localctx = new MultipleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_multipleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3388);
			match(DELETE);
			setState(3390);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3389);
				((MultipleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3393);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
			case 1:
				{
				setState(3392);
				match(QUICK);
				}
				break;
			}
			setState(3396);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3395);
				match(IGNORE);
				}
			}

			setState(3437);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				{
				setState(3398);
				tableName();
				setState(3401);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(3399);
					match(DOT);
					setState(3400);
					match(STAR);
					}
				}

				setState(3411);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3403);
					match(COMMA);
					setState(3404);
					tableName();
					setState(3407);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(3405);
						match(DOT);
						setState(3406);
						match(STAR);
						}
					}

					}
					}
					setState(3413);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3414);
				match(FROM);
				setState(3415);
				tableSources();
				}
				break;
			case FROM:
				{
				setState(3417);
				match(FROM);
				setState(3418);
				tableName();
				setState(3421);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(3419);
					match(DOT);
					setState(3420);
					match(STAR);
					}
				}

				setState(3431);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3423);
					match(COMMA);
					setState(3424);
					tableName();
					setState(3427);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(3425);
						match(DOT);
						setState(3426);
						match(STAR);
						}
					}

					}
					}
					setState(3433);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3434);
				match(USING);
				setState(3435);
				tableSources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3441);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3439);
				match(WHERE);
				setState(3440);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerOpenStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(CqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode OPEN() { return getToken(CqlParser.OPEN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(CqlParser.AS, 0); }
		public HandlerOpenStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerOpenStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitHandlerOpenStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerOpenStatementContext handlerOpenStatement() throws RecognitionException {
		HandlerOpenStatementContext _localctx = new HandlerOpenStatementContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_handlerOpenStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3443);
			match(HANDLER);
			setState(3444);
			tableName();
			setState(3445);
			match(OPEN);
			setState(3450);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
			case 1:
				{
				setState(3447);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3446);
					match(AS);
					}
				}

				setState(3449);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadIndexStatementContext extends ParserRuleContext {
		public UidContext index;
		public Token moveOrder;
		public TerminalNode HANDLER() { return getToken(CqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(CqlParser.READ, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public ConstantsContext constants() {
			return getRuleContext(ConstantsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode WHERE() { return getToken(CqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(CqlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(CqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(CqlParser.NEXT, 0); }
		public TerminalNode PREV() { return getToken(CqlParser.PREV, 0); }
		public TerminalNode LAST() { return getToken(CqlParser.LAST, 0); }
		public HandlerReadIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadIndexStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitHandlerReadIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadIndexStatementContext handlerReadIndexStatement() throws RecognitionException {
		HandlerReadIndexStatementContext _localctx = new HandlerReadIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_handlerReadIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3452);
			match(HANDLER);
			setState(3453);
			tableName();
			setState(3454);
			match(READ);
			setState(3455);
			((HandlerReadIndexStatementContext)_localctx).index = uid();
			setState(3462);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL_SYMBOL:
			case GREATER_SYMBOL:
			case LESS_SYMBOL:
			case EXCLAMATION_SYMBOL:
				{
				setState(3456);
				comparisonOperator();
				setState(3457);
				match(LR_BRACKET);
				setState(3458);
				constants();
				setState(3459);
				match(RR_BRACKET);
				}
				break;
			case FIRST:
			case LAST:
			case NEXT:
			case PREV:
				{
				setState(3461);
				((HandlerReadIndexStatementContext)_localctx).moveOrder = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NEXT || _la==PREV) ) {
					((HandlerReadIndexStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3466);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3464);
				match(WHERE);
				setState(3465);
				expression(0);
				}
			}

			setState(3470);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3468);
				match(LIMIT);
				setState(3469);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadStatementContext extends ParserRuleContext {
		public Token moveOrder;
		public TerminalNode HANDLER() { return getToken(CqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(CqlParser.READ, 0); }
		public TerminalNode FIRST() { return getToken(CqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(CqlParser.NEXT, 0); }
		public TerminalNode WHERE() { return getToken(CqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(CqlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public HandlerReadStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitHandlerReadStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadStatementContext handlerReadStatement() throws RecognitionException {
		HandlerReadStatementContext _localctx = new HandlerReadStatementContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_handlerReadStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3472);
			match(HANDLER);
			setState(3473);
			tableName();
			setState(3474);
			match(READ);
			setState(3475);
			((HandlerReadStatementContext)_localctx).moveOrder = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
				((HandlerReadStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3478);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3476);
				match(WHERE);
				setState(3477);
				expression(0);
				}
			}

			setState(3482);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3480);
				match(LIMIT);
				setState(3481);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerCloseStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(CqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode CLOSE() { return getToken(CqlParser.CLOSE, 0); }
		public HandlerCloseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerCloseStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitHandlerCloseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerCloseStatementContext handlerCloseStatement() throws RecognitionException {
		HandlerCloseStatementContext _localctx = new HandlerCloseStatementContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_handlerCloseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3484);
			match(HANDLER);
			setState(3485);
			tableName();
			setState(3486);
			match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(CqlParser.UPDATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(CqlParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(CqlParser.IGNORE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(CqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(CqlParser.LOW_PRIORITY, 0); }
		public TerminalNode AS() { return getToken(CqlParser.AS, 0); }
		public SingleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleUpdateStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSingleUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleUpdateStatementContext singleUpdateStatement() throws RecognitionException {
		SingleUpdateStatementContext _localctx = new SingleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_singleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3488);
			match(UPDATE);
			setState(3490);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3489);
				((SingleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3493);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3492);
				match(IGNORE);
				}
			}

			setState(3495);
			tableName();
			setState(3500);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IGNORED - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (RIGHT - 145)) | (1L << (SCHEMA - 145)) | (1L << (STACKED - 145)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
				{
				setState(3497);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3496);
					match(AS);
					}
				}

				setState(3499);
				uid();
				}
			}

			setState(3502);
			match(SET);
			setState(3503);
			updatedElement();
			setState(3508);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3504);
				match(COMMA);
				setState(3505);
				updatedElement();
				}
				}
				setState(3510);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3513);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3511);
				match(WHERE);
				setState(3512);
				expression(0);
				}
			}

			setState(3516);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3515);
				orderByClause();
				}
			}

			setState(3519);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3518);
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(CqlParser.UPDATE, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode SET() { return getToken(CqlParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(CqlParser.IGNORE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(CqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(CqlParser.LOW_PRIORITY, 0); }
		public MultipleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleUpdateStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitMultipleUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleUpdateStatementContext multipleUpdateStatement() throws RecognitionException {
		MultipleUpdateStatementContext _localctx = new MultipleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_multipleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3521);
			match(UPDATE);
			setState(3523);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3522);
				((MultipleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3526);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3525);
				match(IGNORE);
				}
			}

			setState(3528);
			tableSources();
			setState(3529);
			match(SET);
			setState(3530);
			updatedElement();
			setState(3535);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3531);
				match(COMMA);
				setState(3532);
				updatedElement();
				}
				}
				setState(3537);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3540);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3538);
				match(WHERE);
				setState(3539);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(CqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(CqlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitOrderByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_orderByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3542);
			match(ORDER);
			setState(3543);
			match(BY);
			setState(3544);
			orderByExpression();
			setState(3549);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3545);
				match(COMMA);
				setState(3546);
				orderByExpression();
				}
				}
				setState(3551);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByExpressionContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(CqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(CqlParser.DESC, 0); }
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByExpression; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitOrderByExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByExpressionContext orderByExpression() throws RecognitionException {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_orderByExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3552);
			expression(0);
			setState(3554);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,499,_ctx) ) {
			case 1:
				{
				setState(3553);
				((OrderByExpressionContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((OrderByExpressionContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourcesContext extends ParserRuleContext {
		public List<TableSourceContext> tableSource() {
			return getRuleContexts(TableSourceContext.class);
		}
		public TableSourceContext tableSource(int i) {
			return getRuleContext(TableSourceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public TableSourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSources; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableSources(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourcesContext tableSources() throws RecognitionException {
		TableSourcesContext _localctx = new TableSourcesContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_tableSources);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3556);
			tableSource();
			setState(3561);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3557);
				match(COMMA);
				setState(3558);
				tableSource();
				}
				}
				setState(3563);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceContext extends ParserRuleContext {
		public TableSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSource; }
	 
		public TableSourceContext() { }
		public void copyFrom(TableSourceContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableSourceNestedContext extends TableSourceContext {
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceNestedContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableSourceNested(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourceBaseContext extends TableSourceContext {
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceBaseContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableSourceBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceContext tableSource() throws RecognitionException {
		TableSourceContext _localctx = new TableSourceContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_tableSource);
		int _la;
		try {
			int _alt;
			setState(3581);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,503,_ctx) ) {
			case 1:
				_localctx = new TableSourceBaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3564);
				tableSourceItem();
				setState(3568);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,501,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3565);
						joinPart();
						}
						} 
					}
					setState(3570);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,501,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new TableSourceNestedContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3571);
				match(LR_BRACKET);
				setState(3572);
				tableSourceItem();
				setState(3576);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CROSS - 33)) | (1L << (INNER - 33)) | (1L << (JOIN - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (NATURAL - 110)) | (1L << (RIGHT - 110)) | (1L << (STRAIGHT_JOIN - 110)))) != 0)) {
					{
					{
					setState(3573);
					joinPart();
					}
					}
					setState(3578);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3579);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceItemContext extends ParserRuleContext {
		public TableSourceItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSourceItem; }
	 
		public TableSourceItemContext() { }
		public void copyFrom(TableSourceItemContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubqueryTableItemContext extends TableSourceItemContext {
		public SelectStatementContext parenthesisSubquery;
		public UidContext alias;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode AS() { return getToken(CqlParser.AS, 0); }
		public SubqueryTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSubqueryTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AtomTableItemContext extends TableSourceItemContext {
		public UidContext alias;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public List<IndexHintContext> indexHint() {
			return getRuleContexts(IndexHintContext.class);
		}
		public IndexHintContext indexHint(int i) {
			return getRuleContext(IndexHintContext.class,i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(CqlParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public AtomTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAtomTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourcesItemContext extends TableSourceItemContext {
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TableSourcesItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableSourcesItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceItemContext tableSourceItem() throws RecognitionException {
		TableSourceItemContext _localctx = new TableSourceItemContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_tableSourceItem);
		int _la;
		try {
			int _alt;
			setState(3623);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,511,_ctx) ) {
			case 1:
				_localctx = new AtomTableItemContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3583);
				tableName();
				setState(3589);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(3584);
					match(PARTITION);
					setState(3585);
					match(LR_BRACKET);
					setState(3586);
					uidList();
					setState(3587);
					match(RR_BRACKET);
					}
				}

				setState(3595);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
				case 1:
					{
					setState(3592);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3591);
						match(AS);
						}
					}

					setState(3594);
					((AtomTableItemContext)_localctx).alias = uid();
					}
					break;
				}
				setState(3605);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
				case 1:
					{
					setState(3597);
					indexHint();
					setState(3602);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,507,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3598);
							match(COMMA);
							setState(3599);
							indexHint();
							}
							} 
						}
						setState(3604);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,507,_ctx);
					}
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SubqueryTableItemContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3612);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,509,_ctx) ) {
				case 1:
					{
					setState(3607);
					selectStatement();
					}
					break;
				case 2:
					{
					setState(3608);
					match(LR_BRACKET);
					setState(3609);
					((SubqueryTableItemContext)_localctx).parenthesisSubquery = selectStatement();
					setState(3610);
					match(RR_BRACKET);
					}
					break;
				}
				setState(3615);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3614);
					match(AS);
					}
				}

				setState(3617);
				((SubqueryTableItemContext)_localctx).alias = uid();
				}
				break;
			case 3:
				_localctx = new TableSourcesItemContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3619);
				match(LR_BRACKET);
				setState(3620);
				tableSources();
				setState(3621);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintContext extends ParserRuleContext {
		public Token indexHintAction;
		public Token keyFormat;
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode USE() { return getToken(CqlParser.USE, 0); }
		public TerminalNode IGNORE() { return getToken(CqlParser.IGNORE, 0); }
		public TerminalNode FORCE() { return getToken(CqlParser.FORCE, 0); }
		public TerminalNode INDEX() { return getToken(CqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(CqlParser.KEY, 0); }
		public TerminalNode FOR() { return getToken(CqlParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public IndexHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHint; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitIndexHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintContext indexHint() throws RecognitionException {
		IndexHintContext _localctx = new IndexHintContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_indexHint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3625);
			((IndexHintContext)_localctx).indexHintAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FORCE || _la==IGNORE || _la==USE) ) {
				((IndexHintContext)_localctx).indexHintAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3626);
			((IndexHintContext)_localctx).keyFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
				((IndexHintContext)_localctx).keyFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3629);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3627);
				match(FOR);
				setState(3628);
				indexHintType();
				}
			}

			setState(3631);
			match(LR_BRACKET);
			setState(3632);
			uidList();
			setState(3633);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintTypeContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(CqlParser.JOIN, 0); }
		public TerminalNode ORDER() { return getToken(CqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(CqlParser.BY, 0); }
		public TerminalNode GROUP() { return getToken(CqlParser.GROUP, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitIndexHintType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintTypeContext indexHintType() throws RecognitionException {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_indexHintType);
		try {
			setState(3640);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3635);
				match(JOIN);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3636);
				match(ORDER);
				setState(3637);
				match(BY);
				}
				break;
			case GROUP:
				enterOuterAlt(_localctx, 3);
				{
				setState(3638);
				match(GROUP);
				setState(3639);
				match(BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinPartContext extends ParserRuleContext {
		public JoinPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinPart; }
	 
		public JoinPartContext() { }
		public void copyFrom(JoinPartContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class InnerJoinContext extends JoinPartContext {
		public TerminalNode JOIN() { return getToken(CqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode ON() { return getToken(CqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(CqlParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode INNER() { return getToken(CqlParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(CqlParser.CROSS, 0); }
		public InnerJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitInnerJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NaturalJoinContext extends JoinPartContext {
		public TerminalNode NATURAL() { return getToken(CqlParser.NATURAL, 0); }
		public TerminalNode JOIN() { return getToken(CqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(CqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(CqlParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(CqlParser.OUTER, 0); }
		public NaturalJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitNaturalJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OuterJoinContext extends JoinPartContext {
		public TerminalNode JOIN() { return getToken(CqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(CqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(CqlParser.RIGHT, 0); }
		public TerminalNode ON() { return getToken(CqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(CqlParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode OUTER() { return getToken(CqlParser.OUTER, 0); }
		public OuterJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitOuterJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StraightJoinContext extends JoinPartContext {
		public TerminalNode STRAIGHT_JOIN() { return getToken(CqlParser.STRAIGHT_JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode ON() { return getToken(CqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public StraightJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitStraightJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinPartContext joinPart() throws RecognitionException {
		JoinPartContext _localctx = new JoinPartContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_joinPart);
		int _la;
		try {
			setState(3686);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS:
			case INNER:
			case JOIN:
				_localctx = new InnerJoinContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3643);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CROSS || _la==INNER) {
					{
					setState(3642);
					_la = _input.LA(1);
					if ( !(_la==CROSS || _la==INNER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3645);
				match(JOIN);
				setState(3646);
				tableSourceItem();
				setState(3654);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
				case 1:
					{
					setState(3647);
					match(ON);
					setState(3648);
					expression(0);
					}
					break;
				case 2:
					{
					setState(3649);
					match(USING);
					setState(3650);
					match(LR_BRACKET);
					setState(3651);
					uidList();
					setState(3652);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case STRAIGHT_JOIN:
				_localctx = new StraightJoinContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3656);
				match(STRAIGHT_JOIN);
				setState(3657);
				tableSourceItem();
				setState(3660);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,516,_ctx) ) {
				case 1:
					{
					setState(3658);
					match(ON);
					setState(3659);
					expression(0);
					}
					break;
				}
				}
				break;
			case LEFT:
			case RIGHT:
				_localctx = new OuterJoinContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3662);
				_la = _input.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3664);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3663);
					match(OUTER);
					}
				}

				setState(3666);
				match(JOIN);
				setState(3667);
				tableSourceItem();
				setState(3675);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(3668);
					match(ON);
					setState(3669);
					expression(0);
					}
					break;
				case USING:
					{
					setState(3670);
					match(USING);
					setState(3671);
					match(LR_BRACKET);
					setState(3672);
					uidList();
					setState(3673);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL:
				_localctx = new NaturalJoinContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3677);
				match(NATURAL);
				setState(3682);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT) {
					{
					setState(3678);
					_la = _input.LA(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3680);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(3679);
						match(OUTER);
						}
					}

					}
				}

				setState(3684);
				match(JOIN);
				setState(3685);
				tableSourceItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpression; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitQueryExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionContext queryExpression() throws RecognitionException {
		QueryExpressionContext _localctx = new QueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_queryExpression);
		try {
			setState(3696);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3688);
				match(LR_BRACKET);
				setState(3689);
				querySpecification();
				setState(3690);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3692);
				match(LR_BRACKET);
				setState(3693);
				queryExpression();
				setState(3694);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionNointoContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public QueryExpressionNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionNointo; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitQueryExpressionNointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionNointoContext queryExpressionNointo() throws RecognitionException {
		QueryExpressionNointoContext _localctx = new QueryExpressionNointoContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_queryExpressionNointo);
		try {
			setState(3706);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3698);
				match(LR_BRACKET);
				setState(3699);
				querySpecificationNointo();
				setState(3700);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3702);
				match(LR_BRACKET);
				setState(3703);
				queryExpressionNointo();
				setState(3704);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(CqlParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public SelectIntoExpressionContext selectIntoExpression() {
			return getRuleContext(SelectIntoExpressionContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitQuerySpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_querySpecification);
		int _la;
		try {
			int _alt;
			setState(3766);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,540,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3708);
				match(SELECT);
				setState(3712);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,524,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3709);
						selectSpec();
						}
						} 
					}
					setState(3714);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,524,_ctx);
				}
				setState(3715);
				selectElements();
				setState(3717);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(3716);
					selectIntoExpression();
					}
				}

				setState(3720);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,526,_ctx) ) {
				case 1:
					{
					setState(3719);
					fromClause();
					}
					break;
				}
				setState(3723);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
				case 1:
					{
					setState(3722);
					groupByClause();
					}
					break;
				}
				setState(3726);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HAVING) {
					{
					setState(3725);
					havingClause();
					}
				}

				setState(3729);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WINDOW) {
					{
					setState(3728);
					windowClause();
					}
				}

				setState(3732);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
				case 1:
					{
					setState(3731);
					orderByClause();
					}
					break;
				}
				setState(3735);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
				case 1:
					{
					setState(3734);
					limitClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3737);
				match(SELECT);
				setState(3741);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,532,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3738);
						selectSpec();
						}
						} 
					}
					setState(3743);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,532,_ctx);
				}
				setState(3744);
				selectElements();
				setState(3746);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,533,_ctx) ) {
				case 1:
					{
					setState(3745);
					fromClause();
					}
					break;
				}
				setState(3749);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
				case 1:
					{
					setState(3748);
					groupByClause();
					}
					break;
				}
				setState(3752);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HAVING) {
					{
					setState(3751);
					havingClause();
					}
				}

				setState(3755);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WINDOW) {
					{
					setState(3754);
					windowClause();
					}
				}

				setState(3758);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,537,_ctx) ) {
				case 1:
					{
					setState(3757);
					orderByClause();
					}
					break;
				}
				setState(3761);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
				case 1:
					{
					setState(3760);
					limitClause();
					}
					break;
				}
				setState(3764);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(3763);
					selectIntoExpression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationNointoContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(CqlParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecificationNointo; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitQuerySpecificationNointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationNointoContext querySpecificationNointo() throws RecognitionException {
		QuerySpecificationNointoContext _localctx = new QuerySpecificationNointoContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_querySpecificationNointo);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3768);
			match(SELECT);
			setState(3772);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,541,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3769);
					selectSpec();
					}
					} 
				}
				setState(3774);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,541,_ctx);
			}
			setState(3775);
			selectElements();
			setState(3777);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
			case 1:
				{
				setState(3776);
				fromClause();
				}
				break;
			}
			setState(3780);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
			case 1:
				{
				setState(3779);
				groupByClause();
				}
				break;
			}
			setState(3783);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(3782);
				havingClause();
				}
			}

			setState(3786);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WINDOW) {
				{
				setState(3785);
				windowClause();
				}
			}

			setState(3789);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
			case 1:
				{
				setState(3788);
				orderByClause();
				}
				break;
			}
			setState(3792);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,547,_ctx) ) {
			case 1:
				{
				setState(3791);
				limitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionParenthesisContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(CqlParser.UNION, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(CqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(CqlParser.DISTINCT, 0); }
		public UnionParenthesisContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionParenthesis; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitUnionParenthesis(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionParenthesisContext unionParenthesis() throws RecognitionException {
		UnionParenthesisContext _localctx = new UnionParenthesisContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_unionParenthesis);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3794);
			match(UNION);
			setState(3796);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3795);
				((UnionParenthesisContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionParenthesisContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3798);
			queryExpressionNointo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionStatementContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(CqlParser.UNION, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(CqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(CqlParser.DISTINCT, 0); }
		public UnionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitUnionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionStatementContext unionStatement() throws RecognitionException {
		UnionStatementContext _localctx = new UnionStatementContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_unionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3800);
			match(UNION);
			setState(3802);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3801);
				((UnionStatementContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionStatementContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3806);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(3804);
				querySpecificationNointo();
				}
				break;
			case LR_BRACKET:
				{
				setState(3805);
				queryExpressionNointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectSpecContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(CqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(CqlParser.DISTINCT, 0); }
		public TerminalNode DISTINCTROW() { return getToken(CqlParser.DISTINCTROW, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(CqlParser.HIGH_PRIORITY, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(CqlParser.STRAIGHT_JOIN, 0); }
		public TerminalNode SQL_SMALL_RESULT() { return getToken(CqlParser.SQL_SMALL_RESULT, 0); }
		public TerminalNode SQL_BIG_RESULT() { return getToken(CqlParser.SQL_BIG_RESULT, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(CqlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(CqlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(CqlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_CALC_FOUND_ROWS() { return getToken(CqlParser.SQL_CALC_FOUND_ROWS, 0); }
		public SelectSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectSpec; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSelectSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectSpecContext selectSpec() throws RecognitionException {
		SelectSpecContext _localctx = new SelectSpecContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_selectSpec);
		int _la;
		try {
			setState(3816);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case DISTINCT:
			case DISTINCTROW:
				enterOuterAlt(_localctx, 1);
				{
				setState(3808);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << DISTINCT) | (1L << DISTINCTROW))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case HIGH_PRIORITY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3809);
				match(HIGH_PRIORITY);
				}
				break;
			case STRAIGHT_JOIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3810);
				match(STRAIGHT_JOIN);
				}
				break;
			case SQL_SMALL_RESULT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3811);
				match(SQL_SMALL_RESULT);
				}
				break;
			case SQL_BIG_RESULT:
				enterOuterAlt(_localctx, 5);
				{
				setState(3812);
				match(SQL_BIG_RESULT);
				}
				break;
			case SQL_BUFFER_RESULT:
				enterOuterAlt(_localctx, 6);
				{
				setState(3813);
				match(SQL_BUFFER_RESULT);
				}
				break;
			case SQL_CACHE:
			case SQL_NO_CACHE:
				enterOuterAlt(_localctx, 7);
				{
				setState(3814);
				_la = _input.LA(1);
				if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SQL_CALC_FOUND_ROWS:
				enterOuterAlt(_localctx, 8);
				{
				setState(3815);
				match(SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementsContext extends ParserRuleContext {
		public Token star;
		public List<SelectElementContext> selectElement() {
			return getRuleContexts(SelectElementContext.class);
		}
		public SelectElementContext selectElement(int i) {
			return getRuleContext(SelectElementContext.class,i);
		}
		public TerminalNode STAR() { return getToken(CqlParser.STAR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public SelectElementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElements; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSelectElements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementsContext selectElements() throws RecognitionException {
		SelectElementsContext _localctx = new SelectElementsContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_selectElements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3820);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,552,_ctx) ) {
			case 1:
				{
				setState(3818);
				((SelectElementsContext)_localctx).star = match(STAR);
				}
				break;
			case 2:
				{
				setState(3819);
				selectElement();
				}
				break;
			}
			setState(3826);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3822);
				match(COMMA);
				setState(3823);
				selectElement();
				}
				}
				setState(3828);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementContext extends ParserRuleContext {
		public SelectElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElement; }
	 
		public SelectElementContext() { }
		public void copyFrom(SelectElementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectExpressionElementContext extends SelectElementContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(CqlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(CqlParser.VAR_ASSIGN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(CqlParser.AS, 0); }
		public SelectExpressionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSelectExpressionElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectFunctionElementContext extends SelectElementContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(CqlParser.AS, 0); }
		public SelectFunctionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSelectFunctionElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectStarElementContext extends SelectElementContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode DOT() { return getToken(CqlParser.DOT, 0); }
		public TerminalNode STAR() { return getToken(CqlParser.STAR, 0); }
		public SelectStarElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSelectStarElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectColumnElementContext extends SelectElementContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(CqlParser.AS, 0); }
		public SelectColumnElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSelectColumnElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementContext selectElement() throws RecognitionException {
		SelectElementContext _localctx = new SelectElementContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_selectElement);
		int _la;
		try {
			setState(3858);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,561,_ctx) ) {
			case 1:
				_localctx = new SelectStarElementContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3829);
				fullId();
				setState(3830);
				match(DOT);
				setState(3831);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectColumnElementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3833);
				fullColumnName();
				setState(3838);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,555,_ctx) ) {
				case 1:
					{
					setState(3835);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3834);
						match(AS);
						}
					}

					setState(3837);
					uid();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectFunctionElementContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3840);
				functionCall();
				setState(3845);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
				case 1:
					{
					setState(3842);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3841);
						match(AS);
						}
					}

					setState(3844);
					uid();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SelectExpressionElementContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3849);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
				case 1:
					{
					setState(3847);
					match(LOCAL_ID);
					setState(3848);
					match(VAR_ASSIGN);
					}
					break;
				}
				setState(3851);
				expression(0);
				setState(3856);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
				case 1:
					{
					setState(3853);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3852);
						match(AS);
						}
					}

					setState(3855);
					uid();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectIntoExpressionContext extends ParserRuleContext {
		public SelectIntoExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectIntoExpression; }
	 
		public SelectIntoExpressionContext() { }
		public void copyFrom(SelectIntoExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectIntoVariablesContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(CqlParser.INTO, 0); }
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public SelectIntoVariablesContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSelectIntoVariables(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectIntoTextFileContext extends SelectIntoExpressionContext {
		public Token filename;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public TerminalNode INTO() { return getToken(CqlParser.INTO, 0); }
		public TerminalNode OUTFILE() { return getToken(CqlParser.OUTFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARACTER() { return getToken(CqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(CqlParser.SET, 0); }
		public TerminalNode LINES() { return getToken(CqlParser.LINES, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode FIELDS() { return getToken(CqlParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(CqlParser.COLUMNS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public SelectIntoTextFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSelectIntoTextFile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectIntoDumpFileContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(CqlParser.INTO, 0); }
		public TerminalNode DUMPFILE() { return getToken(CqlParser.DUMPFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public SelectIntoDumpFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSelectIntoDumpFile(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectIntoExpressionContext selectIntoExpression() throws RecognitionException {
		SelectIntoExpressionContext _localctx = new SelectIntoExpressionContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_selectIntoExpression);
		int _la;
		try {
			setState(3896);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,568,_ctx) ) {
			case 1:
				_localctx = new SelectIntoVariablesContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3860);
				match(INTO);
				setState(3861);
				assignmentField();
				setState(3866);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3862);
					match(COMMA);
					setState(3863);
					assignmentField();
					}
					}
					setState(3868);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SelectIntoDumpFileContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3869);
				match(INTO);
				setState(3870);
				match(DUMPFILE);
				setState(3871);
				match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(3872);
				match(INTO);
				setState(3873);
				match(OUTFILE);
				setState(3874);
				((SelectIntoTextFileContext)_localctx).filename = match(STRING_LITERAL);
				setState(3878);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(3875);
					match(CHARACTER);
					setState(3876);
					match(SET);
					setState(3877);
					((SelectIntoTextFileContext)_localctx).charset = charsetName();
					}
				}

				setState(3886);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,565,_ctx) ) {
				case 1:
					{
					setState(3880);
					((SelectIntoTextFileContext)_localctx).fieldsFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
						((SelectIntoTextFileContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3882); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3881);
						selectFieldsInto();
						}
						}
						setState(3884); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
					}
					break;
				}
				setState(3894);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINES) {
					{
					setState(3888);
					match(LINES);
					setState(3890); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3889);
						selectLinesInto();
						}
						}
						setState(3892); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==STARTING || _la==TERMINATED );
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectFieldsIntoContext extends ParserRuleContext {
		public Token terminationField;
		public Token enclosion;
		public Token escaping;
		public TerminalNode TERMINATED() { return getToken(CqlParser.TERMINATED, 0); }
		public TerminalNode BY() { return getToken(CqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENCLOSED() { return getToken(CqlParser.ENCLOSED, 0); }
		public TerminalNode OPTIONALLY() { return getToken(CqlParser.OPTIONALLY, 0); }
		public TerminalNode ESCAPED() { return getToken(CqlParser.ESCAPED, 0); }
		public SelectFieldsIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectFieldsInto; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSelectFieldsInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectFieldsIntoContext selectFieldsInto() throws RecognitionException {
		SelectFieldsIntoContext _localctx = new SelectFieldsIntoContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_selectFieldsInto);
		int _la;
		try {
			setState(3910);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TERMINATED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3898);
				match(TERMINATED);
				setState(3899);
				match(BY);
				setState(3900);
				((SelectFieldsIntoContext)_localctx).terminationField = match(STRING_LITERAL);
				}
				break;
			case ENCLOSED:
			case OPTIONALLY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3902);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONALLY) {
					{
					setState(3901);
					match(OPTIONALLY);
					}
				}

				setState(3904);
				match(ENCLOSED);
				setState(3905);
				match(BY);
				setState(3906);
				((SelectFieldsIntoContext)_localctx).enclosion = match(STRING_LITERAL);
				}
				break;
			case ESCAPED:
				enterOuterAlt(_localctx, 3);
				{
				setState(3907);
				match(ESCAPED);
				setState(3908);
				match(BY);
				setState(3909);
				((SelectFieldsIntoContext)_localctx).escaping = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectLinesIntoContext extends ParserRuleContext {
		public Token starting;
		public Token terminationLine;
		public TerminalNode STARTING() { return getToken(CqlParser.STARTING, 0); }
		public TerminalNode BY() { return getToken(CqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode TERMINATED() { return getToken(CqlParser.TERMINATED, 0); }
		public SelectLinesIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLinesInto; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSelectLinesInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLinesIntoContext selectLinesInto() throws RecognitionException {
		SelectLinesIntoContext _localctx = new SelectLinesIntoContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_selectLinesInto);
		try {
			setState(3918);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STARTING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3912);
				match(STARTING);
				setState(3913);
				match(BY);
				setState(3914);
				((SelectLinesIntoContext)_localctx).starting = match(STRING_LITERAL);
				}
				break;
			case TERMINATED:
				enterOuterAlt(_localctx, 2);
				{
				setState(3915);
				match(TERMINATED);
				setState(3916);
				match(BY);
				setState(3917);
				((SelectLinesIntoContext)_localctx).terminationLine = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public ExpressionContext whereExpr;
		public TerminalNode FROM() { return getToken(CqlParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(CqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_fromClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3922);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3920);
				match(FROM);
				setState(3921);
				tableSources();
				}
			}

			setState(3926);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3924);
				match(WHERE);
				setState(3925);
				((FromClauseContext)_localctx).whereExpr = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(CqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(CqlParser.BY, 0); }
		public List<GroupByItemContext> groupByItem() {
			return getRuleContexts(GroupByItemContext.class);
		}
		public GroupByItemContext groupByItem(int i) {
			return getRuleContext(GroupByItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(CqlParser.WITH, 0); }
		public TerminalNode ROLLUP() { return getToken(CqlParser.ROLLUP, 0); }
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitGroupByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_groupByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3928);
			match(GROUP);
			setState(3929);
			match(BY);
			setState(3930);
			groupByItem();
			setState(3935);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3931);
				match(COMMA);
				setState(3932);
				groupByItem();
				}
				}
				setState(3937);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3940);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,575,_ctx) ) {
			case 1:
				{
				setState(3938);
				match(WITH);
				setState(3939);
				match(ROLLUP);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public ExpressionContext havingExpr;
		public TerminalNode HAVING() { return getToken(CqlParser.HAVING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3942);
			match(HAVING);
			setState(3943);
			((HavingClauseContext)_localctx).havingExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowClauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(CqlParser.WINDOW, 0); }
		public List<WindowNameContext> windowName() {
			return getRuleContexts(WindowNameContext.class);
		}
		public WindowNameContext windowName(int i) {
			return getRuleContext(WindowNameContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(CqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(CqlParser.AS, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(CqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(CqlParser.LR_BRACKET, i);
		}
		public List<WindowSpecContext> windowSpec() {
			return getRuleContexts(WindowSpecContext.class);
		}
		public WindowSpecContext windowSpec(int i) {
			return getRuleContext(WindowSpecContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(CqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(CqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitWindowClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowClauseContext windowClause() throws RecognitionException {
		WindowClauseContext _localctx = new WindowClauseContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_windowClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3945);
			match(WINDOW);
			setState(3946);
			windowName();
			setState(3947);
			match(AS);
			setState(3948);
			match(LR_BRACKET);
			setState(3949);
			windowSpec();
			setState(3950);
			match(RR_BRACKET);
			setState(3960);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3951);
				match(COMMA);
				setState(3952);
				windowName();
				setState(3953);
				match(AS);
				setState(3954);
				match(LR_BRACKET);
				setState(3955);
				windowSpec();
				setState(3956);
				match(RR_BRACKET);
				}
				}
				setState(3962);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByItemContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(CqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(CqlParser.DESC, 0); }
		public GroupByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitGroupByItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByItemContext groupByItem() throws RecognitionException {
		GroupByItemContext _localctx = new GroupByItemContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_groupByItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3963);
			expression(0);
			setState(3965);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,577,_ctx) ) {
			case 1:
				{
				setState(3964);
				((GroupByItemContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((GroupByItemContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public LimitClauseAtomContext offset;
		public LimitClauseAtomContext limit;
		public TerminalNode LIMIT() { return getToken(CqlParser.LIMIT, 0); }
		public TerminalNode OFFSET() { return getToken(CqlParser.OFFSET, 0); }
		public List<LimitClauseAtomContext> limitClauseAtom() {
			return getRuleContexts(LimitClauseAtomContext.class);
		}
		public LimitClauseAtomContext limitClauseAtom(int i) {
			return getRuleContext(LimitClauseAtomContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(CqlParser.COMMA, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3967);
			match(LIMIT);
			setState(3978);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,579,_ctx) ) {
			case 1:
				{
				setState(3971);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,578,_ctx) ) {
				case 1:
					{
					setState(3968);
					((LimitClauseContext)_localctx).offset = limitClauseAtom();
					setState(3969);
					match(COMMA);
					}
					break;
				}
				setState(3973);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				}
				break;
			case 2:
				{
				setState(3974);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				setState(3975);
				match(OFFSET);
				setState(3976);
				((LimitClauseContext)_localctx).offset = limitClauseAtom();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseAtomContext extends ParserRuleContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public LimitClauseAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClauseAtom; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitLimitClauseAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseAtomContext limitClauseAtom() throws RecognitionException {
		LimitClauseAtomContext _localctx = new LimitClauseAtomContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_limitClauseAtom);
		try {
			setState(3983);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3980);
				decimalLiteral();
				}
				break;
			case LOCAL_ID:
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3981);
				mysqlVariable();
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(3982);
				simpleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartTransactionContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(CqlParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(CqlParser.TRANSACTION, 0); }
		public List<TransactionModeContext> transactionMode() {
			return getRuleContexts(TransactionModeContext.class);
		}
		public TransactionModeContext transactionMode(int i) {
			return getRuleContext(TransactionModeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public StartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startTransaction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitStartTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartTransactionContext startTransaction() throws RecognitionException {
		StartTransactionContext _localctx = new StartTransactionContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_startTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3985);
			match(START);
			setState(3986);
			match(TRANSACTION);
			setState(3995);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==READ || _la==WITH) {
				{
				setState(3987);
				transactionMode();
				setState(3992);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3988);
					match(COMMA);
					setState(3989);
					transactionMode();
					}
					}
					setState(3994);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginWorkContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(CqlParser.BEGIN, 0); }
		public TerminalNode WORK() { return getToken(CqlParser.WORK, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginWork; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitBeginWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginWorkContext beginWork() throws RecognitionException {
		BeginWorkContext _localctx = new BeginWorkContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_beginWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3997);
			match(BEGIN);
			setState(3999);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3998);
				match(WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommitWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public TerminalNode COMMIT() { return getToken(CqlParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(CqlParser.WORK, 0); }
		public TerminalNode AND() { return getToken(CqlParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(CqlParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(CqlParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(CqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(CqlParser.NO, i);
		}
		public CommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commitWork; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCommitWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommitWorkContext commitWork() throws RecognitionException {
		CommitWorkContext _localctx = new CommitWorkContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_commitWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4001);
			match(COMMIT);
			setState(4003);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(4002);
				match(WORK);
				}
			}

			setState(4010);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(4005);
				match(AND);
				setState(4007);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4006);
					((CommitWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(4009);
				match(CHAIN);
				}
			}

			setState(4016);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,588,_ctx) ) {
			case 1:
				{
				setState(4013);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4012);
					((CommitWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(4015);
				match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public TerminalNode ROLLBACK() { return getToken(CqlParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(CqlParser.WORK, 0); }
		public TerminalNode AND() { return getToken(CqlParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(CqlParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(CqlParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(CqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(CqlParser.NO, i);
		}
		public RollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackWork; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitRollbackWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackWorkContext rollbackWork() throws RecognitionException {
		RollbackWorkContext _localctx = new RollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_rollbackWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4018);
			match(ROLLBACK);
			setState(4020);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(4019);
				match(WORK);
				}
			}

			setState(4027);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(4022);
				match(AND);
				setState(4024);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4023);
					((RollbackWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(4026);
				match(CHAIN);
				}
			}

			setState(4033);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
			case 1:
				{
				setState(4030);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4029);
					((RollbackWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(4032);
				match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SavepointStatementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(CqlParser.SAVEPOINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepointStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSavepointStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SavepointStatementContext savepointStatement() throws RecognitionException {
		SavepointStatementContext _localctx = new SavepointStatementContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_savepointStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4035);
			match(SAVEPOINT);
			setState(4036);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackStatementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(CqlParser.ROLLBACK, 0); }
		public TerminalNode TO() { return getToken(CqlParser.TO, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode WORK() { return getToken(CqlParser.WORK, 0); }
		public TerminalNode SAVEPOINT() { return getToken(CqlParser.SAVEPOINT, 0); }
		public RollbackStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitRollbackStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackStatementContext rollbackStatement() throws RecognitionException {
		RollbackStatementContext _localctx = new RollbackStatementContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_rollbackStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4038);
			match(ROLLBACK);
			setState(4040);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(4039);
				match(WORK);
				}
			}

			setState(4042);
			match(TO);
			setState(4044);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
			case 1:
				{
				setState(4043);
				match(SAVEPOINT);
				}
				break;
			}
			setState(4046);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReleaseStatementContext extends ParserRuleContext {
		public TerminalNode RELEASE() { return getToken(CqlParser.RELEASE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(CqlParser.SAVEPOINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ReleaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_releaseStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitReleaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReleaseStatementContext releaseStatement() throws RecognitionException {
		ReleaseStatementContext _localctx = new ReleaseStatementContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_releaseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4048);
			match(RELEASE);
			setState(4049);
			match(SAVEPOINT);
			setState(4050);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTablesContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(CqlParser.LOCK, 0); }
		public TerminalNode TABLES() { return getToken(CqlParser.TABLES, 0); }
		public List<LockTableElementContext> lockTableElement() {
			return getRuleContexts(LockTableElementContext.class);
		}
		public LockTableElementContext lockTableElement(int i) {
			return getRuleContext(LockTableElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public LockTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTables; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitLockTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTablesContext lockTables() throws RecognitionException {
		LockTablesContext _localctx = new LockTablesContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_lockTables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4052);
			match(LOCK);
			setState(4053);
			match(TABLES);
			setState(4054);
			lockTableElement();
			setState(4059);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4055);
				match(COMMA);
				setState(4056);
				lockTableElement();
				}
				}
				setState(4061);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlockTablesContext extends ParserRuleContext {
		public TerminalNode UNLOCK() { return getToken(CqlParser.UNLOCK, 0); }
		public TerminalNode TABLES() { return getToken(CqlParser.TABLES, 0); }
		public UnlockTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlockTables; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitUnlockTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlockTablesContext unlockTables() throws RecognitionException {
		UnlockTablesContext _localctx = new UnlockTablesContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_unlockTables);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4062);
			match(UNLOCK);
			setState(4063);
			match(TABLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetAutocommitStatementContext extends ParserRuleContext {
		public Token autocommitValue;
		public TerminalNode SET() { return getToken(CqlParser.SET, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(CqlParser.AUTOCOMMIT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(CqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(CqlParser.ONE_DECIMAL, 0); }
		public SetAutocommitStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setAutocommitStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSetAutocommitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetAutocommitStatementContext setAutocommitStatement() throws RecognitionException {
		SetAutocommitStatementContext _localctx = new SetAutocommitStatementContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_setAutocommitStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4065);
			match(SET);
			setState(4066);
			match(AUTOCOMMIT);
			setState(4067);
			match(EQUAL_SYMBOL);
			setState(4068);
			((SetAutocommitStatementContext)_localctx).autocommitValue = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				((SetAutocommitStatementContext)_localctx).autocommitValue = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetTransactionStatementContext extends ParserRuleContext {
		public Token transactionContext;
		public TerminalNode SET() { return getToken(CqlParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(CqlParser.TRANSACTION, 0); }
		public List<TransactionOptionContext> transactionOption() {
			return getRuleContexts(TransactionOptionContext.class);
		}
		public TransactionOptionContext transactionOption(int i) {
			return getRuleContext(TransactionOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public TerminalNode GLOBAL() { return getToken(CqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(CqlParser.SESSION, 0); }
		public SetTransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTransactionStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSetTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetTransactionStatementContext setTransactionStatement() throws RecognitionException {
		SetTransactionStatementContext _localctx = new SetTransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_setTransactionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4070);
			match(SET);
			setState(4072);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==SESSION) {
				{
				setState(4071);
				((SetTransactionStatementContext)_localctx).transactionContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==SESSION) ) {
					((SetTransactionStatementContext)_localctx).transactionContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4074);
			match(TRANSACTION);
			setState(4075);
			transactionOption();
			setState(4080);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4076);
				match(COMMA);
				setState(4077);
				transactionOption();
				}
				}
				setState(4082);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionModeContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(CqlParser.WITH, 0); }
		public TerminalNode CONSISTENT() { return getToken(CqlParser.CONSISTENT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(CqlParser.SNAPSHOT, 0); }
		public TerminalNode READ() { return getToken(CqlParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(CqlParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(CqlParser.ONLY, 0); }
		public TransactionModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionMode; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTransactionMode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeContext transactionMode() throws RecognitionException {
		TransactionModeContext _localctx = new TransactionModeContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_transactionMode);
		try {
			setState(4090);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,599,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4083);
				match(WITH);
				setState(4084);
				match(CONSISTENT);
				setState(4085);
				match(SNAPSHOT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4086);
				match(READ);
				setState(4087);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4088);
				match(READ);
				setState(4089);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTableElementContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public LockActionContext lockAction() {
			return getRuleContext(LockActionContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(CqlParser.AS, 0); }
		public LockTableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTableElement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitLockTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTableElementContext lockTableElement() throws RecognitionException {
		LockTableElementContext _localctx = new LockTableElementContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_lockTableElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4092);
			tableName();
			setState(4097);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IGNORED - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (RIGHT - 145)) | (1L << (SCHEMA - 145)) | (1L << (STACKED - 145)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
				{
				setState(4094);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4093);
					match(AS);
					}
				}

				setState(4096);
				uid();
				}
			}

			setState(4099);
			lockAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockActionContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(CqlParser.READ, 0); }
		public TerminalNode LOCAL() { return getToken(CqlParser.LOCAL, 0); }
		public TerminalNode WRITE() { return getToken(CqlParser.WRITE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(CqlParser.LOW_PRIORITY, 0); }
		public LockActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockAction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitLockAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockActionContext lockAction() throws RecognitionException {
		LockActionContext _localctx = new LockActionContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_lockAction);
		int _la;
		try {
			setState(4109);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				enterOuterAlt(_localctx, 1);
				{
				setState(4101);
				match(READ);
				setState(4103);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL) {
					{
					setState(4102);
					match(LOCAL);
					}
				}

				}
				break;
			case LOW_PRIORITY:
			case WRITE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4106);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOW_PRIORITY) {
					{
					setState(4105);
					match(LOW_PRIORITY);
					}
				}

				setState(4108);
				match(WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionOptionContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(CqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(CqlParser.LEVEL, 0); }
		public TransactionLevelContext transactionLevel() {
			return getRuleContext(TransactionLevelContext.class,0);
		}
		public TerminalNode READ() { return getToken(CqlParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(CqlParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(CqlParser.ONLY, 0); }
		public TransactionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTransactionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionOptionContext transactionOption() throws RecognitionException {
		TransactionOptionContext _localctx = new TransactionOptionContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_transactionOption);
		try {
			setState(4118);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,605,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4111);
				match(ISOLATION);
				setState(4112);
				match(LEVEL);
				setState(4113);
				transactionLevel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4114);
				match(READ);
				setState(4115);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4116);
				match(READ);
				setState(4117);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(CqlParser.REPEATABLE, 0); }
		public TerminalNode READ() { return getToken(CqlParser.READ, 0); }
		public TerminalNode COMMITTED() { return getToken(CqlParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(CqlParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(CqlParser.SERIALIZABLE, 0); }
		public TransactionLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevel; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTransactionLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionLevelContext transactionLevel() throws RecognitionException {
		TransactionLevelContext _localctx = new TransactionLevelContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_transactionLevel);
		try {
			setState(4127);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,606,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4120);
				match(REPEATABLE);
				setState(4121);
				match(READ);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4122);
				match(READ);
				setState(4123);
				match(COMMITTED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4124);
				match(READ);
				setState(4125);
				match(UNCOMMITTED);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4126);
				match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeMasterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(CqlParser.CHANGE, 0); }
		public TerminalNode MASTER() { return getToken(CqlParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(CqlParser.TO, 0); }
		public List<MasterOptionContext> masterOption() {
			return getRuleContexts(MasterOptionContext.class);
		}
		public MasterOptionContext masterOption(int i) {
			return getRuleContext(MasterOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ChangeMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeMaster; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitChangeMaster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeMasterContext changeMaster() throws RecognitionException {
		ChangeMasterContext _localctx = new ChangeMasterContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_changeMaster);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4129);
			match(CHANGE);
			setState(4130);
			match(MASTER);
			setState(4131);
			match(TO);
			setState(4132);
			masterOption();
			setState(4137);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4133);
				match(COMMA);
				setState(4134);
				masterOption();
				}
				}
				setState(4139);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4141);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4140);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeReplicationFilterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(CqlParser.CHANGE, 0); }
		public TerminalNode REPLICATION() { return getToken(CqlParser.REPLICATION, 0); }
		public TerminalNode FILTER() { return getToken(CqlParser.FILTER, 0); }
		public List<ReplicationFilterContext> replicationFilter() {
			return getRuleContexts(ReplicationFilterContext.class);
		}
		public ReplicationFilterContext replicationFilter(int i) {
			return getRuleContext(ReplicationFilterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public ChangeReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationFilter; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitChangeReplicationFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeReplicationFilterContext changeReplicationFilter() throws RecognitionException {
		ChangeReplicationFilterContext _localctx = new ChangeReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_changeReplicationFilter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4143);
			match(CHANGE);
			setState(4144);
			match(REPLICATION);
			setState(4145);
			match(FILTER);
			setState(4146);
			replicationFilter();
			setState(4151);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4147);
				match(COMMA);
				setState(4148);
				replicationFilter();
				}
				}
				setState(4153);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PurgeBinaryLogsContext extends ParserRuleContext {
		public Token purgeFormat;
		public Token fileName;
		public Token timeValue;
		public TerminalNode PURGE() { return getToken(CqlParser.PURGE, 0); }
		public TerminalNode LOGS() { return getToken(CqlParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(CqlParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(CqlParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(CqlParser.TO, 0); }
		public TerminalNode BEFORE() { return getToken(CqlParser.BEFORE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public PurgeBinaryLogsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_purgeBinaryLogs; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPurgeBinaryLogs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PurgeBinaryLogsContext purgeBinaryLogs() throws RecognitionException {
		PurgeBinaryLogsContext _localctx = new PurgeBinaryLogsContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_purgeBinaryLogs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4154);
			match(PURGE);
			setState(4155);
			((PurgeBinaryLogsContext)_localctx).purgeFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BINARY || _la==MASTER) ) {
				((PurgeBinaryLogsContext)_localctx).purgeFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4156);
			match(LOGS);
			setState(4161);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(4157);
				match(TO);
				setState(4158);
				((PurgeBinaryLogsContext)_localctx).fileName = match(STRING_LITERAL);
				}
				break;
			case BEFORE:
				{
				setState(4159);
				match(BEFORE);
				setState(4160);
				((PurgeBinaryLogsContext)_localctx).timeValue = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetMasterContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(CqlParser.RESET, 0); }
		public TerminalNode MASTER() { return getToken(CqlParser.MASTER, 0); }
		public ResetMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetMaster; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitResetMaster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetMasterContext resetMaster() throws RecognitionException {
		ResetMasterContext _localctx = new ResetMasterContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_resetMaster);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4163);
			match(RESET);
			setState(4164);
			match(MASTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetSlaveContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(CqlParser.RESET, 0); }
		public TerminalNode SLAVE() { return getToken(CqlParser.SLAVE, 0); }
		public TerminalNode ALL() { return getToken(CqlParser.ALL, 0); }
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ResetSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetSlave; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitResetSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetSlaveContext resetSlave() throws RecognitionException {
		ResetSlaveContext _localctx = new ResetSlaveContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_resetSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4166);
			match(RESET);
			setState(4167);
			match(SLAVE);
			setState(4169);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(4168);
				match(ALL);
				}
			}

			setState(4172);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4171);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartSlaveContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(CqlParser.START, 0); }
		public TerminalNode SLAVE() { return getToken(CqlParser.SLAVE, 0); }
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public TerminalNode UNTIL() { return getToken(CqlParser.UNTIL, 0); }
		public UntilOptionContext untilOption() {
			return getRuleContext(UntilOptionContext.class,0);
		}
		public List<ConnectionOptionContext> connectionOption() {
			return getRuleContexts(ConnectionOptionContext.class);
		}
		public ConnectionOptionContext connectionOption(int i) {
			return getRuleContext(ConnectionOptionContext.class,i);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public StartSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startSlave; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitStartSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartSlaveContext startSlave() throws RecognitionException {
		StartSlaveContext _localctx = new StartSlaveContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_startSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4174);
			match(START);
			setState(4175);
			match(SLAVE);
			setState(4184);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				setState(4176);
				threadType();
				setState(4181);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4177);
					match(COMMA);
					setState(4178);
					threadType();
					}
					}
					setState(4183);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4188);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(4186);
				match(UNTIL);
				setState(4187);
				untilOption();
				}
			}

			setState(4193);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DEFAULT_AUTH || _la==PASSWORD || _la==PLUGIN_DIR || _la==USER) {
				{
				{
				setState(4190);
				connectionOption();
				}
				}
				setState(4195);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4197);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4196);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopSlaveContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(CqlParser.STOP, 0); }
		public TerminalNode SLAVE() { return getToken(CqlParser.SLAVE, 0); }
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public StopSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopSlave; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitStopSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StopSlaveContext stopSlave() throws RecognitionException {
		StopSlaveContext _localctx = new StopSlaveContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_stopSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4199);
			match(STOP);
			setState(4200);
			match(SLAVE);
			setState(4209);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				setState(4201);
				threadType();
				setState(4206);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4202);
					match(COMMA);
					setState(4203);
					threadType();
					}
					}
					setState(4208);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartGroupReplicationContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(CqlParser.START, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(CqlParser.GROUP_REPLICATION, 0); }
		public StartGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startGroupReplication; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitStartGroupReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartGroupReplicationContext startGroupReplication() throws RecognitionException {
		StartGroupReplicationContext _localctx = new StartGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_startGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4211);
			match(START);
			setState(4212);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopGroupReplicationContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(CqlParser.STOP, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(CqlParser.GROUP_REPLICATION, 0); }
		public StopGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopGroupReplication; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitStopGroupReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StopGroupReplicationContext stopGroupReplication() throws RecognitionException {
		StopGroupReplicationContext _localctx = new StopGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_stopGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4214);
			match(STOP);
			setState(4215);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterOptionContext extends ParserRuleContext {
		public MasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterOption; }
	 
		public MasterOptionContext() { }
		public void copyFrom(MasterOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class MasterStringOptionContext extends MasterOptionContext {
		public StringMasterOptionContext stringMasterOption() {
			return getRuleContext(StringMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public MasterStringOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitMasterStringOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterRealOptionContext extends MasterOptionContext {
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(CqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode REAL_LITERAL() { return getToken(CqlParser.REAL_LITERAL, 0); }
		public MasterRealOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitMasterRealOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterBoolOptionContext extends MasterOptionContext {
		public Token boolVal;
		public BoolMasterOptionContext boolMasterOption() {
			return getRuleContext(BoolMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(CqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(CqlParser.ONE_DECIMAL, 0); }
		public MasterBoolOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitMasterBoolOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterUidListOptionContext extends MasterOptionContext {
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(CqlParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public MasterUidListOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitMasterUidListOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterDecimalOptionContext extends MasterOptionContext {
		public DecimalMasterOptionContext decimalMasterOption() {
			return getRuleContext(DecimalMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MasterDecimalOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitMasterDecimalOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MasterOptionContext masterOption() throws RecognitionException {
		MasterOptionContext _localctx = new MasterOptionContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_masterOption);
		int _la;
		try {
			setState(4246);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER_BIND:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_PASSWORD:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case RELAY_LOG_FILE:
				_localctx = new MasterStringOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4217);
				stringMasterOption();
				setState(4218);
				match(EQUAL_SYMBOL);
				setState(4219);
				match(STRING_LITERAL);
				}
				break;
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_LOG_POS:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case RELAY_LOG_POS:
				_localctx = new MasterDecimalOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4221);
				decimalMasterOption();
				setState(4222);
				match(EQUAL_SYMBOL);
				setState(4223);
				decimalLiteral();
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT:
			case MASTER_AUTO_POSITION:
			case MASTER_SSL:
				_localctx = new MasterBoolOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4225);
				boolMasterOption();
				setState(4226);
				match(EQUAL_SYMBOL);
				setState(4227);
				((MasterBoolOptionContext)_localctx).boolVal = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((MasterBoolOptionContext)_localctx).boolVal = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case MASTER_HEARTBEAT_PERIOD:
				_localctx = new MasterRealOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4229);
				match(MASTER_HEARTBEAT_PERIOD);
				setState(4230);
				match(EQUAL_SYMBOL);
				setState(4231);
				match(REAL_LITERAL);
				}
				break;
			case IGNORE_SERVER_IDS:
				_localctx = new MasterUidListOptionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4232);
				match(IGNORE_SERVER_IDS);
				setState(4233);
				match(EQUAL_SYMBOL);
				setState(4234);
				match(LR_BRACKET);
				setState(4243);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
					{
					setState(4235);
					uid();
					setState(4240);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4236);
						match(COMMA);
						setState(4237);
						uid();
						}
						}
						setState(4242);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(4245);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_BIND() { return getToken(CqlParser.MASTER_BIND, 0); }
		public TerminalNode MASTER_HOST() { return getToken(CqlParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_USER() { return getToken(CqlParser.MASTER_USER, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(CqlParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(CqlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(CqlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(CqlParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(CqlParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(CqlParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(CqlParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(CqlParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(CqlParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(CqlParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(CqlParser.MASTER_TLS_VERSION, 0); }
		public StringMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringMasterOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitStringMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringMasterOptionContext stringMasterOption() throws RecognitionException {
		StringMasterOptionContext _localctx = new StringMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_stringMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4248);
			_la = _input.LA(1);
			if ( !(_la==MASTER_BIND || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)))) != 0) || _la==RELAY_LOG_FILE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_PORT() { return getToken(CqlParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(CqlParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(CqlParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(CqlParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(CqlParser.MASTER_LOG_POS, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(CqlParser.RELAY_LOG_POS, 0); }
		public DecimalMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalMasterOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDecimalMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecimalMasterOptionContext decimalMasterOption() throws RecognitionException {
		DecimalMasterOptionContext _localctx = new DecimalMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_decimalMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4250);
			_la = _input.LA(1);
			if ( !(((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (MASTER_CONNECT_RETRY - 464)) | (1L << (MASTER_DELAY - 464)) | (1L << (MASTER_LOG_POS - 464)) | (1L << (MASTER_PORT - 464)) | (1L << (MASTER_RETRY_COUNT - 464)))) != 0) || _la==RELAY_LOG_POS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoolMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(CqlParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_SSL() { return getToken(CqlParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_VERIFY_SERVER_CERT() { return getToken(CqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0); }
		public BoolMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolMasterOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitBoolMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BoolMasterOptionContext boolMasterOption() throws RecognitionException {
		BoolMasterOptionContext _localctx = new BoolMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_boolMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4252);
			_la = _input.LA(1);
			if ( !(_la==MASTER_SSL_VERIFY_SERVER_CERT || _la==MASTER_AUTO_POSITION || _la==MASTER_SSL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChannelOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(CqlParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(CqlParser.CHANNEL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public ChannelOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_channelOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitChannelOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChannelOptionContext channelOption() throws RecognitionException {
		ChannelOptionContext _localctx = new ChannelOptionContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_channelOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4254);
			match(FOR);
			setState(4255);
			match(CHANNEL);
			setState(4256);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationFilterContext extends ParserRuleContext {
		public ReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationFilter; }
	 
		public ReplicationFilterContext() { }
		public void copyFrom(ReplicationFilterContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class WildIgnoreTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(CqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public WildIgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitWildIgnoreTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(CqlParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public DoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDoTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IgnoreTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(CqlParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public IgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitIgnoreTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RewriteDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(CqlParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public List<TablePairContext> tablePair() {
			return getRuleContexts(TablePairContext.class);
		}
		public TablePairContext tablePair(int i) {
			return getRuleContext(TablePairContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public RewriteDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitRewriteDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_DO_DB() { return getToken(CqlParser.REPLICATE_DO_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public DoDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDoDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IgnoreDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(CqlParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public IgnoreDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitIgnoreDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WildDoTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(CqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public WildDoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitWildDoTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicationFilterContext replicationFilter() throws RecognitionException {
		ReplicationFilterContext _localctx = new ReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_replicationFilter);
		int _la;
		try {
			setState(4307);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPLICATE_DO_DB:
				_localctx = new DoDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4258);
				match(REPLICATE_DO_DB);
				setState(4259);
				match(EQUAL_SYMBOL);
				setState(4260);
				match(LR_BRACKET);
				setState(4261);
				uidList();
				setState(4262);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_DB:
				_localctx = new IgnoreDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4264);
				match(REPLICATE_IGNORE_DB);
				setState(4265);
				match(EQUAL_SYMBOL);
				setState(4266);
				match(LR_BRACKET);
				setState(4267);
				uidList();
				setState(4268);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_DO_TABLE:
				_localctx = new DoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4270);
				match(REPLICATE_DO_TABLE);
				setState(4271);
				match(EQUAL_SYMBOL);
				setState(4272);
				match(LR_BRACKET);
				setState(4273);
				tables();
				setState(4274);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_TABLE:
				_localctx = new IgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4276);
				match(REPLICATE_IGNORE_TABLE);
				setState(4277);
				match(EQUAL_SYMBOL);
				setState(4278);
				match(LR_BRACKET);
				setState(4279);
				tables();
				setState(4280);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_DO_TABLE:
				_localctx = new WildDoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4282);
				match(REPLICATE_WILD_DO_TABLE);
				setState(4283);
				match(EQUAL_SYMBOL);
				setState(4284);
				match(LR_BRACKET);
				setState(4285);
				simpleStrings();
				setState(4286);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE:
				_localctx = new WildIgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4288);
				match(REPLICATE_WILD_IGNORE_TABLE);
				setState(4289);
				match(EQUAL_SYMBOL);
				setState(4290);
				match(LR_BRACKET);
				setState(4291);
				simpleStrings();
				setState(4292);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_REWRITE_DB:
				_localctx = new RewriteDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4294);
				match(REPLICATE_REWRITE_DB);
				setState(4295);
				match(EQUAL_SYMBOL);
				setState(4296);
				match(LR_BRACKET);
				setState(4297);
				tablePair();
				setState(4302);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4298);
					match(COMMA);
					setState(4299);
					tablePair();
					}
					}
					setState(4304);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4305);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablePairContext extends ParserRuleContext {
		public TableNameContext firstTable;
		public TableNameContext secondTable;
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(CqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TablePairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablePair; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTablePair(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablePairContext tablePair() throws RecognitionException {
		TablePairContext _localctx = new TablePairContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_tablePair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4309);
			match(LR_BRACKET);
			setState(4310);
			((TablePairContext)_localctx).firstTable = tableName();
			setState(4311);
			match(COMMA);
			setState(4312);
			((TablePairContext)_localctx).secondTable = tableName();
			setState(4313);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThreadTypeContext extends ParserRuleContext {
		public TerminalNode IO_THREAD() { return getToken(CqlParser.IO_THREAD, 0); }
		public TerminalNode SQL_THREAD() { return getToken(CqlParser.SQL_THREAD, 0); }
		public ThreadTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_threadType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitThreadType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ThreadTypeContext threadType() throws RecognitionException {
		ThreadTypeContext _localctx = new ThreadTypeContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_threadType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4315);
			_la = _input.LA(1);
			if ( !(_la==IO_THREAD || _la==SQL_THREAD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UntilOptionContext extends ParserRuleContext {
		public UntilOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_untilOption; }
	 
		public UntilOptionContext() { }
		public void copyFrom(UntilOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class GtidsUntilOptionContext extends UntilOptionContext {
		public Token gtids;
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public GtuidSetContext gtuidSet() {
			return getRuleContext(GtuidSetContext.class,0);
		}
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(CqlParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(CqlParser.SQL_AFTER_GTIDS, 0); }
		public GtidsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitGtidsUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SqlGapsUntilOptionContext extends UntilOptionContext {
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(CqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public SqlGapsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSqlGapsUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterLogUntilOptionContext extends UntilOptionContext {
		public TerminalNode MASTER_LOG_FILE() { return getToken(CqlParser.MASTER_LOG_FILE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(CqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(CqlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode COMMA() { return getToken(CqlParser.COMMA, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(CqlParser.MASTER_LOG_POS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MasterLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitMasterLogUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RelayLogUntilOptionContext extends UntilOptionContext {
		public TerminalNode RELAY_LOG_FILE() { return getToken(CqlParser.RELAY_LOG_FILE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(CqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(CqlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode COMMA() { return getToken(CqlParser.COMMA, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(CqlParser.RELAY_LOG_POS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public RelayLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitRelayLogUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UntilOptionContext untilOption() throws RecognitionException {
		UntilOptionContext _localctx = new UntilOptionContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_untilOption);
		int _la;
		try {
			setState(4335);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQL_AFTER_GTIDS:
			case SQL_BEFORE_GTIDS:
				_localctx = new GtidsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4317);
				((GtidsUntilOptionContext)_localctx).gtids = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS || _la==SQL_BEFORE_GTIDS) ) {
					((GtidsUntilOptionContext)_localctx).gtids = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4318);
				match(EQUAL_SYMBOL);
				setState(4319);
				gtuidSet();
				}
				break;
			case MASTER_LOG_FILE:
				_localctx = new MasterLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4320);
				match(MASTER_LOG_FILE);
				setState(4321);
				match(EQUAL_SYMBOL);
				setState(4322);
				match(STRING_LITERAL);
				setState(4323);
				match(COMMA);
				setState(4324);
				match(MASTER_LOG_POS);
				setState(4325);
				match(EQUAL_SYMBOL);
				setState(4326);
				decimalLiteral();
				}
				break;
			case RELAY_LOG_FILE:
				_localctx = new RelayLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4327);
				match(RELAY_LOG_FILE);
				setState(4328);
				match(EQUAL_SYMBOL);
				setState(4329);
				match(STRING_LITERAL);
				setState(4330);
				match(COMMA);
				setState(4331);
				match(RELAY_LOG_POS);
				setState(4332);
				match(EQUAL_SYMBOL);
				setState(4333);
				decimalLiteral();
				}
				break;
			case SQL_AFTER_MTS_GAPS:
				_localctx = new SqlGapsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4334);
				match(SQL_AFTER_MTS_GAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConnectionOptionContext extends ParserRuleContext {
		public ConnectionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectionOption; }
	 
		public ConnectionOptionContext() { }
		public void copyFrom(ConnectionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PluginDirConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptPluginDir;
		public TerminalNode PLUGIN_DIR() { return getToken(CqlParser.PLUGIN_DIR, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public PluginDirConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPluginDirConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UserConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptUser;
		public TerminalNode USER() { return getToken(CqlParser.USER, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public UserConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitUserConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefaultAuthConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptDefAuth;
		public TerminalNode DEFAULT_AUTH() { return getToken(CqlParser.DEFAULT_AUTH, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public DefaultAuthConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDefaultAuthConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptPassword;
		public TerminalNode PASSWORD() { return getToken(CqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public PasswordConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPasswordConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConnectionOptionContext connectionOption() throws RecognitionException {
		ConnectionOptionContext _localctx = new ConnectionOptionContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_connectionOption);
		try {
			setState(4349);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER:
				_localctx = new UserConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4337);
				match(USER);
				setState(4338);
				match(EQUAL_SYMBOL);
				setState(4339);
				((UserConnectionOptionContext)_localctx).conOptUser = match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				_localctx = new PasswordConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4340);
				match(PASSWORD);
				setState(4341);
				match(EQUAL_SYMBOL);
				setState(4342);
				((PasswordConnectionOptionContext)_localctx).conOptPassword = match(STRING_LITERAL);
				}
				break;
			case DEFAULT_AUTH:
				_localctx = new DefaultAuthConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4343);
				match(DEFAULT_AUTH);
				setState(4344);
				match(EQUAL_SYMBOL);
				setState(4345);
				((DefaultAuthConnectionOptionContext)_localctx).conOptDefAuth = match(STRING_LITERAL);
				}
				break;
			case PLUGIN_DIR:
				_localctx = new PluginDirConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4346);
				match(PLUGIN_DIR);
				setState(4347);
				match(EQUAL_SYMBOL);
				setState(4348);
				((PluginDirConnectionOptionContext)_localctx).conOptPluginDir = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GtuidSetContext extends ParserRuleContext {
		public List<UuidSetContext> uuidSet() {
			return getRuleContexts(UuidSetContext.class);
		}
		public UuidSetContext uuidSet(int i) {
			return getRuleContext(UuidSetContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public GtuidSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gtuidSet; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitGtuidSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GtuidSetContext gtuidSet() throws RecognitionException {
		GtuidSetContext _localctx = new GtuidSetContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_gtuidSet);
		int _la;
		try {
			setState(4360);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4351);
				uuidSet();
				setState(4356);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4352);
					match(COMMA);
					setState(4353);
					uuidSet();
					}
					}
					setState(4358);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4359);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaStartTransactionContext extends ParserRuleContext {
		public Token xaStart;
		public Token xaAction;
		public TerminalNode XA() { return getToken(CqlParser.XA, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode START() { return getToken(CqlParser.START, 0); }
		public TerminalNode BEGIN() { return getToken(CqlParser.BEGIN, 0); }
		public TerminalNode JOIN() { return getToken(CqlParser.JOIN, 0); }
		public TerminalNode RESUME() { return getToken(CqlParser.RESUME, 0); }
		public XaStartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaStartTransaction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitXaStartTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaStartTransactionContext xaStartTransaction() throws RecognitionException {
		XaStartTransactionContext _localctx = new XaStartTransactionContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_xaStartTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4362);
			match(XA);
			setState(4363);
			((XaStartTransactionContext)_localctx).xaStart = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEGIN || _la==START) ) {
				((XaStartTransactionContext)_localctx).xaStart = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4364);
			xid();
			setState(4366);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==JOIN || _la==RESUME) {
				{
				setState(4365);
				((XaStartTransactionContext)_localctx).xaAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JOIN || _la==RESUME) ) {
					((XaStartTransactionContext)_localctx).xaAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaEndTransactionContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(CqlParser.XA, 0); }
		public TerminalNode END() { return getToken(CqlParser.END, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode SUSPEND() { return getToken(CqlParser.SUSPEND, 0); }
		public TerminalNode FOR() { return getToken(CqlParser.FOR, 0); }
		public TerminalNode MIGRATE() { return getToken(CqlParser.MIGRATE, 0); }
		public XaEndTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaEndTransaction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitXaEndTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaEndTransactionContext xaEndTransaction() throws RecognitionException {
		XaEndTransactionContext _localctx = new XaEndTransactionContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_xaEndTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4368);
			match(XA);
			setState(4369);
			match(END);
			setState(4370);
			xid();
			setState(4376);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUSPEND) {
				{
				setState(4371);
				match(SUSPEND);
				setState(4374);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4372);
					match(FOR);
					setState(4373);
					match(MIGRATE);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaPrepareStatementContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(CqlParser.XA, 0); }
		public TerminalNode PREPARE() { return getToken(CqlParser.PREPARE, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaPrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaPrepareStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitXaPrepareStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaPrepareStatementContext xaPrepareStatement() throws RecognitionException {
		XaPrepareStatementContext _localctx = new XaPrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_xaPrepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4378);
			match(XA);
			setState(4379);
			match(PREPARE);
			setState(4380);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaCommitWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(CqlParser.XA, 0); }
		public TerminalNode COMMIT() { return getToken(CqlParser.COMMIT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode ONE() { return getToken(CqlParser.ONE, 0); }
		public TerminalNode PHASE() { return getToken(CqlParser.PHASE, 0); }
		public XaCommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaCommitWork; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitXaCommitWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaCommitWorkContext xaCommitWork() throws RecognitionException {
		XaCommitWorkContext _localctx = new XaCommitWorkContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_xaCommitWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4382);
			match(XA);
			setState(4383);
			match(COMMIT);
			setState(4384);
			xid();
			setState(4387);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONE) {
				{
				setState(4385);
				match(ONE);
				setState(4386);
				match(PHASE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaRollbackWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(CqlParser.XA, 0); }
		public TerminalNode ROLLBACK() { return getToken(CqlParser.ROLLBACK, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaRollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRollbackWork; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitXaRollbackWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaRollbackWorkContext xaRollbackWork() throws RecognitionException {
		XaRollbackWorkContext _localctx = new XaRollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_xaRollbackWork);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4389);
			match(XA);
			setState(4390);
			match(ROLLBACK);
			setState(4391);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaRecoverWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(CqlParser.XA, 0); }
		public TerminalNode RECOVER() { return getToken(CqlParser.RECOVER, 0); }
		public TerminalNode CONVERT() { return getToken(CqlParser.CONVERT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaRecoverWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRecoverWork; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitXaRecoverWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaRecoverWorkContext xaRecoverWork() throws RecognitionException {
		XaRecoverWorkContext _localctx = new XaRecoverWorkContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_xaRecoverWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4393);
			match(XA);
			setState(4394);
			match(RECOVER);
			setState(4397);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONVERT) {
				{
				setState(4395);
				match(CONVERT);
				setState(4396);
				xid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrepareStatementContext extends ParserRuleContext {
		public Token query;
		public Token variable;
		public TerminalNode PREPARE() { return getToken(CqlParser.PREPARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode FROM() { return getToken(CqlParser.FROM, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(CqlParser.LOCAL_ID, 0); }
		public PrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepareStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPrepareStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepareStatementContext prepareStatement() throws RecognitionException {
		PrepareStatementContext _localctx = new PrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_prepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4399);
			match(PREPARE);
			setState(4400);
			uid();
			setState(4401);
			match(FROM);
			setState(4404);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				{
				setState(4402);
				((PrepareStatementContext)_localctx).query = match(STRING_LITERAL);
				}
				break;
			case LOCAL_ID:
				{
				setState(4403);
				((PrepareStatementContext)_localctx).variable = match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteStatementContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(CqlParser.EXECUTE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode USING() { return getToken(CqlParser.USING, 0); }
		public UserVariablesContext userVariables() {
			return getRuleContext(UserVariablesContext.class,0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitExecuteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteStatementContext executeStatement() throws RecognitionException {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_executeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4406);
			match(EXECUTE);
			setState(4407);
			uid();
			setState(4410);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4408);
				match(USING);
				setState(4409);
				userVariables();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeallocatePrepareContext extends ParserRuleContext {
		public Token dropFormat;
		public TerminalNode PREPARE() { return getToken(CqlParser.PREPARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DEALLOCATE() { return getToken(CqlParser.DEALLOCATE, 0); }
		public TerminalNode DROP() { return getToken(CqlParser.DROP, 0); }
		public DeallocatePrepareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocatePrepare; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDeallocatePrepare(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeallocatePrepareContext deallocatePrepare() throws RecognitionException {
		DeallocatePrepareContext _localctx = new DeallocatePrepareContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_deallocatePrepare);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4412);
			((DeallocatePrepareContext)_localctx).dropFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DROP || _la==DEALLOCATE) ) {
				((DeallocatePrepareContext)_localctx).dropFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4413);
			match(PREPARE);
			setState(4414);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineBodyContext extends ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return getRuleContext(BlockStatementContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public RoutineBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineBody; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitRoutineBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineBodyContext routineBody() throws RecognitionException {
		RoutineBodyContext _localctx = new RoutineBodyContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_routineBody);
		try {
			setState(4418);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,636,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4416);
				blockStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4417);
				sqlStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockStatementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(CqlParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(CqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(CqlParser.COLON_SYMB, 0); }
		public List<DeclareVariableContext> declareVariable() {
			return getRuleContexts(DeclareVariableContext.class);
		}
		public DeclareVariableContext declareVariable(int i) {
			return getRuleContext(DeclareVariableContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(CqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(CqlParser.SEMI, i);
		}
		public List<DeclareConditionContext> declareCondition() {
			return getRuleContexts(DeclareConditionContext.class);
		}
		public DeclareConditionContext declareCondition(int i) {
			return getRuleContext(DeclareConditionContext.class,i);
		}
		public List<DeclareCursorContext> declareCursor() {
			return getRuleContexts(DeclareCursorContext.class);
		}
		public DeclareCursorContext declareCursor(int i) {
			return getRuleContext(DeclareCursorContext.class,i);
		}
		public List<DeclareHandlerContext> declareHandler() {
			return getRuleContexts(DeclareHandlerContext.class);
		}
		public DeclareHandlerContext declareHandler(int i) {
			return getRuleContext(DeclareHandlerContext.class,i);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_blockStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitBlockStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BlockStatementContext blockStatement() throws RecognitionException {
		BlockStatementContext _localctx = new BlockStatementContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_blockStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4423);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,637,_ctx) ) {
			case 1:
				{
				setState(4420);
				uid();
				setState(4421);
				match(COLON_SYMB);
				}
				break;
			}
			setState(4425);
			match(BEGIN);
			setState(4464);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,643,_ctx) ) {
			case 1:
				{
				setState(4431);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,638,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4426);
						declareVariable();
						setState(4427);
						match(SEMI);
						}
						} 
					}
					setState(4433);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,638,_ctx);
				}
				setState(4439);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,639,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4434);
						declareCondition();
						setState(4435);
						match(SEMI);
						}
						} 
					}
					setState(4441);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,639,_ctx);
				}
				setState(4447);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,640,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4442);
						declareCursor();
						setState(4443);
						match(SEMI);
						}
						} 
					}
					setState(4449);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,640,_ctx);
				}
				setState(4455);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DECLARE) {
					{
					{
					setState(4450);
					declareHandler();
					setState(4451);
					match(SEMI);
					}
					}
					setState(4457);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4461);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,642,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4458);
						procedureSqlStatement();
						}
						} 
					}
					setState(4463);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,642,_ctx);
				}
				}
				break;
			}
			setState(4466);
			match(END);
			setState(4468);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,644,_ctx) ) {
			case 1:
				{
				setState(4467);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseStatementContext extends ParserRuleContext {
		public List<TerminalNode> CASE() { return getTokens(CqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(CqlParser.CASE, i);
		}
		public TerminalNode END() { return getToken(CqlParser.END, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<CaseAlternativeContext> caseAlternative() {
			return getRuleContexts(CaseAlternativeContext.class);
		}
		public CaseAlternativeContext caseAlternative(int i) {
			return getRuleContext(CaseAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(CqlParser.ELSE, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseStatementContext caseStatement() throws RecognitionException {
		CaseStatementContext _localctx = new CaseStatementContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_caseStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4470);
			match(CASE);
			setState(4473);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,645,_ctx) ) {
			case 1:
				{
				setState(4471);
				uid();
				}
				break;
			case 2:
				{
				setState(4472);
				expression(0);
				}
				break;
			}
			setState(4476); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4475);
				caseAlternative();
				}
				}
				setState(4478); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4486);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4480);
				match(ELSE);
				setState(4482); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4481);
						procedureSqlStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4484); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,647,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(4488);
			match(END);
			setState(4489);
			match(CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfStatementContext extends ParserRuleContext {
		public ProcedureSqlStatementContext procedureSqlStatement;
		public List<ProcedureSqlStatementContext> thenStatements = new ArrayList<ProcedureSqlStatementContext>();
		public List<ProcedureSqlStatementContext> elseStatements = new ArrayList<ProcedureSqlStatementContext>();
		public List<TerminalNode> IF() { return getTokens(CqlParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(CqlParser.IF, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(CqlParser.THEN, 0); }
		public TerminalNode END() { return getToken(CqlParser.END, 0); }
		public List<ElifAlternativeContext> elifAlternative() {
			return getRuleContexts(ElifAlternativeContext.class);
		}
		public ElifAlternativeContext elifAlternative(int i) {
			return getRuleContext(ElifAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(CqlParser.ELSE, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitIfStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfStatementContext ifStatement() throws RecognitionException {
		IfStatementContext _localctx = new IfStatementContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4491);
			match(IF);
			setState(4492);
			expression(0);
			setState(4493);
			match(THEN);
			setState(4495); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4494);
					((IfStatementContext)_localctx).procedureSqlStatement = procedureSqlStatement();
					((IfStatementContext)_localctx).thenStatements.add(((IfStatementContext)_localctx).procedureSqlStatement);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4497); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,649,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4502);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSEIF) {
				{
				{
				setState(4499);
				elifAlternative();
				}
				}
				setState(4504);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4511);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4505);
				match(ELSE);
				setState(4507); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4506);
						((IfStatementContext)_localctx).procedureSqlStatement = procedureSqlStatement();
						((IfStatementContext)_localctx).elseStatements.add(((IfStatementContext)_localctx).procedureSqlStatement);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4509); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,651,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(4513);
			match(END);
			setState(4514);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IterateStatementContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(CqlParser.ITERATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iterateStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitIterateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IterateStatementContext iterateStatement() throws RecognitionException {
		IterateStatementContext _localctx = new IterateStatementContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_iterateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4516);
			match(ITERATE);
			setState(4517);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeaveStatementContext extends ParserRuleContext {
		public TerminalNode LEAVE() { return getToken(CqlParser.LEAVE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leaveStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitLeaveStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LeaveStatementContext leaveStatement() throws RecognitionException {
		LeaveStatementContext _localctx = new LeaveStatementContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_leaveStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4519);
			match(LEAVE);
			setState(4520);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoopStatementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(CqlParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(CqlParser.LOOP, i);
		}
		public TerminalNode END() { return getToken(CqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(CqlParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loopStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitLoopStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoopStatementContext loopStatement() throws RecognitionException {
		LoopStatementContext _localctx = new LoopStatementContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_loopStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
				{
				setState(4522);
				uid();
				setState(4523);
				match(COLON_SYMB);
				}
			}

			setState(4527);
			match(LOOP);
			setState(4529); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4528);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4531); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,654,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4533);
			match(END);
			setState(4534);
			match(LOOP);
			setState(4536);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
				{
				setState(4535);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepeatStatementContext extends ParserRuleContext {
		public List<TerminalNode> REPEAT() { return getTokens(CqlParser.REPEAT); }
		public TerminalNode REPEAT(int i) {
			return getToken(CqlParser.REPEAT, i);
		}
		public TerminalNode UNTIL() { return getToken(CqlParser.UNTIL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(CqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(CqlParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitRepeatStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepeatStatementContext repeatStatement() throws RecognitionException {
		RepeatStatementContext _localctx = new RepeatStatementContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_repeatStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4541);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
				{
				setState(4538);
				uid();
				setState(4539);
				match(COLON_SYMB);
				}
			}

			setState(4543);
			match(REPEAT);
			setState(4545); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4544);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4547); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,657,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4549);
			match(UNTIL);
			setState(4550);
			expression(0);
			setState(4551);
			match(END);
			setState(4552);
			match(REPEAT);
			setState(4554);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
				{
				setState(4553);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnStatementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(CqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitReturnStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturnStatementContext returnStatement() throws RecognitionException {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_returnStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4556);
			match(RETURN);
			setState(4557);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhileStatementContext extends ParserRuleContext {
		public List<TerminalNode> WHILE() { return getTokens(CqlParser.WHILE); }
		public TerminalNode WHILE(int i) {
			return getToken(CqlParser.WHILE, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DO() { return getToken(CqlParser.DO, 0); }
		public TerminalNode END() { return getToken(CqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(CqlParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whileStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitWhileStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhileStatementContext whileStatement() throws RecognitionException {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_whileStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4562);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
				{
				setState(4559);
				uid();
				setState(4560);
				match(COLON_SYMB);
				}
			}

			setState(4564);
			match(WHILE);
			setState(4565);
			expression(0);
			setState(4566);
			match(DO);
			setState(4568); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4567);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4570); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,660,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4572);
			match(END);
			setState(4573);
			match(WHILE);
			setState(4575);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DATABASE - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (RIGHT - 114)) | (1L << (SCHEMA - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)) | (1L << (EVEN - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_HEARTBEAT_PERIOD - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)) | (1L << (PAGE - 467)) | (1L << (PARSER - 467)) | (1L << (PARTIAL - 467)) | (1L << (PARTITIONING - 467)) | (1L << (PARTITIONS - 467)) | (1L << (PASSWORD - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)) | (1L << (SIGNED - 531)) | (1L << (SIMPLE - 531)) | (1L << (SLAVE - 531)) | (1L << (SLOW - 531)) | (1L << (SNAPSHOT - 531)) | (1L << (SOCKET - 531)) | (1L << (SOME - 531)) | (1L << (SONAME - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)) | (1L << (WITHOUT - 595)) | (1L << (WORK - 595)) | (1L << (WRAPPER - 595)) | (1L << (X509 - 595)) | (1L << (XA - 595)) | (1L << (XML - 595)))) != 0) || ((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (EUR - 659)) | (1L << (USA - 659)) | (1L << (JIS - 659)) | (1L << (ISO - 659)) | (1L << (INTERNAL - 659)) | (1L << (QUARTER - 659)) | (1L << (MONTH - 659)) | (1L << (DAY - 659)) | (1L << (HOUR - 659)) | (1L << (MINUTE - 659)) | (1L << (WEEK - 659)) | (1L << (SECOND - 659)) | (1L << (MICROSECOND - 659)) | (1L << (TABLES - 659)) | (1L << (ROUTINE - 659)) | (1L << (EXECUTE - 659)) | (1L << (FILE - 659)) | (1L << (PROCESS - 659)) | (1L << (RELOAD - 659)) | (1L << (SHUTDOWN - 659)) | (1L << (SUPER - 659)) | (1L << (PRIVILEGES - 659)) | (1L << (AUDIT_ADMIN - 659)) | (1L << (BACKUP_ADMIN - 659)) | (1L << (BINLOG_ADMIN - 659)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 659)) | (1L << (CLONE_ADMIN - 659)) | (1L << (CONNECTION_ADMIN - 659)) | (1L << (ENCRYPTION_KEY_ADMIN - 659)) | (1L << (FIREWALL_ADMIN - 659)) | (1L << (FIREWALL_USER - 659)) | (1L << (ADMIN - 659)) | (1L << (GROUP_REPLICATION_ADMIN - 659)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 659)) | (1L << (NDB_STORED_USER - 659)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 659)) | (1L << (REPLICATION_APPLIER - 659)) | (1L << (REPLICATION_SLAVE_ADMIN - 659)) | (1L << (RESOURCE_GROUP_ADMIN - 659)) | (1L << (RESOURCE_GROUP_USER - 659)) | (1L << (ROLE_ADMIN - 659)) | (1L << (SESSION_VARIABLES_ADMIN - 659)) | (1L << (SET_USER_ID - 659)) | (1L << (SHOW_ROUTINE - 659)) | (1L << (SYSTEM_VARIABLES_ADMIN - 659)) | (1L << (TABLE_ENCRYPTION_ADMIN - 659)) | (1L << (VERSION_TOKEN_ADMIN - 659)) | (1L << (XA_RECOVER_ADMIN - 659)) | (1L << (ARMSCII8 - 659)) | (1L << (ASCII - 659)) | (1L << (BIG5 - 659)) | (1L << (CP1250 - 659)) | (1L << (CP1251 - 659)) | (1L << (CP1256 - 659)) | (1L << (CP1257 - 659)) | (1L << (CP850 - 659)) | (1L << (CP852 - 659)))) != 0) || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)) | (1L << (ARCHIVE - 723)) | (1L << (BLACKHOLE - 723)) | (1L << (CSV - 723)) | (1L << (FEDERATED - 723)) | (1L << (INNODB - 723)) | (1L << (MEMORY - 723)) | (1L << (MRG_MYISAM - 723)) | (1L << (MYISAM - 723)) | (1L << (NDB - 723)) | (1L << (NDBCLUSTER - 723)) | (1L << (PERFORMANCE_SCHEMA - 723)) | (1L << (TOKUDB - 723)) | (1L << (REPEATABLE - 723)) | (1L << (COMMITTED - 723)) | (1L << (UNCOMMITTED - 723)) | (1L << (SERIALIZABLE - 723)) | (1L << (GEOMETRYCOLLECTION - 723)) | (1L << (LINESTRING - 723)) | (1L << (MULTILINESTRING - 723)) | (1L << (MULTIPOINT - 723)) | (1L << (MULTIPOLYGON - 723)) | (1L << (POINT - 723)) | (1L << (POLYGON - 723)) | (1L << (ABS - 723)) | (1L << (ACOS - 723)) | (1L << (ADDDATE - 723)) | (1L << (ADDTIME - 723)) | (1L << (AES_DECRYPT - 723)) | (1L << (AES_ENCRYPT - 723)) | (1L << (AREA - 723)))) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & ((1L << (ASBINARY - 787)) | (1L << (ASIN - 787)) | (1L << (ASTEXT - 787)) | (1L << (ASWKB - 787)) | (1L << (ASWKT - 787)) | (1L << (ASYMMETRIC_DECRYPT - 787)) | (1L << (ASYMMETRIC_DERIVE - 787)) | (1L << (ASYMMETRIC_ENCRYPT - 787)) | (1L << (ASYMMETRIC_SIGN - 787)) | (1L << (ASYMMETRIC_VERIFY - 787)) | (1L << (ATAN - 787)) | (1L << (ATAN2 - 787)) | (1L << (BENCHMARK - 787)) | (1L << (BIN - 787)) | (1L << (BIT_COUNT - 787)) | (1L << (BIT_LENGTH - 787)) | (1L << (BUFFER - 787)) | (1L << (CATALOG_NAME - 787)) | (1L << (CEIL - 787)) | (1L << (CEILING - 787)) | (1L << (CENTROID - 787)) | (1L << (CHARACTER_LENGTH - 787)) | (1L << (CHARSET - 787)) | (1L << (CHAR_LENGTH - 787)) | (1L << (COERCIBILITY - 787)) | (1L << (COLLATION - 787)) | (1L << (COMPRESS - 787)) | (1L << (CONCAT - 787)) | (1L << (CONCAT_WS - 787)) | (1L << (CONNECTION_ID - 787)) | (1L << (CONV - 787)) | (1L << (CONVERT_TZ - 787)) | (1L << (COS - 787)) | (1L << (COT - 787)) | (1L << (CRC32 - 787)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 787)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 787)) | (1L << (CREATE_DH_PARAMETERS - 787)) | (1L << (CREATE_DIGEST - 787)) | (1L << (CROSSES - 787)) | (1L << (DATEDIFF - 787)) | (1L << (DATE_FORMAT - 787)) | (1L << (DAYNAME - 787)) | (1L << (DAYOFMONTH - 787)) | (1L << (DAYOFWEEK - 787)) | (1L << (DAYOFYEAR - 787)) | (1L << (DECODE - 787)) | (1L << (DEGREES - 787)) | (1L << (DES_DECRYPT - 787)) | (1L << (DES_ENCRYPT - 787)) | (1L << (DIMENSION - 787)) | (1L << (DISJOINT - 787)) | (1L << (ELT - 787)) | (1L << (ENCODE - 787)) | (1L << (ENCRYPT - 787)) | (1L << (ENDPOINT - 787)) | (1L << (ENGINE_ATTRIBUTE - 787)) | (1L << (ENVELOPE - 787)) | (1L << (EQUALS - 787)) | (1L << (EXP - 787)) | (1L << (EXPORT_SET - 787)) | (1L << (EXTERIORRING - 787)) | (1L << (EXTRACTVALUE - 787)) | (1L << (FIELD - 787)))) != 0) || ((((_la - 851)) & ~0x3f) == 0 && ((1L << (_la - 851)) & ((1L << (FIND_IN_SET - 851)) | (1L << (FLOOR - 851)) | (1L << (FORMAT - 851)) | (1L << (FOUND_ROWS - 851)) | (1L << (FROM_BASE64 - 851)) | (1L << (FROM_DAYS - 851)) | (1L << (FROM_UNIXTIME - 851)) | (1L << (GEOMCOLLFROMTEXT - 851)) | (1L << (GEOMCOLLFROMWKB - 851)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 851)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 851)) | (1L << (GEOMETRYFROMTEXT - 851)) | (1L << (GEOMETRYFROMWKB - 851)) | (1L << (GEOMETRYN - 851)) | (1L << (GEOMETRYTYPE - 851)) | (1L << (GEOMFROMTEXT - 851)) | (1L << (GEOMFROMWKB - 851)) | (1L << (GET_FORMAT - 851)) | (1L << (GET_LOCK - 851)) | (1L << (GLENGTH - 851)) | (1L << (GREATEST - 851)) | (1L << (GTID_SUBSET - 851)) | (1L << (GTID_SUBTRACT - 851)) | (1L << (HEX - 851)) | (1L << (IFNULL - 851)) | (1L << (INET6_ATON - 851)) | (1L << (INET6_NTOA - 851)) | (1L << (INET_ATON - 851)) | (1L << (INET_NTOA - 851)) | (1L << (INSTR - 851)) | (1L << (INTERIORRINGN - 851)) | (1L << (INTERSECTS - 851)) | (1L << (ISCLOSED - 851)) | (1L << (ISEMPTY - 851)) | (1L << (ISNULL - 851)) | (1L << (ISSIMPLE - 851)) | (1L << (IS_FREE_LOCK - 851)) | (1L << (IS_IPV4 - 851)) | (1L << (IS_IPV4_COMPAT - 851)) | (1L << (IS_IPV4_MAPPED - 851)) | (1L << (IS_IPV6 - 851)) | (1L << (IS_USED_LOCK - 851)) | (1L << (LAST_INSERT_ID - 851)) | (1L << (LCASE - 851)) | (1L << (LEAST - 851)) | (1L << (LENGTH - 851)) | (1L << (LINEFROMTEXT - 851)) | (1L << (LINEFROMWKB - 851)) | (1L << (LINESTRINGFROMTEXT - 851)) | (1L << (LINESTRINGFROMWKB - 851)) | (1L << (LN - 851)) | (1L << (LOAD_FILE - 851)) | (1L << (LOCATE - 851)) | (1L << (LOG - 851)) | (1L << (LOG10 - 851)) | (1L << (LOG2 - 851)) | (1L << (LOWER - 851)) | (1L << (LPAD - 851)) | (1L << (LTRIM - 851)) | (1L << (MAKEDATE - 851)) | (1L << (MAKETIME - 851)) | (1L << (MAKE_SET - 851)) | (1L << (MASTER_POS_WAIT - 851)) | (1L << (MBRCONTAINS - 851)))) != 0) || ((((_la - 915)) & ~0x3f) == 0 && ((1L << (_la - 915)) & ((1L << (MBRDISJOINT - 915)) | (1L << (MBREQUAL - 915)) | (1L << (MBRINTERSECTS - 915)) | (1L << (MBROVERLAPS - 915)) | (1L << (MBRTOUCHES - 915)) | (1L << (MBRWITHIN - 915)) | (1L << (MD5 - 915)) | (1L << (MLINEFROMTEXT - 915)) | (1L << (MLINEFROMWKB - 915)) | (1L << (MONTHNAME - 915)) | (1L << (MPOINTFROMTEXT - 915)) | (1L << (MPOINTFROMWKB - 915)) | (1L << (MPOLYFROMTEXT - 915)) | (1L << (MPOLYFROMWKB - 915)) | (1L << (MULTILINESTRINGFROMTEXT - 915)) | (1L << (MULTILINESTRINGFROMWKB - 915)) | (1L << (MULTIPOINTFROMTEXT - 915)) | (1L << (MULTIPOINTFROMWKB - 915)) | (1L << (MULTIPOLYGONFROMTEXT - 915)) | (1L << (MULTIPOLYGONFROMWKB - 915)) | (1L << (NAME_CONST - 915)) | (1L << (NULLIF - 915)) | (1L << (NUMGEOMETRIES - 915)) | (1L << (NUMINTERIORRINGS - 915)) | (1L << (NUMPOINTS - 915)) | (1L << (OCT - 915)) | (1L << (OCTET_LENGTH - 915)) | (1L << (ORD - 915)) | (1L << (OVERLAPS - 915)) | (1L << (PERIOD_ADD - 915)) | (1L << (PERIOD_DIFF - 915)) | (1L << (PI - 915)) | (1L << (POINTFROMTEXT - 915)) | (1L << (POINTFROMWKB - 915)) | (1L << (POINTN - 915)) | (1L << (POLYFROMTEXT - 915)) | (1L << (POLYFROMWKB - 915)) | (1L << (POLYGONFROMTEXT - 915)) | (1L << (POLYGONFROMWKB - 915)) | (1L << (POW - 915)) | (1L << (POWER - 915)) | (1L << (QUOTE - 915)) | (1L << (RADIANS - 915)) | (1L << (RAND - 915)) | (1L << (RANDOM_BYTES - 915)) | (1L << (RELEASE_LOCK - 915)) | (1L << (REVERSE - 915)) | (1L << (ROUND - 915)) | (1L << (ROW_COUNT - 915)) | (1L << (RPAD - 915)) | (1L << (RTRIM - 915)) | (1L << (SEC_TO_TIME - 915)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 915)) | (1L << (SESSION_USER - 915)) | (1L << (SHA - 915)) | (1L << (SHA1 - 915)) | (1L << (SHA2 - 915)) | (1L << (SCHEMA_NAME - 915)) | (1L << (SIGN - 915)) | (1L << (SIN - 915)) | (1L << (SLEEP - 915)) | (1L << (SOUNDEX - 915)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 915)) | (1L << (SQRT - 915)))) != 0) || ((((_la - 979)) & ~0x3f) == 0 && ((1L << (_la - 979)) & ((1L << (SRID - 979)) | (1L << (STARTPOINT - 979)) | (1L << (STRCMP - 979)) | (1L << (STR_TO_DATE - 979)) | (1L << (ST_AREA - 979)) | (1L << (ST_ASBINARY - 979)) | (1L << (ST_ASTEXT - 979)) | (1L << (ST_ASWKB - 979)) | (1L << (ST_ASWKT - 979)) | (1L << (ST_BUFFER - 979)) | (1L << (ST_CENTROID - 979)) | (1L << (ST_CONTAINS - 979)) | (1L << (ST_CROSSES - 979)) | (1L << (ST_DIFFERENCE - 979)) | (1L << (ST_DIMENSION - 979)) | (1L << (ST_DISJOINT - 979)) | (1L << (ST_DISTANCE - 979)) | (1L << (ST_ENDPOINT - 979)) | (1L << (ST_ENVELOPE - 979)) | (1L << (ST_EQUALS - 979)) | (1L << (ST_EXTERIORRING - 979)) | (1L << (ST_GEOMCOLLFROMTEXT - 979)) | (1L << (ST_GEOMCOLLFROMTXT - 979)) | (1L << (ST_GEOMCOLLFROMWKB - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 979)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 979)) | (1L << (ST_GEOMETRYFROMTEXT - 979)) | (1L << (ST_GEOMETRYFROMWKB - 979)) | (1L << (ST_GEOMETRYN - 979)) | (1L << (ST_GEOMETRYTYPE - 979)) | (1L << (ST_GEOMFROMTEXT - 979)) | (1L << (ST_GEOMFROMWKB - 979)) | (1L << (ST_INTERIORRINGN - 979)) | (1L << (ST_INTERSECTION - 979)) | (1L << (ST_INTERSECTS - 979)) | (1L << (ST_ISCLOSED - 979)) | (1L << (ST_ISEMPTY - 979)) | (1L << (ST_ISSIMPLE - 979)) | (1L << (ST_LINEFROMTEXT - 979)) | (1L << (ST_LINEFROMWKB - 979)) | (1L << (ST_LINESTRINGFROMTEXT - 979)) | (1L << (ST_LINESTRINGFROMWKB - 979)) | (1L << (ST_NUMGEOMETRIES - 979)) | (1L << (ST_NUMINTERIORRING - 979)) | (1L << (ST_NUMINTERIORRINGS - 979)) | (1L << (ST_NUMPOINTS - 979)) | (1L << (ST_OVERLAPS - 979)) | (1L << (ST_POINTFROMTEXT - 979)) | (1L << (ST_POINTFROMWKB - 979)) | (1L << (ST_POINTN - 979)) | (1L << (ST_POLYFROMTEXT - 979)) | (1L << (ST_POLYFROMWKB - 979)) | (1L << (ST_POLYGONFROMTEXT - 979)) | (1L << (ST_POLYGONFROMWKB - 979)) | (1L << (ST_SRID - 979)) | (1L << (ST_STARTPOINT - 979)) | (1L << (ST_SYMDIFFERENCE - 979)) | (1L << (ST_TOUCHES - 979)) | (1L << (ST_UNION - 979)) | (1L << (ST_WITHIN - 979)) | (1L << (ST_X - 979)) | (1L << (ST_Y - 979)) | (1L << (SUBDATE - 979)) | (1L << (SUBSTRING_INDEX - 979)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (SUBTIME - 1043)) | (1L << (SYSTEM_USER - 1043)) | (1L << (TAN - 1043)) | (1L << (TIMEDIFF - 1043)) | (1L << (TIMESTAMPADD - 1043)) | (1L << (TIMESTAMPDIFF - 1043)) | (1L << (TIME_FORMAT - 1043)) | (1L << (TIME_TO_SEC - 1043)) | (1L << (TOUCHES - 1043)) | (1L << (TO_BASE64 - 1043)) | (1L << (TO_DAYS - 1043)) | (1L << (TO_SECONDS - 1043)) | (1L << (UCASE - 1043)) | (1L << (UNCOMPRESS - 1043)) | (1L << (UNCOMPRESSED_LENGTH - 1043)) | (1L << (UNHEX - 1043)) | (1L << (UNIX_TIMESTAMP - 1043)) | (1L << (UPDATEXML - 1043)) | (1L << (UPPER - 1043)) | (1L << (UUID - 1043)) | (1L << (UUID_SHORT - 1043)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1043)) | (1L << (VERSION - 1043)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1043)) | (1L << (WEEKDAY - 1043)) | (1L << (WEEKOFYEAR - 1043)) | (1L << (WEIGHT_STRING - 1043)) | (1L << (WITHIN - 1043)) | (1L << (YEARWEEK - 1043)) | (1L << (Y_FUNCTION - 1043)) | (1L << (X_FUNCTION - 1043)) | (1L << (VIA - 1043)) | (1L << (LASTVAL - 1043)) | (1L << (NEXTVAL - 1043)) | (1L << (SETVAL - 1043)) | (1L << (PREVIOUS - 1043)) | (1L << (PERSISTENT - 1043)) | (1L << (BINLOG_MONITOR - 1043)) | (1L << (BINLOG_REPLAY - 1043)) | (1L << (FEDERATED_ADMIN - 1043)) | (1L << (READ_ONLY_ADMIN - 1043)) | (1L << (REPLICA - 1043)) | (1L << (REPLICATION_MASTER_ADMIN - 1043)) | (1L << (MOD - 1043)))) != 0) || ((((_la - 1123)) & ~0x3f) == 0 && ((1L << (_la - 1123)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1123)) | (1L << (STRING_LITERAL - 1123)) | (1L << (ID - 1123)) | (1L << (REVERSE_QUOTE_ID - 1123)) | (1L << (ENCRYPTED - 1123)) | (1L << (ENCRYPTION_KEY_ID - 1123)))) != 0)) {
				{
				setState(4574);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorStatementContext extends ParserRuleContext {
		public CursorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorStatement; }
	 
		public CursorStatementContext() { }
		public void copyFrom(CursorStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CloseCursorContext extends CursorStatementContext {
		public TerminalNode CLOSE() { return getToken(CqlParser.CLOSE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CloseCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCloseCursor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OpenCursorContext extends CursorStatementContext {
		public TerminalNode OPEN() { return getToken(CqlParser.OPEN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public OpenCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitOpenCursor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FetchCursorContext extends CursorStatementContext {
		public TerminalNode FETCH() { return getToken(CqlParser.FETCH, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode INTO() { return getToken(CqlParser.INTO, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode FROM() { return getToken(CqlParser.FROM, 0); }
		public TerminalNode NEXT() { return getToken(CqlParser.NEXT, 0); }
		public FetchCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitFetchCursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorStatementContext cursorStatement() throws RecognitionException {
		CursorStatementContext _localctx = new CursorStatementContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_cursorStatement);
		int _la;
		try {
			setState(4592);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLOSE:
				_localctx = new CloseCursorContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4577);
				match(CLOSE);
				setState(4578);
				uid();
				}
				break;
			case FETCH:
				_localctx = new FetchCursorContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4579);
				match(FETCH);
				setState(4584);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,663,_ctx) ) {
				case 1:
					{
					setState(4581);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NEXT) {
						{
						setState(4580);
						match(NEXT);
						}
					}

					setState(4583);
					match(FROM);
					}
					break;
				}
				setState(4586);
				uid();
				setState(4587);
				match(INTO);
				setState(4588);
				uidList();
				}
				break;
			case OPEN:
				_localctx = new OpenCursorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4590);
				match(OPEN);
				setState(4591);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareVariableContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(CqlParser.DECLARE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(CqlParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DeclareVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareVariable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDeclareVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareVariableContext declareVariable() throws RecognitionException {
		DeclareVariableContext _localctx = new DeclareVariableContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_declareVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4594);
			match(DECLARE);
			setState(4595);
			uidList();
			setState(4596);
			dataType();
			setState(4599);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4597);
				match(DEFAULT);
				setState(4598);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareConditionContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(CqlParser.DECLARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CONDITION() { return getToken(CqlParser.CONDITION, 0); }
		public TerminalNode FOR() { return getToken(CqlParser.FOR, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode SQLSTATE() { return getToken(CqlParser.SQLSTATE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(CqlParser.VALUE, 0); }
		public DeclareConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCondition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDeclareCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareConditionContext declareCondition() throws RecognitionException {
		DeclareConditionContext _localctx = new DeclareConditionContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_declareCondition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4601);
			match(DECLARE);
			setState(4602);
			uid();
			setState(4603);
			match(CONDITION);
			setState(4604);
			match(FOR);
			setState(4611);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				{
				setState(4605);
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				{
				setState(4606);
				match(SQLSTATE);
				setState(4608);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4607);
					match(VALUE);
					}
				}

				setState(4610);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareCursorContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(CqlParser.DECLARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(CqlParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(CqlParser.FOR, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeclareCursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCursor; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDeclareCursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareCursorContext declareCursor() throws RecognitionException {
		DeclareCursorContext _localctx = new DeclareCursorContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_declareCursor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4613);
			match(DECLARE);
			setState(4614);
			uid();
			setState(4615);
			match(CURSOR);
			setState(4616);
			match(FOR);
			setState(4617);
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareHandlerContext extends ParserRuleContext {
		public Token handlerAction;
		public TerminalNode DECLARE() { return getToken(CqlParser.DECLARE, 0); }
		public TerminalNode HANDLER() { return getToken(CqlParser.HANDLER, 0); }
		public TerminalNode FOR() { return getToken(CqlParser.FOR, 0); }
		public List<HandlerConditionValueContext> handlerConditionValue() {
			return getRuleContexts(HandlerConditionValueContext.class);
		}
		public HandlerConditionValueContext handlerConditionValue(int i) {
			return getRuleContext(HandlerConditionValueContext.class,i);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TerminalNode CONTINUE() { return getToken(CqlParser.CONTINUE, 0); }
		public TerminalNode EXIT() { return getToken(CqlParser.EXIT, 0); }
		public TerminalNode UNDO() { return getToken(CqlParser.UNDO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public DeclareHandlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareHandler; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDeclareHandler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareHandlerContext declareHandler() throws RecognitionException {
		DeclareHandlerContext _localctx = new DeclareHandlerContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_declareHandler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4619);
			match(DECLARE);
			setState(4620);
			((DeclareHandlerContext)_localctx).handlerAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE || _la==EXIT || _la==UNDO) ) {
				((DeclareHandlerContext)_localctx).handlerAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4621);
			match(HANDLER);
			setState(4622);
			match(FOR);
			setState(4623);
			handlerConditionValue();
			setState(4628);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4624);
				match(COMMA);
				setState(4625);
				handlerConditionValue();
				}
				}
				setState(4630);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4631);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerConditionValueContext extends ParserRuleContext {
		public HandlerConditionValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerConditionValue; }
	 
		public HandlerConditionValueContext() { }
		public void copyFrom(HandlerConditionValueContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class HandlerConditionWarningContext extends HandlerConditionValueContext {
		public TerminalNode SQLWARNING() { return getToken(CqlParser.SQLWARNING, 0); }
		public HandlerConditionWarningContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitHandlerConditionWarning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionCodeContext extends HandlerConditionValueContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public HandlerConditionCodeContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitHandlerConditionCode(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionNotfoundContext extends HandlerConditionValueContext {
		public TerminalNode NOT() { return getToken(CqlParser.NOT, 0); }
		public TerminalNode FOUND() { return getToken(CqlParser.FOUND, 0); }
		public HandlerConditionNotfoundContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitHandlerConditionNotfound(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionStateContext extends HandlerConditionValueContext {
		public TerminalNode SQLSTATE() { return getToken(CqlParser.SQLSTATE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(CqlParser.VALUE, 0); }
		public HandlerConditionStateContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitHandlerConditionState(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionExceptionContext extends HandlerConditionValueContext {
		public TerminalNode SQLEXCEPTION() { return getToken(CqlParser.SQLEXCEPTION, 0); }
		public HandlerConditionExceptionContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitHandlerConditionException(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionNameContext extends HandlerConditionValueContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public HandlerConditionNameContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitHandlerConditionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerConditionValueContext handlerConditionValue() throws RecognitionException {
		HandlerConditionValueContext _localctx = new HandlerConditionValueContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_handlerConditionValue);
		int _la;
		try {
			setState(4644);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				_localctx = new HandlerConditionCodeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4633);
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				_localctx = new HandlerConditionStateContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4634);
				match(SQLSTATE);
				setState(4636);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4635);
					match(VALUE);
					}
				}

				setState(4638);
				match(STRING_LITERAL);
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				_localctx = new HandlerConditionNameContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4639);
				uid();
				}
				break;
			case SQLWARNING:
				_localctx = new HandlerConditionWarningContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4640);
				match(SQLWARNING);
				}
				break;
			case NOT:
				_localctx = new HandlerConditionNotfoundContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4641);
				match(NOT);
				setState(4642);
				match(FOUND);
				}
				break;
			case SQLEXCEPTION:
				_localctx = new HandlerConditionExceptionContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4643);
				match(SQLEXCEPTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureSqlStatementContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(CqlParser.SEMI, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public ProcedureSqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureSqlStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitProcedureSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureSqlStatementContext procedureSqlStatement() throws RecognitionException {
		ProcedureSqlStatementContext _localctx = new ProcedureSqlStatementContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_procedureSqlStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4648);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,671,_ctx) ) {
			case 1:
				{
				setState(4646);
				compoundStatement();
				}
				break;
			case 2:
				{
				setState(4647);
				sqlStatement();
				}
				break;
			}
			setState(4650);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseAlternativeContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(CqlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(CqlParser.THEN, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public CaseAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseAlternative; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCaseAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseAlternativeContext caseAlternative() throws RecognitionException {
		CaseAlternativeContext _localctx = new CaseAlternativeContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_caseAlternative);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4652);
			match(WHEN);
			setState(4655);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,672,_ctx) ) {
			case 1:
				{
				setState(4653);
				constant();
				}
				break;
			case 2:
				{
				setState(4654);
				expression(0);
				}
				break;
			}
			setState(4657);
			match(THEN);
			setState(4659); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4658);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4661); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,673,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElifAlternativeContext extends ParserRuleContext {
		public TerminalNode ELSEIF() { return getToken(CqlParser.ELSEIF, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(CqlParser.THEN, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public ElifAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elifAlternative; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitElifAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElifAlternativeContext elifAlternative() throws RecognitionException {
		ElifAlternativeContext _localctx = new ElifAlternativeContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_elifAlternative);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4663);
			match(ELSEIF);
			setState(4664);
			expression(0);
			setState(4665);
			match(THEN);
			setState(4667); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4666);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4669); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,674,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserContext extends ParserRuleContext {
		public AlterUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUser; }
	 
		public AlterUserContext() { }
		public void copyFrom(AlterUserContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterUserMysqlV56Context extends AlterUserContext {
		public TerminalNode ALTER() { return getToken(CqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(CqlParser.USER, 0); }
		public List<UserSpecificationContext> userSpecification() {
			return getRuleContexts(UserSpecificationContext.class);
		}
		public UserSpecificationContext userSpecification(int i) {
			return getRuleContext(UserSpecificationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public AlterUserMysqlV56Context(AlterUserContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterUserMysqlV56(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterUserMysqlV57Context extends AlterUserContext {
		public Token tlsNone;
		public TerminalNode ALTER() { return getToken(CqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(CqlParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(CqlParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(CqlParser.WITH, 0); }
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(CqlParser.NONE, 0); }
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(CqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(CqlParser.AND, i);
		}
		public AlterUserMysqlV57Context(AlterUserContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAlterUserMysqlV57(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserContext alterUser() throws RecognitionException {
		AlterUserContext _localctx = new AlterUserContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_alterUser);
		int _la;
		try {
			setState(4725);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,686,_ctx) ) {
			case 1:
				_localctx = new AlterUserMysqlV56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4671);
				match(ALTER);
				setState(4672);
				match(USER);
				setState(4673);
				userSpecification();
				setState(4678);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4674);
					match(COMMA);
					setState(4675);
					userSpecification();
					}
					}
					setState(4680);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new AlterUserMysqlV57Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4681);
				match(ALTER);
				setState(4682);
				match(USER);
				setState(4684);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4683);
					ifExists();
					}
				}

				setState(4686);
				userAuthOption();
				setState(4691);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4687);
					match(COMMA);
					setState(4688);
					userAuthOption();
					}
					}
					setState(4693);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4708);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4694);
					match(REQUIRE);
					setState(4706);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4695);
						((AlterUserMysqlV57Context)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4696);
						tlsOption();
						setState(4703);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4698);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4697);
								match(AND);
								}
							}

							setState(4700);
							tlsOption();
							}
							}
							setState(4705);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4716);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4710);
					match(WITH);
					setState(4712); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4711);
						userResourceOption();
						}
						}
						setState(4714); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 483)) & ~0x3f) == 0 && ((1L << (_la - 483)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 483)) | (1L << (MAX_QUERIES_PER_HOUR - 483)) | (1L << (MAX_UPDATES_PER_HOUR - 483)) | (1L << (MAX_USER_CONNECTIONS - 483)))) != 0) );
					}
				}

				setState(4722);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					setState(4720);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PASSWORD:
						{
						setState(4718);
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						setState(4719);
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4724);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserContext extends ParserRuleContext {
		public CreateUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUser; }
	 
		public CreateUserContext() { }
		public void copyFrom(CreateUserContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CreateUserMysqlV57Context extends CreateUserContext {
		public Token tlsNone;
		public TerminalNode CREATE() { return getToken(CqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(CqlParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(CqlParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(CqlParser.WITH, 0); }
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(CqlParser.NONE, 0); }
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(CqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(CqlParser.AND, i);
		}
		public CreateUserMysqlV57Context(CreateUserContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCreateUserMysqlV57(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateUserMysqlV56Context extends CreateUserContext {
		public TerminalNode CREATE() { return getToken(CqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(CqlParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public CreateUserMysqlV56Context(CreateUserContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCreateUserMysqlV56(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserContext createUser() throws RecognitionException {
		CreateUserContext _localctx = new CreateUserContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_createUser);
		int _la;
		try {
			setState(4781);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,698,_ctx) ) {
			case 1:
				_localctx = new CreateUserMysqlV56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4727);
				match(CREATE);
				setState(4728);
				match(USER);
				setState(4729);
				userAuthOption();
				setState(4734);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4730);
					match(COMMA);
					setState(4731);
					userAuthOption();
					}
					}
					setState(4736);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new CreateUserMysqlV57Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4737);
				match(CREATE);
				setState(4738);
				match(USER);
				setState(4740);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4739);
					ifNotExists();
					}
				}

				setState(4742);
				userAuthOption();
				setState(4747);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4743);
					match(COMMA);
					setState(4744);
					userAuthOption();
					}
					}
					setState(4749);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4764);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4750);
					match(REQUIRE);
					setState(4762);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4751);
						((CreateUserMysqlV57Context)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4752);
						tlsOption();
						setState(4759);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4754);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4753);
								match(AND);
								}
							}

							setState(4756);
							tlsOption();
							}
							}
							setState(4761);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4772);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4766);
					match(WITH);
					setState(4768); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4767);
						userResourceOption();
						}
						}
						setState(4770); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 483)) & ~0x3f) == 0 && ((1L << (_la - 483)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 483)) | (1L << (MAX_QUERIES_PER_HOUR - 483)) | (1L << (MAX_UPDATES_PER_HOUR - 483)) | (1L << (MAX_USER_CONNECTIONS - 483)))) != 0) );
					}
				}

				setState(4778);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					setState(4776);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PASSWORD:
						{
						setState(4774);
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						setState(4775);
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4780);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(CqlParser.DROP, 0); }
		public TerminalNode USER() { return getToken(CqlParser.USER, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUser; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDropUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserContext dropUser() throws RecognitionException {
		DropUserContext _localctx = new DropUserContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_dropUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4783);
			match(DROP);
			setState(4784);
			match(USER);
			setState(4786);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(4785);
				ifExists();
				}
			}

			setState(4788);
			userName();
			setState(4793);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4789);
				match(COMMA);
				setState(4790);
				userName();
				}
				}
				setState(4795);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantStatementContext extends ParserRuleContext {
		public Token privilegeObject;
		public Token tlsNone;
		public List<TerminalNode> GRANT() { return getTokens(CqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(CqlParser.GRANT, i);
		}
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(CqlParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode TO() { return getToken(CqlParser.TO, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(CqlParser.REQUIRE, 0); }
		public List<TerminalNode> WITH() { return getTokens(CqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(CqlParser.WITH, i);
		}
		public TerminalNode AS() { return getToken(CqlParser.AS, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode ROLE() { return getToken(CqlParser.ROLE, 0); }
		public RoleOptionContext roleOption() {
			return getRuleContext(RoleOptionContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(CqlParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(CqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(CqlParser.PROCEDURE, 0); }
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(CqlParser.NONE, 0); }
		public List<TerminalNode> OPTION() { return getTokens(CqlParser.OPTION); }
		public TerminalNode OPTION(int i) {
			return getToken(CqlParser.OPTION, i);
		}
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(CqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(CqlParser.AND, i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADMIN() { return getToken(CqlParser.ADMIN, 0); }
		public GrantStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitGrantStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantStatementContext grantStatement() throws RecognitionException {
		GrantStatementContext _localctx = new GrantStatementContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_grantStatement);
		int _la;
		try {
			int _alt;
			setState(4889);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,719,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4796);
				match(GRANT);
				setState(4797);
				privelegeClause();
				setState(4802);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4798);
					match(COMMA);
					setState(4799);
					privelegeClause();
					}
					}
					setState(4804);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4805);
				match(ON);
				setState(4807);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,702,_ctx) ) {
				case 1:
					{
					setState(4806);
					((GrantStatementContext)_localctx).privilegeObject = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((GrantStatementContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4809);
				privilegeLevel();
				setState(4810);
				match(TO);
				setState(4811);
				userAuthOption();
				setState(4816);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4812);
					match(COMMA);
					setState(4813);
					userAuthOption();
					}
					}
					setState(4818);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4819);
					match(REQUIRE);
					setState(4831);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4820);
						((GrantStatementContext)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4821);
						tlsOption();
						setState(4828);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4823);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4822);
								match(AND);
								}
							}

							setState(4825);
							tlsOption();
							}
							}
							setState(4830);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4844);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4835);
					match(WITH);
					setState(4841);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,709,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							setState(4839);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case GRANT:
								{
								setState(4836);
								match(GRANT);
								setState(4837);
								match(OPTION);
								}
								break;
							case MAX_CONNECTIONS_PER_HOUR:
							case MAX_QUERIES_PER_HOUR:
							case MAX_UPDATES_PER_HOUR:
							case MAX_USER_CONNECTIONS:
								{
								setState(4838);
								userResourceOption();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							} 
						}
						setState(4843);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,709,_ctx);
					}
					}
				}

				setState(4852);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4846);
					match(AS);
					setState(4847);
					userName();
					setState(4848);
					match(WITH);
					setState(4849);
					match(ROLE);
					setState(4850);
					roleOption();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4854);
				match(GRANT);
				setState(4857);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,712,_ctx) ) {
				case 1:
					{
					setState(4855);
					userName();
					}
					break;
				case 2:
					{
					setState(4856);
					uid();
					}
					break;
				}
				setState(4866);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4859);
					match(COMMA);
					setState(4862);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,713,_ctx) ) {
					case 1:
						{
						setState(4860);
						userName();
						}
						break;
					case 2:
						{
						setState(4861);
						uid();
						}
						break;
					}
					}
					}
					setState(4868);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4869);
				match(TO);
				setState(4872);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,715,_ctx) ) {
				case 1:
					{
					setState(4870);
					userName();
					}
					break;
				case 2:
					{
					setState(4871);
					uid();
					}
					break;
				}
				setState(4881);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4874);
					match(COMMA);
					setState(4877);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,716,_ctx) ) {
					case 1:
						{
						setState(4875);
						userName();
						}
						break;
					case 2:
						{
						setState(4876);
						uid();
						}
						break;
					}
					}
					}
					setState(4883);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4887);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4884);
					match(WITH);
					setState(4885);
					match(ADMIN);
					setState(4886);
					match(OPTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleOptionContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(CqlParser.DEFAULT, 0); }
		public TerminalNode NONE() { return getToken(CqlParser.NONE, 0); }
		public TerminalNode ALL() { return getToken(CqlParser.ALL, 0); }
		public TerminalNode EXCEPT() { return getToken(CqlParser.EXCEPT, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public RoleOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitRoleOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleOptionContext roleOption() throws RecognitionException {
		RoleOptionContext _localctx = new RoleOptionContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_roleOption);
		int _la;
		try {
			setState(4913);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,723,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4891);
				match(DEFAULT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4892);
				match(NONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4893);
				match(ALL);
				setState(4903);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCEPT) {
					{
					setState(4894);
					match(EXCEPT);
					setState(4895);
					userName();
					setState(4900);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4896);
						match(COMMA);
						setState(4897);
						userName();
						}
						}
						setState(4902);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4905);
				userName();
				setState(4910);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4906);
					match(COMMA);
					setState(4907);
					userName();
					}
					}
					setState(4912);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantProxyContext extends ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public UserNameContext userName;
		public List<UserNameContext> toOther = new ArrayList<UserNameContext>();
		public List<TerminalNode> GRANT() { return getTokens(CqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(CqlParser.GRANT, i);
		}
		public TerminalNode PROXY() { return getToken(CqlParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(CqlParser.ON, 0); }
		public TerminalNode TO() { return getToken(CqlParser.TO, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(CqlParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(CqlParser.OPTION, 0); }
		public GrantProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantProxy; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitGrantProxy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantProxyContext grantProxy() throws RecognitionException {
		GrantProxyContext _localctx = new GrantProxyContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_grantProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4915);
			match(GRANT);
			setState(4916);
			match(PROXY);
			setState(4917);
			match(ON);
			setState(4918);
			((GrantProxyContext)_localctx).fromFirst = userName();
			setState(4919);
			match(TO);
			setState(4920);
			((GrantProxyContext)_localctx).toFirst = userName();
			setState(4925);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4921);
				match(COMMA);
				setState(4922);
				((GrantProxyContext)_localctx).userName = userName();
				((GrantProxyContext)_localctx).toOther.add(((GrantProxyContext)_localctx).userName);
				}
				}
				setState(4927);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4931);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4928);
				match(WITH);
				setState(4929);
				match(GRANT);
				setState(4930);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(CqlParser.RENAME, 0); }
		public TerminalNode USER() { return getToken(CqlParser.USER, 0); }
		public List<RenameUserClauseContext> renameUserClause() {
			return getRuleContexts(RenameUserClauseContext.class);
		}
		public RenameUserClauseContext renameUserClause(int i) {
			return getRuleContext(RenameUserClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUser; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitRenameUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameUserContext renameUser() throws RecognitionException {
		RenameUserContext _localctx = new RenameUserContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_renameUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4933);
			match(RENAME);
			setState(4934);
			match(USER);
			setState(4935);
			renameUserClause();
			setState(4940);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4936);
				match(COMMA);
				setState(4937);
				renameUserClause();
				}
				}
				setState(4942);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeStatementContext extends ParserRuleContext {
		public RevokeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeStatement; }
	 
		public RevokeStatementContext() { }
		public void copyFrom(RevokeStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DetailRevokeContext extends RevokeStatementContext {
		public Token privilegeObject;
		public TerminalNode REVOKE() { return getToken(CqlParser.REVOKE, 0); }
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(CqlParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode FROM() { return getToken(CqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public TerminalNode TABLE() { return getToken(CqlParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(CqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(CqlParser.PROCEDURE, 0); }
		public DetailRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDetailRevoke(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoleRevokeContext extends RevokeStatementContext {
		public TerminalNode REVOKE() { return getToken(CqlParser.REVOKE, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode FROM() { return getToken(CqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public RoleRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitRoleRevoke(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShortRevokeContext extends RevokeStatementContext {
		public TerminalNode REVOKE() { return getToken(CqlParser.REVOKE, 0); }
		public TerminalNode ALL() { return getToken(CqlParser.ALL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public TerminalNode GRANT() { return getToken(CqlParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(CqlParser.OPTION, 0); }
		public TerminalNode FROM() { return getToken(CqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode PRIVILEGES() { return getToken(CqlParser.PRIVILEGES, 0); }
		public ShortRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitShortRevoke(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeStatementContext revokeStatement() throws RecognitionException {
		RevokeStatementContext _localctx = new RevokeStatementContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_revokeStatement);
		int _la;
		try {
			setState(5007);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,736,_ctx) ) {
			case 1:
				_localctx = new DetailRevokeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4943);
				match(REVOKE);
				setState(4944);
				privelegeClause();
				setState(4949);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4945);
					match(COMMA);
					setState(4946);
					privelegeClause();
					}
					}
					setState(4951);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4952);
				match(ON);
				setState(4954);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,728,_ctx) ) {
				case 1:
					{
					setState(4953);
					((DetailRevokeContext)_localctx).privilegeObject = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((DetailRevokeContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4956);
				privilegeLevel();
				setState(4957);
				match(FROM);
				setState(4958);
				userName();
				setState(4963);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4959);
					match(COMMA);
					setState(4960);
					userName();
					}
					}
					setState(4965);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new ShortRevokeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4966);
				match(REVOKE);
				setState(4967);
				match(ALL);
				setState(4969);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(4968);
					match(PRIVILEGES);
					}
				}

				setState(4971);
				match(COMMA);
				setState(4972);
				match(GRANT);
				setState(4973);
				match(OPTION);
				setState(4974);
				match(FROM);
				setState(4975);
				userName();
				setState(4980);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4976);
					match(COMMA);
					setState(4977);
					userName();
					}
					}
					setState(4982);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new RoleRevokeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4983);
				match(REVOKE);
				setState(4984);
				uid();
				setState(4989);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4985);
					match(COMMA);
					setState(4986);
					uid();
					}
					}
					setState(4991);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4992);
				match(FROM);
				setState(4995);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,733,_ctx) ) {
				case 1:
					{
					setState(4993);
					userName();
					}
					break;
				case 2:
					{
					setState(4994);
					uid();
					}
					break;
				}
				setState(5004);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4997);
					match(COMMA);
					setState(5000);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,734,_ctx) ) {
					case 1:
						{
						setState(4998);
						userName();
						}
						break;
					case 2:
						{
						setState(4999);
						uid();
						}
						break;
					}
					}
					}
					setState(5006);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeProxyContext extends ParserRuleContext {
		public UserNameContext onUser;
		public UserNameContext fromFirst;
		public UserNameContext userName;
		public List<UserNameContext> fromOther = new ArrayList<UserNameContext>();
		public TerminalNode REVOKE() { return getToken(CqlParser.REVOKE, 0); }
		public TerminalNode PROXY() { return getToken(CqlParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(CqlParser.ON, 0); }
		public TerminalNode FROM() { return getToken(CqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public RevokeProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeProxy; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitRevokeProxy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeProxyContext revokeProxy() throws RecognitionException {
		RevokeProxyContext _localctx = new RevokeProxyContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_revokeProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5009);
			match(REVOKE);
			setState(5010);
			match(PROXY);
			setState(5011);
			match(ON);
			setState(5012);
			((RevokeProxyContext)_localctx).onUser = userName();
			setState(5013);
			match(FROM);
			setState(5014);
			((RevokeProxyContext)_localctx).fromFirst = userName();
			setState(5019);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5015);
				match(COMMA);
				setState(5016);
				((RevokeProxyContext)_localctx).userName = userName();
				((RevokeProxyContext)_localctx).fromOther.add(((RevokeProxyContext)_localctx).userName);
				}
				}
				setState(5021);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetPasswordStatementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(CqlParser.SET, 0); }
		public TerminalNode PASSWORD() { return getToken(CqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode FOR() { return getToken(CqlParser.FOR, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public SetPasswordStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setPasswordStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSetPasswordStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetPasswordStatementContext setPasswordStatement() throws RecognitionException {
		SetPasswordStatementContext _localctx = new SetPasswordStatementContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_setPasswordStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5022);
			match(SET);
			setState(5023);
			match(PASSWORD);
			setState(5026);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5024);
				match(FOR);
				setState(5025);
				userName();
				}
			}

			setState(5028);
			match(EQUAL_SYMBOL);
			setState(5031);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OLD_PASSWORD:
			case PASSWORD:
				{
				setState(5029);
				passwordFunctionClause();
				}
				break;
			case STRING_LITERAL:
				{
				setState(5030);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserSpecificationContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public UserPasswordOptionContext userPasswordOption() {
			return getRuleContext(UserPasswordOptionContext.class,0);
		}
		public UserSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitUserSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserSpecificationContext userSpecification() throws RecognitionException {
		UserSpecificationContext _localctx = new UserSpecificationContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_userSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5033);
			userName();
			setState(5034);
			userPasswordOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserAuthOptionContext extends ParserRuleContext {
		public UserAuthOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userAuthOption; }
	 
		public UserAuthOptionContext() { }
		public void copyFrom(UserAuthOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SimpleAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public SimpleAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSimpleAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordAuthOptionContext extends UserAuthOptionContext {
		public Token hashed;
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(CqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(CqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(CqlParser.PASSWORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public PasswordAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPasswordAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(CqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(CqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode WITH() { return getToken(CqlParser.WITH, 0); }
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public TerminalNode RETAIN() { return getToken(CqlParser.RETAIN, 0); }
		public TerminalNode CURRENT() { return getToken(CqlParser.CURRENT, 0); }
		public TerminalNode PASSWORD() { return getToken(CqlParser.PASSWORD, 0); }
		public StringAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitStringAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HashAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(CqlParser.IDENTIFIED, 0); }
		public TerminalNode WITH() { return getToken(CqlParser.WITH, 0); }
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public TerminalNode AS() { return getToken(CqlParser.AS, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public HashAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitHashAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserAuthOptionContext userAuthOption() throws RecognitionException {
		UserAuthOptionContext _localctx = new UserAuthOptionContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_userAuthOption);
		int _la;
		try {
			setState(5064);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,743,_ctx) ) {
			case 1:
				_localctx = new PasswordAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5036);
				userName();
				setState(5037);
				match(IDENTIFIED);
				setState(5038);
				match(BY);
				setState(5039);
				match(PASSWORD);
				setState(5040);
				((PasswordAuthOptionContext)_localctx).hashed = match(STRING_LITERAL);
				}
				break;
			case 2:
				_localctx = new StringAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5042);
				userName();
				setState(5043);
				match(IDENTIFIED);
				setState(5046);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5044);
					match(WITH);
					setState(5045);
					authPlugin();
					}
				}

				setState(5048);
				match(BY);
				setState(5049);
				match(STRING_LITERAL);
				setState(5053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETAIN) {
					{
					setState(5050);
					match(RETAIN);
					setState(5051);
					match(CURRENT);
					setState(5052);
					match(PASSWORD);
					}
				}

				}
				break;
			case 3:
				_localctx = new HashAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5055);
				userName();
				setState(5056);
				match(IDENTIFIED);
				setState(5057);
				match(WITH);
				setState(5058);
				authPlugin();
				setState(5061);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,742,_ctx) ) {
				case 1:
					{
					setState(5059);
					match(AS);
					setState(5060);
					match(STRING_LITERAL);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SimpleAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5063);
				userName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TlsOptionContext extends ParserRuleContext {
		public TerminalNode SSL() { return getToken(CqlParser.SSL, 0); }
		public TerminalNode X509() { return getToken(CqlParser.X509, 0); }
		public TerminalNode CIPHER() { return getToken(CqlParser.CIPHER, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode ISSUER() { return getToken(CqlParser.ISSUER, 0); }
		public TerminalNode SUBJECT() { return getToken(CqlParser.SUBJECT, 0); }
		public TlsOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tlsOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTlsOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TlsOptionContext tlsOption() throws RecognitionException {
		TlsOptionContext _localctx = new TlsOptionContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_tlsOption);
		try {
			setState(5074);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SSL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5066);
				match(SSL);
				}
				break;
			case X509:
				enterOuterAlt(_localctx, 2);
				{
				setState(5067);
				match(X509);
				}
				break;
			case CIPHER:
				enterOuterAlt(_localctx, 3);
				{
				setState(5068);
				match(CIPHER);
				setState(5069);
				match(STRING_LITERAL);
				}
				break;
			case ISSUER:
				enterOuterAlt(_localctx, 4);
				{
				setState(5070);
				match(ISSUER);
				setState(5071);
				match(STRING_LITERAL);
				}
				break;
			case SUBJECT:
				enterOuterAlt(_localctx, 5);
				{
				setState(5072);
				match(SUBJECT);
				setState(5073);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserResourceOptionContext extends ParserRuleContext {
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(CqlParser.MAX_QUERIES_PER_HOUR, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(CqlParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(CqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(CqlParser.MAX_USER_CONNECTIONS, 0); }
		public UserResourceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userResourceOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitUserResourceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserResourceOptionContext userResourceOption() throws RecognitionException {
		UserResourceOptionContext _localctx = new UserResourceOptionContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_userResourceOption);
		try {
			setState(5084);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAX_QUERIES_PER_HOUR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5076);
				match(MAX_QUERIES_PER_HOUR);
				setState(5077);
				decimalLiteral();
				}
				break;
			case MAX_UPDATES_PER_HOUR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5078);
				match(MAX_UPDATES_PER_HOUR);
				setState(5079);
				decimalLiteral();
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR:
				enterOuterAlt(_localctx, 3);
				{
				setState(5080);
				match(MAX_CONNECTIONS_PER_HOUR);
				setState(5081);
				decimalLiteral();
				}
				break;
			case MAX_USER_CONNECTIONS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5082);
				match(MAX_USER_CONNECTIONS);
				setState(5083);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserPasswordOptionContext extends ParserRuleContext {
		public Token expireType;
		public TerminalNode PASSWORD() { return getToken(CqlParser.PASSWORD, 0); }
		public TerminalNode EXPIRE() { return getToken(CqlParser.EXPIRE, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode DAY() { return getToken(CqlParser.DAY, 0); }
		public TerminalNode DEFAULT() { return getToken(CqlParser.DEFAULT, 0); }
		public TerminalNode NEVER() { return getToken(CqlParser.NEVER, 0); }
		public TerminalNode INTERVAL() { return getToken(CqlParser.INTERVAL, 0); }
		public UserPasswordOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userPasswordOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitUserPasswordOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserPasswordOptionContext userPasswordOption() throws RecognitionException {
		UserPasswordOptionContext _localctx = new UserPasswordOptionContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_userPasswordOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5086);
			match(PASSWORD);
			setState(5087);
			match(EXPIRE);
			setState(5094);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				{
				setState(5088);
				((UserPasswordOptionContext)_localctx).expireType = match(DEFAULT);
				}
				break;
			case NEVER:
				{
				setState(5089);
				((UserPasswordOptionContext)_localctx).expireType = match(NEVER);
				}
				break;
			case INTERVAL:
				{
				setState(5090);
				((UserPasswordOptionContext)_localctx).expireType = match(INTERVAL);
				setState(5091);
				decimalLiteral();
				setState(5092);
				match(DAY);
				}
				break;
			case EOF:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case ACCOUNT:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PASSWORD:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case MINUS:
			case LR_BRACKET:
			case COMMA:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserLockOptionContext extends ParserRuleContext {
		public Token lockType;
		public TerminalNode ACCOUNT() { return getToken(CqlParser.ACCOUNT, 0); }
		public TerminalNode LOCK() { return getToken(CqlParser.LOCK, 0); }
		public TerminalNode UNLOCK() { return getToken(CqlParser.UNLOCK, 0); }
		public UserLockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userLockOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitUserLockOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserLockOptionContext userLockOption() throws RecognitionException {
		UserLockOptionContext _localctx = new UserLockOptionContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_userLockOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5096);
			match(ACCOUNT);
			setState(5097);
			((UserLockOptionContext)_localctx).lockType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LOCK || _la==UNLOCK) ) {
				((UserLockOptionContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivelegeClauseContext extends ParserRuleContext {
		public PrivilegeContext privilege() {
			return getRuleContext(PrivilegeContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public PrivelegeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privelegeClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPrivelegeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivelegeClauseContext privelegeClause() throws RecognitionException {
		PrivelegeClauseContext _localctx = new PrivelegeClauseContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_privelegeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5099);
			privilege();
			setState(5104);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(5100);
				match(LR_BRACKET);
				setState(5101);
				uidList();
				setState(5102);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(CqlParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(CqlParser.PRIVILEGES, 0); }
		public TerminalNode ALTER() { return getToken(CqlParser.ALTER, 0); }
		public TerminalNode ROUTINE() { return getToken(CqlParser.ROUTINE, 0); }
		public TerminalNode CREATE() { return getToken(CqlParser.CREATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(CqlParser.TEMPORARY, 0); }
		public TerminalNode TABLES() { return getToken(CqlParser.TABLES, 0); }
		public TerminalNode VIEW() { return getToken(CqlParser.VIEW, 0); }
		public TerminalNode USER() { return getToken(CqlParser.USER, 0); }
		public TerminalNode TABLESPACE() { return getToken(CqlParser.TABLESPACE, 0); }
		public TerminalNode ROLE() { return getToken(CqlParser.ROLE, 0); }
		public TerminalNode DELETE() { return getToken(CqlParser.DELETE, 0); }
		public TerminalNode DROP() { return getToken(CqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(CqlParser.EVENT, 0); }
		public TerminalNode EXECUTE() { return getToken(CqlParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(CqlParser.FILE, 0); }
		public TerminalNode GRANT() { return getToken(CqlParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(CqlParser.OPTION, 0); }
		public TerminalNode INDEX() { return getToken(CqlParser.INDEX, 0); }
		public TerminalNode INSERT() { return getToken(CqlParser.INSERT, 0); }
		public TerminalNode LOCK() { return getToken(CqlParser.LOCK, 0); }
		public TerminalNode PROCESS() { return getToken(CqlParser.PROCESS, 0); }
		public TerminalNode PROXY() { return getToken(CqlParser.PROXY, 0); }
		public TerminalNode REFERENCES() { return getToken(CqlParser.REFERENCES, 0); }
		public TerminalNode RELOAD() { return getToken(CqlParser.RELOAD, 0); }
		public TerminalNode REPLICATION() { return getToken(CqlParser.REPLICATION, 0); }
		public TerminalNode CLIENT() { return getToken(CqlParser.CLIENT, 0); }
		public TerminalNode SLAVE() { return getToken(CqlParser.SLAVE, 0); }
		public TerminalNode REPLICA() { return getToken(CqlParser.REPLICA, 0); }
		public TerminalNode SELECT() { return getToken(CqlParser.SELECT, 0); }
		public TerminalNode SHOW() { return getToken(CqlParser.SHOW, 0); }
		public TerminalNode DATABASES() { return getToken(CqlParser.DATABASES, 0); }
		public TerminalNode SHUTDOWN() { return getToken(CqlParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(CqlParser.SUPER, 0); }
		public TerminalNode TRIGGER() { return getToken(CqlParser.TRIGGER, 0); }
		public TerminalNode UPDATE() { return getToken(CqlParser.UPDATE, 0); }
		public TerminalNode USAGE() { return getToken(CqlParser.USAGE, 0); }
		public TerminalNode APPLICATION_PASSWORD_ADMIN() { return getToken(CqlParser.APPLICATION_PASSWORD_ADMIN, 0); }
		public TerminalNode AUDIT_ADMIN() { return getToken(CqlParser.AUDIT_ADMIN, 0); }
		public TerminalNode BACKUP_ADMIN() { return getToken(CqlParser.BACKUP_ADMIN, 0); }
		public TerminalNode BINLOG_ADMIN() { return getToken(CqlParser.BINLOG_ADMIN, 0); }
		public TerminalNode BINLOG_ENCRYPTION_ADMIN() { return getToken(CqlParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		public TerminalNode CLONE_ADMIN() { return getToken(CqlParser.CLONE_ADMIN, 0); }
		public TerminalNode CONNECTION_ADMIN() { return getToken(CqlParser.CONNECTION_ADMIN, 0); }
		public TerminalNode ENCRYPTION_KEY_ADMIN() { return getToken(CqlParser.ENCRYPTION_KEY_ADMIN, 0); }
		public TerminalNode FIREWALL_ADMIN() { return getToken(CqlParser.FIREWALL_ADMIN, 0); }
		public TerminalNode FIREWALL_USER() { return getToken(CqlParser.FIREWALL_USER, 0); }
		public TerminalNode FLUSH_OPTIMIZER_COSTS() { return getToken(CqlParser.FLUSH_OPTIMIZER_COSTS, 0); }
		public TerminalNode FLUSH_STATUS() { return getToken(CqlParser.FLUSH_STATUS, 0); }
		public TerminalNode FLUSH_TABLES() { return getToken(CqlParser.FLUSH_TABLES, 0); }
		public TerminalNode FLUSH_USER_RESOURCES() { return getToken(CqlParser.FLUSH_USER_RESOURCES, 0); }
		public TerminalNode GROUP_REPLICATION_ADMIN() { return getToken(CqlParser.GROUP_REPLICATION_ADMIN, 0); }
		public TerminalNode INNODB_REDO_LOG_ARCHIVE() { return getToken(CqlParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		public TerminalNode INNODB_REDO_LOG_ENABLE() { return getToken(CqlParser.INNODB_REDO_LOG_ENABLE, 0); }
		public TerminalNode NDB_STORED_USER() { return getToken(CqlParser.NDB_STORED_USER, 0); }
		public TerminalNode PERSIST_RO_VARIABLES_ADMIN() { return getToken(CqlParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		public TerminalNode REPLICATION_APPLIER() { return getToken(CqlParser.REPLICATION_APPLIER, 0); }
		public TerminalNode REPLICATION_SLAVE_ADMIN() { return getToken(CqlParser.REPLICATION_SLAVE_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_ADMIN() { return getToken(CqlParser.RESOURCE_GROUP_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_USER() { return getToken(CqlParser.RESOURCE_GROUP_USER, 0); }
		public TerminalNode ROLE_ADMIN() { return getToken(CqlParser.ROLE_ADMIN, 0); }
		public TerminalNode SERVICE_CONNECTION_ADMIN() { return getToken(CqlParser.SERVICE_CONNECTION_ADMIN, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(CqlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SET_USER_ID() { return getToken(CqlParser.SET_USER_ID, 0); }
		public TerminalNode SHOW_ROUTINE() { return getToken(CqlParser.SHOW_ROUTINE, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(CqlParser.SYSTEM_USER, 0); }
		public TerminalNode SYSTEM_VARIABLES_ADMIN() { return getToken(CqlParser.SYSTEM_VARIABLES_ADMIN, 0); }
		public TerminalNode TABLE_ENCRYPTION_ADMIN() { return getToken(CqlParser.TABLE_ENCRYPTION_ADMIN, 0); }
		public TerminalNode VERSION_TOKEN_ADMIN() { return getToken(CqlParser.VERSION_TOKEN_ADMIN, 0); }
		public TerminalNode XA_RECOVER_ADMIN() { return getToken(CqlParser.XA_RECOVER_ADMIN, 0); }
		public TerminalNode BINLOG_MONITOR() { return getToken(CqlParser.BINLOG_MONITOR, 0); }
		public TerminalNode BINLOG_REPLAY() { return getToken(CqlParser.BINLOG_REPLAY, 0); }
		public TerminalNode FEDERATED_ADMIN() { return getToken(CqlParser.FEDERATED_ADMIN, 0); }
		public TerminalNode READ_ONLY_ADMIN() { return getToken(CqlParser.READ_ONLY_ADMIN, 0); }
		public TerminalNode REPLICATION_MASTER_ADMIN() { return getToken(CqlParser.REPLICATION_MASTER_ADMIN, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_privilege);
		int _la;
		try {
			setState(5190);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5106);
				match(ALL);
				setState(5108);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(5107);
					match(PRIVILEGES);
					}
				}

				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5110);
				match(ALTER);
				setState(5112);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROUTINE) {
					{
					setState(5111);
					match(ROUTINE);
					}
				}

				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5114);
				match(CREATE);
				setState(5122);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TEMPORARY:
					{
					setState(5115);
					match(TEMPORARY);
					setState(5116);
					match(TABLES);
					}
					break;
				case ROUTINE:
					{
					setState(5117);
					match(ROUTINE);
					}
					break;
				case VIEW:
					{
					setState(5118);
					match(VIEW);
					}
					break;
				case USER:
					{
					setState(5119);
					match(USER);
					}
					break;
				case TABLESPACE:
					{
					setState(5120);
					match(TABLESPACE);
					}
					break;
				case ROLE:
					{
					setState(5121);
					match(ROLE);
					}
					break;
				case ON:
				case LR_BRACKET:
				case COMMA:
					break;
				default:
					break;
				}
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5124);
				match(DELETE);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 5);
				{
				setState(5125);
				match(DROP);
				setState(5127);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROLE) {
					{
					setState(5126);
					match(ROLE);
					}
				}

				}
				break;
			case EVENT:
				enterOuterAlt(_localctx, 6);
				{
				setState(5129);
				match(EVENT);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5130);
				match(EXECUTE);
				}
				break;
			case FILE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5131);
				match(FILE);
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 9);
				{
				setState(5132);
				match(GRANT);
				setState(5133);
				match(OPTION);
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 10);
				{
				setState(5134);
				match(INDEX);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(5135);
				match(INSERT);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 12);
				{
				setState(5136);
				match(LOCK);
				setState(5137);
				match(TABLES);
				}
				break;
			case PROCESS:
				enterOuterAlt(_localctx, 13);
				{
				setState(5138);
				match(PROCESS);
				}
				break;
			case PROXY:
				enterOuterAlt(_localctx, 14);
				{
				setState(5139);
				match(PROXY);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 15);
				{
				setState(5140);
				match(REFERENCES);
				}
				break;
			case RELOAD:
				enterOuterAlt(_localctx, 16);
				{
				setState(5141);
				match(RELOAD);
				}
				break;
			case REPLICATION:
				enterOuterAlt(_localctx, 17);
				{
				setState(5142);
				match(REPLICATION);
				setState(5143);
				_la = _input.LA(1);
				if ( !(_la==CLIENT || _la==SLAVE || _la==REPLICA) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 18);
				{
				setState(5144);
				match(SELECT);
				}
				break;
			case SHOW:
				enterOuterAlt(_localctx, 19);
				{
				setState(5145);
				match(SHOW);
				setState(5146);
				_la = _input.LA(1);
				if ( !(_la==DATABASES || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SHUTDOWN:
				enterOuterAlt(_localctx, 20);
				{
				setState(5147);
				match(SHUTDOWN);
				}
				break;
			case SUPER:
				enterOuterAlt(_localctx, 21);
				{
				setState(5148);
				match(SUPER);
				}
				break;
			case TRIGGER:
				enterOuterAlt(_localctx, 22);
				{
				setState(5149);
				match(TRIGGER);
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 23);
				{
				setState(5150);
				match(UPDATE);
				}
				break;
			case USAGE:
				enterOuterAlt(_localctx, 24);
				{
				setState(5151);
				match(USAGE);
				}
				break;
			case APPLICATION_PASSWORD_ADMIN:
				enterOuterAlt(_localctx, 25);
				{
				setState(5152);
				match(APPLICATION_PASSWORD_ADMIN);
				}
				break;
			case AUDIT_ADMIN:
				enterOuterAlt(_localctx, 26);
				{
				setState(5153);
				match(AUDIT_ADMIN);
				}
				break;
			case BACKUP_ADMIN:
				enterOuterAlt(_localctx, 27);
				{
				setState(5154);
				match(BACKUP_ADMIN);
				}
				break;
			case BINLOG_ADMIN:
				enterOuterAlt(_localctx, 28);
				{
				setState(5155);
				match(BINLOG_ADMIN);
				}
				break;
			case BINLOG_ENCRYPTION_ADMIN:
				enterOuterAlt(_localctx, 29);
				{
				setState(5156);
				match(BINLOG_ENCRYPTION_ADMIN);
				}
				break;
			case CLONE_ADMIN:
				enterOuterAlt(_localctx, 30);
				{
				setState(5157);
				match(CLONE_ADMIN);
				}
				break;
			case CONNECTION_ADMIN:
				enterOuterAlt(_localctx, 31);
				{
				setState(5158);
				match(CONNECTION_ADMIN);
				}
				break;
			case ENCRYPTION_KEY_ADMIN:
				enterOuterAlt(_localctx, 32);
				{
				setState(5159);
				match(ENCRYPTION_KEY_ADMIN);
				}
				break;
			case FIREWALL_ADMIN:
				enterOuterAlt(_localctx, 33);
				{
				setState(5160);
				match(FIREWALL_ADMIN);
				}
				break;
			case FIREWALL_USER:
				enterOuterAlt(_localctx, 34);
				{
				setState(5161);
				match(FIREWALL_USER);
				}
				break;
			case FLUSH_OPTIMIZER_COSTS:
				enterOuterAlt(_localctx, 35);
				{
				setState(5162);
				match(FLUSH_OPTIMIZER_COSTS);
				}
				break;
			case FLUSH_STATUS:
				enterOuterAlt(_localctx, 36);
				{
				setState(5163);
				match(FLUSH_STATUS);
				}
				break;
			case FLUSH_TABLES:
				enterOuterAlt(_localctx, 37);
				{
				setState(5164);
				match(FLUSH_TABLES);
				}
				break;
			case FLUSH_USER_RESOURCES:
				enterOuterAlt(_localctx, 38);
				{
				setState(5165);
				match(FLUSH_USER_RESOURCES);
				}
				break;
			case GROUP_REPLICATION_ADMIN:
				enterOuterAlt(_localctx, 39);
				{
				setState(5166);
				match(GROUP_REPLICATION_ADMIN);
				}
				break;
			case INNODB_REDO_LOG_ARCHIVE:
				enterOuterAlt(_localctx, 40);
				{
				setState(5167);
				match(INNODB_REDO_LOG_ARCHIVE);
				}
				break;
			case INNODB_REDO_LOG_ENABLE:
				enterOuterAlt(_localctx, 41);
				{
				setState(5168);
				match(INNODB_REDO_LOG_ENABLE);
				}
				break;
			case NDB_STORED_USER:
				enterOuterAlt(_localctx, 42);
				{
				setState(5169);
				match(NDB_STORED_USER);
				}
				break;
			case PERSIST_RO_VARIABLES_ADMIN:
				enterOuterAlt(_localctx, 43);
				{
				setState(5170);
				match(PERSIST_RO_VARIABLES_ADMIN);
				}
				break;
			case REPLICATION_APPLIER:
				enterOuterAlt(_localctx, 44);
				{
				setState(5171);
				match(REPLICATION_APPLIER);
				}
				break;
			case REPLICATION_SLAVE_ADMIN:
				enterOuterAlt(_localctx, 45);
				{
				setState(5172);
				match(REPLICATION_SLAVE_ADMIN);
				}
				break;
			case RESOURCE_GROUP_ADMIN:
				enterOuterAlt(_localctx, 46);
				{
				setState(5173);
				match(RESOURCE_GROUP_ADMIN);
				}
				break;
			case RESOURCE_GROUP_USER:
				enterOuterAlt(_localctx, 47);
				{
				setState(5174);
				match(RESOURCE_GROUP_USER);
				}
				break;
			case ROLE_ADMIN:
				enterOuterAlt(_localctx, 48);
				{
				setState(5175);
				match(ROLE_ADMIN);
				}
				break;
			case SERVICE_CONNECTION_ADMIN:
				enterOuterAlt(_localctx, 49);
				{
				setState(5176);
				match(SERVICE_CONNECTION_ADMIN);
				}
				break;
			case SESSION_VARIABLES_ADMIN:
				enterOuterAlt(_localctx, 50);
				{
				setState(5177);
				match(SESSION_VARIABLES_ADMIN);
				}
				break;
			case SET_USER_ID:
				enterOuterAlt(_localctx, 51);
				{
				setState(5178);
				match(SET_USER_ID);
				}
				break;
			case SHOW_ROUTINE:
				enterOuterAlt(_localctx, 52);
				{
				setState(5179);
				match(SHOW_ROUTINE);
				}
				break;
			case SYSTEM_USER:
				enterOuterAlt(_localctx, 53);
				{
				setState(5180);
				match(SYSTEM_USER);
				}
				break;
			case SYSTEM_VARIABLES_ADMIN:
				enterOuterAlt(_localctx, 54);
				{
				setState(5181);
				match(SYSTEM_VARIABLES_ADMIN);
				}
				break;
			case TABLE_ENCRYPTION_ADMIN:
				enterOuterAlt(_localctx, 55);
				{
				setState(5182);
				match(TABLE_ENCRYPTION_ADMIN);
				}
				break;
			case VERSION_TOKEN_ADMIN:
				enterOuterAlt(_localctx, 56);
				{
				setState(5183);
				match(VERSION_TOKEN_ADMIN);
				}
				break;
			case XA_RECOVER_ADMIN:
				enterOuterAlt(_localctx, 57);
				{
				setState(5184);
				match(XA_RECOVER_ADMIN);
				}
				break;
			case BINLOG_MONITOR:
				enterOuterAlt(_localctx, 58);
				{
				setState(5185);
				match(BINLOG_MONITOR);
				}
				break;
			case BINLOG_REPLAY:
				enterOuterAlt(_localctx, 59);
				{
				setState(5186);
				match(BINLOG_REPLAY);
				}
				break;
			case FEDERATED_ADMIN:
				enterOuterAlt(_localctx, 60);
				{
				setState(5187);
				match(FEDERATED_ADMIN);
				}
				break;
			case READ_ONLY_ADMIN:
				enterOuterAlt(_localctx, 61);
				{
				setState(5188);
				match(READ_ONLY_ADMIN);
				}
				break;
			case REPLICATION_MASTER_ADMIN:
				enterOuterAlt(_localctx, 62);
				{
				setState(5189);
				match(REPLICATION_MASTER_ADMIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeLevelContext extends ParserRuleContext {
		public PrivilegeLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeLevel; }
	 
		public PrivilegeLevelContext() { }
		public void copyFrom(PrivilegeLevelContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DefiniteSchemaPrivLevelContext extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DOT() { return getToken(CqlParser.DOT, 0); }
		public TerminalNode STAR() { return getToken(CqlParser.STAR, 0); }
		public DefiniteSchemaPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDefiniteSchemaPrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefiniteFullTablePrivLevel2Context extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext dottedId() {
			return getRuleContext(DottedIdContext.class,0);
		}
		public DefiniteFullTablePrivLevel2Context(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDefiniteFullTablePrivLevel2(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefiniteFullTablePrivLevelContext extends PrivilegeLevelContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode DOT() { return getToken(CqlParser.DOT, 0); }
		public DefiniteFullTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDefiniteFullTablePrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GlobalPrivLevelContext extends PrivilegeLevelContext {
		public List<TerminalNode> STAR() { return getTokens(CqlParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(CqlParser.STAR, i);
		}
		public TerminalNode DOT() { return getToken(CqlParser.DOT, 0); }
		public GlobalPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitGlobalPrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefiniteTablePrivLevelContext extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DefiniteTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDefiniteTablePrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CurrentSchemaPriviLevelContext extends PrivilegeLevelContext {
		public TerminalNode STAR() { return getToken(CqlParser.STAR, 0); }
		public CurrentSchemaPriviLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCurrentSchemaPriviLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeLevelContext privilegeLevel() throws RecognitionException {
		PrivilegeLevelContext _localctx = new PrivilegeLevelContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_privilegeLevel);
		try {
			setState(5208);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,753,_ctx) ) {
			case 1:
				_localctx = new CurrentSchemaPriviLevelContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5192);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new GlobalPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5193);
				match(STAR);
				setState(5194);
				match(DOT);
				setState(5195);
				match(STAR);
				}
				break;
			case 3:
				_localctx = new DefiniteSchemaPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5196);
				uid();
				setState(5197);
				match(DOT);
				setState(5198);
				match(STAR);
				}
				break;
			case 4:
				_localctx = new DefiniteFullTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5200);
				uid();
				setState(5201);
				match(DOT);
				setState(5202);
				uid();
				}
				break;
			case 5:
				_localctx = new DefiniteFullTablePrivLevel2Context(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5204);
				uid();
				setState(5205);
				dottedId();
				}
				break;
			case 6:
				_localctx = new DefiniteTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5207);
				uid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserClauseContext extends ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public TerminalNode TO() { return getToken(CqlParser.TO, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public RenameUserClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUserClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitRenameUserClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameUserClauseContext renameUserClause() throws RecognitionException {
		RenameUserClauseContext _localctx = new RenameUserClauseContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_renameUserClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5210);
			((RenameUserClauseContext)_localctx).fromFirst = userName();
			setState(5211);
			match(TO);
			setState(5212);
			((RenameUserClauseContext)_localctx).toFirst = userName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyzeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode ANALYZE() { return getToken(CqlParser.ANALYZE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(CqlParser.TABLE, 0); }
		public TerminalNode TABLES() { return getToken(CqlParser.TABLES, 0); }
		public TerminalNode UPDATE() { return getToken(CqlParser.UPDATE, 0); }
		public List<TerminalNode> HISTOGRAM() { return getTokens(CqlParser.HISTOGRAM); }
		public TerminalNode HISTOGRAM(int i) {
			return getToken(CqlParser.HISTOGRAM, i);
		}
		public List<TerminalNode> ON() { return getTokens(CqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(CqlParser.ON, i);
		}
		public List<FullColumnNameContext> fullColumnName() {
			return getRuleContexts(FullColumnNameContext.class);
		}
		public FullColumnNameContext fullColumnName(int i) {
			return getRuleContext(FullColumnNameContext.class,i);
		}
		public TerminalNode DROP() { return getToken(CqlParser.DROP, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(CqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(CqlParser.LOCAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(CqlParser.WITH, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode BUCKETS() { return getToken(CqlParser.BUCKETS, 0); }
		public AnalyzeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzeTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAnalyzeTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzeTableContext analyzeTable() throws RecognitionException {
		AnalyzeTableContext _localctx = new AnalyzeTableContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_analyzeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5214);
			match(ANALYZE);
			setState(5216);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5215);
				((AnalyzeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((AnalyzeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5218);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5219);
			tables();
			setState(5237);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,757,_ctx) ) {
			case 1:
				{
				setState(5220);
				match(UPDATE);
				setState(5221);
				match(HISTOGRAM);
				setState(5222);
				match(ON);
				setState(5223);
				fullColumnName();
				setState(5228);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5224);
					match(COMMA);
					setState(5225);
					fullColumnName();
					}
					}
					setState(5230);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5235);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5231);
					match(WITH);
					setState(5232);
					decimalLiteral();
					setState(5233);
					match(BUCKETS);
					}
				}

				}
				break;
			}
			setState(5250);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,759,_ctx) ) {
			case 1:
				{
				setState(5239);
				match(DROP);
				setState(5240);
				match(HISTOGRAM);
				setState(5241);
				match(ON);
				setState(5242);
				fullColumnName();
				setState(5247);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5243);
					match(COMMA);
					setState(5244);
					fullColumnName();
					}
					}
					setState(5249);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(CqlParser.CHECK, 0); }
		public TerminalNode TABLE() { return getToken(CqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public List<CheckTableOptionContext> checkTableOption() {
			return getRuleContexts(CheckTableOptionContext.class);
		}
		public CheckTableOptionContext checkTableOption(int i) {
			return getRuleContext(CheckTableOptionContext.class,i);
		}
		public CheckTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCheckTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckTableContext checkTable() throws RecognitionException {
		CheckTableContext _localctx = new CheckTableContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_checkTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5252);
			match(CHECK);
			setState(5253);
			match(TABLE);
			setState(5254);
			tables();
			setState(5258);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==CHANGED || _la==EXTENDED || _la==FAST || _la==MEDIUM || _la==QUICK) {
				{
				{
				setState(5255);
				checkTableOption();
				}
				}
				setState(5260);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChecksumTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode CHECKSUM() { return getToken(CqlParser.CHECKSUM, 0); }
		public TerminalNode TABLE() { return getToken(CqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(CqlParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(CqlParser.EXTENDED, 0); }
		public ChecksumTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checksumTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitChecksumTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChecksumTableContext checksumTable() throws RecognitionException {
		ChecksumTableContext _localctx = new ChecksumTableContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_checksumTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5261);
			match(CHECKSUM);
			setState(5262);
			match(TABLE);
			setState(5263);
			tables();
			setState(5265);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==QUICK) {
				{
				setState(5264);
				((ChecksumTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==QUICK) ) {
					((ChecksumTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptimizeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode OPTIMIZE() { return getToken(CqlParser.OPTIMIZE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(CqlParser.TABLE, 0); }
		public TerminalNode TABLES() { return getToken(CqlParser.TABLES, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(CqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(CqlParser.LOCAL, 0); }
		public OptimizeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimizeTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitOptimizeTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptimizeTableContext optimizeTable() throws RecognitionException {
		OptimizeTableContext _localctx = new OptimizeTableContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_optimizeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5267);
			match(OPTIMIZE);
			setState(5269);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5268);
				((OptimizeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((OptimizeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5271);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5272);
			tables();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepairTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode REPAIR() { return getToken(CqlParser.REPAIR, 0); }
		public TerminalNode TABLE() { return getToken(CqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(CqlParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(CqlParser.EXTENDED, 0); }
		public TerminalNode USE_FRM() { return getToken(CqlParser.USE_FRM, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(CqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(CqlParser.LOCAL, 0); }
		public RepairTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repairTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitRepairTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepairTableContext repairTable() throws RecognitionException {
		RepairTableContext _localctx = new RepairTableContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_repairTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5274);
			match(REPAIR);
			setState(5276);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5275);
				((RepairTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((RepairTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5278);
			match(TABLE);
			setState(5279);
			tables();
			setState(5281);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(5280);
				match(QUICK);
				}
			}

			setState(5284);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED) {
				{
				setState(5283);
				match(EXTENDED);
				}
			}

			setState(5287);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USE_FRM) {
				{
				setState(5286);
				match(USE_FRM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(CqlParser.FOR, 0); }
		public TerminalNode UPGRADE() { return getToken(CqlParser.UPGRADE, 0); }
		public TerminalNode QUICK() { return getToken(CqlParser.QUICK, 0); }
		public TerminalNode FAST() { return getToken(CqlParser.FAST, 0); }
		public TerminalNode MEDIUM() { return getToken(CqlParser.MEDIUM, 0); }
		public TerminalNode EXTENDED() { return getToken(CqlParser.EXTENDED, 0); }
		public TerminalNode CHANGED() { return getToken(CqlParser.CHANGED, 0); }
		public CheckTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTableOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCheckTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckTableOptionContext checkTableOption() throws RecognitionException {
		CheckTableOptionContext _localctx = new CheckTableOptionContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_checkTableOption);
		try {
			setState(5296);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5289);
				match(FOR);
				setState(5290);
				match(UPGRADE);
				}
				break;
			case QUICK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5291);
				match(QUICK);
				}
				break;
			case FAST:
				enterOuterAlt(_localctx, 3);
				{
				setState(5292);
				match(FAST);
				}
				break;
			case MEDIUM:
				enterOuterAlt(_localctx, 4);
				{
				setState(5293);
				match(MEDIUM);
				}
				break;
			case EXTENDED:
				enterOuterAlt(_localctx, 5);
				{
				setState(5294);
				match(EXTENDED);
				}
				break;
			case CHANGED:
				enterOuterAlt(_localctx, 6);
				{
				setState(5295);
				match(CHANGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUdfunctionContext extends ParserRuleContext {
		public Token returnType;
		public TerminalNode CREATE() { return getToken(CqlParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(CqlParser.FUNCTION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode RETURNS() { return getToken(CqlParser.RETURNS, 0); }
		public TerminalNode SONAME() { return getToken(CqlParser.SONAME, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode STRING() { return getToken(CqlParser.STRING, 0); }
		public TerminalNode INTEGER() { return getToken(CqlParser.INTEGER, 0); }
		public TerminalNode REAL() { return getToken(CqlParser.REAL, 0); }
		public TerminalNode DECIMAL() { return getToken(CqlParser.DECIMAL, 0); }
		public TerminalNode AGGREGATE() { return getToken(CqlParser.AGGREGATE, 0); }
		public CreateUdfunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUdfunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCreateUdfunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUdfunctionContext createUdfunction() throws RecognitionException {
		CreateUdfunctionContext _localctx = new CreateUdfunctionContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_createUdfunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5298);
			match(CREATE);
			setState(5300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGGREGATE) {
				{
				setState(5299);
				match(AGGREGATE);
				}
			}

			setState(5302);
			match(FUNCTION);
			setState(5303);
			uid();
			setState(5304);
			match(RETURNS);
			setState(5305);
			((CreateUdfunctionContext)_localctx).returnType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (INTEGER - 200)) | (1L << (REAL - 200)) | (1L << (DECIMAL - 200)))) != 0) || _la==STRING) ) {
				((CreateUdfunctionContext)_localctx).returnType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5306);
			match(SONAME);
			setState(5307);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstallPluginContext extends ParserRuleContext {
		public TerminalNode INSTALL() { return getToken(CqlParser.INSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(CqlParser.PLUGIN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SONAME() { return getToken(CqlParser.SONAME, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public InstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installPlugin; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitInstallPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InstallPluginContext installPlugin() throws RecognitionException {
		InstallPluginContext _localctx = new InstallPluginContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_installPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5309);
			match(INSTALL);
			setState(5310);
			match(PLUGIN);
			setState(5311);
			uid();
			setState(5312);
			match(SONAME);
			setState(5313);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UninstallPluginContext extends ParserRuleContext {
		public TerminalNode UNINSTALL() { return getToken(CqlParser.UNINSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(CqlParser.PLUGIN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public UninstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uninstallPlugin; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitUninstallPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UninstallPluginContext uninstallPlugin() throws RecognitionException {
		UninstallPluginContext _localctx = new UninstallPluginContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_uninstallPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5315);
			match(UNINSTALL);
			setState(5316);
			match(PLUGIN);
			setState(5317);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetStatementContext extends ParserRuleContext {
		public SetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setStatement; }
	 
		public SetStatementContext() { }
		public void copyFrom(SetStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SetTransactionContext extends SetStatementContext {
		public SetTransactionStatementContext setTransactionStatement() {
			return getRuleContext(SetTransactionStatementContext.class,0);
		}
		public SetTransactionContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSetTransaction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetCharsetContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(CqlParser.SET, 0); }
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(CqlParser.DEFAULT, 0); }
		public SetCharsetContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSetCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetNamesContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(CqlParser.SET, 0); }
		public TerminalNode NAMES() { return getToken(CqlParser.NAMES, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(CqlParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(CqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public SetNamesContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSetNames(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetPasswordContext extends SetStatementContext {
		public SetPasswordStatementContext setPasswordStatement() {
			return getRuleContext(SetPasswordStatementContext.class,0);
		}
		public SetPasswordContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSetPassword(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetAutocommitContext extends SetStatementContext {
		public SetAutocommitStatementContext setAutocommitStatement() {
			return getRuleContext(SetAutocommitStatementContext.class,0);
		}
		public SetAutocommitContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSetAutocommit(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetNewValueInsideTriggerContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(CqlParser.SET, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(CqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(CqlParser.EQUAL_SYMBOL, i);
		}
		public List<TerminalNode> VAR_ASSIGN() { return getTokens(CqlParser.VAR_ASSIGN); }
		public TerminalNode VAR_ASSIGN(int i) {
			return getToken(CqlParser.VAR_ASSIGN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public SetNewValueInsideTriggerContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSetNewValueInsideTrigger(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetVariableContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(CqlParser.SET, 0); }
		public List<VariableClauseContext> variableClause() {
			return getRuleContexts(VariableClauseContext.class);
		}
		public VariableClauseContext variableClause(int i) {
			return getRuleContext(VariableClauseContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(CqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(CqlParser.EQUAL_SYMBOL, i);
		}
		public List<TerminalNode> VAR_ASSIGN() { return getTokens(CqlParser.VAR_ASSIGN); }
		public TerminalNode VAR_ASSIGN(int i) {
			return getToken(CqlParser.VAR_ASSIGN, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(CqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(CqlParser.ON, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public SetVariableContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSetVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetStatementContext setStatement() throws RecognitionException {
		SetStatementContext _localctx = new SetStatementContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_setStatement);
		int _la;
		try {
			setState(5371);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,776,_ctx) ) {
			case 1:
				_localctx = new SetVariableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5319);
				match(SET);
				setState(5320);
				variableClause();
				setState(5321);
				_la = _input.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5324);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,769,_ctx) ) {
				case 1:
					{
					setState(5322);
					expression(0);
					}
					break;
				case 2:
					{
					setState(5323);
					match(ON);
					}
					break;
				}
				setState(5335);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5326);
					match(COMMA);
					setState(5327);
					variableClause();
					setState(5328);
					_la = _input.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5331);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,770,_ctx) ) {
					case 1:
						{
						setState(5329);
						expression(0);
						}
						break;
					case 2:
						{
						setState(5330);
						match(ON);
						}
						break;
					}
					}
					}
					setState(5337);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SetCharsetContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5338);
				match(SET);
				setState(5339);
				charSet();
				setState(5342);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(5340);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(5341);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new SetNamesContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5344);
				match(SET);
				setState(5345);
				match(NAMES);
				setState(5352);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(5346);
					charsetName();
					setState(5349);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COLLATE) {
						{
						setState(5347);
						match(COLLATE);
						setState(5348);
						collationName();
						}
					}

					}
					break;
				case DEFAULT:
					{
					setState(5351);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new SetPasswordContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5354);
				setPasswordStatement();
				}
				break;
			case 5:
				_localctx = new SetTransactionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5355);
				setTransactionStatement();
				}
				break;
			case 6:
				_localctx = new SetAutocommitContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5356);
				setAutocommitStatement();
				}
				break;
			case 7:
				_localctx = new SetNewValueInsideTriggerContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5357);
				match(SET);
				setState(5358);
				fullId();
				setState(5359);
				_la = _input.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5360);
				expression(0);
				setState(5368);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5361);
					match(COMMA);
					setState(5362);
					fullId();
					setState(5363);
					_la = _input.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5364);
					expression(0);
					}
					}
					setState(5370);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowStatementContext extends ParserRuleContext {
		public ShowStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStatement; }
	 
		public ShowStatementContext() { }
		public void copyFrom(ShowStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ShowOpenTablesContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(CqlParser.SHOW, 0); }
		public TerminalNode OPEN() { return getToken(CqlParser.OPEN, 0); }
		public TerminalNode TABLES() { return getToken(CqlParser.TABLES, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(CqlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(CqlParser.IN, 0); }
		public ShowOpenTablesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitShowOpenTables(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowGlobalInfoContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(CqlParser.SHOW, 0); }
		public ShowGlobalInfoClauseContext showGlobalInfoClause() {
			return getRuleContext(ShowGlobalInfoClauseContext.class,0);
		}
		public ShowGlobalInfoContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitShowGlobalInfo(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateFullIdObjectContext extends ShowStatementContext {
		public Token namedEntity;
		public TerminalNode SHOW() { return getToken(CqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(CqlParser.CREATE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode EVENT() { return getToken(CqlParser.EVENT, 0); }
		public TerminalNode FUNCTION() { return getToken(CqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(CqlParser.PROCEDURE, 0); }
		public TerminalNode TABLE() { return getToken(CqlParser.TABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(CqlParser.TRIGGER, 0); }
		public TerminalNode VIEW() { return getToken(CqlParser.VIEW, 0); }
		public ShowCreateFullIdObjectContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitShowCreateFullIdObject(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateUserContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(CqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(CqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(CqlParser.USER, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public ShowCreateUserContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitShowCreateUser(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(CqlParser.SHOW, 0); }
		public TerminalNode ERRORS() { return getToken(CqlParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(CqlParser.WARNINGS, 0); }
		public TerminalNode LIMIT() { return getToken(CqlParser.LIMIT, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(CqlParser.COMMA, 0); }
		public ShowErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitShowErrors(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCountErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public TerminalNode SHOW() { return getToken(CqlParser.SHOW, 0); }
		public TerminalNode COUNT() { return getToken(CqlParser.COUNT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TerminalNode STAR() { return getToken(CqlParser.STAR, 0); }
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode ERRORS() { return getToken(CqlParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(CqlParser.WARNINGS, 0); }
		public ShowCountErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitShowCountErrors(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowObjectFilterContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(CqlParser.SHOW, 0); }
		public ShowCommonEntityContext showCommonEntity() {
			return getRuleContext(ShowCommonEntityContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowObjectFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitShowObjectFilter(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateDbContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(CqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(CqlParser.CREATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(CqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(CqlParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public ShowCreateDbContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitShowCreateDb(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowEngineContext extends ShowStatementContext {
		public Token engineOption;
		public TerminalNode SHOW() { return getToken(CqlParser.SHOW, 0); }
		public TerminalNode ENGINE() { return getToken(CqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode STATUS() { return getToken(CqlParser.STATUS, 0); }
		public TerminalNode MUTEX() { return getToken(CqlParser.MUTEX, 0); }
		public ShowEngineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitShowEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowSchemaFilterContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(CqlParser.SHOW, 0); }
		public ShowSchemaEntityContext showSchemaEntity() {
			return getRuleContext(ShowSchemaEntityContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(CqlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(CqlParser.IN, 0); }
		public ShowSchemaFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitShowSchemaFilter(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowIndexesContext extends ShowStatementContext {
		public Token indexFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(CqlParser.SHOW, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(CqlParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(CqlParser.INDEXES, 0); }
		public TerminalNode KEYS() { return getToken(CqlParser.KEYS, 0); }
		public List<TerminalNode> FROM() { return getTokens(CqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(CqlParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(CqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(CqlParser.IN, i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(CqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ShowIndexesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitShowIndexes(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowLogEventsContext extends ShowStatementContext {
		public Token logFormat;
		public Token filename;
		public DecimalLiteralContext fromPosition;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(CqlParser.SHOW, 0); }
		public TerminalNode EVENTS() { return getToken(CqlParser.EVENTS, 0); }
		public TerminalNode BINLOG() { return getToken(CqlParser.BINLOG, 0); }
		public TerminalNode RELAYLOG() { return getToken(CqlParser.RELAYLOG, 0); }
		public TerminalNode IN() { return getToken(CqlParser.IN, 0); }
		public TerminalNode FROM() { return getToken(CqlParser.FROM, 0); }
		public TerminalNode LIMIT() { return getToken(CqlParser.LIMIT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(CqlParser.COMMA, 0); }
		public ShowLogEventsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitShowLogEvents(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowMasterLogsContext extends ShowStatementContext {
		public Token logFormat;
		public TerminalNode SHOW() { return getToken(CqlParser.SHOW, 0); }
		public TerminalNode LOGS() { return getToken(CqlParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(CqlParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(CqlParser.MASTER, 0); }
		public ShowMasterLogsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitShowMasterLogs(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowGrantsContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(CqlParser.SHOW, 0); }
		public TerminalNode GRANTS() { return getToken(CqlParser.GRANTS, 0); }
		public TerminalNode FOR() { return getToken(CqlParser.FOR, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public ShowGrantsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitShowGrants(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowSlaveStatusContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(CqlParser.SHOW, 0); }
		public TerminalNode SLAVE() { return getToken(CqlParser.SLAVE, 0); }
		public TerminalNode STATUS() { return getToken(CqlParser.STATUS, 0); }
		public TerminalNode FOR() { return getToken(CqlParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(CqlParser.CHANNEL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public ShowSlaveStatusContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitShowSlaveStatus(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowRoutineContext extends ShowStatementContext {
		public Token routine;
		public TerminalNode SHOW() { return getToken(CqlParser.SHOW, 0); }
		public TerminalNode CODE() { return getToken(CqlParser.CODE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(CqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(CqlParser.PROCEDURE, 0); }
		public ShowRoutineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitShowRoutine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowProfileContext extends ShowStatementContext {
		public DecimalLiteralContext queryCount;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(CqlParser.SHOW, 0); }
		public TerminalNode PROFILE() { return getToken(CqlParser.PROFILE, 0); }
		public List<ShowProfileTypeContext> showProfileType() {
			return getRuleContexts(ShowProfileTypeContext.class);
		}
		public ShowProfileTypeContext showProfileType(int i) {
			return getRuleContext(ShowProfileTypeContext.class,i);
		}
		public TerminalNode LIMIT() { return getToken(CqlParser.LIMIT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public TerminalNode FOR() { return getToken(CqlParser.FOR, 0); }
		public TerminalNode QUERY() { return getToken(CqlParser.QUERY, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public ShowProfileContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitShowProfile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowColumnsContext extends ShowStatementContext {
		public Token columnsFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(CqlParser.SHOW, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(CqlParser.COLUMNS, 0); }
		public TerminalNode FIELDS() { return getToken(CqlParser.FIELDS, 0); }
		public List<TerminalNode> FROM() { return getTokens(CqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(CqlParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(CqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(CqlParser.IN, i);
		}
		public TerminalNode FULL() { return getToken(CqlParser.FULL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowColumnsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitShowColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowStatementContext showStatement() throws RecognitionException {
		ShowStatementContext _localctx = new ShowStatementContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_showStatement);
		int _la;
		try {
			setState(5526);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,799,_ctx) ) {
			case 1:
				_localctx = new ShowMasterLogsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5373);
				match(SHOW);
				setState(5374);
				((ShowMasterLogsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==MASTER) ) {
					((ShowMasterLogsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5375);
				match(LOGS);
				}
				break;
			case 2:
				_localctx = new ShowLogEventsContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5376);
				match(SHOW);
				setState(5377);
				((ShowLogEventsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINLOG || _la==RELAYLOG) ) {
					((ShowLogEventsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5378);
				match(EVENTS);
				setState(5381);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(5379);
					match(IN);
					setState(5380);
					((ShowLogEventsContext)_localctx).filename = match(STRING_LITERAL);
					}
				}

				setState(5385);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(5383);
					match(FROM);
					setState(5384);
					((ShowLogEventsContext)_localctx).fromPosition = decimalLiteral();
					}
				}

				setState(5394);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(5387);
					match(LIMIT);
					setState(5391);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,779,_ctx) ) {
					case 1:
						{
						setState(5388);
						((ShowLogEventsContext)_localctx).offset = decimalLiteral();
						setState(5389);
						match(COMMA);
						}
						break;
					}
					setState(5393);
					((ShowLogEventsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;
			case 3:
				_localctx = new ShowObjectFilterContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5396);
				match(SHOW);
				setState(5397);
				showCommonEntity();
				setState(5399);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5398);
					showFilter();
					}
				}

				}
				break;
			case 4:
				_localctx = new ShowColumnsContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5401);
				match(SHOW);
				setState(5403);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5402);
					match(FULL);
					}
				}

				setState(5405);
				((ShowColumnsContext)_localctx).columnsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((ShowColumnsContext)_localctx).columnsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5406);
				((ShowColumnsContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowColumnsContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5407);
				tableName();
				setState(5410);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5408);
					((ShowColumnsContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowColumnsContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5409);
					uid();
					}
				}

				setState(5413);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5412);
					showFilter();
					}
				}

				}
				break;
			case 5:
				_localctx = new ShowCreateDbContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5415);
				match(SHOW);
				setState(5416);
				match(CREATE);
				setState(5417);
				((ShowCreateDbContext)_localctx).schemaFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((ShowCreateDbContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5419);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(5418);
					ifNotExists();
					}
				}

				setState(5421);
				uid();
				}
				break;
			case 6:
				_localctx = new ShowCreateFullIdObjectContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5422);
				match(SHOW);
				setState(5423);
				match(CREATE);
				setState(5424);
				((ShowCreateFullIdObjectContext)_localctx).namedEntity = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PROCEDURE - 128)) | (1L << (TABLE - 128)) | (1L << (TRIGGER - 128)))) != 0) || _la==EVENT || _la==FUNCTION || _la==VIEW) ) {
					((ShowCreateFullIdObjectContext)_localctx).namedEntity = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5425);
				fullId();
				}
				break;
			case 7:
				_localctx = new ShowCreateUserContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5426);
				match(SHOW);
				setState(5427);
				match(CREATE);
				setState(5428);
				match(USER);
				setState(5429);
				userName();
				}
				break;
			case 8:
				_localctx = new ShowEngineContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5430);
				match(SHOW);
				setState(5431);
				match(ENGINE);
				setState(5432);
				engineName();
				setState(5433);
				((ShowEngineContext)_localctx).engineOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MUTEX || _la==STATUS) ) {
					((ShowEngineContext)_localctx).engineOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				_localctx = new ShowGlobalInfoContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(5435);
				match(SHOW);
				setState(5436);
				showGlobalInfoClause();
				}
				break;
			case 10:
				_localctx = new ShowErrorsContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(5437);
				match(SHOW);
				setState(5438);
				((ShowErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5446);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(5439);
					match(LIMIT);
					setState(5443);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,786,_ctx) ) {
					case 1:
						{
						setState(5440);
						((ShowErrorsContext)_localctx).offset = decimalLiteral();
						setState(5441);
						match(COMMA);
						}
						break;
					}
					setState(5445);
					((ShowErrorsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;
			case 11:
				_localctx = new ShowCountErrorsContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(5448);
				match(SHOW);
				setState(5449);
				match(COUNT);
				setState(5450);
				match(LR_BRACKET);
				setState(5451);
				match(STAR);
				setState(5452);
				match(RR_BRACKET);
				setState(5453);
				((ShowCountErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowCountErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 12:
				_localctx = new ShowSchemaFilterContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(5454);
				match(SHOW);
				setState(5455);
				showSchemaEntity();
				setState(5458);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5456);
					((ShowSchemaFilterContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowSchemaFilterContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5457);
					uid();
					}
				}

				setState(5461);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5460);
					showFilter();
					}
				}

				}
				break;
			case 13:
				_localctx = new ShowRoutineContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(5463);
				match(SHOW);
				setState(5464);
				((ShowRoutineContext)_localctx).routine = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==FUNCTION) ) {
					((ShowRoutineContext)_localctx).routine = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5465);
				match(CODE);
				setState(5466);
				fullId();
				}
				break;
			case 14:
				_localctx = new ShowGrantsContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(5467);
				match(SHOW);
				setState(5468);
				match(GRANTS);
				setState(5471);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5469);
					match(FOR);
					setState(5470);
					userName();
					}
				}

				}
				break;
			case 15:
				_localctx = new ShowIndexesContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(5473);
				match(SHOW);
				setState(5474);
				((ShowIndexesContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEYS || _la==INDEXES) ) {
					((ShowIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5475);
				((ShowIndexesContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowIndexesContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5476);
				tableName();
				setState(5479);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5477);
					((ShowIndexesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowIndexesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5478);
					uid();
					}
				}

				setState(5483);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(5481);
					match(WHERE);
					setState(5482);
					expression(0);
					}
				}

				}
				break;
			case 16:
				_localctx = new ShowOpenTablesContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(5485);
				match(SHOW);
				setState(5486);
				match(OPEN);
				setState(5487);
				match(TABLES);
				setState(5490);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5488);
					((ShowOpenTablesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowOpenTablesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5489);
					uid();
					}
				}

				setState(5493);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5492);
					showFilter();
					}
				}

				}
				break;
			case 17:
				_localctx = new ShowProfileContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(5495);
				match(SHOW);
				setState(5496);
				match(PROFILE);
				setState(5497);
				showProfileType();
				setState(5502);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5498);
					match(COMMA);
					setState(5499);
					showProfileType();
					}
					}
					setState(5504);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5508);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5505);
					match(FOR);
					setState(5506);
					match(QUERY);
					setState(5507);
					((ShowProfileContext)_localctx).queryCount = decimalLiteral();
					}
				}

				{
				setState(5510);
				match(LIMIT);
				setState(5514);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,797,_ctx) ) {
				case 1:
					{
					setState(5511);
					((ShowProfileContext)_localctx).offset = decimalLiteral();
					setState(5512);
					match(COMMA);
					}
					break;
				}
				setState(5516);
				((ShowProfileContext)_localctx).rowCount = decimalLiteral();
				}
				}
				break;
			case 18:
				_localctx = new ShowSlaveStatusContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(5518);
				match(SHOW);
				setState(5519);
				match(SLAVE);
				setState(5520);
				match(STATUS);
				setState(5524);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5521);
					match(FOR);
					setState(5522);
					match(CHANNEL);
					setState(5523);
					match(STRING_LITERAL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableClauseContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(CqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(CqlParser.GLOBAL_ID, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(CqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(CqlParser.SESSION, 0); }
		public TerminalNode LOCAL() { return getToken(CqlParser.LOCAL, 0); }
		public List<TerminalNode> AT_SIGN() { return getTokens(CqlParser.AT_SIGN); }
		public TerminalNode AT_SIGN(int i) {
			return getToken(CqlParser.AT_SIGN, i);
		}
		public VariableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitVariableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableClauseContext variableClause() throws RecognitionException {
		VariableClauseContext _localctx = new VariableClauseContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_variableClause);
		int _la;
		try {
			setState(5538);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5528);
				match(LOCAL_ID);
				}
				break;
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(5529);
				match(GLOBAL_ID);
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(5535);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,801,_ctx) ) {
				case 1:
					{
					setState(5532);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AT_SIGN) {
						{
						setState(5530);
						match(AT_SIGN);
						setState(5531);
						match(AT_SIGN);
						}
					}

					setState(5534);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5537);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCommonEntityContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(CqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(CqlParser.SET, 0); }
		public TerminalNode COLLATION() { return getToken(CqlParser.COLLATION, 0); }
		public TerminalNode DATABASES() { return getToken(CqlParser.DATABASES, 0); }
		public TerminalNode SCHEMAS() { return getToken(CqlParser.SCHEMAS, 0); }
		public TerminalNode FUNCTION() { return getToken(CqlParser.FUNCTION, 0); }
		public TerminalNode STATUS() { return getToken(CqlParser.STATUS, 0); }
		public TerminalNode PROCEDURE() { return getToken(CqlParser.PROCEDURE, 0); }
		public TerminalNode VARIABLES() { return getToken(CqlParser.VARIABLES, 0); }
		public TerminalNode GLOBAL() { return getToken(CqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(CqlParser.SESSION, 0); }
		public ShowCommonEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCommonEntity; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitShowCommonEntity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCommonEntityContext showCommonEntity() throws RecognitionException {
		ShowCommonEntityContext _localctx = new ShowCommonEntityContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_showCommonEntity);
		int _la;
		try {
			setState(5553);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARACTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5540);
				match(CHARACTER);
				setState(5541);
				match(SET);
				}
				break;
			case COLLATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(5542);
				match(COLLATION);
				}
				break;
			case DATABASES:
				enterOuterAlt(_localctx, 3);
				{
				setState(5543);
				match(DATABASES);
				}
				break;
			case SCHEMAS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5544);
				match(SCHEMAS);
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 5);
				{
				setState(5545);
				match(FUNCTION);
				setState(5546);
				match(STATUS);
				}
				break;
			case PROCEDURE:
				enterOuterAlt(_localctx, 6);
				{
				setState(5547);
				match(PROCEDURE);
				setState(5548);
				match(STATUS);
				}
				break;
			case GLOBAL:
			case SESSION:
			case STATUS:
			case VARIABLES:
				enterOuterAlt(_localctx, 7);
				{
				setState(5550);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==SESSION) {
					{
					setState(5549);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5552);
				_la = _input.LA(1);
				if ( !(_la==STATUS || _la==VARIABLES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowFilterContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(CqlParser.LIKE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode WHERE() { return getToken(CqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ShowFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showFilter; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitShowFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowFilterContext showFilter() throws RecognitionException {
		ShowFilterContext _localctx = new ShowFilterContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_showFilter);
		try {
			setState(5559);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5555);
				match(LIKE);
				setState(5556);
				match(STRING_LITERAL);
				}
				break;
			case WHERE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5557);
				match(WHERE);
				setState(5558);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowGlobalInfoClauseContext extends ParserRuleContext {
		public TerminalNode ENGINES() { return getToken(CqlParser.ENGINES, 0); }
		public TerminalNode STORAGE() { return getToken(CqlParser.STORAGE, 0); }
		public TerminalNode MASTER() { return getToken(CqlParser.MASTER, 0); }
		public TerminalNode STATUS() { return getToken(CqlParser.STATUS, 0); }
		public TerminalNode PLUGINS() { return getToken(CqlParser.PLUGINS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(CqlParser.PRIVILEGES, 0); }
		public TerminalNode PROCESSLIST() { return getToken(CqlParser.PROCESSLIST, 0); }
		public TerminalNode FULL() { return getToken(CqlParser.FULL, 0); }
		public TerminalNode PROFILES() { return getToken(CqlParser.PROFILES, 0); }
		public TerminalNode SLAVE() { return getToken(CqlParser.SLAVE, 0); }
		public TerminalNode HOSTS() { return getToken(CqlParser.HOSTS, 0); }
		public TerminalNode AUTHORS() { return getToken(CqlParser.AUTHORS, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(CqlParser.CONTRIBUTORS, 0); }
		public ShowGlobalInfoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showGlobalInfoClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitShowGlobalInfoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowGlobalInfoClauseContext showGlobalInfoClause() throws RecognitionException {
		ShowGlobalInfoClauseContext _localctx = new ShowGlobalInfoClauseContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_showGlobalInfoClause);
		int _la;
		try {
			setState(5578);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENGINES:
			case STORAGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5562);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(5561);
					match(STORAGE);
					}
				}

				setState(5564);
				match(ENGINES);
				}
				break;
			case MASTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5565);
				match(MASTER);
				setState(5566);
				match(STATUS);
				}
				break;
			case PLUGINS:
				enterOuterAlt(_localctx, 3);
				{
				setState(5567);
				match(PLUGINS);
				}
				break;
			case PRIVILEGES:
				enterOuterAlt(_localctx, 4);
				{
				setState(5568);
				match(PRIVILEGES);
				}
				break;
			case FULL:
			case PROCESSLIST:
				enterOuterAlt(_localctx, 5);
				{
				setState(5570);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5569);
					match(FULL);
					}
				}

				setState(5572);
				match(PROCESSLIST);
				}
				break;
			case PROFILES:
				enterOuterAlt(_localctx, 6);
				{
				setState(5573);
				match(PROFILES);
				}
				break;
			case SLAVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5574);
				match(SLAVE);
				setState(5575);
				match(HOSTS);
				}
				break;
			case AUTHORS:
				enterOuterAlt(_localctx, 8);
				{
				setState(5576);
				match(AUTHORS);
				}
				break;
			case CONTRIBUTORS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5577);
				match(CONTRIBUTORS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowSchemaEntityContext extends ParserRuleContext {
		public TerminalNode EVENTS() { return getToken(CqlParser.EVENTS, 0); }
		public TerminalNode TABLE() { return getToken(CqlParser.TABLE, 0); }
		public TerminalNode STATUS() { return getToken(CqlParser.STATUS, 0); }
		public TerminalNode TABLES() { return getToken(CqlParser.TABLES, 0); }
		public TerminalNode FULL() { return getToken(CqlParser.FULL, 0); }
		public TerminalNode TRIGGERS() { return getToken(CqlParser.TRIGGERS, 0); }
		public ShowSchemaEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showSchemaEntity; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitShowSchemaEntity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowSchemaEntityContext showSchemaEntity() throws RecognitionException {
		ShowSchemaEntityContext _localctx = new ShowSchemaEntityContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_showSchemaEntity);
		int _la;
		try {
			setState(5588);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EVENTS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5580);
				match(EVENTS);
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5581);
				match(TABLE);
				setState(5582);
				match(STATUS);
				}
				break;
			case FULL:
			case TABLES:
				enterOuterAlt(_localctx, 3);
				{
				setState(5584);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5583);
					match(FULL);
					}
				}

				setState(5586);
				match(TABLES);
				}
				break;
			case TRIGGERS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5587);
				match(TRIGGERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowProfileTypeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(CqlParser.ALL, 0); }
		public TerminalNode BLOCK() { return getToken(CqlParser.BLOCK, 0); }
		public TerminalNode IO() { return getToken(CqlParser.IO, 0); }
		public TerminalNode CONTEXT() { return getToken(CqlParser.CONTEXT, 0); }
		public TerminalNode SWITCHES() { return getToken(CqlParser.SWITCHES, 0); }
		public TerminalNode CPU() { return getToken(CqlParser.CPU, 0); }
		public TerminalNode IPC() { return getToken(CqlParser.IPC, 0); }
		public TerminalNode MEMORY() { return getToken(CqlParser.MEMORY, 0); }
		public TerminalNode PAGE() { return getToken(CqlParser.PAGE, 0); }
		public TerminalNode FAULTS() { return getToken(CqlParser.FAULTS, 0); }
		public TerminalNode SOURCE() { return getToken(CqlParser.SOURCE, 0); }
		public TerminalNode SWAPS() { return getToken(CqlParser.SWAPS, 0); }
		public ShowProfileTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProfileType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitShowProfileType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowProfileTypeContext showProfileType() throws RecognitionException {
		ShowProfileTypeContext _localctx = new ShowProfileTypeContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_showProfileType);
		try {
			setState(5602);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5590);
				match(ALL);
				}
				break;
			case BLOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5591);
				match(BLOCK);
				setState(5592);
				match(IO);
				}
				break;
			case CONTEXT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5593);
				match(CONTEXT);
				setState(5594);
				match(SWITCHES);
				}
				break;
			case CPU:
				enterOuterAlt(_localctx, 4);
				{
				setState(5595);
				match(CPU);
				}
				break;
			case IPC:
				enterOuterAlt(_localctx, 5);
				{
				setState(5596);
				match(IPC);
				}
				break;
			case MEMORY:
				enterOuterAlt(_localctx, 6);
				{
				setState(5597);
				match(MEMORY);
				}
				break;
			case PAGE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5598);
				match(PAGE);
				setState(5599);
				match(FAULTS);
				}
				break;
			case SOURCE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5600);
				match(SOURCE);
				}
				break;
			case SWAPS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5601);
				match(SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BinlogStatementContext extends ParserRuleContext {
		public TerminalNode BINLOG() { return getToken(CqlParser.BINLOG, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public BinlogStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binlogStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitBinlogStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BinlogStatementContext binlogStatement() throws RecognitionException {
		BinlogStatementContext _localctx = new BinlogStatementContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_binlogStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5604);
			match(BINLOG);
			setState(5605);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CacheIndexStatementContext extends ParserRuleContext {
		public UidContext schema;
		public TerminalNode CACHE() { return getToken(CqlParser.CACHE, 0); }
		public TerminalNode INDEX() { return getToken(CqlParser.INDEX, 0); }
		public List<TableIndexesContext> tableIndexes() {
			return getRuleContexts(TableIndexesContext.class);
		}
		public TableIndexesContext tableIndexes(int i) {
			return getRuleContext(TableIndexesContext.class,i);
		}
		public TerminalNode IN() { return getToken(CqlParser.IN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(CqlParser.ALL, 0); }
		public CacheIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cacheIndexStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCacheIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CacheIndexStatementContext cacheIndexStatement() throws RecognitionException {
		CacheIndexStatementContext _localctx = new CacheIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_cacheIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5607);
			match(CACHE);
			setState(5608);
			match(INDEX);
			setState(5609);
			tableIndexes();
			setState(5614);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5610);
				match(COMMA);
				setState(5611);
				tableIndexes();
				}
				}
				setState(5616);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5624);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5617);
				match(PARTITION);
				setState(5618);
				match(LR_BRACKET);
				setState(5621);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(5619);
					uidList();
					}
					break;
				case ALL:
					{
					setState(5620);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5623);
				match(RR_BRACKET);
				}
			}

			setState(5626);
			match(IN);
			setState(5627);
			((CacheIndexStatementContext)_localctx).schema = uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushStatementContext extends ParserRuleContext {
		public Token flushFormat;
		public TerminalNode FLUSH() { return getToken(CqlParser.FLUSH, 0); }
		public List<FlushOptionContext> flushOption() {
			return getRuleContexts(FlushOptionContext.class);
		}
		public FlushOptionContext flushOption(int i) {
			return getRuleContext(FlushOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(CqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(CqlParser.LOCAL, 0); }
		public FlushStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitFlushStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushStatementContext flushStatement() throws RecognitionException {
		FlushStatementContext _localctx = new FlushStatementContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_flushStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5629);
			match(FLUSH);
			setState(5631);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5630);
				((FlushStatementContext)_localctx).flushFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((FlushStatementContext)_localctx).flushFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5633);
			flushOption();
			setState(5638);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5634);
				match(COMMA);
				setState(5635);
				flushOption();
				}
				}
				setState(5640);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KillStatementContext extends ParserRuleContext {
		public Token connectionFormat;
		public TerminalNode KILL() { return getToken(CqlParser.KILL, 0); }
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(CqlParser.CONNECTION, 0); }
		public TerminalNode QUERY() { return getToken(CqlParser.QUERY, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public KillStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_killStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitKillStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KillStatementContext killStatement() throws RecognitionException {
		KillStatementContext _localctx = new KillStatementContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_killStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5641);
			match(KILL);
			setState(5643);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONNECTION || _la==QUERY) {
				{
				setState(5642);
				((KillStatementContext)_localctx).connectionFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CONNECTION || _la==QUERY) ) {
					((KillStatementContext)_localctx).connectionFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5651);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				{
				setState(5646); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5645);
					decimalLiteral();
					}
					}
					setState(5648); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & ((1L << (ZERO_DECIMAL - 1116)) | (1L << (ONE_DECIMAL - 1116)) | (1L << (TWO_DECIMAL - 1116)) | (1L << (DECIMAL_LITERAL - 1116)) | (1L << (REAL_LITERAL - 1116)))) != 0) );
				}
				break;
			case LOCAL_ID:
			case GLOBAL_ID:
				{
				setState(5650);
				mysqlVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadIndexIntoCacheContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(CqlParser.LOAD, 0); }
		public TerminalNode INDEX() { return getToken(CqlParser.INDEX, 0); }
		public TerminalNode INTO() { return getToken(CqlParser.INTO, 0); }
		public TerminalNode CACHE() { return getToken(CqlParser.CACHE, 0); }
		public List<LoadedTableIndexesContext> loadedTableIndexes() {
			return getRuleContexts(LoadedTableIndexesContext.class);
		}
		public LoadedTableIndexesContext loadedTableIndexes(int i) {
			return getRuleContext(LoadedTableIndexesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public LoadIndexIntoCacheContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadIndexIntoCache; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitLoadIndexIntoCache(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadIndexIntoCacheContext loadIndexIntoCache() throws RecognitionException {
		LoadIndexIntoCacheContext _localctx = new LoadIndexIntoCacheContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_loadIndexIntoCache);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5653);
			match(LOAD);
			setState(5654);
			match(INDEX);
			setState(5655);
			match(INTO);
			setState(5656);
			match(CACHE);
			setState(5657);
			loadedTableIndexes();
			setState(5662);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5658);
				match(COMMA);
				setState(5659);
				loadedTableIndexes();
				}
				}
				setState(5664);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetStatementContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(CqlParser.RESET, 0); }
		public TerminalNode QUERY() { return getToken(CqlParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(CqlParser.CACHE, 0); }
		public ResetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitResetStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetStatementContext resetStatement() throws RecognitionException {
		ResetStatementContext _localctx = new ResetStatementContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_resetStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5665);
			match(RESET);
			setState(5666);
			match(QUERY);
			setState(5667);
			match(CACHE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShutdownStatementContext extends ParserRuleContext {
		public TerminalNode SHUTDOWN() { return getToken(CqlParser.SHUTDOWN, 0); }
		public ShutdownStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shutdownStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitShutdownStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShutdownStatementContext shutdownStatement() throws RecognitionException {
		ShutdownStatementContext _localctx = new ShutdownStatementContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_shutdownStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5669);
			match(SHUTDOWN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableIndexesContext extends ParserRuleContext {
		public Token indexFormat;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode INDEX() { return getToken(CqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(CqlParser.KEY, 0); }
		public TableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableIndexes; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableIndexes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableIndexesContext tableIndexes() throws RecognitionException {
		TableIndexesContext _localctx = new TableIndexesContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_tableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5671);
			tableName();
			setState(5679);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX || _la==KEY || _la==LR_BRACKET) {
				{
				setState(5673);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(5672);
					((TableIndexesContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((TableIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5675);
				match(LR_BRACKET);
				setState(5676);
				uidList();
				setState(5677);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushOptionContext extends ParserRuleContext {
		public FlushOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushOption; }
	 
		public FlushOptionContext() { }
		public void copyFrom(FlushOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableFlushOptionContext extends FlushOptionContext {
		public TerminalNode TABLE() { return getToken(CqlParser.TABLE, 0); }
		public TerminalNode TABLES() { return getToken(CqlParser.TABLES, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public FlushTableOptionContext flushTableOption() {
			return getRuleContext(FlushTableOptionContext.class,0);
		}
		public TableFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ChannelFlushOptionContext extends FlushOptionContext {
		public TerminalNode RELAY() { return getToken(CqlParser.RELAY, 0); }
		public TerminalNode LOGS() { return getToken(CqlParser.LOGS, 0); }
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ChannelFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitChannelFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleFlushOptionContext extends FlushOptionContext {
		public TerminalNode DES_KEY_FILE() { return getToken(CqlParser.DES_KEY_FILE, 0); }
		public TerminalNode HOSTS() { return getToken(CqlParser.HOSTS, 0); }
		public TerminalNode LOGS() { return getToken(CqlParser.LOGS, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(CqlParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(CqlParser.PRIVILEGES, 0); }
		public TerminalNode QUERY() { return getToken(CqlParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(CqlParser.CACHE, 0); }
		public TerminalNode STATUS() { return getToken(CqlParser.STATUS, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(CqlParser.USER_RESOURCES, 0); }
		public TerminalNode TABLES() { return getToken(CqlParser.TABLES, 0); }
		public TerminalNode WITH() { return getToken(CqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(CqlParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(CqlParser.LOCK, 0); }
		public TerminalNode BINARY() { return getToken(CqlParser.BINARY, 0); }
		public TerminalNode ENGINE() { return getToken(CqlParser.ENGINE, 0); }
		public TerminalNode ERROR() { return getToken(CqlParser.ERROR, 0); }
		public TerminalNode GENERAL() { return getToken(CqlParser.GENERAL, 0); }
		public TerminalNode RELAY() { return getToken(CqlParser.RELAY, 0); }
		public TerminalNode SLOW() { return getToken(CqlParser.SLOW, 0); }
		public SimpleFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSimpleFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushOptionContext flushOption() throws RecognitionException {
		FlushOptionContext _localctx = new FlushOptionContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_flushOption);
		int _la;
		try {
			setState(5713);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,829,_ctx) ) {
			case 1:
				_localctx = new SimpleFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5699);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DES_KEY_FILE:
					{
					setState(5681);
					match(DES_KEY_FILE);
					}
					break;
				case HOSTS:
					{
					setState(5682);
					match(HOSTS);
					}
					break;
				case BINARY:
				case ENGINE:
				case ERROR:
				case GENERAL:
				case LOGS:
				case RELAY:
				case SLOW:
					{
					setState(5684);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BINARY || ((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (ENGINE - 397)) | (1L << (ERROR - 397)) | (1L << (GENERAL - 397)))) != 0) || _la==RELAY || _la==SLOW) {
						{
						setState(5683);
						_la = _input.LA(1);
						if ( !(_la==BINARY || ((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (ENGINE - 397)) | (1L << (ERROR - 397)) | (1L << (GENERAL - 397)))) != 0) || _la==RELAY || _la==SLOW) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(5686);
					match(LOGS);
					}
					break;
				case OPTIMIZER_COSTS:
					{
					setState(5687);
					match(OPTIMIZER_COSTS);
					}
					break;
				case PRIVILEGES:
					{
					setState(5688);
					match(PRIVILEGES);
					}
					break;
				case QUERY:
					{
					setState(5689);
					match(QUERY);
					setState(5690);
					match(CACHE);
					}
					break;
				case STATUS:
					{
					setState(5691);
					match(STATUS);
					}
					break;
				case USER_RESOURCES:
					{
					setState(5692);
					match(USER_RESOURCES);
					}
					break;
				case TABLES:
					{
					setState(5693);
					match(TABLES);
					setState(5697);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(5694);
						match(WITH);
						setState(5695);
						match(READ);
						setState(5696);
						match(LOCK);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new ChannelFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5701);
				match(RELAY);
				setState(5702);
				match(LOGS);
				setState(5704);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5703);
					channelOption();
					}
				}

				}
				break;
			case 3:
				_localctx = new TableFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5706);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==TABLES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5708);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,827,_ctx) ) {
				case 1:
					{
					setState(5707);
					tables();
					}
					break;
				}
				setState(5711);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==WITH) {
					{
					setState(5710);
					flushTableOption();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushTableOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(CqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(CqlParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(CqlParser.LOCK, 0); }
		public TerminalNode FOR() { return getToken(CqlParser.FOR, 0); }
		public TerminalNode EXPORT() { return getToken(CqlParser.EXPORT, 0); }
		public FlushTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushTableOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitFlushTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushTableOptionContext flushTableOption() throws RecognitionException {
		FlushTableOptionContext _localctx = new FlushTableOptionContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_flushTableOption);
		try {
			setState(5720);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(5715);
				match(WITH);
				setState(5716);
				match(READ);
				setState(5717);
				match(LOCK);
				}
				break;
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5718);
				match(FOR);
				setState(5719);
				match(EXPORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadedTableIndexesContext extends ParserRuleContext {
		public UidListContext partitionList;
		public Token indexFormat;
		public UidListContext indexList;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(CqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(CqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(CqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(CqlParser.RR_BRACKET, i);
		}
		public TerminalNode IGNORE() { return getToken(CqlParser.IGNORE, 0); }
		public TerminalNode LEAVES() { return getToken(CqlParser.LEAVES, 0); }
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode ALL() { return getToken(CqlParser.ALL, 0); }
		public TerminalNode INDEX() { return getToken(CqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(CqlParser.KEY, 0); }
		public LoadedTableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadedTableIndexes; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitLoadedTableIndexes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadedTableIndexesContext loadedTableIndexes() throws RecognitionException {
		LoadedTableIndexesContext _localctx = new LoadedTableIndexesContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_loadedTableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5722);
			tableName();
			setState(5730);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5723);
				match(PARTITION);
				setState(5724);
				match(LR_BRACKET);
				setState(5727);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(5725);
					((LoadedTableIndexesContext)_localctx).partitionList = uidList();
					}
					break;
				case ALL:
					{
					setState(5726);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5729);
				match(RR_BRACKET);
				}
			}

			setState(5739);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,834,_ctx) ) {
			case 1:
				{
				setState(5733);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(5732);
					((LoadedTableIndexesContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((LoadedTableIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5735);
				match(LR_BRACKET);
				setState(5736);
				((LoadedTableIndexesContext)_localctx).indexList = uidList();
				setState(5737);
				match(RR_BRACKET);
				}
				break;
			}
			setState(5743);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(5741);
				match(IGNORE);
				setState(5742);
				match(LEAVES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public UidContext column;
		public Token pattern;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(CqlParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(CqlParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(CqlParser.DESC, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public SimpleDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleDescribeStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSimpleDescribeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleDescribeStatementContext simpleDescribeStatement() throws RecognitionException {
		SimpleDescribeStatementContext _localctx = new SimpleDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_simpleDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5745);
			((SimpleDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				((SimpleDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5746);
			tableName();
			setState(5749);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,836,_ctx) ) {
			case 1:
				{
				setState(5747);
				((SimpleDescribeStatementContext)_localctx).column = uid();
				}
				break;
			case 2:
				{
				setState(5748);
				((SimpleDescribeStatementContext)_localctx).pattern = match(STRING_LITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public Token formatType;
		public Token formatValue;
		public DescribeObjectClauseContext describeObjectClause() {
			return getRuleContext(DescribeObjectClauseContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(CqlParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(CqlParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(CqlParser.DESC, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode EXTENDED() { return getToken(CqlParser.EXTENDED, 0); }
		public TerminalNode PARTITIONS() { return getToken(CqlParser.PARTITIONS, 0); }
		public TerminalNode FORMAT() { return getToken(CqlParser.FORMAT, 0); }
		public TerminalNode TRADITIONAL() { return getToken(CqlParser.TRADITIONAL, 0); }
		public TerminalNode JSON() { return getToken(CqlParser.JSON, 0); }
		public FullDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullDescribeStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitFullDescribeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullDescribeStatementContext fullDescribeStatement() throws RecognitionException {
		FullDescribeStatementContext _localctx = new FullDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_fullDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5751);
			((FullDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				((FullDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5755);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) {
				{
				setState(5752);
				((FullDescribeStatementContext)_localctx).formatType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) ) {
					((FullDescribeStatementContext)_localctx).formatType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5753);
				match(EQUAL_SYMBOL);
				setState(5754);
				((FullDescribeStatementContext)_localctx).formatValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || _la==TRADITIONAL) ) {
					((FullDescribeStatementContext)_localctx).formatValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5757);
			describeObjectClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HelpStatementContext extends ParserRuleContext {
		public TerminalNode HELP() { return getToken(CqlParser.HELP, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public HelpStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_helpStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitHelpStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HelpStatementContext helpStatement() throws RecognitionException {
		HelpStatementContext _localctx = new HelpStatementContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_helpStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5759);
			match(HELP);
			setState(5760);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UseStatementContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(CqlParser.USE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public UseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitUseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UseStatementContext useStatement() throws RecognitionException {
		UseStatementContext _localctx = new UseStatementContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_useStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5762);
			match(USE);
			setState(5763);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalStatementContext extends ParserRuleContext {
		public TerminalNode SIGNAL() { return getToken(CqlParser.SIGNAL, 0); }
		public TerminalNode ID() { return getToken(CqlParser.ID, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(CqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode SET() { return getToken(CqlParser.SET, 0); }
		public List<SignalConditionInformationContext> signalConditionInformation() {
			return getRuleContexts(SignalConditionInformationContext.class);
		}
		public SignalConditionInformationContext signalConditionInformation(int i) {
			return getRuleContext(SignalConditionInformationContext.class,i);
		}
		public TerminalNode SQLSTATE() { return getToken(CqlParser.SQLSTATE, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public TerminalNode VALUE() { return getToken(CqlParser.VALUE, 0); }
		public SignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSignalStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalStatementContext signalStatement() throws RecognitionException {
		SignalStatementContext _localctx = new SignalStatementContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_signalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5765);
			match(SIGNAL);
			setState(5773);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQLSTATE:
				{
				{
				setState(5766);
				match(SQLSTATE);
				setState(5768);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(5767);
					match(VALUE);
					}
				}

				setState(5770);
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				setState(5771);
				match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				setState(5772);
				match(REVERSE_QUOTE_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5784);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,841,_ctx) ) {
			case 1:
				{
				setState(5775);
				match(SET);
				setState(5776);
				signalConditionInformation();
				setState(5781);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5777);
					match(COMMA);
					setState(5778);
					signalConditionInformation();
					}
					}
					setState(5783);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResignalStatementContext extends ParserRuleContext {
		public TerminalNode RESIGNAL() { return getToken(CqlParser.RESIGNAL, 0); }
		public TerminalNode ID() { return getToken(CqlParser.ID, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(CqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode SET() { return getToken(CqlParser.SET, 0); }
		public List<SignalConditionInformationContext> signalConditionInformation() {
			return getRuleContexts(SignalConditionInformationContext.class);
		}
		public SignalConditionInformationContext signalConditionInformation(int i) {
			return getRuleContext(SignalConditionInformationContext.class,i);
		}
		public TerminalNode SQLSTATE() { return getToken(CqlParser.SQLSTATE, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public TerminalNode VALUE() { return getToken(CqlParser.VALUE, 0); }
		public ResignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resignalStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitResignalStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResignalStatementContext resignalStatement() throws RecognitionException {
		ResignalStatementContext _localctx = new ResignalStatementContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_resignalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5786);
			match(RESIGNAL);
			setState(5794);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQLSTATE:
				{
				{
				setState(5787);
				match(SQLSTATE);
				setState(5789);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(5788);
					match(VALUE);
					}
				}

				setState(5791);
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				setState(5792);
				match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				setState(5793);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case EOF:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case MINUS:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			setState(5805);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,845,_ctx) ) {
			case 1:
				{
				setState(5796);
				match(SET);
				setState(5797);
				signalConditionInformation();
				setState(5802);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5798);
					match(COMMA);
					setState(5799);
					signalConditionInformation();
					}
					}
					setState(5804);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalConditionInformationContext extends ParserRuleContext {
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(CqlParser.CLASS_ORIGIN, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(CqlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(CqlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(CqlParser.MYSQL_ERRNO, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(CqlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(CqlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(CqlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(CqlParser.CATALOG_NAME, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(CqlParser.SCHEMA_NAME, 0); }
		public TerminalNode TABLE_NAME() { return getToken(CqlParser.TABLE_NAME, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(CqlParser.COLUMN_NAME, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(CqlParser.CURSOR_NAME, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode DECIMAL_LITERAL() { return getToken(CqlParser.DECIMAL_LITERAL, 0); }
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public SignalConditionInformationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalConditionInformation; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSignalConditionInformation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalConditionInformationContext signalConditionInformation() throws RecognitionException {
		SignalConditionInformationContext _localctx = new SignalConditionInformationContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_signalConditionInformation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5807);
			_la = _input.LA(1);
			if ( !(((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (CLASS_ORIGIN - 350)) | (1L << (COLUMN_NAME - 350)) | (1L << (CONSTRAINT_CATALOG - 350)) | (1L << (CONSTRAINT_SCHEMA - 350)) | (1L << (CONSTRAINT_NAME - 350)) | (1L << (CURSOR_NAME - 350)))) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || _la==SUBCLASS_ORIGIN || _la==TABLE_NAME || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5808);
			match(EQUAL_SYMBOL);
			setState(5813);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,846,_ctx) ) {
			case 1:
				{
				setState(5809);
				stringLiteral();
				}
				break;
			case 2:
				{
				setState(5810);
				match(DECIMAL_LITERAL);
				}
				break;
			case 3:
				{
				setState(5811);
				mysqlVariable();
				}
				break;
			case 4:
				{
				setState(5812);
				simpleId();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiagnosticsStatementContext extends ParserRuleContext {
		public TerminalNode GET() { return getToken(CqlParser.GET, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(CqlParser.DIAGNOSTICS, 0); }
		public TerminalNode CURRENT() { return getToken(CqlParser.CURRENT, 0); }
		public TerminalNode STACKED() { return getToken(CqlParser.STACKED, 0); }
		public List<VariableClauseContext> variableClause() {
			return getRuleContexts(VariableClauseContext.class);
		}
		public VariableClauseContext variableClause(int i) {
			return getRuleContext(VariableClauseContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(CqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(CqlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode CONDITION() { return getToken(CqlParser.CONDITION, 0); }
		public List<DiagnosticsConditionInformationNameContext> diagnosticsConditionInformationName() {
			return getRuleContexts(DiagnosticsConditionInformationNameContext.class);
		}
		public DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName(int i) {
			return getRuleContext(DiagnosticsConditionInformationNameContext.class,i);
		}
		public List<TerminalNode> NUMBER() { return getTokens(CqlParser.NUMBER); }
		public TerminalNode NUMBER(int i) {
			return getToken(CqlParser.NUMBER, i);
		}
		public List<TerminalNode> ROW_COUNT() { return getTokens(CqlParser.ROW_COUNT); }
		public TerminalNode ROW_COUNT(int i) {
			return getToken(CqlParser.ROW_COUNT, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public DiagnosticsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diagnosticsStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDiagnosticsStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiagnosticsStatementContext diagnosticsStatement() throws RecognitionException {
		DiagnosticsStatementContext _localctx = new DiagnosticsStatementContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_diagnosticsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5815);
			match(GET);
			setState(5817);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CURRENT || _la==STACKED) {
				{
				setState(5816);
				_la = _input.LA(1);
				if ( !(_la==CURRENT || _la==STACKED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5819);
			match(DIAGNOSTICS);
			setState(5851);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				{
				{
				setState(5820);
				variableClause();
				setState(5821);
				match(EQUAL_SYMBOL);
				setState(5822);
				_la = _input.LA(1);
				if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5830);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5823);
					match(COMMA);
					setState(5824);
					variableClause();
					setState(5825);
					match(EQUAL_SYMBOL);
					setState(5826);
					_la = _input.LA(1);
					if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(5832);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case CONDITION:
				{
				{
				setState(5833);
				match(CONDITION);
				setState(5836);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					setState(5834);
					decimalLiteral();
					}
					break;
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case AT_SIGN:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case LOCAL_ID:
				case GLOBAL_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(5835);
					variableClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5838);
				variableClause();
				setState(5839);
				match(EQUAL_SYMBOL);
				setState(5840);
				diagnosticsConditionInformationName();
				setState(5848);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5841);
					match(COMMA);
					setState(5842);
					variableClause();
					setState(5843);
					match(EQUAL_SYMBOL);
					setState(5844);
					diagnosticsConditionInformationName();
					}
					}
					setState(5850);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiagnosticsConditionInformationNameContext extends ParserRuleContext {
		public TerminalNode CLASS_ORIGIN() { return getToken(CqlParser.CLASS_ORIGIN, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(CqlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(CqlParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(CqlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(CqlParser.MYSQL_ERRNO, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(CqlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(CqlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(CqlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(CqlParser.CATALOG_NAME, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(CqlParser.SCHEMA_NAME, 0); }
		public TerminalNode TABLE_NAME() { return getToken(CqlParser.TABLE_NAME, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(CqlParser.COLUMN_NAME, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(CqlParser.CURSOR_NAME, 0); }
		public DiagnosticsConditionInformationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diagnosticsConditionInformationName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDiagnosticsConditionInformationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName() throws RecognitionException {
		DiagnosticsConditionInformationNameContext _localctx = new DiagnosticsConditionInformationNameContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_diagnosticsConditionInformationName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5853);
			_la = _input.LA(1);
			if ( !(((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (CLASS_ORIGIN - 350)) | (1L << (COLUMN_NAME - 350)) | (1L << (CONSTRAINT_CATALOG - 350)) | (1L << (CONSTRAINT_SCHEMA - 350)) | (1L << (CONSTRAINT_NAME - 350)) | (1L << (CURSOR_NAME - 350)))) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || ((((_la - 569)) & ~0x3f) == 0 && ((1L << (_la - 569)) & ((1L << (RETURNED_SQLSTATE - 569)) | (1L << (SUBCLASS_ORIGIN - 569)) | (1L << (TABLE_NAME - 569)))) != 0) || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeObjectClauseContext extends ParserRuleContext {
		public DescribeObjectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeObjectClause; }
	 
		public DescribeObjectClauseContext() { }
		public void copyFrom(DescribeObjectClauseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DescribeStatementsContext extends DescribeObjectClauseContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DescribeStatementsContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDescribeStatements(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DescribeConnectionContext extends DescribeObjectClauseContext {
		public TerminalNode FOR() { return getToken(CqlParser.FOR, 0); }
		public TerminalNode CONNECTION() { return getToken(CqlParser.CONNECTION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DescribeConnectionContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDescribeConnection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeObjectClauseContext describeObjectClause() throws RecognitionException {
		DescribeObjectClauseContext _localctx = new DescribeObjectClauseContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_describeObjectClause);
		try {
			setState(5865);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
			case INSERT:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case LR_BRACKET:
				_localctx = new DescribeStatementsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5860);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT:
				case LR_BRACKET:
					{
					setState(5855);
					selectStatement();
					}
					break;
				case DELETE:
					{
					setState(5856);
					deleteStatement();
					}
					break;
				case INSERT:
					{
					setState(5857);
					insertStatement();
					}
					break;
				case REPLACE:
					{
					setState(5858);
					replaceStatement();
					}
					break;
				case UPDATE:
					{
					setState(5859);
					updateStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FOR:
				_localctx = new DescribeConnectionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5862);
				match(FOR);
				setState(5863);
				match(CONNECTION);
				setState(5864);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullIdContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode DOT_ID() { return getToken(CqlParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(CqlParser.DOT, 0); }
		public FullIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullId; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitFullId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullIdContext fullId() throws RecognitionException {
		FullIdContext _localctx = new FullIdContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_fullId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5867);
			uid();
			setState(5871);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,854,_ctx) ) {
			case 1:
				{
				setState(5868);
				match(DOT_ID);
				}
				break;
			case 2:
				{
				setState(5869);
				match(DOT);
				setState(5870);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5873);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleNameContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public RoleNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitRoleName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleNameContext roleName() throws RecognitionException {
		RoleNameContext _localctx = new RoleNameContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_roleName);
		try {
			setState(5877);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,855,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5875);
				userName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5876);
				uid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullColumnNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<DottedIdContext> dottedId() {
			return getRuleContexts(DottedIdContext.class);
		}
		public DottedIdContext dottedId(int i) {
			return getRuleContext(DottedIdContext.class,i);
		}
		public FullColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullColumnName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitFullColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullColumnNameContext fullColumnName() throws RecognitionException {
		FullColumnNameContext _localctx = new FullColumnNameContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_fullColumnName);
		try {
			setState(5891);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,859,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5879);
				uid();
				setState(5884);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,857,_ctx) ) {
				case 1:
					{
					setState(5880);
					dottedId();
					setState(5882);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,856,_ctx) ) {
					case 1:
						{
						setState(5881);
						dottedId();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5886);
				matchWildcard();
				setState(5887);
				dottedId();
				setState(5889);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,858,_ctx) ) {
				case 1:
					{
					setState(5888);
					dottedId();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNameContext extends ParserRuleContext {
		public Token sortType;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode ASC() { return getToken(CqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(CqlParser.DESC, 0); }
		public IndexColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitIndexColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNameContext indexColumnName() throws RecognitionException {
		IndexColumnNameContext _localctx = new IndexColumnNameContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_indexColumnName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5904);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,862,_ctx) ) {
			case 1:
				{
				setState(5895);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,860,_ctx) ) {
				case 1:
					{
					setState(5893);
					uid();
					}
					break;
				case 2:
					{
					setState(5894);
					match(STRING_LITERAL);
					}
					break;
				}
				setState(5901);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5897);
					match(LR_BRACKET);
					setState(5898);
					decimalLiteral();
					setState(5899);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				{
				setState(5903);
				expression(0);
				}
				break;
			}
			setState(5907);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(5906);
				((IndexColumnNameContext)_localctx).sortType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((IndexColumnNameContext)_localctx).sortType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserNameContext extends ParserRuleContext {
		public TerminalNode STRING_USER_NAME() { return getToken(CqlParser.STRING_USER_NAME, 0); }
		public TerminalNode STRING_USER_NAME_MARIADB() { return getToken(CqlParser.STRING_USER_NAME_MARIADB, 0); }
		public TerminalNode ID() { return getToken(CqlParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode ADMIN() { return getToken(CqlParser.ADMIN, 0); }
		public KeywordsCanBeIdContext keywordsCanBeId() {
			return getRuleContext(KeywordsCanBeIdContext.class,0);
		}
		public UserNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitUserName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserNameContext userName() throws RecognitionException {
		UserNameContext _localctx = new UserNameContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_userName);
		try {
			setState(5915);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,864,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5909);
				match(STRING_USER_NAME);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5910);
				match(STRING_USER_NAME_MARIADB);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5911);
				match(ID);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5912);
				match(STRING_LITERAL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5913);
				match(ADMIN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5914);
				keywordsCanBeId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MysqlVariableContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(CqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(CqlParser.GLOBAL_ID, 0); }
		public MysqlVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mysqlVariable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitMysqlVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MysqlVariableContext mysqlVariable() throws RecognitionException {
		MysqlVariableContext _localctx = new MysqlVariableContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_mysqlVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5917);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==GLOBAL_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(CqlParser.BINARY, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(CqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCharsetName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameContext charsetName() throws RecognitionException {
		CharsetNameContext _localctx = new CharsetNameContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_charsetName);
		try {
			setState(5923);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,865,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5919);
				match(BINARY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5920);
				charsetNameBase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5921);
				match(STRING_LITERAL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5922);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCollationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_collationName);
		try {
			setState(5927);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,866,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5925);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5926);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EngineNameContext extends ParserRuleContext {
		public TerminalNode ARCHIVE() { return getToken(CqlParser.ARCHIVE, 0); }
		public TerminalNode BLACKHOLE() { return getToken(CqlParser.BLACKHOLE, 0); }
		public TerminalNode CSV() { return getToken(CqlParser.CSV, 0); }
		public TerminalNode FEDERATED() { return getToken(CqlParser.FEDERATED, 0); }
		public TerminalNode INNODB() { return getToken(CqlParser.INNODB, 0); }
		public TerminalNode MEMORY() { return getToken(CqlParser.MEMORY, 0); }
		public TerminalNode MRG_MYISAM() { return getToken(CqlParser.MRG_MYISAM, 0); }
		public TerminalNode MYISAM() { return getToken(CqlParser.MYISAM, 0); }
		public TerminalNode NDB() { return getToken(CqlParser.NDB, 0); }
		public TerminalNode NDBCLUSTER() { return getToken(CqlParser.NDBCLUSTER, 0); }
		public TerminalNode PERFORMANCE_SCHEMA() { return getToken(CqlParser.PERFORMANCE_SCHEMA, 0); }
		public TerminalNode TOKUDB() { return getToken(CqlParser.TOKUDB, 0); }
		public TerminalNode ID() { return getToken(CqlParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(CqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CONNECT() { return getToken(CqlParser.CONNECT, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitEngineName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EngineNameContext engineName() throws RecognitionException {
		EngineNameContext _localctx = new EngineNameContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_engineName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5929);
			_la = _input.LA(1);
			if ( !(_la==CONNECT || ((((_la - 755)) & ~0x3f) == 0 && ((1L << (_la - 755)) & ((1L << (ARCHIVE - 755)) | (1L << (BLACKHOLE - 755)) | (1L << (CSV - 755)) | (1L << (FEDERATED - 755)) | (1L << (INNODB - 755)) | (1L << (MEMORY - 755)) | (1L << (MRG_MYISAM - 755)) | (1L << (MYISAM - 755)) | (1L << (NDB - 755)) | (1L << (NDBCLUSTER - 755)) | (1L << (PERFORMANCE_SCHEMA - 755)) | (1L << (TOKUDB - 755)))) != 0) || ((((_la - 1126)) & ~0x3f) == 0 && ((1L << (_la - 1126)) & ((1L << (STRING_LITERAL - 1126)) | (1L << (ID - 1126)) | (1L << (REVERSE_QUOTE_ID - 1126)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UuidSetContext extends ParserRuleContext {
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public List<TerminalNode> MINUS() { return getTokens(CqlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(CqlParser.MINUS, i);
		}
		public List<TerminalNode> COLON_SYMB() { return getTokens(CqlParser.COLON_SYMB); }
		public TerminalNode COLON_SYMB(int i) {
			return getToken(CqlParser.COLON_SYMB, i);
		}
		public UuidSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uuidSet; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitUuidSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UuidSetContext uuidSet() throws RecognitionException {
		UuidSetContext _localctx = new UuidSetContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_uuidSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5931);
			decimalLiteral();
			setState(5932);
			match(MINUS);
			setState(5933);
			decimalLiteral();
			setState(5934);
			match(MINUS);
			setState(5935);
			decimalLiteral();
			setState(5936);
			match(MINUS);
			setState(5937);
			decimalLiteral();
			setState(5938);
			match(MINUS);
			setState(5939);
			decimalLiteral();
			setState(5945); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5940);
				match(COLON_SYMB);
				setState(5941);
				decimalLiteral();
				setState(5942);
				match(MINUS);
				setState(5943);
				decimalLiteral();
				}
				}
				setState(5947); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COLON_SYMB );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XidContext extends ParserRuleContext {
		public XuidStringIdContext globalTableUid;
		public XuidStringIdContext qualifier;
		public DecimalLiteralContext idFormat;
		public List<XuidStringIdContext> xuidStringId() {
			return getRuleContexts(XuidStringIdContext.class);
		}
		public XuidStringIdContext xuidStringId(int i) {
			return getRuleContext(XuidStringIdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public XidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xid; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitXid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XidContext xid() throws RecognitionException {
		XidContext _localctx = new XidContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_xid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5949);
			((XidContext)_localctx).globalTableUid = xuidStringId();
			setState(5956);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5950);
				match(COMMA);
				setState(5951);
				((XidContext)_localctx).qualifier = xuidStringId();
				setState(5954);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5952);
					match(COMMA);
					setState(5953);
					((XidContext)_localctx).idFormat = decimalLiteral();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XuidStringIdContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(CqlParser.BIT_STRING, 0); }
		public List<TerminalNode> HEXADECIMAL_LITERAL() { return getTokens(CqlParser.HEXADECIMAL_LITERAL); }
		public TerminalNode HEXADECIMAL_LITERAL(int i) {
			return getToken(CqlParser.HEXADECIMAL_LITERAL, i);
		}
		public XuidStringIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xuidStringId; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitXuidStringId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XuidStringIdContext xuidStringId() throws RecognitionException {
		XuidStringIdContext _localctx = new XuidStringIdContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_xuidStringId);
		int _la;
		try {
			setState(5965);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5958);
				match(STRING_LITERAL);
				}
				break;
			case BIT_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5959);
				match(BIT_STRING);
				}
				break;
			case HEXADECIMAL_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5961); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5960);
					match(HEXADECIMAL_LITERAL);
					}
					}
					setState(5963); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==HEXADECIMAL_LITERAL );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthPluginContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public AuthPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authPlugin; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAuthPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuthPluginContext authPlugin() throws RecognitionException {
		AuthPluginContext _localctx = new AuthPluginContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_authPlugin);
		try {
			setState(5969);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,872,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5967);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5968);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidContext extends ParserRuleContext {
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(CqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(CqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public UidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uid; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitUid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidContext uid() throws RecognitionException {
		UidContext _localctx = new UidContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_uid);
		try {
			setState(5974);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,873,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5971);
				simpleId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5972);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5973);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleIdContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(CqlParser.ID, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TransactionLevelBaseContext transactionLevelBase() {
			return getRuleContext(TransactionLevelBaseContext.class,0);
		}
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public PrivilegesBaseContext privilegesBase() {
			return getRuleContext(PrivilegesBaseContext.class,0);
		}
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public DataTypeBaseContext dataTypeBase() {
			return getRuleContext(DataTypeBaseContext.class,0);
		}
		public KeywordsCanBeIdContext keywordsCanBeId() {
			return getRuleContext(KeywordsCanBeIdContext.class,0);
		}
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public SimpleIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleId; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSimpleId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleIdContext simpleId() throws RecognitionException {
		SimpleIdContext _localctx = new SimpleIdContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_simpleId);
		try {
			setState(5985);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,874,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5976);
				match(ID);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5977);
				charsetNameBase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5978);
				transactionLevelBase();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5979);
				engineName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5980);
				privilegesBase();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5981);
				intervalTypeBase();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5982);
				dataTypeBase();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5983);
				keywordsCanBeId();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5984);
				functionNameBase();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DottedIdContext extends ParserRuleContext {
		public TerminalNode DOT_ID() { return getToken(CqlParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(CqlParser.DOT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dottedId; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDottedId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DottedIdContext dottedId() throws RecognitionException {
		DottedIdContext _localctx = new DottedIdContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_dottedId);
		try {
			setState(5990);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOT_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5987);
				match(DOT_ID);
				}
				break;
			case DOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5988);
				match(DOT);
				setState(5989);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalLiteralContext extends ParserRuleContext {
		public TerminalNode DECIMAL_LITERAL() { return getToken(CqlParser.DECIMAL_LITERAL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(CqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(CqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(CqlParser.TWO_DECIMAL, 0); }
		public TerminalNode REAL_LITERAL() { return getToken(CqlParser.REAL_LITERAL, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalLiteral; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecimalLiteralContext decimalLiteral() throws RecognitionException {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_decimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5992);
			_la = _input.LA(1);
			if ( !(((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & ((1L << (ZERO_DECIMAL - 1116)) | (1L << (ONE_DECIMAL - 1116)) | (1L << (TWO_DECIMAL - 1116)) | (1L << (DECIMAL_LITERAL - 1116)) | (1L << (REAL_LITERAL - 1116)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FileSizeLiteralContext extends ParserRuleContext {
		public TerminalNode FILESIZE_LITERAL() { return getToken(CqlParser.FILESIZE_LITERAL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public FileSizeLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileSizeLiteral; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitFileSizeLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileSizeLiteralContext fileSizeLiteral() throws RecognitionException {
		FileSizeLiteralContext _localctx = new FileSizeLiteralContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_fileSizeLiteral);
		try {
			setState(5996);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILESIZE_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5994);
				match(FILESIZE_LITERAL);
				}
				break;
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5995);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringLiteralContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(CqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(CqlParser.STRING_LITERAL, i);
		}
		public TerminalNode START_NATIONAL_STRING_LITERAL() { return getToken(CqlParser.START_NATIONAL_STRING_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(CqlParser.STRING_CHARSET_NAME, 0); }
		public TerminalNode COLLATE() { return getToken(CqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLiteral; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitStringLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringLiteralContext stringLiteral() throws RecognitionException {
		StringLiteralContext _localctx = new StringLiteralContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_stringLiteral);
		int _la;
		try {
			int _alt;
			setState(6021);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,883,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6003);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(5999);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(5998);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(6001);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(6002);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6006); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(6005);
						match(STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6008); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,879,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6015);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(6011);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(6010);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(6013);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(6014);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6019);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,882,_ctx) ) {
				case 1:
					{
					setState(6017);
					match(COLLATE);
					setState(6018);
					collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanLiteralContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(CqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(CqlParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanLiteral; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitBooleanLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanLiteralContext booleanLiteral() throws RecognitionException {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_booleanLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6023);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HexadecimalLiteralContext extends ParserRuleContext {
		public TerminalNode HEXADECIMAL_LITERAL() { return getToken(CqlParser.HEXADECIMAL_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(CqlParser.STRING_CHARSET_NAME, 0); }
		public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hexadecimalLiteral; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitHexadecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HexadecimalLiteralContext hexadecimalLiteral() throws RecognitionException {
		HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_hexadecimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6026);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING_CHARSET_NAME) {
				{
				setState(6025);
				match(STRING_CHARSET_NAME);
				}
			}

			setState(6028);
			match(HEXADECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullNotnullContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(CqlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(CqlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(CqlParser.NOT, 0); }
		public NullNotnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullNotnull; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitNullNotnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullNotnullContext nullNotnull() throws RecognitionException {
		NullNotnullContext _localctx = new NullNotnullContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_nullNotnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6031);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(6030);
				match(NOT);
				}
			}

			setState(6033);
			_la = _input.LA(1);
			if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Token nullLiteral;
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(CqlParser.MINUS, 0); }
		public HexadecimalLiteralContext hexadecimalLiteral() {
			return getRuleContext(HexadecimalLiteralContext.class,0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return getRuleContext(BooleanLiteralContext.class,0);
		}
		public TerminalNode REAL_LITERAL() { return getToken(CqlParser.REAL_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(CqlParser.BIT_STRING, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(CqlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(CqlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(CqlParser.NOT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_constant);
		int _la;
		try {
			setState(6047);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,887,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6035);
				stringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6036);
				decimalLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6037);
				match(MINUS);
				setState(6038);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6039);
				hexadecimalLiteral();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6040);
				booleanLiteral();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6041);
				match(REAL_LITERAL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6042);
				match(BIT_STRING);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6044);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(6043);
					match(NOT);
					}
				}

				setState(6046);
				((ConstantContext)_localctx).nullLiteral = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
					((ConstantContext)_localctx).nullLiteral = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
	 
		public DataTypeContext() { }
		public void copyFrom(DataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpatialDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(CqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMCOLLECTION() { return getToken(CqlParser.GEOMCOLLECTION, 0); }
		public TerminalNode LINESTRING() { return getToken(CqlParser.LINESTRING, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(CqlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTIPOINT() { return getToken(CqlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(CqlParser.MULTIPOLYGON, 0); }
		public TerminalNode POINT() { return getToken(CqlParser.POINT, 0); }
		public TerminalNode POLYGON() { return getToken(CqlParser.POLYGON, 0); }
		public TerminalNode JSON() { return getToken(CqlParser.JSON, 0); }
		public TerminalNode GEOMETRY() { return getToken(CqlParser.GEOMETRY, 0); }
		public SpatialDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSpatialDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LongVarbinaryDataTypeContext extends DataTypeContext {
		public TerminalNode LONG() { return getToken(CqlParser.LONG, 0); }
		public TerminalNode VARBINARY() { return getToken(CqlParser.VARBINARY, 0); }
		public LongVarbinaryDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitLongVarbinaryDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollectionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public CollectionOptionsContext collectionOptions() {
			return getRuleContext(CollectionOptionsContext.class,0);
		}
		public TerminalNode ENUM() { return getToken(CqlParser.ENUM, 0); }
		public TerminalNode SET() { return getToken(CqlParser.SET, 0); }
		public TerminalNode BINARY() { return getToken(CqlParser.BINARY, 0); }
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CollectionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCollectionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalVaryingStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(CqlParser.NATIONAL, 0); }
		public TerminalNode VARYING() { return getToken(CqlParser.VARYING, 0); }
		public TerminalNode CHAR() { return getToken(CqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(CqlParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(CqlParser.BINARY, 0); }
		public NationalVaryingStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitNationalVaryingStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DimensionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode TINYINT() { return getToken(CqlParser.TINYINT, 0); }
		public TerminalNode SMALLINT() { return getToken(CqlParser.SMALLINT, 0); }
		public TerminalNode MEDIUMINT() { return getToken(CqlParser.MEDIUMINT, 0); }
		public TerminalNode INT() { return getToken(CqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(CqlParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(CqlParser.BIGINT, 0); }
		public TerminalNode MIDDLEINT() { return getToken(CqlParser.MIDDLEINT, 0); }
		public TerminalNode INT1() { return getToken(CqlParser.INT1, 0); }
		public TerminalNode INT2() { return getToken(CqlParser.INT2, 0); }
		public TerminalNode INT3() { return getToken(CqlParser.INT3, 0); }
		public TerminalNode INT4() { return getToken(CqlParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(CqlParser.INT8, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public List<TerminalNode> SIGNED() { return getTokens(CqlParser.SIGNED); }
		public TerminalNode SIGNED(int i) {
			return getToken(CqlParser.SIGNED, i);
		}
		public List<TerminalNode> UNSIGNED() { return getTokens(CqlParser.UNSIGNED); }
		public TerminalNode UNSIGNED(int i) {
			return getToken(CqlParser.UNSIGNED, i);
		}
		public List<TerminalNode> ZEROFILL() { return getTokens(CqlParser.ZEROFILL); }
		public TerminalNode ZEROFILL(int i) {
			return getToken(CqlParser.ZEROFILL, i);
		}
		public TerminalNode REAL() { return getToken(CqlParser.REAL, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode DOUBLE() { return getToken(CqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(CqlParser.PRECISION, 0); }
		public TerminalNode DECIMAL() { return getToken(CqlParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(CqlParser.DEC, 0); }
		public TerminalNode FIXED() { return getToken(CqlParser.FIXED, 0); }
		public TerminalNode NUMERIC() { return getToken(CqlParser.NUMERIC, 0); }
		public TerminalNode FLOAT() { return getToken(CqlParser.FLOAT, 0); }
		public TerminalNode FLOAT4() { return getToken(CqlParser.FLOAT4, 0); }
		public TerminalNode FLOAT8() { return getToken(CqlParser.FLOAT8, 0); }
		public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return getRuleContext(LengthTwoOptionalDimensionContext.class,0);
		}
		public TerminalNode BIT() { return getToken(CqlParser.BIT, 0); }
		public TerminalNode TIME() { return getToken(CqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(CqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(CqlParser.DATETIME, 0); }
		public TerminalNode BINARY() { return getToken(CqlParser.BINARY, 0); }
		public TerminalNode VARBINARY() { return getToken(CqlParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(CqlParser.BLOB, 0); }
		public TerminalNode YEAR() { return getToken(CqlParser.YEAR, 0); }
		public DimensionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDimensionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode CHAR() { return getToken(CqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(CqlParser.CHARACTER, 0); }
		public TerminalNode VARCHAR() { return getToken(CqlParser.VARCHAR, 0); }
		public TerminalNode TINYTEXT() { return getToken(CqlParser.TINYTEXT, 0); }
		public TerminalNode TEXT() { return getToken(CqlParser.TEXT, 0); }
		public TerminalNode MEDIUMTEXT() { return getToken(CqlParser.MEDIUMTEXT, 0); }
		public TerminalNode LONGTEXT() { return getToken(CqlParser.LONGTEXT, 0); }
		public TerminalNode NCHAR() { return getToken(CqlParser.NCHAR, 0); }
		public TerminalNode NVARCHAR() { return getToken(CqlParser.NVARCHAR, 0); }
		public TerminalNode LONG() { return getToken(CqlParser.LONG, 0); }
		public TerminalNode VARYING() { return getToken(CqlParser.VARYING, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public List<TerminalNode> BINARY() { return getTokens(CqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(CqlParser.BINARY, i);
		}
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(CqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public StringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LongVarcharDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode LONG() { return getToken(CqlParser.LONG, 0); }
		public TerminalNode VARCHAR() { return getToken(CqlParser.VARCHAR, 0); }
		public TerminalNode BINARY() { return getToken(CqlParser.BINARY, 0); }
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(CqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public LongVarcharDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitLongVarcharDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(CqlParser.NATIONAL, 0); }
		public TerminalNode VARCHAR() { return getToken(CqlParser.VARCHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(CqlParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(CqlParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(CqlParser.NCHAR, 0); }
		public NationalStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitNationalStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode DATE() { return getToken(CqlParser.DATE, 0); }
		public TerminalNode TINYBLOB() { return getToken(CqlParser.TINYBLOB, 0); }
		public TerminalNode MEDIUMBLOB() { return getToken(CqlParser.MEDIUMBLOB, 0); }
		public TerminalNode LONGBLOB() { return getToken(CqlParser.LONGBLOB, 0); }
		public TerminalNode BOOL() { return getToken(CqlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(CqlParser.BOOLEAN, 0); }
		public TerminalNode SERIAL() { return getToken(CqlParser.SERIAL, 0); }
		public SimpleDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSimpleDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_dataType);
		int _la;
		try {
			int _alt;
			setState(6171);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,915,_ctx) ) {
			case 1:
				_localctx = new StringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6049);
				((StringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (CHAR - 216)) | (1L << (VARCHAR - 216)) | (1L << (NVARCHAR - 216)) | (1L << (LONG - 216)) | (1L << (TINYTEXT - 216)) | (1L << (TEXT - 216)) | (1L << (MEDIUMTEXT - 216)) | (1L << (LONGTEXT - 216)))) != 0) || _la==NCHAR) ) {
					((StringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6051);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARYING) {
					{
					setState(6050);
					match(VARYING);
					}
				}

				setState(6054);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,889,_ctx) ) {
				case 1:
					{
					setState(6053);
					lengthOneDimension();
					}
					break;
				}
				setState(6057);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,890,_ctx) ) {
				case 1:
					{
					setState(6056);
					match(BINARY);
					}
					break;
				}
				setState(6062);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,891,_ctx) ) {
				case 1:
					{
					setState(6059);
					charSet();
					setState(6060);
					charsetName();
					}
					break;
				}
				setState(6067);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,892,_ctx) ) {
				case 1:
					{
					setState(6064);
					match(COLLATE);
					setState(6065);
					collationName();
					}
					break;
				case 2:
					{
					setState(6066);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6069);
				match(NATIONAL);
				setState(6070);
				((NationalStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==VARCHAR) ) {
					((NationalStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6072);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,893,_ctx) ) {
				case 1:
					{
					setState(6071);
					lengthOneDimension();
					}
					break;
				}
				setState(6075);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,894,_ctx) ) {
				case 1:
					{
					setState(6074);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6077);
				match(NCHAR);
				setState(6078);
				((NationalStringDataTypeContext)_localctx).typeName = match(VARCHAR);
				setState(6080);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,895,_ctx) ) {
				case 1:
					{
					setState(6079);
					lengthOneDimension();
					}
					break;
				}
				setState(6083);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,896,_ctx) ) {
				case 1:
					{
					setState(6082);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new NationalVaryingStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(6085);
				match(NATIONAL);
				setState(6086);
				((NationalVaryingStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==CHAR) ) {
					((NationalVaryingStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6087);
				match(VARYING);
				setState(6089);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,897,_ctx) ) {
				case 1:
					{
					setState(6088);
					lengthOneDimension();
					}
					break;
				}
				setState(6092);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,898,_ctx) ) {
				case 1:
					{
					setState(6091);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(6094);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (TINYINT - 190)) | (1L << (SMALLINT - 190)) | (1L << (MEDIUMINT - 190)) | (1L << (MIDDLEINT - 190)) | (1L << (INT - 190)) | (1L << (INT1 - 190)) | (1L << (INT2 - 190)) | (1L << (INT3 - 190)) | (1L << (INT4 - 190)) | (1L << (INT8 - 190)) | (1L << (INTEGER - 190)) | (1L << (BIGINT - 190)))) != 0)) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6096);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,899,_ctx) ) {
				case 1:
					{
					setState(6095);
					lengthOneDimension();
					}
					break;
				}
				setState(6101);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,900,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6098);
						_la = _input.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						} 
					}
					setState(6103);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,900,_ctx);
				}
				}
				break;
			case 6:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(6104);
				((DimensionDataTypeContext)_localctx).typeName = match(REAL);
				setState(6106);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,901,_ctx) ) {
				case 1:
					{
					setState(6105);
					lengthTwoDimension();
					}
					break;
				}
				setState(6111);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,902,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6108);
						_la = _input.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						} 
					}
					setState(6113);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,902,_ctx);
				}
				}
				break;
			case 7:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(6114);
				((DimensionDataTypeContext)_localctx).typeName = match(DOUBLE);
				setState(6116);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(6115);
					match(PRECISION);
					}
				}

				setState(6119);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,904,_ctx) ) {
				case 1:
					{
					setState(6118);
					lengthTwoDimension();
					}
					break;
				}
				setState(6124);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,905,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6121);
						_la = _input.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						} 
					}
					setState(6126);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,905,_ctx);
				}
				}
				break;
			case 8:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(6127);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 205)) & ~0x3f) == 0 && ((1L << (_la - 205)) & ((1L << (FLOAT - 205)) | (1L << (FLOAT4 - 205)) | (1L << (FLOAT8 - 205)) | (1L << (DECIMAL - 205)) | (1L << (DEC - 205)) | (1L << (NUMERIC - 205)))) != 0) || _la==FIXED) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6129);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,906,_ctx) ) {
				case 1:
					{
					setState(6128);
					lengthTwoOptionalDimension();
					}
					break;
				}
				setState(6134);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,907,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6131);
						_la = _input.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						} 
					}
					setState(6136);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,907,_ctx);
				}
				}
				break;
			case 9:
				_localctx = new SimpleDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(6137);
				((SimpleDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TINYBLOB - 211)) | (1L << (MEDIUMBLOB - 211)) | (1L << (LONGBLOB - 211)) | (1L << (SERIAL - 211)))) != 0) || _la==BOOL || _la==BOOLEAN) ) {
					((SimpleDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 10:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(6138);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 212)) & ~0x3f) == 0 && ((1L << (_la - 212)) & ((1L << (TIME - 212)) | (1L << (TIMESTAMP - 212)) | (1L << (DATETIME - 212)) | (1L << (YEAR - 212)) | (1L << (BINARY - 212)) | (1L << (VARBINARY - 212)) | (1L << (BLOB - 212)))) != 0) || _la==BIT) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6140);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,908,_ctx) ) {
				case 1:
					{
					setState(6139);
					lengthOneDimension();
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new CollectionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(6142);
				((CollectionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SET || _la==ENUM) ) {
					((CollectionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6143);
				collectionOptions();
				setState(6145);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,909,_ctx) ) {
				case 1:
					{
					setState(6144);
					match(BINARY);
					}
					break;
				}
				setState(6150);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,910,_ctx) ) {
				case 1:
					{
					setState(6147);
					charSet();
					setState(6148);
					charsetName();
					}
					break;
				}
				}
				break;
			case 12:
				_localctx = new SpatialDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(6152);
				((SpatialDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || ((((_la - 771)) & ~0x3f) == 0 && ((1L << (_la - 771)) & ((1L << (GEOMETRYCOLLECTION - 771)) | (1L << (GEOMCOLLECTION - 771)) | (1L << (GEOMETRY - 771)) | (1L << (LINESTRING - 771)) | (1L << (MULTILINESTRING - 771)) | (1L << (MULTIPOINT - 771)) | (1L << (MULTIPOLYGON - 771)) | (1L << (POINT - 771)) | (1L << (POLYGON - 771)))) != 0)) ) {
					((SpatialDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 13:
				_localctx = new LongVarcharDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(6153);
				((LongVarcharDataTypeContext)_localctx).typeName = match(LONG);
				setState(6155);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARCHAR) {
					{
					setState(6154);
					match(VARCHAR);
					}
				}

				setState(6158);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,912,_ctx) ) {
				case 1:
					{
					setState(6157);
					match(BINARY);
					}
					break;
				}
				setState(6163);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,913,_ctx) ) {
				case 1:
					{
					setState(6160);
					charSet();
					setState(6161);
					charsetName();
					}
					break;
				}
				setState(6167);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,914,_ctx) ) {
				case 1:
					{
					setState(6165);
					match(COLLATE);
					setState(6166);
					collationName();
					}
					break;
				}
				}
				break;
			case 14:
				_localctx = new LongVarbinaryDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(6169);
				match(LONG);
				setState(6170);
				match(VARBINARY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionOptionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> STRING_LITERAL() { return getTokens(CqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(CqlParser.STRING_LITERAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public CollectionOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionOptions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCollectionOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionOptionsContext collectionOptions() throws RecognitionException {
		CollectionOptionsContext _localctx = new CollectionOptionsContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_collectionOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6173);
			match(LR_BRACKET);
			setState(6174);
			match(STRING_LITERAL);
			setState(6179);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6175);
				match(COMMA);
				setState(6176);
				match(STRING_LITERAL);
				}
				}
				setState(6181);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6182);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConvertedDataTypeContext extends ParserRuleContext {
		public Token typeName;
		public TerminalNode CHAR() { return getToken(CqlParser.CHAR, 0); }
		public TerminalNode DECIMAL() { return getToken(CqlParser.DECIMAL, 0); }
		public TerminalNode SIGNED() { return getToken(CqlParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(CqlParser.UNSIGNED, 0); }
		public TerminalNode ARRAY() { return getToken(CqlParser.ARRAY, 0); }
		public TerminalNode BINARY() { return getToken(CqlParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(CqlParser.NCHAR, 0); }
		public TerminalNode DATE() { return getToken(CqlParser.DATE, 0); }
		public TerminalNode DATETIME() { return getToken(CqlParser.DATETIME, 0); }
		public TerminalNode TIME() { return getToken(CqlParser.TIME, 0); }
		public TerminalNode JSON() { return getToken(CqlParser.JSON, 0); }
		public TerminalNode INT() { return getToken(CqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(CqlParser.INTEGER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return getRuleContext(LengthTwoOptionalDimensionContext.class,0);
		}
		public ConvertedDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_convertedDataType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitConvertedDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConvertedDataTypeContext convertedDataType() throws RecognitionException {
		ConvertedDataTypeContext _localctx = new ConvertedDataTypeContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_convertedDataType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6206);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
			case NCHAR:
				{
				setState(6184);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==NCHAR) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6186);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(6185);
					lengthOneDimension();
					}
				}

				}
				break;
			case CHAR:
				{
				setState(6188);
				((ConvertedDataTypeContext)_localctx).typeName = match(CHAR);
				setState(6190);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(6189);
					lengthOneDimension();
					}
				}

				setState(6195);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER || _la==CHAR || _la==CHARSET) {
					{
					setState(6192);
					charSet();
					setState(6193);
					charsetName();
					}
				}

				}
				break;
			case INT:
			case INTEGER:
			case DATE:
			case TIME:
			case DATETIME:
			case JSON:
				{
				setState(6197);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INT - 194)) | (1L << (INTEGER - 194)) | (1L << (DATE - 194)) | (1L << (TIME - 194)) | (1L << (DATETIME - 194)))) != 0) || _la==JSON) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DECIMAL:
				{
				setState(6198);
				((ConvertedDataTypeContext)_localctx).typeName = match(DECIMAL);
				setState(6200);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(6199);
					lengthTwoOptionalDimension();
					}
				}

				}
				break;
			case UNSIGNED:
			case SIGNED:
				{
				setState(6202);
				_la = _input.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6204);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTEGER) {
					{
					setState(6203);
					match(INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6209);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ARRAY) {
				{
				setState(6208);
				match(ARRAY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthOneDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public LengthOneDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthOneDimension; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitLengthOneDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthOneDimensionContext lengthOneDimension() throws RecognitionException {
		LengthOneDimensionContext _localctx = new LengthOneDimensionContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_lengthOneDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6211);
			match(LR_BRACKET);
			setState(6212);
			decimalLiteral();
			setState(6213);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(CqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoDimension; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitLengthTwoDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoDimensionContext lengthTwoDimension() throws RecognitionException {
		LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_lengthTwoDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6215);
			match(LR_BRACKET);
			setState(6216);
			decimalLiteral();
			setState(6217);
			match(COMMA);
			setState(6218);
			decimalLiteral();
			setState(6219);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoOptionalDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(CqlParser.COMMA, 0); }
		public LengthTwoOptionalDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoOptionalDimension; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitLengthTwoOptionalDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() throws RecognitionException {
		LengthTwoOptionalDimensionContext _localctx = new LengthTwoOptionalDimensionContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_lengthTwoOptionalDimension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6221);
			match(LR_BRACKET);
			setState(6222);
			decimalLiteral();
			setState(6225);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6223);
				match(COMMA);
				setState(6224);
				decimalLiteral();
				}
			}

			setState(6227);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidListContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public UidListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uidList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitUidList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidListContext uidList() throws RecognitionException {
		UidListContext _localctx = new UidListContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_uidList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6229);
			uid();
			setState(6234);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,925,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6230);
					match(COMMA);
					setState(6231);
					uid();
					}
					} 
				}
				setState(6236);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,925,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablesContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public TablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tables; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablesContext tables() throws RecognitionException {
		TablesContext _localctx = new TablesContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_tables);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6237);
			tableName();
			setState(6242);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,926,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6238);
					match(COMMA);
					setState(6239);
					tableName();
					}
					} 
				}
				setState(6244);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,926,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNamesContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public List<IndexColumnNameContext> indexColumnName() {
			return getRuleContexts(IndexColumnNameContext.class);
		}
		public IndexColumnNameContext indexColumnName(int i) {
			return getRuleContext(IndexColumnNameContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public IndexColumnNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnNames; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitIndexColumnNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNamesContext indexColumnNames() throws RecognitionException {
		IndexColumnNamesContext _localctx = new IndexColumnNamesContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_indexColumnNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6245);
			match(LR_BRACKET);
			setState(6246);
			indexColumnName();
			setState(6251);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6247);
				match(COMMA);
				setState(6248);
				indexColumnName();
				}
				}
				setState(6253);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6254);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_expressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6256);
			expression(0);
			setState(6261);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6257);
				match(COMMA);
				setState(6258);
				expression(0);
				}
				}
				setState(6263);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsWithDefaultsContext extends ParserRuleContext {
		public List<ExpressionOrDefaultContext> expressionOrDefault() {
			return getRuleContexts(ExpressionOrDefaultContext.class);
		}
		public ExpressionOrDefaultContext expressionOrDefault(int i) {
			return getRuleContext(ExpressionOrDefaultContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public ExpressionsWithDefaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionsWithDefaults; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitExpressionsWithDefaults(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsWithDefaultsContext expressionsWithDefaults() throws RecognitionException {
		ExpressionsWithDefaultsContext _localctx = new ExpressionsWithDefaultsContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_expressionsWithDefaults);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6264);
			expressionOrDefault();
			setState(6269);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6265);
				match(COMMA);
				setState(6266);
				expressionOrDefault();
				}
				}
				setState(6271);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public ConstantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constants; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitConstants(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantsContext constants() throws RecognitionException {
		ConstantsContext _localctx = new ConstantsContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_constants);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6272);
			constant();
			setState(6277);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6273);
				match(COMMA);
				setState(6274);
				constant();
				}
				}
				setState(6279);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleStringsContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(CqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(CqlParser.STRING_LITERAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public SimpleStringsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleStrings; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSimpleStrings(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleStringsContext simpleStrings() throws RecognitionException {
		SimpleStringsContext _localctx = new SimpleStringsContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_simpleStrings);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6280);
			match(STRING_LITERAL);
			setState(6285);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6281);
				match(COMMA);
				setState(6282);
				match(STRING_LITERAL);
				}
				}
				setState(6287);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserVariablesContext extends ParserRuleContext {
		public List<TerminalNode> LOCAL_ID() { return getTokens(CqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(CqlParser.LOCAL_ID, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public UserVariablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userVariables; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitUserVariables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserVariablesContext userVariables() throws RecognitionException {
		UserVariablesContext _localctx = new UserVariablesContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_userVariables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6288);
			match(LOCAL_ID);
			setState(6293);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6289);
				match(COMMA);
				setState(6290);
				match(LOCAL_ID);
				}
				}
				setState(6295);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultValueContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(CqlParser.NULL_LITERAL, 0); }
		public TerminalNode CAST() { return getToken(CqlParser.CAST, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(CqlParser.AS, 0); }
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public List<CurrentTimestampContext> currentTimestamp() {
			return getRuleContexts(CurrentTimestampContext.class);
		}
		public CurrentTimestampContext currentTimestamp(int i) {
			return getRuleContext(CurrentTimestampContext.class,i);
		}
		public TerminalNode ON() { return getToken(CqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(CqlParser.UPDATE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LASTVAL() { return getToken(CqlParser.LASTVAL, 0); }
		public TerminalNode NEXTVAL() { return getToken(CqlParser.NEXTVAL, 0); }
		public TerminalNode VALUE() { return getToken(CqlParser.VALUE, 0); }
		public TerminalNode FOR() { return getToken(CqlParser.FOR, 0); }
		public TerminalNode PREVIOUS() { return getToken(CqlParser.PREVIOUS, 0); }
		public TerminalNode NEXT() { return getToken(CqlParser.NEXT, 0); }
		public DefaultValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultValue; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDefaultValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultValueContext defaultValue() throws RecognitionException {
		DefaultValueContext _localctx = new DefaultValueContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_defaultValue);
		int _la;
		try {
			setState(6331);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,935,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6296);
				match(NULL_LITERAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6297);
				match(CAST);
				setState(6298);
				match(LR_BRACKET);
				setState(6299);
				expression(0);
				setState(6300);
				match(AS);
				setState(6301);
				convertedDataType();
				setState(6302);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6305);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,933,_ctx) ) {
				case 1:
					{
					setState(6304);
					unaryOperator();
					}
					break;
				}
				setState(6307);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6308);
				currentTimestamp();
				setState(6312);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,934,_ctx) ) {
				case 1:
					{
					setState(6309);
					match(ON);
					setState(6310);
					match(UPDATE);
					setState(6311);
					currentTimestamp();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6314);
				match(LR_BRACKET);
				setState(6315);
				expression(0);
				setState(6316);
				match(RR_BRACKET);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6318);
				_la = _input.LA(1);
				if ( !(_la==LASTVAL || _la==NEXTVAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6319);
				match(LR_BRACKET);
				setState(6320);
				fullId();
				setState(6321);
				match(RR_BRACKET);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6323);
				match(LR_BRACKET);
				setState(6324);
				_la = _input.LA(1);
				if ( !(_la==NEXT || _la==PREVIOUS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6325);
				match(VALUE);
				setState(6326);
				match(FOR);
				setState(6327);
				fullId();
				setState(6328);
				match(RR_BRACKET);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6330);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CurrentTimestampContext extends ParserRuleContext {
		public TerminalNode NOW() { return getToken(CqlParser.NOW, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(CqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(CqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(CqlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode CURDATE() { return getToken(CqlParser.CURDATE, 0); }
		public TerminalNode CURTIME() { return getToken(CqlParser.CURTIME, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public CurrentTimestampContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currentTimestamp; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCurrentTimestamp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CurrentTimestampContext currentTimestamp() throws RecognitionException {
		CurrentTimestampContext _localctx = new CurrentTimestampContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_currentTimestamp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6347);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case LOCALTIMESTAMP:
				{
				setState(6333);
				_la = _input.LA(1);
				if ( !(((((_la - 306)) & ~0x3f) == 0 && ((1L << (_la - 306)) & ((1L << (CURRENT_TIMESTAMP - 306)) | (1L << (LOCALTIME - 306)) | (1L << (CURDATE - 306)) | (1L << (CURTIME - 306)) | (1L << (LOCALTIMESTAMP - 306)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6339);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,937,_ctx) ) {
				case 1:
					{
					setState(6334);
					match(LR_BRACKET);
					setState(6336);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & ((1L << (ZERO_DECIMAL - 1116)) | (1L << (ONE_DECIMAL - 1116)) | (1L << (TWO_DECIMAL - 1116)) | (1L << (DECIMAL_LITERAL - 1116)) | (1L << (REAL_LITERAL - 1116)))) != 0)) {
						{
						setState(6335);
						decimalLiteral();
						}
					}

					setState(6338);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case NOW:
				{
				setState(6341);
				match(NOW);
				setState(6342);
				match(LR_BRACKET);
				setState(6344);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & ((1L << (ZERO_DECIMAL - 1116)) | (1L << (ONE_DECIMAL - 1116)) | (1L << (TWO_DECIMAL - 1116)) | (1L << (DECIMAL_LITERAL - 1116)) | (1L << (REAL_LITERAL - 1116)))) != 0)) {
					{
					setState(6343);
					decimalLiteral();
					}
				}

				setState(6346);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionOrDefaultContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(CqlParser.DEFAULT, 0); }
		public ExpressionOrDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionOrDefault; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitExpressionOrDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionOrDefaultContext expressionOrDefault() throws RecognitionException {
		ExpressionOrDefaultContext _localctx = new ExpressionOrDefaultContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_expressionOrDefault);
		try {
			setState(6351);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,940,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6349);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6350);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(CqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(CqlParser.EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExists; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitIfExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfExistsContext ifExists() throws RecognitionException {
		IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_ifExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6353);
			match(IF);
			setState(6354);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(CqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(CqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(CqlParser.EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitIfNotExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6356);
			match(IF);
			setState(6357);
			match(NOT);
			setState(6358);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionCallContext extends ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
	 
		public FunctionCallContext() { }
		public void copyFrom(FunctionCallContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecificFunctionCallContext extends FunctionCallContext {
		public SpecificFunctionContext specificFunction() {
			return getRuleContext(SpecificFunctionContext.class,0);
		}
		public SpecificFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSpecificFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordFunctionCallContext extends FunctionCallContext {
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public PasswordFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPasswordFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UdfFunctionCallContext extends FunctionCallContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public UdfFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitUdfFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NonAggregateFunctionCallContext extends FunctionCallContext {
		public NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() {
			return getRuleContext(NonAggregateWindowedFunctionContext.class,0);
		}
		public NonAggregateFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitNonAggregateFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AggregateFunctionCallContext extends FunctionCallContext {
		public AggregateWindowedFunctionContext aggregateWindowedFunction() {
			return getRuleContext(AggregateWindowedFunctionContext.class,0);
		}
		public AggregateFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAggregateFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ScalarFunctionCallContext extends FunctionCallContext {
		public ScalarFunctionNameContext scalarFunctionName() {
			return getRuleContext(ScalarFunctionNameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public ScalarFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitScalarFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_functionCall);
		try {
			setState(6378);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,943,_ctx) ) {
			case 1:
				_localctx = new SpecificFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6360);
				specificFunction();
				}
				break;
			case 2:
				_localctx = new AggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6361);
				aggregateWindowedFunction();
				}
				break;
			case 3:
				_localctx = new NonAggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6362);
				nonAggregateWindowedFunction();
				}
				break;
			case 4:
				_localctx = new ScalarFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(6363);
				scalarFunctionName();
				setState(6364);
				match(LR_BRACKET);
				setState(6366);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,941,_ctx) ) {
				case 1:
					{
					setState(6365);
					functionArgs();
					}
					break;
				}
				setState(6368);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new UdfFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(6370);
				fullId();
				setState(6371);
				match(LR_BRACKET);
				setState(6373);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,942,_ctx) ) {
				case 1:
					{
					setState(6372);
					functionArgs();
					}
					break;
				}
				setState(6375);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new PasswordFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(6377);
				passwordFunctionClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificFunctionContext extends ParserRuleContext {
		public SpecificFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificFunction; }
	 
		public SpecificFunctionContext() { }
		public void copyFrom(SpecificFunctionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PositionFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext positionString;
		public ExpressionContext positionExpression;
		public StringLiteralContext inString;
		public ExpressionContext inExpression;
		public TerminalNode POSITION() { return getToken(CqlParser.POSITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TerminalNode IN() { return getToken(CqlParser.IN, 0); }
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public PositionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPositionFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TrimFunctionCallContext extends SpecificFunctionContext {
		public Token positioinForm;
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public StringLiteralContext fromString;
		public ExpressionContext fromExpression;
		public TerminalNode TRIM() { return getToken(CqlParser.TRIM, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TerminalNode FROM() { return getToken(CqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode BOTH() { return getToken(CqlParser.BOTH, 0); }
		public TerminalNode LEADING() { return getToken(CqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(CqlParser.TRAILING, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TrimFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTrimFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonValueFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode JSON_VALUE() { return getToken(CqlParser.JSON_VALUE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(CqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode RETURNING() { return getToken(CqlParser.RETURNING, 0); }
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(CqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(CqlParser.ON, i);
		}
		public TerminalNode EMPTY() { return getToken(CqlParser.EMPTY, 0); }
		public List<TerminalNode> ERROR() { return getTokens(CqlParser.ERROR); }
		public TerminalNode ERROR(int i) {
			return getToken(CqlParser.ERROR, i);
		}
		public List<TerminalNode> NULL_LITERAL() { return getTokens(CqlParser.NULL_LITERAL); }
		public TerminalNode NULL_LITERAL(int i) {
			return getToken(CqlParser.NULL_LITERAL, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(CqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(CqlParser.DEFAULT, i);
		}
		public List<DefaultValueContext> defaultValue() {
			return getRuleContexts(DefaultValueContext.class);
		}
		public DefaultValueContext defaultValue(int i) {
			return getRuleContext(DefaultValueContext.class,i);
		}
		public JsonValueFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitJsonValueFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CaseFunctionCallContext extends SpecificFunctionContext {
		public FunctionArgContext elseArg;
		public TerminalNode CASE() { return getToken(CqlParser.CASE, 0); }
		public TerminalNode END() { return getToken(CqlParser.END, 0); }
		public List<CaseFuncAlternativeContext> caseFuncAlternative() {
			return getRuleContexts(CaseFuncAlternativeContext.class);
		}
		public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return getRuleContext(CaseFuncAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(CqlParser.ELSE, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public CaseFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCaseFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExtractFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public TerminalNode EXTRACT() { return getToken(CqlParser.EXTRACT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public TerminalNode FROM() { return getToken(CqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ExtractFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitExtractFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class C_keyvalueFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode C_KEYVALUE() { return getToken(CqlParser.C_KEYVALUE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(CqlParser.COMMA, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public C_keyvalueFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitC_keyvalueFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DataTypeFunctionCallContext extends SpecificFunctionContext {
		public Token separator;
		public TerminalNode CONVERT() { return getToken(CqlParser.CONVERT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(CqlParser.COMMA, 0); }
		public TerminalNode USING() { return getToken(CqlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CAST() { return getToken(CqlParser.CAST, 0); }
		public TerminalNode AS() { return getToken(CqlParser.AS, 0); }
		public DataTypeFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDataTypeFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ValuesFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode VALUES() { return getToken(CqlParser.VALUES, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public ValuesFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitValuesFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CaseExpressionFunctionCallContext extends SpecificFunctionContext {
		public FunctionArgContext elseArg;
		public TerminalNode CASE() { return getToken(CqlParser.CASE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(CqlParser.END, 0); }
		public List<CaseFuncAlternativeContext> caseFuncAlternative() {
			return getRuleContexts(CaseFuncAlternativeContext.class);
		}
		public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return getRuleContext(CaseFuncAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(CqlParser.ELSE, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public CaseExpressionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCaseExpressionFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CURRENT_DATE() { return getToken(CqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(CqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(CqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(CqlParser.CURRENT_USER, 0); }
		public TerminalNode LOCALTIME() { return getToken(CqlParser.LOCALTIME, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public SimpleFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSimpleFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CharFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CHAR() { return getToken(CqlParser.CHAR, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode USING() { return getToken(CqlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CharFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCharFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WeightFunctionCallContext extends SpecificFunctionContext {
		public Token stringFormat;
		public TerminalNode WEIGHT_STRING() { return getToken(CqlParser.WEIGHT_STRING, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(CqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(CqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(CqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(CqlParser.RR_BRACKET, i);
		}
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(CqlParser.AS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public LevelsInWeightStringContext levelsInWeightString() {
			return getRuleContext(LevelsInWeightStringContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(CqlParser.CHAR, 0); }
		public TerminalNode BINARY() { return getToken(CqlParser.BINARY, 0); }
		public WeightFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitWeightFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GetFormatFunctionCallContext extends SpecificFunctionContext {
		public Token datetimeFormat;
		public TerminalNode GET_FORMAT() { return getToken(CqlParser.GET_FORMAT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(CqlParser.COMMA, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode DATE() { return getToken(CqlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(CqlParser.TIME, 0); }
		public TerminalNode DATETIME() { return getToken(CqlParser.DATETIME, 0); }
		public GetFormatFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitGetFormatFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubstrFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public DecimalLiteralContext fromDecimal;
		public ExpressionContext fromExpression;
		public DecimalLiteralContext forDecimal;
		public ExpressionContext forExpression;
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TerminalNode FROM() { return getToken(CqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode SUBSTR() { return getToken(CqlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(CqlParser.SUBSTRING, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode FOR() { return getToken(CqlParser.FOR, 0); }
		public SubstrFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSubstrFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecificFunctionContext specificFunction() throws RecognitionException {
		SpecificFunctionContext _localctx = new SpecificFunctionContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_specificFunction);
		int _la;
		try {
			setState(6579);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,969,_ctx) ) {
			case 1:
				_localctx = new SimpleFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6380);
				_la = _input.LA(1);
				if ( !(_la==CURRENT_USER || ((((_la - 304)) & ~0x3f) == 0 && ((1L << (_la - 304)) & ((1L << (CURRENT_DATE - 304)) | (1L << (CURRENT_TIME - 304)) | (1L << (CURRENT_TIMESTAMP - 304)) | (1L << (LOCALTIME - 304)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6383);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,944,_ctx) ) {
				case 1:
					{
					setState(6381);
					match(LR_BRACKET);
					setState(6382);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new C_keyvalueFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6385);
				match(C_KEYVALUE);
				setState(6386);
				match(LR_BRACKET);
				setState(6387);
				fullColumnName();
				setState(6388);
				match(COMMA);
				setState(6389);
				match(STRING_LITERAL);
				setState(6390);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6392);
				match(CONVERT);
				setState(6393);
				match(LR_BRACKET);
				setState(6394);
				expression(0);
				setState(6395);
				((DataTypeFunctionCallContext)_localctx).separator = match(COMMA);
				setState(6396);
				convertedDataType();
				setState(6397);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(6399);
				match(CONVERT);
				setState(6400);
				match(LR_BRACKET);
				setState(6401);
				expression(0);
				setState(6402);
				match(USING);
				setState(6403);
				charsetName();
				setState(6404);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(6406);
				match(CAST);
				setState(6407);
				match(LR_BRACKET);
				setState(6408);
				expression(0);
				setState(6409);
				match(AS);
				setState(6410);
				convertedDataType();
				setState(6411);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new ValuesFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(6413);
				match(VALUES);
				setState(6414);
				match(LR_BRACKET);
				setState(6415);
				fullColumnName();
				setState(6416);
				match(RR_BRACKET);
				}
				break;
			case 7:
				_localctx = new CaseExpressionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(6418);
				match(CASE);
				setState(6419);
				expression(0);
				setState(6421); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6420);
					caseFuncAlternative();
					}
					}
					setState(6423); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(6427);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(6425);
					match(ELSE);
					setState(6426);
					((CaseExpressionFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(6429);
				match(END);
				}
				break;
			case 8:
				_localctx = new CaseFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(6431);
				match(CASE);
				setState(6433); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6432);
					caseFuncAlternative();
					}
					}
					setState(6435); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(6439);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(6437);
					match(ELSE);
					setState(6438);
					((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(6441);
				match(END);
				}
				break;
			case 9:
				_localctx = new CharFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(6443);
				match(CHAR);
				setState(6444);
				match(LR_BRACKET);
				setState(6445);
				functionArgs();
				setState(6448);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(6446);
					match(USING);
					setState(6447);
					charsetName();
					}
				}

				setState(6450);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new PositionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(6452);
				match(POSITION);
				setState(6453);
				match(LR_BRACKET);
				setState(6456);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,950,_ctx) ) {
				case 1:
					{
					setState(6454);
					((PositionFunctionCallContext)_localctx).positionString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6455);
					((PositionFunctionCallContext)_localctx).positionExpression = expression(0);
					}
					break;
				}
				setState(6458);
				match(IN);
				setState(6461);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,951,_ctx) ) {
				case 1:
					{
					setState(6459);
					((PositionFunctionCallContext)_localctx).inString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6460);
					((PositionFunctionCallContext)_localctx).inExpression = expression(0);
					}
					break;
				}
				setState(6463);
				match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new SubstrFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(6465);
				_la = _input.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6466);
				match(LR_BRACKET);
				setState(6469);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,952,_ctx) ) {
				case 1:
					{
					setState(6467);
					((SubstrFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6468);
					((SubstrFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6471);
				match(FROM);
				setState(6474);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,953,_ctx) ) {
				case 1:
					{
					setState(6472);
					((SubstrFunctionCallContext)_localctx).fromDecimal = decimalLiteral();
					}
					break;
				case 2:
					{
					setState(6473);
					((SubstrFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(6481);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(6476);
					match(FOR);
					setState(6479);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,954,_ctx) ) {
					case 1:
						{
						setState(6477);
						((SubstrFunctionCallContext)_localctx).forDecimal = decimalLiteral();
						}
						break;
					case 2:
						{
						setState(6478);
						((SubstrFunctionCallContext)_localctx).forExpression = expression(0);
						}
						break;
					}
					}
				}

				setState(6483);
				match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(6485);
				match(TRIM);
				setState(6486);
				match(LR_BRACKET);
				setState(6487);
				((TrimFunctionCallContext)_localctx).positioinForm = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					((TrimFunctionCallContext)_localctx).positioinForm = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6490);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,956,_ctx) ) {
				case 1:
					{
					setState(6488);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6489);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6492);
				match(FROM);
				setState(6495);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,957,_ctx) ) {
				case 1:
					{
					setState(6493);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6494);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(6497);
				match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(6499);
				match(TRIM);
				setState(6500);
				match(LR_BRACKET);
				setState(6503);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,958,_ctx) ) {
				case 1:
					{
					setState(6501);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6502);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6505);
				match(FROM);
				setState(6508);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,959,_ctx) ) {
				case 1:
					{
					setState(6506);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6507);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(6510);
				match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new WeightFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(6512);
				match(WEIGHT_STRING);
				setState(6513);
				match(LR_BRACKET);
				setState(6516);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,960,_ctx) ) {
				case 1:
					{
					setState(6514);
					stringLiteral();
					}
					break;
				case 2:
					{
					setState(6515);
					expression(0);
					}
					break;
				}
				setState(6524);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(6518);
					match(AS);
					setState(6519);
					((WeightFunctionCallContext)_localctx).stringFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==BINARY) ) {
						((WeightFunctionCallContext)_localctx).stringFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6520);
					match(LR_BRACKET);
					setState(6521);
					decimalLiteral();
					setState(6522);
					match(RR_BRACKET);
					}
				}

				setState(6527);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEVEL) {
					{
					setState(6526);
					levelsInWeightString();
					}
				}

				setState(6529);
				match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new ExtractFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(6531);
				match(EXTRACT);
				setState(6532);
				match(LR_BRACKET);
				setState(6533);
				intervalType();
				setState(6534);
				match(FROM);
				setState(6537);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,963,_ctx) ) {
				case 1:
					{
					setState(6535);
					((ExtractFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6536);
					((ExtractFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6539);
				match(RR_BRACKET);
				}
				break;
			case 16:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(6541);
				match(GET_FORMAT);
				setState(6542);
				match(LR_BRACKET);
				setState(6543);
				((GetFormatFunctionCallContext)_localctx).datetimeFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (DATETIME - 211)))) != 0)) ) {
					((GetFormatFunctionCallContext)_localctx).datetimeFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6544);
				match(COMMA);
				setState(6545);
				stringLiteral();
				setState(6546);
				match(RR_BRACKET);
				}
				break;
			case 17:
				_localctx = new JsonValueFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(6548);
				match(JSON_VALUE);
				setState(6549);
				match(LR_BRACKET);
				setState(6550);
				expression(0);
				setState(6551);
				match(COMMA);
				setState(6552);
				expression(0);
				setState(6555);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURNING) {
					{
					setState(6553);
					match(RETURNING);
					setState(6554);
					convertedDataType();
					}
				}

				setState(6565);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,966,_ctx) ) {
				case 1:
					{
					setState(6561);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NULL_LITERAL:
						{
						setState(6557);
						match(NULL_LITERAL);
						}
						break;
					case ERROR:
						{
						setState(6558);
						match(ERROR);
						}
						break;
					case DEFAULT:
						{
						{
						setState(6559);
						match(DEFAULT);
						setState(6560);
						defaultValue();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6563);
					match(ON);
					setState(6564);
					match(EMPTY);
					}
					break;
				}
				setState(6575);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==NULL_LITERAL || _la==ERROR) {
					{
					setState(6571);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NULL_LITERAL:
						{
						setState(6567);
						match(NULL_LITERAL);
						}
						break;
					case ERROR:
						{
						setState(6568);
						match(ERROR);
						}
						break;
					case DEFAULT:
						{
						{
						setState(6569);
						match(DEFAULT);
						setState(6570);
						defaultValue();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6573);
					match(ON);
					setState(6574);
					match(ERROR);
					}
				}

				setState(6577);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseFuncAlternativeContext extends ParserRuleContext {
		public FunctionArgContext condition;
		public FunctionArgContext consequent;
		public TerminalNode WHEN() { return getToken(CqlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(CqlParser.THEN, 0); }
		public List<FunctionArgContext> functionArg() {
			return getRuleContexts(FunctionArgContext.class);
		}
		public FunctionArgContext functionArg(int i) {
			return getRuleContext(FunctionArgContext.class,i);
		}
		public CaseFuncAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseFuncAlternative; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCaseFuncAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseFuncAlternativeContext caseFuncAlternative() throws RecognitionException {
		CaseFuncAlternativeContext _localctx = new CaseFuncAlternativeContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_caseFuncAlternative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6581);
			match(WHEN);
			setState(6582);
			((CaseFuncAlternativeContext)_localctx).condition = functionArg();
			setState(6583);
			match(THEN);
			setState(6584);
			((CaseFuncAlternativeContext)_localctx).consequent = functionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelsInWeightStringContext extends ParserRuleContext {
		public LevelsInWeightStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelsInWeightString; }
	 
		public LevelsInWeightStringContext() { }
		public void copyFrom(LevelsInWeightStringContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class LevelWeightRangeContext extends LevelsInWeightStringContext {
		public DecimalLiteralContext firstLevel;
		public DecimalLiteralContext lastLevel;
		public TerminalNode LEVEL() { return getToken(CqlParser.LEVEL, 0); }
		public TerminalNode MINUS() { return getToken(CqlParser.MINUS, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public LevelWeightRangeContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitLevelWeightRange(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LevelWeightListContext extends LevelsInWeightStringContext {
		public TerminalNode LEVEL() { return getToken(CqlParser.LEVEL, 0); }
		public List<LevelInWeightListElementContext> levelInWeightListElement() {
			return getRuleContexts(LevelInWeightListElementContext.class);
		}
		public LevelInWeightListElementContext levelInWeightListElement(int i) {
			return getRuleContext(LevelInWeightListElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public LevelWeightListContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitLevelWeightList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelsInWeightStringContext levelsInWeightString() throws RecognitionException {
		LevelsInWeightStringContext _localctx = new LevelsInWeightStringContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_levelsInWeightString);
		int _la;
		try {
			setState(6600);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,971,_ctx) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6586);
				match(LEVEL);
				setState(6587);
				levelInWeightListElement();
				setState(6592);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6588);
					match(COMMA);
					setState(6589);
					levelInWeightListElement();
					}
					}
					setState(6594);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6595);
				match(LEVEL);
				setState(6596);
				((LevelWeightRangeContext)_localctx).firstLevel = decimalLiteral();
				setState(6597);
				match(MINUS);
				setState(6598);
				((LevelWeightRangeContext)_localctx).lastLevel = decimalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelInWeightListElementContext extends ParserRuleContext {
		public Token orderType;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode ASC() { return getToken(CqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(CqlParser.DESC, 0); }
		public TerminalNode REVERSE() { return getToken(CqlParser.REVERSE, 0); }
		public LevelInWeightListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelInWeightListElement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitLevelInWeightListElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelInWeightListElementContext levelInWeightListElement() throws RecognitionException {
		LevelInWeightListElementContext _localctx = new LevelInWeightListElementContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_levelInWeightListElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6602);
			decimalLiteral();
			setState(6604);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC || _la==REVERSE) {
				{
				setState(6603);
				((LevelInWeightListElementContext)_localctx).orderType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC || _la==REVERSE) ) {
					((LevelInWeightListElementContext)_localctx).orderType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateWindowedFunctionContext extends ParserRuleContext {
		public Token aggregator;
		public Token starArg;
		public Token separator;
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode AVG() { return getToken(CqlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(CqlParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(CqlParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(CqlParser.SUM, 0); }
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(CqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(CqlParser.DISTINCT, 0); }
		public TerminalNode COUNT() { return getToken(CqlParser.COUNT, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode STAR() { return getToken(CqlParser.STAR, 0); }
		public TerminalNode BIT_AND() { return getToken(CqlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(CqlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(CqlParser.BIT_XOR, 0); }
		public TerminalNode STD() { return getToken(CqlParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(CqlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(CqlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(CqlParser.STDDEV_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(CqlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(CqlParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE() { return getToken(CqlParser.VARIANCE, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(CqlParser.GROUP_CONCAT, 0); }
		public TerminalNode ORDER() { return getToken(CqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(CqlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public TerminalNode SEPARATOR() { return getToken(CqlParser.SEPARATOR, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWindowedFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitAggregateWindowedFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateWindowedFunctionContext aggregateWindowedFunction() throws RecognitionException {
		AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_aggregateWindowedFunction);
		int _la;
		try {
			setState(6665);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AVG:
			case MAX:
			case MIN:
			case SUM:
				enterOuterAlt(_localctx, 1);
				{
				setState(6606);
				_la = _input.LA(1);
				if ( !(((((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & ((1L << (AVG - 277)) | (1L << (MAX - 277)) | (1L << (MIN - 277)) | (1L << (SUM - 277)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6607);
				match(LR_BRACKET);
				setState(6609);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,973,_ctx) ) {
				case 1:
					{
					setState(6608);
					((AggregateWindowedFunctionContext)_localctx).aggregator = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
						((AggregateWindowedFunctionContext)_localctx).aggregator = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(6611);
				functionArg();
				setState(6612);
				match(RR_BRACKET);
				setState(6614);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,974,_ctx) ) {
				case 1:
					{
					setState(6613);
					overClause();
					}
					break;
				}
				}
				break;
			case COUNT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6616);
				match(COUNT);
				setState(6617);
				match(LR_BRACKET);
				setState(6625);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,976,_ctx) ) {
				case 1:
					{
					setState(6618);
					((AggregateWindowedFunctionContext)_localctx).starArg = match(STAR);
					}
					break;
				case 2:
					{
					setState(6620);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,975,_ctx) ) {
					case 1:
						{
						setState(6619);
						((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
						}
						break;
					}
					setState(6622);
					functionArg();
					}
					break;
				case 3:
					{
					setState(6623);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
					setState(6624);
					functionArgs();
					}
					break;
				}
				setState(6627);
				match(RR_BRACKET);
				setState(6629);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,977,_ctx) ) {
				case 1:
					{
					setState(6628);
					overClause();
					}
					break;
				}
				}
				break;
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6631);
				_la = _input.LA(1);
				if ( !(((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (BIT_AND - 278)) | (1L << (BIT_OR - 278)) | (1L << (BIT_XOR - 278)) | (1L << (STD - 278)) | (1L << (STDDEV - 278)) | (1L << (STDDEV_POP - 278)) | (1L << (STDDEV_SAMP - 278)) | (1L << (VAR_POP - 278)) | (1L << (VAR_SAMP - 278)) | (1L << (VARIANCE - 278)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6632);
				match(LR_BRACKET);
				setState(6634);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,978,_ctx) ) {
				case 1:
					{
					setState(6633);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
					}
					break;
				}
				setState(6636);
				functionArg();
				setState(6637);
				match(RR_BRACKET);
				setState(6639);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,979,_ctx) ) {
				case 1:
					{
					setState(6638);
					overClause();
					}
					break;
				}
				}
				break;
			case GROUP_CONCAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(6641);
				match(GROUP_CONCAT);
				setState(6642);
				match(LR_BRACKET);
				setState(6644);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,980,_ctx) ) {
				case 1:
					{
					setState(6643);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
					}
					break;
				}
				setState(6646);
				functionArgs();
				setState(6657);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(6647);
					match(ORDER);
					setState(6648);
					match(BY);
					setState(6649);
					orderByExpression();
					setState(6654);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6650);
						match(COMMA);
						setState(6651);
						orderByExpression();
						}
						}
						setState(6656);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(6661);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEPARATOR) {
					{
					setState(6659);
					match(SEPARATOR);
					setState(6660);
					((AggregateWindowedFunctionContext)_localctx).separator = match(STRING_LITERAL);
					}
				}

				setState(6663);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonAggregateWindowedFunctionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public TerminalNode LAG() { return getToken(CqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(CqlParser.LEAD, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode FIRST_VALUE() { return getToken(CqlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(CqlParser.LAST_VALUE, 0); }
		public TerminalNode CUME_DIST() { return getToken(CqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(CqlParser.DENSE_RANK, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(CqlParser.PERCENT_RANK, 0); }
		public TerminalNode RANK() { return getToken(CqlParser.RANK, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(CqlParser.ROW_NUMBER, 0); }
		public TerminalNode NTH_VALUE() { return getToken(CqlParser.NTH_VALUE, 0); }
		public TerminalNode NTILE() { return getToken(CqlParser.NTILE, 0); }
		public NonAggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonAggregateWindowedFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitNonAggregateWindowedFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() throws RecognitionException {
		NonAggregateWindowedFunctionContext _localctx = new NonAggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_nonAggregateWindowedFunction);
		int _la;
		try {
			setState(6705);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LAG:
			case LEAD:
				enterOuterAlt(_localctx, 1);
				{
				setState(6667);
				_la = _input.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6668);
				match(LR_BRACKET);
				setState(6669);
				expression(0);
				setState(6672);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,985,_ctx) ) {
				case 1:
					{
					setState(6670);
					match(COMMA);
					setState(6671);
					decimalLiteral();
					}
					break;
				}
				setState(6676);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6674);
					match(COMMA);
					setState(6675);
					decimalLiteral();
					}
				}

				setState(6678);
				match(RR_BRACKET);
				setState(6679);
				overClause();
				}
				break;
			case FIRST_VALUE:
			case LAST_VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6681);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6682);
				match(LR_BRACKET);
				setState(6683);
				expression(0);
				setState(6684);
				match(RR_BRACKET);
				setState(6685);
				overClause();
				}
				break;
			case CUME_DIST:
			case DENSE_RANK:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
				enterOuterAlt(_localctx, 3);
				{
				setState(6687);
				_la = _input.LA(1);
				if ( !(((((_la - 282)) & ~0x3f) == 0 && ((1L << (_la - 282)) & ((1L << (CUME_DIST - 282)) | (1L << (DENSE_RANK - 282)) | (1L << (PERCENT_RANK - 282)) | (1L << (RANK - 282)) | (1L << (ROW_NUMBER - 282)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6688);
				match(LR_BRACKET);
				setState(6689);
				match(RR_BRACKET);
				setState(6690);
				overClause();
				}
				break;
			case NTH_VALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(6691);
				match(NTH_VALUE);
				setState(6692);
				match(LR_BRACKET);
				setState(6693);
				expression(0);
				setState(6694);
				match(COMMA);
				setState(6695);
				decimalLiteral();
				setState(6696);
				match(RR_BRACKET);
				setState(6697);
				overClause();
				}
				break;
			case NTILE:
				enterOuterAlt(_localctx, 5);
				{
				setState(6699);
				match(NTILE);
				setState(6700);
				match(LR_BRACKET);
				setState(6701);
				decimalLiteral();
				setState(6702);
				match(RR_BRACKET);
				setState(6703);
				overClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverClauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(CqlParser.OVER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public OverClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitOverClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverClauseContext overClause() throws RecognitionException {
		OverClauseContext _localctx = new OverClauseContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_overClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6707);
			match(OVER);
			setState(6714);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LR_BRACKET:
				{
				setState(6708);
				match(LR_BRACKET);
				setState(6710);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,988,_ctx) ) {
				case 1:
					{
					setState(6709);
					windowSpec();
					}
					break;
				}
				setState(6712);
				match(RR_BRACKET);
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				{
				setState(6713);
				windowName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowSpecContext extends ParserRuleContext {
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public FrameClauseContext frameClause() {
			return getRuleContext(FrameClauseContext.class,0);
		}
		public WindowSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpec; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitWindowSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowSpecContext windowSpec() throws RecognitionException {
		WindowSpecContext _localctx = new WindowSpecContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_windowSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6717);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,990,_ctx) ) {
			case 1:
				{
				setState(6716);
				windowName();
				}
				break;
			}
			setState(6720);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(6719);
				partitionClause();
				}
			}

			setState(6723);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(6722);
				orderByClause();
				}
			}

			setState(6726);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				setState(6725);
				frameClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitWindowName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowNameContext windowName() throws RecognitionException {
		WindowNameContext _localctx = new WindowNameContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_windowName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6728);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameClauseContext extends ParserRuleContext {
		public FrameUnitsContext frameUnits() {
			return getRuleContext(FrameUnitsContext.class,0);
		}
		public FrameExtentContext frameExtent() {
			return getRuleContext(FrameExtentContext.class,0);
		}
		public FrameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitFrameClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameClauseContext frameClause() throws RecognitionException {
		FrameClauseContext _localctx = new FrameClauseContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_frameClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6730);
			frameUnits();
			setState(6731);
			frameExtent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameUnitsContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(CqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(CqlParser.RANGE, 0); }
		public FrameUnitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameUnits; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitFrameUnits(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameUnitsContext frameUnits() throws RecognitionException {
		FrameUnitsContext _localctx = new FrameUnitsContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_frameUnits);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6733);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameExtentContext extends ParserRuleContext {
		public FrameRangeContext frameRange() {
			return getRuleContext(FrameRangeContext.class,0);
		}
		public FrameBetweenContext frameBetween() {
			return getRuleContext(FrameBetweenContext.class,0);
		}
		public FrameExtentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameExtent; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitFrameExtent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameExtentContext frameExtent() throws RecognitionException {
		FrameExtentContext _localctx = new FrameExtentContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_frameExtent);
		try {
			setState(6737);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,994,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6735);
				frameRange();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6736);
				frameBetween();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameBetweenContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(CqlParser.BETWEEN, 0); }
		public List<FrameRangeContext> frameRange() {
			return getRuleContexts(FrameRangeContext.class);
		}
		public FrameRangeContext frameRange(int i) {
			return getRuleContext(FrameRangeContext.class,i);
		}
		public TerminalNode AND() { return getToken(CqlParser.AND, 0); }
		public FrameBetweenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameBetween; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitFrameBetween(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameBetweenContext frameBetween() throws RecognitionException {
		FrameBetweenContext _localctx = new FrameBetweenContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_frameBetween);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6739);
			match(BETWEEN);
			setState(6740);
			frameRange();
			setState(6741);
			match(AND);
			setState(6742);
			frameRange();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameRangeContext extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(CqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(CqlParser.ROW, 0); }
		public TerminalNode UNBOUNDED() { return getToken(CqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(CqlParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(CqlParser.FOLLOWING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FrameRangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameRange; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitFrameRange(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameRangeContext frameRange() throws RecognitionException {
		FrameRangeContext _localctx = new FrameRangeContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_frameRange);
		int _la;
		try {
			setState(6751);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,995,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6744);
				match(CURRENT);
				setState(6745);
				match(ROW);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6746);
				match(UNBOUNDED);
				setState(6747);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6748);
				expression(0);
				setState(6749);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(CqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(CqlParser.BY, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_partitionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6753);
			match(PARTITION);
			setState(6754);
			match(BY);
			setState(6755);
			expression(0);
			setState(6760);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6756);
				match(COMMA);
				setState(6757);
				expression(0);
				}
				}
				setState(6762);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFunctionNameContext extends ParserRuleContext {
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public TerminalNode ASCII() { return getToken(CqlParser.ASCII, 0); }
		public TerminalNode CURDATE() { return getToken(CqlParser.CURDATE, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(CqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(CqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(CqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURTIME() { return getToken(CqlParser.CURTIME, 0); }
		public TerminalNode DATE_ADD() { return getToken(CqlParser.DATE_ADD, 0); }
		public TerminalNode DATE_SUB() { return getToken(CqlParser.DATE_SUB, 0); }
		public TerminalNode IF() { return getToken(CqlParser.IF, 0); }
		public TerminalNode INSERT() { return getToken(CqlParser.INSERT, 0); }
		public TerminalNode LOCALTIME() { return getToken(CqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(CqlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode MID() { return getToken(CqlParser.MID, 0); }
		public TerminalNode NOW() { return getToken(CqlParser.NOW, 0); }
		public TerminalNode REPLACE() { return getToken(CqlParser.REPLACE, 0); }
		public TerminalNode SUBSTR() { return getToken(CqlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(CqlParser.SUBSTRING, 0); }
		public TerminalNode SYSDATE() { return getToken(CqlParser.SYSDATE, 0); }
		public TerminalNode TRIM() { return getToken(CqlParser.TRIM, 0); }
		public TerminalNode UTC_DATE() { return getToken(CqlParser.UTC_DATE, 0); }
		public TerminalNode UTC_TIME() { return getToken(CqlParser.UTC_TIME, 0); }
		public TerminalNode UTC_TIMESTAMP() { return getToken(CqlParser.UTC_TIMESTAMP, 0); }
		public ScalarFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFunctionName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitScalarFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarFunctionNameContext scalarFunctionName() throws RecognitionException {
		ScalarFunctionNameContext _localctx = new ScalarFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_scalarFunctionName);
		try {
			setState(6786);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case SCHEMA:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case POSITION:
			case INVISIBLE:
			case VISIBLE:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case SESSION_VARIABLES_ADMIN:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case MOD:
				enterOuterAlt(_localctx, 1);
				{
				setState(6763);
				functionNameBase();
				}
				break;
			case ASCII:
				enterOuterAlt(_localctx, 2);
				{
				setState(6764);
				match(ASCII);
				}
				break;
			case CURDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6765);
				match(CURDATE);
				}
				break;
			case CURRENT_DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(6766);
				match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				enterOuterAlt(_localctx, 5);
				{
				setState(6767);
				match(CURRENT_TIME);
				}
				break;
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 6);
				{
				setState(6768);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case CURTIME:
				enterOuterAlt(_localctx, 7);
				{
				setState(6769);
				match(CURTIME);
				}
				break;
			case DATE_ADD:
				enterOuterAlt(_localctx, 8);
				{
				setState(6770);
				match(DATE_ADD);
				}
				break;
			case DATE_SUB:
				enterOuterAlt(_localctx, 9);
				{
				setState(6771);
				match(DATE_SUB);
				}
				break;
			case IF:
				enterOuterAlt(_localctx, 10);
				{
				setState(6772);
				match(IF);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(6773);
				match(INSERT);
				}
				break;
			case LOCALTIME:
				enterOuterAlt(_localctx, 12);
				{
				setState(6774);
				match(LOCALTIME);
				}
				break;
			case LOCALTIMESTAMP:
				enterOuterAlt(_localctx, 13);
				{
				setState(6775);
				match(LOCALTIMESTAMP);
				}
				break;
			case MID:
				enterOuterAlt(_localctx, 14);
				{
				setState(6776);
				match(MID);
				}
				break;
			case NOW:
				enterOuterAlt(_localctx, 15);
				{
				setState(6777);
				match(NOW);
				}
				break;
			case REPLACE:
				enterOuterAlt(_localctx, 16);
				{
				setState(6778);
				match(REPLACE);
				}
				break;
			case SUBSTR:
				enterOuterAlt(_localctx, 17);
				{
				setState(6779);
				match(SUBSTR);
				}
				break;
			case SUBSTRING:
				enterOuterAlt(_localctx, 18);
				{
				setState(6780);
				match(SUBSTRING);
				}
				break;
			case SYSDATE:
				enterOuterAlt(_localctx, 19);
				{
				setState(6781);
				match(SYSDATE);
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 20);
				{
				setState(6782);
				match(TRIM);
				}
				break;
			case UTC_DATE:
				enterOuterAlt(_localctx, 21);
				{
				setState(6783);
				match(UTC_DATE);
				}
				break;
			case UTC_TIME:
				enterOuterAlt(_localctx, 22);
				{
				setState(6784);
				match(UTC_TIME);
				}
				break;
			case UTC_TIMESTAMP:
				enterOuterAlt(_localctx, 23);
				{
				setState(6785);
				match(UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PasswordFunctionClauseContext extends ParserRuleContext {
		public Token functionName;
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode PASSWORD() { return getToken(CqlParser.PASSWORD, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(CqlParser.OLD_PASSWORD, 0); }
		public PasswordFunctionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_passwordFunctionClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPasswordFunctionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PasswordFunctionClauseContext passwordFunctionClause() throws RecognitionException {
		PasswordFunctionClauseContext _localctx = new PasswordFunctionClauseContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_passwordFunctionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6788);
			((PasswordFunctionClauseContext)_localctx).functionName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==OLD_PASSWORD || _la==PASSWORD) ) {
				((PasswordFunctionClauseContext)_localctx).functionName = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6789);
			match(LR_BRACKET);
			setState(6790);
			functionArg();
			setState(6791);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<FullColumnNameContext> fullColumnName() {
			return getRuleContexts(FullColumnNameContext.class);
		}
		public FullColumnNameContext fullColumnName(int i) {
			return getRuleContext(FullColumnNameContext.class,i);
		}
		public List<FunctionCallContext> functionCall() {
			return getRuleContexts(FunctionCallContext.class);
		}
		public FunctionCallContext functionCall(int i) {
			return getRuleContext(FunctionCallContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public FunctionArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArgs; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitFunctionArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgsContext functionArgs() throws RecognitionException {
		FunctionArgsContext _localctx = new FunctionArgsContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_functionArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6797);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,998,_ctx) ) {
			case 1:
				{
				setState(6793);
				constant();
				}
				break;
			case 2:
				{
				setState(6794);
				fullColumnName();
				}
				break;
			case 3:
				{
				setState(6795);
				functionCall();
				}
				break;
			case 4:
				{
				setState(6796);
				expression(0);
				}
				break;
			}
			setState(6808);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6799);
				match(COMMA);
				setState(6804);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,999,_ctx) ) {
				case 1:
					{
					setState(6800);
					constant();
					}
					break;
				case 2:
					{
					setState(6801);
					fullColumnName();
					}
					break;
				case 3:
					{
					setState(6802);
					functionCall();
					}
					break;
				case 4:
					{
					setState(6803);
					expression(0);
					}
					break;
				}
				}
				}
				setState(6810);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArg; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitFunctionArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgContext functionArg() throws RecognitionException {
		FunctionArgContext _localctx = new FunctionArgContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_functionArg);
		try {
			setState(6815);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1001,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6811);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6812);
				fullColumnName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6813);
				functionCall();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6814);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
	 
		public ExpressionContext() { }
		public void copyFrom(ExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IsExpressionContext extends ExpressionContext {
		public Token testValue;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(CqlParser.IS, 0); }
		public TerminalNode TRUE() { return getToken(CqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(CqlParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(CqlParser.UNKNOWN, 0); }
		public TerminalNode NOT() { return getToken(CqlParser.NOT, 0); }
		public IsExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitIsExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NotExpressionContext extends ExpressionContext {
		public Token notOperator;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOT() { return getToken(CqlParser.NOT, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(CqlParser.EXCLAMATION_SYMBOL, 0); }
		public NotExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitNotExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LogicalExpressionContext extends ExpressionContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public LogicalOperatorContext logicalOperator() {
			return getRuleContext(LogicalOperatorContext.class,0);
		}
		public LogicalExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitLogicalExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PredicateExpressionContext extends ExpressionContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicateExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPredicateExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 648;
		enterRecursionRule(_localctx, 648, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6828);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1003,_ctx) ) {
			case 1:
				{
				_localctx = new NotExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(6818);
				((NotExpressionContext)_localctx).notOperator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NOT || _la==EXCLAMATION_SYMBOL) ) {
					((NotExpressionContext)_localctx).notOperator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6819);
				expression(4);
				}
				break;
			case 2:
				{
				_localctx = new IsExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6820);
				predicate(0);
				setState(6821);
				match(IS);
				setState(6823);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(6822);
					match(NOT);
					}
				}

				setState(6825);
				((IsExpressionContext)_localctx).testValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((IsExpressionContext)_localctx).testValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				{
				_localctx = new PredicateExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6827);
				predicate(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6836);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1004,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_expression);
					setState(6830);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(6831);
					logicalOperator();
					setState(6832);
					expression(4);
					}
					} 
				}
				setState(6838);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1004,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
	 
		public PredicateContext() { }
		public void copyFrom(PredicateContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SoundsLikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode SOUNDS() { return getToken(CqlParser.SOUNDS, 0); }
		public TerminalNode LIKE() { return getToken(CqlParser.LIKE, 0); }
		public SoundsLikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSoundsLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExpressionAtomPredicateContext extends PredicateContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(CqlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(CqlParser.VAR_ASSIGN, 0); }
		public ExpressionAtomPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitExpressionAtomPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryComparisonPredicateContext extends PredicateContext {
		public Token quantifier;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public TerminalNode ALL() { return getToken(CqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(CqlParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(CqlParser.SOME, 0); }
		public SubqueryComparisonPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSubqueryComparisonPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonMemberOfPredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode MEMBER() { return getToken(CqlParser.MEMBER, 0); }
		public TerminalNode OF() { return getToken(CqlParser.OF, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public JsonMemberOfPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitJsonMemberOfPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryComparisonPredicateContext extends PredicateContext {
		public PredicateContext left;
		public PredicateContext right;
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public BinaryComparisonPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitBinaryComparisonPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IN() { return getToken(CqlParser.IN, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(CqlParser.NOT, 0); }
		public InPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitInPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BetweenPredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(CqlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(CqlParser.AND, 0); }
		public TerminalNode NOT() { return getToken(CqlParser.NOT, 0); }
		public BetweenPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitBetweenPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IsNullPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(CqlParser.IS, 0); }
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public IsNullPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitIsNullPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(CqlParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(CqlParser.NOT, 0); }
		public TerminalNode ESCAPE() { return getToken(CqlParser.ESCAPE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public LikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RegexpPredicateContext extends PredicateContext {
		public Token regex;
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode REGEXP() { return getToken(CqlParser.REGEXP, 0); }
		public TerminalNode RLIKE() { return getToken(CqlParser.RLIKE, 0); }
		public TerminalNode NOT() { return getToken(CqlParser.NOT, 0); }
		public RegexpPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitRegexpPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PredicateContext _localctx = new PredicateContext(_ctx, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 650;
		enterRecursionRule(_localctx, 650, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExpressionAtomPredicateContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(6842);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1005,_ctx) ) {
			case 1:
				{
				setState(6840);
				match(LOCAL_ID);
				setState(6841);
				match(VAR_ASSIGN);
				}
				break;
			}
			setState(6844);
			expressionAtom(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(6910);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1013,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6908);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1012,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						((BinaryComparisonPredicateContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6846);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(6847);
						comparisonOperator();
						setState(6848);
						((BinaryComparisonPredicateContext)_localctx).right = predicate(9);
						}
						break;
					case 2:
						{
						_localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6850);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(6852);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6851);
							match(NOT);
							}
						}

						setState(6854);
						match(BETWEEN);
						setState(6855);
						predicate(0);
						setState(6856);
						match(AND);
						setState(6857);
						predicate(7);
						}
						break;
					case 3:
						{
						_localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6859);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(6860);
						match(SOUNDS);
						setState(6861);
						match(LIKE);
						setState(6862);
						predicate(6);
						}
						break;
					case 4:
						{
						_localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6863);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6865);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6864);
							match(NOT);
							}
						}

						setState(6867);
						((RegexpPredicateContext)_localctx).regex = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==REGEXP || _la==RLIKE) ) {
							((RegexpPredicateContext)_localctx).regex = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6868);
						predicate(4);
						}
						break;
					case 5:
						{
						_localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6869);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(6871);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6870);
							match(NOT);
							}
						}

						setState(6873);
						match(IN);
						setState(6874);
						match(LR_BRACKET);
						setState(6877);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1009,_ctx) ) {
						case 1:
							{
							setState(6875);
							selectStatement();
							}
							break;
						case 2:
							{
							setState(6876);
							expressions();
							}
							break;
						}
						setState(6879);
						match(RR_BRACKET);
						}
						break;
					case 6:
						{
						_localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6881);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(6882);
						match(IS);
						setState(6883);
						nullNotnull();
						}
						break;
					case 7:
						{
						_localctx = new SubqueryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6884);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(6885);
						comparisonOperator();
						setState(6886);
						((SubqueryComparisonPredicateContext)_localctx).quantifier = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
							((SubqueryComparisonPredicateContext)_localctx).quantifier = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6887);
						match(LR_BRACKET);
						setState(6888);
						selectStatement();
						setState(6889);
						match(RR_BRACKET);
						}
						break;
					case 8:
						{
						_localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6891);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(6893);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6892);
							match(NOT);
							}
						}

						setState(6895);
						match(LIKE);
						setState(6896);
						predicate(0);
						setState(6899);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1011,_ctx) ) {
						case 1:
							{
							setState(6897);
							match(ESCAPE);
							setState(6898);
							match(STRING_LITERAL);
							}
							break;
						}
						}
						break;
					case 9:
						{
						_localctx = new JsonMemberOfPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6901);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(6902);
						match(MEMBER);
						setState(6903);
						match(OF);
						setState(6904);
						match(LR_BRACKET);
						setState(6905);
						predicate(0);
						setState(6906);
						match(RR_BRACKET);
						}
						break;
					}
					} 
				}
				setState(6912);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1013,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExpressionAtomContext extends ParserRuleContext {
		public ExpressionAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionAtom; }
	 
		public ExpressionAtomContext() { }
		public void copyFrom(ExpressionAtomContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnaryExpressionAtomContext extends ExpressionAtomContext {
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public UnaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitUnaryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollateExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(CqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCollateExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MysqlVariableExpressionAtomContext extends ExpressionAtomContext {
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public MysqlVariableExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitMysqlVariableExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NestedExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public NestedExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitNestedExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NestedRowExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode ROW() { return getToken(CqlParser.ROW, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CqlParser.COMMA, i);
		}
		public NestedRowExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitNestedRowExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MathExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public MathOperatorContext mathOperator() {
			return getRuleContext(MathOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public MathExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitMathExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExistsExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode EXISTS() { return getToken(CqlParser.EXISTS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public ExistsExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitExistsExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode INTERVAL() { return getToken(CqlParser.INTERVAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public IntervalExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitIntervalExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public JsonOperatorContext jsonOperator() {
			return getRuleContext(JsonOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public JsonExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitJsonExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public SubqueryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitSubqueryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CqlWhereFunctionAtomContext extends ExpressionAtomContext {
		public CqlWhereFunctionContext cqlWhereFunction() {
			return getRuleContext(CqlWhereFunctionContext.class,0);
		}
		public CqlWhereFunctionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCqlWhereFunctionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstantExpressionAtomContext extends ExpressionAtomContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ConstantExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitConstantExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FunctionCallExpressionAtomContext extends ExpressionAtomContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public FunctionCallExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitFunctionCallExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode BINARY() { return getToken(CqlParser.BINARY, 0); }
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public BinaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitBinaryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FullColumnNameExpressionAtomContext extends ExpressionAtomContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FullColumnNameExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitFullColumnNameExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BitExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public BitOperatorContext bitOperator() {
			return getRuleContext(BitOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public BitExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitBitExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionAtomContext expressionAtom() throws RecognitionException {
		return expressionAtom(0);
	}

	private ExpressionAtomContext expressionAtom(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionAtomContext _localctx = new ExpressionAtomContext(_ctx, _parentState);
		ExpressionAtomContext _prevctx = _localctx;
		int _startState = 652;
		enterRecursionRule(_localctx, 652, RULE_expressionAtom, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6959);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1016,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(6914);
				constant();
				}
				break;
			case 2:
				{
				_localctx = new FullColumnNameExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6915);
				fullColumnName();
				}
				break;
			case 3:
				{
				_localctx = new FunctionCallExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6916);
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new MysqlVariableExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6917);
				mysqlVariable();
				}
				break;
			case 5:
				{
				_localctx = new UnaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6918);
				unaryOperator();
				setState(6919);
				expressionAtom(11);
				}
				break;
			case 6:
				{
				_localctx = new BinaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6921);
				match(BINARY);
				setState(6922);
				expressionAtom(10);
				}
				break;
			case 7:
				{
				_localctx = new NestedExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6923);
				match(LR_BRACKET);
				setState(6924);
				expression(0);
				setState(6929);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6925);
					match(COMMA);
					setState(6926);
					expression(0);
					}
					}
					setState(6931);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6932);
				match(RR_BRACKET);
				}
				break;
			case 8:
				{
				_localctx = new NestedRowExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6934);
				match(ROW);
				setState(6935);
				match(LR_BRACKET);
				setState(6936);
				expression(0);
				setState(6939); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6937);
					match(COMMA);
					setState(6938);
					expression(0);
					}
					}
					setState(6941); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(6943);
				match(RR_BRACKET);
				}
				break;
			case 9:
				{
				_localctx = new ExistsExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6945);
				match(EXISTS);
				setState(6946);
				match(LR_BRACKET);
				setState(6947);
				selectStatement();
				setState(6948);
				match(RR_BRACKET);
				}
				break;
			case 10:
				{
				_localctx = new SubqueryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6950);
				match(LR_BRACKET);
				setState(6951);
				selectStatement();
				setState(6952);
				match(RR_BRACKET);
				}
				break;
			case 11:
				{
				_localctx = new IntervalExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6954);
				match(INTERVAL);
				setState(6955);
				expression(0);
				setState(6956);
				intervalType();
				}
				break;
			case 12:
				{
				_localctx = new CqlWhereFunctionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6958);
				cqlWhereFunction();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6978);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1018,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6976);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1017,_ctx) ) {
					case 1:
						{
						_localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((BitExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6961);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(6962);
						bitOperator();
						setState(6963);
						((BitExpressionAtomContext)_localctx).right = expressionAtom(5);
						}
						break;
					case 2:
						{
						_localctx = new MathExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((MathExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6965);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6966);
						mathOperator();
						setState(6967);
						((MathExpressionAtomContext)_localctx).right = expressionAtom(4);
						}
						break;
					case 3:
						{
						_localctx = new JsonExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((JsonExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6969);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6970);
						jsonOperator();
						setState(6971);
						((JsonExpressionAtomContext)_localctx).right = expressionAtom(3);
						}
						break;
					case 4:
						{
						_localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6973);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(6974);
						match(COLLATE);
						setState(6975);
						collationName();
						}
						break;
					}
					} 
				}
				setState(6980);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1018,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class CqlWhereFunctionContext extends ParserRuleContext {
		public CqlWhereFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cqlWhereFunction; }
	 
		public CqlWhereFunctionContext() { }
		public void copyFrom(CqlWhereFunctionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class C_existsExpressionAtomContext extends CqlWhereFunctionContext {
		public TerminalNode C_EXISTS() { return getToken(CqlParser.C_EXISTS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public C_existsExpressionAtomContext(CqlWhereFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitC_existsExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class C_scriptExpressionAtomContext extends CqlWhereFunctionContext {
		public TerminalNode C_SCRIPT() { return getToken(CqlParser.C_SCRIPT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(CqlParser.LR_BRACKET, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CqlParser.STRING_LITERAL, 0); }
		public TerminalNode RR_BRACKET() { return getToken(CqlParser.RR_BRACKET, 0); }
		public C_scriptExpressionAtomContext(CqlWhereFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitC_scriptExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CqlWhereFunctionContext cqlWhereFunction() throws RecognitionException {
		CqlWhereFunctionContext _localctx = new CqlWhereFunctionContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_cqlWhereFunction);
		try {
			setState(6990);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case C_EXISTS:
				_localctx = new C_existsExpressionAtomContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6981);
				match(C_EXISTS);
				setState(6982);
				match(LR_BRACKET);
				setState(6983);
				fullColumnName();
				setState(6984);
				match(RR_BRACKET);
				}
				break;
			case C_SCRIPT:
				_localctx = new C_scriptExpressionAtomContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6986);
				match(C_SCRIPT);
				setState(6987);
				match(LR_BRACKET);
				setState(6988);
				match(STRING_LITERAL);
				setState(6989);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnaryOperatorContext extends ParserRuleContext {
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(CqlParser.EXCLAMATION_SYMBOL, 0); }
		public TerminalNode BIT_NOT_OP() { return getToken(CqlParser.BIT_NOT_OP, 0); }
		public TerminalNode PLUS() { return getToken(CqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(CqlParser.MINUS, 0); }
		public TerminalNode NOT() { return getToken(CqlParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unaryOperator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitUnaryOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnaryOperatorContext unaryOperator() throws RecognitionException {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_unaryOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6992);
			_la = _input.LA(1);
			if ( !(_la==NOT || ((((_la - 1098)) & ~0x3f) == 0 && ((1L << (_la - 1098)) & ((1L << (PLUS - 1098)) | (1L << (MINUS - 1098)) | (1L << (EXCLAMATION_SYMBOL - 1098)) | (1L << (BIT_NOT_OP - 1098)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQUAL_SYMBOL() { return getToken(CqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode GREATER_SYMBOL() { return getToken(CqlParser.GREATER_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(CqlParser.LESS_SYMBOL, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(CqlParser.EXCLAMATION_SYMBOL, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_comparisonOperator);
		try {
			setState(7008);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1020,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6994);
				match(EQUAL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6995);
				match(GREATER_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6996);
				match(LESS_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6997);
				match(LESS_SYMBOL);
				setState(6998);
				match(EQUAL_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6999);
				match(GREATER_SYMBOL);
				setState(7000);
				match(EQUAL_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7001);
				match(LESS_SYMBOL);
				setState(7002);
				match(GREATER_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7003);
				match(EXCLAMATION_SYMBOL);
				setState(7004);
				match(EQUAL_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7005);
				match(LESS_SYMBOL);
				setState(7006);
				match(EQUAL_SYMBOL);
				setState(7007);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogicalOperatorContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(CqlParser.AND, 0); }
		public List<TerminalNode> BIT_AND_OP() { return getTokens(CqlParser.BIT_AND_OP); }
		public TerminalNode BIT_AND_OP(int i) {
			return getToken(CqlParser.BIT_AND_OP, i);
		}
		public TerminalNode XOR() { return getToken(CqlParser.XOR, 0); }
		public TerminalNode OR() { return getToken(CqlParser.OR, 0); }
		public List<TerminalNode> BIT_OR_OP() { return getTokens(CqlParser.BIT_OR_OP); }
		public TerminalNode BIT_OR_OP(int i) {
			return getToken(CqlParser.BIT_OR_OP, i);
		}
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logicalOperator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitLogicalOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogicalOperatorContext logicalOperator() throws RecognitionException {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_logicalOperator);
		try {
			setState(7017);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
				enterOuterAlt(_localctx, 1);
				{
				setState(7010);
				match(AND);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(7011);
				match(BIT_AND_OP);
				setState(7012);
				match(BIT_AND_OP);
				}
				break;
			case XOR:
				enterOuterAlt(_localctx, 3);
				{
				setState(7013);
				match(XOR);
				}
				break;
			case OR:
				enterOuterAlt(_localctx, 4);
				{
				setState(7014);
				match(OR);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(7015);
				match(BIT_OR_OP);
				setState(7016);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitOperatorContext extends ParserRuleContext {
		public List<TerminalNode> LESS_SYMBOL() { return getTokens(CqlParser.LESS_SYMBOL); }
		public TerminalNode LESS_SYMBOL(int i) {
			return getToken(CqlParser.LESS_SYMBOL, i);
		}
		public List<TerminalNode> GREATER_SYMBOL() { return getTokens(CqlParser.GREATER_SYMBOL); }
		public TerminalNode GREATER_SYMBOL(int i) {
			return getToken(CqlParser.GREATER_SYMBOL, i);
		}
		public TerminalNode BIT_AND_OP() { return getToken(CqlParser.BIT_AND_OP, 0); }
		public TerminalNode BIT_XOR_OP() { return getToken(CqlParser.BIT_XOR_OP, 0); }
		public TerminalNode BIT_OR_OP() { return getToken(CqlParser.BIT_OR_OP, 0); }
		public BitOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitOperator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitBitOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitOperatorContext bitOperator() throws RecognitionException {
		BitOperatorContext _localctx = new BitOperatorContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_bitOperator);
		try {
			setState(7026);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7019);
				match(LESS_SYMBOL);
				setState(7020);
				match(LESS_SYMBOL);
				}
				break;
			case GREATER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7021);
				match(GREATER_SYMBOL);
				setState(7022);
				match(GREATER_SYMBOL);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 3);
				{
				setState(7023);
				match(BIT_AND_OP);
				}
				break;
			case BIT_XOR_OP:
				enterOuterAlt(_localctx, 4);
				{
				setState(7024);
				match(BIT_XOR_OP);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(7025);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathOperatorContext extends ParserRuleContext {
		public TerminalNode STAR() { return getToken(CqlParser.STAR, 0); }
		public TerminalNode DIVIDE() { return getToken(CqlParser.DIVIDE, 0); }
		public TerminalNode MODULE() { return getToken(CqlParser.MODULE, 0); }
		public TerminalNode DIV() { return getToken(CqlParser.DIV, 0); }
		public TerminalNode MOD() { return getToken(CqlParser.MOD, 0); }
		public TerminalNode PLUS() { return getToken(CqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(CqlParser.MINUS, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOperator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitMathOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathOperatorContext mathOperator() throws RecognitionException {
		MathOperatorContext _localctx = new MathOperatorContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_mathOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7028);
			_la = _input.LA(1);
			if ( !(((((_la - 1095)) & ~0x3f) == 0 && ((1L << (_la - 1095)) & ((1L << (STAR - 1095)) | (1L << (DIVIDE - 1095)) | (1L << (MODULE - 1095)) | (1L << (PLUS - 1095)) | (1L << (MINUS - 1095)) | (1L << (DIV - 1095)) | (1L << (MOD - 1095)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonOperatorContext extends ParserRuleContext {
		public TerminalNode MINUS() { return getToken(CqlParser.MINUS, 0); }
		public List<TerminalNode> GREATER_SYMBOL() { return getTokens(CqlParser.GREATER_SYMBOL); }
		public TerminalNode GREATER_SYMBOL(int i) {
			return getToken(CqlParser.GREATER_SYMBOL, i);
		}
		public JsonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOperator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitJsonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonOperatorContext jsonOperator() throws RecognitionException {
		JsonOperatorContext _localctx = new JsonOperatorContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_jsonOperator);
		try {
			setState(7035);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1023,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7030);
				match(MINUS);
				setState(7031);
				match(GREATER_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7032);
				match(MINUS);
				setState(7033);
				match(GREATER_SYMBOL);
				setState(7034);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameBaseContext extends ParserRuleContext {
		public TerminalNode ARMSCII8() { return getToken(CqlParser.ARMSCII8, 0); }
		public TerminalNode ASCII() { return getToken(CqlParser.ASCII, 0); }
		public TerminalNode BIG5() { return getToken(CqlParser.BIG5, 0); }
		public TerminalNode BINARY() { return getToken(CqlParser.BINARY, 0); }
		public TerminalNode CP1250() { return getToken(CqlParser.CP1250, 0); }
		public TerminalNode CP1251() { return getToken(CqlParser.CP1251, 0); }
		public TerminalNode CP1256() { return getToken(CqlParser.CP1256, 0); }
		public TerminalNode CP1257() { return getToken(CqlParser.CP1257, 0); }
		public TerminalNode CP850() { return getToken(CqlParser.CP850, 0); }
		public TerminalNode CP852() { return getToken(CqlParser.CP852, 0); }
		public TerminalNode CP866() { return getToken(CqlParser.CP866, 0); }
		public TerminalNode CP932() { return getToken(CqlParser.CP932, 0); }
		public TerminalNode DEC8() { return getToken(CqlParser.DEC8, 0); }
		public TerminalNode EUCJPMS() { return getToken(CqlParser.EUCJPMS, 0); }
		public TerminalNode EUCKR() { return getToken(CqlParser.EUCKR, 0); }
		public TerminalNode GB18030() { return getToken(CqlParser.GB18030, 0); }
		public TerminalNode GB2312() { return getToken(CqlParser.GB2312, 0); }
		public TerminalNode GBK() { return getToken(CqlParser.GBK, 0); }
		public TerminalNode GEOSTD8() { return getToken(CqlParser.GEOSTD8, 0); }
		public TerminalNode GREEK() { return getToken(CqlParser.GREEK, 0); }
		public TerminalNode HEBREW() { return getToken(CqlParser.HEBREW, 0); }
		public TerminalNode HP8() { return getToken(CqlParser.HP8, 0); }
		public TerminalNode KEYBCS2() { return getToken(CqlParser.KEYBCS2, 0); }
		public TerminalNode KOI8R() { return getToken(CqlParser.KOI8R, 0); }
		public TerminalNode KOI8U() { return getToken(CqlParser.KOI8U, 0); }
		public TerminalNode LATIN1() { return getToken(CqlParser.LATIN1, 0); }
		public TerminalNode LATIN2() { return getToken(CqlParser.LATIN2, 0); }
		public TerminalNode LATIN5() { return getToken(CqlParser.LATIN5, 0); }
		public TerminalNode LATIN7() { return getToken(CqlParser.LATIN7, 0); }
		public TerminalNode MACCE() { return getToken(CqlParser.MACCE, 0); }
		public TerminalNode MACROMAN() { return getToken(CqlParser.MACROMAN, 0); }
		public TerminalNode SJIS() { return getToken(CqlParser.SJIS, 0); }
		public TerminalNode SWE7() { return getToken(CqlParser.SWE7, 0); }
		public TerminalNode TIS620() { return getToken(CqlParser.TIS620, 0); }
		public TerminalNode UCS2() { return getToken(CqlParser.UCS2, 0); }
		public TerminalNode UJIS() { return getToken(CqlParser.UJIS, 0); }
		public TerminalNode UTF16() { return getToken(CqlParser.UTF16, 0); }
		public TerminalNode UTF16LE() { return getToken(CqlParser.UTF16LE, 0); }
		public TerminalNode UTF32() { return getToken(CqlParser.UTF32, 0); }
		public TerminalNode UTF8() { return getToken(CqlParser.UTF8, 0); }
		public TerminalNode UTF8MB3() { return getToken(CqlParser.UTF8MB3, 0); }
		public TerminalNode UTF8MB4() { return getToken(CqlParser.UTF8MB4, 0); }
		public CharsetNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetNameBase; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitCharsetNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameBaseContext charsetNameBase() throws RecognitionException {
		CharsetNameBaseContext _localctx = new CharsetNameBaseContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_charsetNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7037);
			_la = _input.LA(1);
			if ( !(_la==BINARY || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (ARMSCII8 - 714)) | (1L << (ASCII - 714)) | (1L << (BIG5 - 714)) | (1L << (CP1250 - 714)) | (1L << (CP1251 - 714)) | (1L << (CP1256 - 714)) | (1L << (CP1257 - 714)) | (1L << (CP850 - 714)) | (1L << (CP852 - 714)) | (1L << (CP866 - 714)) | (1L << (CP932 - 714)) | (1L << (DEC8 - 714)) | (1L << (EUCJPMS - 714)) | (1L << (EUCKR - 714)) | (1L << (GB18030 - 714)) | (1L << (GB2312 - 714)) | (1L << (GBK - 714)) | (1L << (GEOSTD8 - 714)) | (1L << (GREEK - 714)) | (1L << (HEBREW - 714)) | (1L << (HP8 - 714)) | (1L << (KEYBCS2 - 714)) | (1L << (KOI8R - 714)) | (1L << (KOI8U - 714)) | (1L << (LATIN1 - 714)) | (1L << (LATIN2 - 714)) | (1L << (LATIN5 - 714)) | (1L << (LATIN7 - 714)) | (1L << (MACCE - 714)) | (1L << (MACROMAN - 714)) | (1L << (SJIS - 714)) | (1L << (SWE7 - 714)) | (1L << (TIS620 - 714)) | (1L << (UCS2 - 714)) | (1L << (UJIS - 714)) | (1L << (UTF16 - 714)) | (1L << (UTF16LE - 714)) | (1L << (UTF32 - 714)) | (1L << (UTF8 - 714)) | (1L << (UTF8MB3 - 714)) | (1L << (UTF8MB4 - 714)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelBaseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(CqlParser.REPEATABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(CqlParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(CqlParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(CqlParser.SERIALIZABLE, 0); }
		public TransactionLevelBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevelBase; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitTransactionLevelBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionLevelBaseContext transactionLevelBase() throws RecognitionException {
		TransactionLevelBaseContext _localctx = new TransactionLevelBaseContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_transactionLevelBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7039);
			_la = _input.LA(1);
			if ( !(((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (REPEATABLE - 767)) | (1L << (COMMITTED - 767)) | (1L << (UNCOMMITTED - 767)) | (1L << (SERIALIZABLE - 767)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesBaseContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(CqlParser.TABLES, 0); }
		public TerminalNode ROUTINE() { return getToken(CqlParser.ROUTINE, 0); }
		public TerminalNode EXECUTE() { return getToken(CqlParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(CqlParser.FILE, 0); }
		public TerminalNode PROCESS() { return getToken(CqlParser.PROCESS, 0); }
		public TerminalNode RELOAD() { return getToken(CqlParser.RELOAD, 0); }
		public TerminalNode SHUTDOWN() { return getToken(CqlParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(CqlParser.SUPER, 0); }
		public TerminalNode PRIVILEGES() { return getToken(CqlParser.PRIVILEGES, 0); }
		public PrivilegesBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegesBase; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitPrivilegesBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesBaseContext privilegesBase() throws RecognitionException {
		PrivilegesBaseContext _localctx = new PrivilegesBaseContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_privilegesBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7041);
			_la = _input.LA(1);
			if ( !(((((_la - 672)) & ~0x3f) == 0 && ((1L << (_la - 672)) & ((1L << (TABLES - 672)) | (1L << (ROUTINE - 672)) | (1L << (EXECUTE - 672)) | (1L << (FILE - 672)) | (1L << (PROCESS - 672)) | (1L << (RELOAD - 672)) | (1L << (SHUTDOWN - 672)) | (1L << (SUPER - 672)) | (1L << (PRIVILEGES - 672)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeBaseContext extends ParserRuleContext {
		public TerminalNode QUARTER() { return getToken(CqlParser.QUARTER, 0); }
		public TerminalNode MONTH() { return getToken(CqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(CqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(CqlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(CqlParser.MINUTE, 0); }
		public TerminalNode WEEK() { return getToken(CqlParser.WEEK, 0); }
		public TerminalNode SECOND() { return getToken(CqlParser.SECOND, 0); }
		public TerminalNode MICROSECOND() { return getToken(CqlParser.MICROSECOND, 0); }
		public IntervalTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalTypeBase; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitIntervalTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeBaseContext intervalTypeBase() throws RecognitionException {
		IntervalTypeBaseContext _localctx = new IntervalTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_intervalTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7043);
			_la = _input.LA(1);
			if ( !(((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (QUARTER - 664)) | (1L << (MONTH - 664)) | (1L << (DAY - 664)) | (1L << (HOUR - 664)) | (1L << (MINUTE - 664)) | (1L << (WEEK - 664)) | (1L << (SECOND - 664)) | (1L << (MICROSECOND - 664)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeBaseContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(CqlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(CqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(CqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(CqlParser.DATETIME, 0); }
		public TerminalNode YEAR() { return getToken(CqlParser.YEAR, 0); }
		public TerminalNode ENUM() { return getToken(CqlParser.ENUM, 0); }
		public TerminalNode TEXT() { return getToken(CqlParser.TEXT, 0); }
		public DataTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeBase; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitDataTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeBaseContext dataTypeBase() throws RecognitionException {
		DataTypeBaseContext _localctx = new DataTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_dataTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7045);
			_la = _input.LA(1);
			if ( !(((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeywordsCanBeIdContext extends ParserRuleContext {
		public TerminalNode ACCOUNT() { return getToken(CqlParser.ACCOUNT, 0); }
		public TerminalNode ACTION() { return getToken(CqlParser.ACTION, 0); }
		public TerminalNode ADMIN() { return getToken(CqlParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(CqlParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(CqlParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(CqlParser.ALGORITHM, 0); }
		public TerminalNode ANY() { return getToken(CqlParser.ANY, 0); }
		public TerminalNode AT() { return getToken(CqlParser.AT, 0); }
		public TerminalNode AUDIT_ADMIN() { return getToken(CqlParser.AUDIT_ADMIN, 0); }
		public TerminalNode AUTHORS() { return getToken(CqlParser.AUTHORS, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(CqlParser.AUTOCOMMIT, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(CqlParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(CqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode AVG() { return getToken(CqlParser.AVG, 0); }
		public TerminalNode AVG_ROW_LENGTH() { return getToken(CqlParser.AVG_ROW_LENGTH, 0); }
		public TerminalNode BACKUP_ADMIN() { return getToken(CqlParser.BACKUP_ADMIN, 0); }
		public TerminalNode BEGIN() { return getToken(CqlParser.BEGIN, 0); }
		public TerminalNode BINLOG() { return getToken(CqlParser.BINLOG, 0); }
		public TerminalNode BINLOG_ADMIN() { return getToken(CqlParser.BINLOG_ADMIN, 0); }
		public TerminalNode BINLOG_ENCRYPTION_ADMIN() { return getToken(CqlParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		public TerminalNode BIT() { return getToken(CqlParser.BIT, 0); }
		public TerminalNode BIT_AND() { return getToken(CqlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(CqlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(CqlParser.BIT_XOR, 0); }
		public TerminalNode BLOCK() { return getToken(CqlParser.BLOCK, 0); }
		public TerminalNode BOOL() { return getToken(CqlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(CqlParser.BOOLEAN, 0); }
		public TerminalNode BTREE() { return getToken(CqlParser.BTREE, 0); }
		public TerminalNode CACHE() { return getToken(CqlParser.CACHE, 0); }
		public TerminalNode CASCADED() { return getToken(CqlParser.CASCADED, 0); }
		public TerminalNode CHAIN() { return getToken(CqlParser.CHAIN, 0); }
		public TerminalNode CHANGED() { return getToken(CqlParser.CHANGED, 0); }
		public TerminalNode CHANNEL() { return getToken(CqlParser.CHANNEL, 0); }
		public TerminalNode CHECKSUM() { return getToken(CqlParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(CqlParser.PAGE_CHECKSUM, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(CqlParser.CATALOG_NAME, 0); }
		public TerminalNode CIPHER() { return getToken(CqlParser.CIPHER, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(CqlParser.CLASS_ORIGIN, 0); }
		public TerminalNode CLIENT() { return getToken(CqlParser.CLIENT, 0); }
		public TerminalNode CLONE_ADMIN() { return getToken(CqlParser.CLONE_ADMIN, 0); }
		public TerminalNode CLOSE() { return getToken(CqlParser.CLOSE, 0); }
		public TerminalNode CLUSTERING() { return getToken(CqlParser.CLUSTERING, 0); }
		public TerminalNode COALESCE() { return getToken(CqlParser.COALESCE, 0); }
		public TerminalNode CODE() { return getToken(CqlParser.CODE, 0); }
		public TerminalNode COLUMNS() { return getToken(CqlParser.COLUMNS, 0); }
		public TerminalNode COLUMN_FORMAT() { return getToken(CqlParser.COLUMN_FORMAT, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(CqlParser.COLUMN_NAME, 0); }
		public TerminalNode COMMENT() { return getToken(CqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(CqlParser.COMMIT, 0); }
		public TerminalNode COMPACT() { return getToken(CqlParser.COMPACT, 0); }
		public TerminalNode COMPLETION() { return getToken(CqlParser.COMPLETION, 0); }
		public TerminalNode COMPRESSED() { return getToken(CqlParser.COMPRESSED, 0); }
		public TerminalNode COMPRESSION() { return getToken(CqlParser.COMPRESSION, 0); }
		public TerminalNode CONCURRENT() { return getToken(CqlParser.CONCURRENT, 0); }
		public TerminalNode CONNECT() { return getToken(CqlParser.CONNECT, 0); }
		public TerminalNode CONNECTION() { return getToken(CqlParser.CONNECTION, 0); }
		public TerminalNode CONNECTION_ADMIN() { return getToken(CqlParser.CONNECTION_ADMIN, 0); }
		public TerminalNode CONSISTENT() { return getToken(CqlParser.CONSISTENT, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(CqlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(CqlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(CqlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONTAINS() { return getToken(CqlParser.CONTAINS, 0); }
		public TerminalNode CONTEXT() { return getToken(CqlParser.CONTEXT, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(CqlParser.CONTRIBUTORS, 0); }
		public TerminalNode COPY() { return getToken(CqlParser.COPY, 0); }
		public TerminalNode COUNT() { return getToken(CqlParser.COUNT, 0); }
		public TerminalNode CPU() { return getToken(CqlParser.CPU, 0); }
		public TerminalNode CURRENT() { return getToken(CqlParser.CURRENT, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(CqlParser.CURSOR_NAME, 0); }
		public TerminalNode DATA() { return getToken(CqlParser.DATA, 0); }
		public TerminalNode DATAFILE() { return getToken(CqlParser.DATAFILE, 0); }
		public TerminalNode DEALLOCATE() { return getToken(CqlParser.DEALLOCATE, 0); }
		public TerminalNode DEFAULT_AUTH() { return getToken(CqlParser.DEFAULT_AUTH, 0); }
		public TerminalNode DEFINER() { return getToken(CqlParser.DEFINER, 0); }
		public TerminalNode DELAY_KEY_WRITE() { return getToken(CqlParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode DES_KEY_FILE() { return getToken(CqlParser.DES_KEY_FILE, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(CqlParser.DIAGNOSTICS, 0); }
		public TerminalNode DIRECTORY() { return getToken(CqlParser.DIRECTORY, 0); }
		public TerminalNode DISABLE() { return getToken(CqlParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(CqlParser.DISCARD, 0); }
		public TerminalNode DISK() { return getToken(CqlParser.DISK, 0); }
		public TerminalNode DO() { return getToken(CqlParser.DO, 0); }
		public TerminalNode DUMPFILE() { return getToken(CqlParser.DUMPFILE, 0); }
		public TerminalNode DUPLICATE() { return getToken(CqlParser.DUPLICATE, 0); }
		public TerminalNode DYNAMIC() { return getToken(CqlParser.DYNAMIC, 0); }
		public TerminalNode ENABLE() { return getToken(CqlParser.ENABLE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(CqlParser.ENCRYPTION, 0); }
		public TerminalNode ENCRYPTION_KEY_ADMIN() { return getToken(CqlParser.ENCRYPTION_KEY_ADMIN, 0); }
		public TerminalNode END() { return getToken(CqlParser.END, 0); }
		public TerminalNode ENDS() { return getToken(CqlParser.ENDS, 0); }
		public TerminalNode ENGINE() { return getToken(CqlParser.ENGINE, 0); }
		public TerminalNode ENGINE_ATTRIBUTE() { return getToken(CqlParser.ENGINE_ATTRIBUTE, 0); }
		public TerminalNode ENGINES() { return getToken(CqlParser.ENGINES, 0); }
		public TerminalNode ERROR() { return getToken(CqlParser.ERROR, 0); }
		public TerminalNode ERRORS() { return getToken(CqlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(CqlParser.ESCAPE, 0); }
		public TerminalNode EUR() { return getToken(CqlParser.EUR, 0); }
		public TerminalNode EVEN() { return getToken(CqlParser.EVEN, 0); }
		public TerminalNode EVENT() { return getToken(CqlParser.EVENT, 0); }
		public TerminalNode EVENTS() { return getToken(CqlParser.EVENTS, 0); }
		public TerminalNode EVERY() { return getToken(CqlParser.EVERY, 0); }
		public TerminalNode EXCEPT() { return getToken(CqlParser.EXCEPT, 0); }
		public TerminalNode EXCHANGE() { return getToken(CqlParser.EXCHANGE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(CqlParser.EXCLUSIVE, 0); }
		public TerminalNode EXPIRE() { return getToken(CqlParser.EXPIRE, 0); }
		public TerminalNode EXPORT() { return getToken(CqlParser.EXPORT, 0); }
		public TerminalNode EXTENDED() { return getToken(CqlParser.EXTENDED, 0); }
		public TerminalNode EXTENT_SIZE() { return getToken(CqlParser.EXTENT_SIZE, 0); }
		public TerminalNode FAST() { return getToken(CqlParser.FAST, 0); }
		public TerminalNode FAULTS() { return getToken(CqlParser.FAULTS, 0); }
		public TerminalNode FIELDS() { return getToken(CqlParser.FIELDS, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(CqlParser.FILE_BLOCK_SIZE, 0); }
		public TerminalNode FILTER() { return getToken(CqlParser.FILTER, 0); }
		public TerminalNode FIREWALL_ADMIN() { return getToken(CqlParser.FIREWALL_ADMIN, 0); }
		public TerminalNode FIREWALL_USER() { return getToken(CqlParser.FIREWALL_USER, 0); }
		public TerminalNode FIRST() { return getToken(CqlParser.FIRST, 0); }
		public TerminalNode FIXED() { return getToken(CqlParser.FIXED, 0); }
		public TerminalNode FLUSH() { return getToken(CqlParser.FLUSH, 0); }
		public TerminalNode FOLLOWS() { return getToken(CqlParser.FOLLOWS, 0); }
		public TerminalNode FOUND() { return getToken(CqlParser.FOUND, 0); }
		public TerminalNode FULL() { return getToken(CqlParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(CqlParser.FUNCTION, 0); }
		public TerminalNode GENERAL() { return getToken(CqlParser.GENERAL, 0); }
		public TerminalNode GLOBAL() { return getToken(CqlParser.GLOBAL, 0); }
		public TerminalNode GRANTS() { return getToken(CqlParser.GRANTS, 0); }
		public TerminalNode GROUP() { return getToken(CqlParser.GROUP, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(CqlParser.GROUP_CONCAT, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(CqlParser.GROUP_REPLICATION, 0); }
		public TerminalNode GROUP_REPLICATION_ADMIN() { return getToken(CqlParser.GROUP_REPLICATION_ADMIN, 0); }
		public TerminalNode HANDLER() { return getToken(CqlParser.HANDLER, 0); }
		public TerminalNode HASH() { return getToken(CqlParser.HASH, 0); }
		public TerminalNode HELP() { return getToken(CqlParser.HELP, 0); }
		public TerminalNode HOST() { return getToken(CqlParser.HOST, 0); }
		public TerminalNode HOSTS() { return getToken(CqlParser.HOSTS, 0); }
		public TerminalNode IDENTIFIED() { return getToken(CqlParser.IDENTIFIED, 0); }
		public TerminalNode IGNORED() { return getToken(CqlParser.IGNORED, 0); }
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(CqlParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode IMPORT() { return getToken(CqlParser.IMPORT, 0); }
		public TerminalNode INDEXES() { return getToken(CqlParser.INDEXES, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(CqlParser.INITIAL_SIZE, 0); }
		public TerminalNode INNODB_REDO_LOG_ARCHIVE() { return getToken(CqlParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		public TerminalNode INPLACE() { return getToken(CqlParser.INPLACE, 0); }
		public TerminalNode INSERT_METHOD() { return getToken(CqlParser.INSERT_METHOD, 0); }
		public TerminalNode INSTALL() { return getToken(CqlParser.INSTALL, 0); }
		public TerminalNode INSTANCE() { return getToken(CqlParser.INSTANCE, 0); }
		public TerminalNode INSTANT() { return getToken(CqlParser.INSTANT, 0); }
		public TerminalNode INTERNAL() { return getToken(CqlParser.INTERNAL, 0); }
		public TerminalNode INVOKER() { return getToken(CqlParser.INVOKER, 0); }
		public TerminalNode IO() { return getToken(CqlParser.IO, 0); }
		public TerminalNode IO_THREAD() { return getToken(CqlParser.IO_THREAD, 0); }
		public TerminalNode IPC() { return getToken(CqlParser.IPC, 0); }
		public TerminalNode ISO() { return getToken(CqlParser.ISO, 0); }
		public TerminalNode ISOLATION() { return getToken(CqlParser.ISOLATION, 0); }
		public TerminalNode ISSUER() { return getToken(CqlParser.ISSUER, 0); }
		public TerminalNode JIS() { return getToken(CqlParser.JIS, 0); }
		public TerminalNode JSON() { return getToken(CqlParser.JSON, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(CqlParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode LANGUAGE() { return getToken(CqlParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(CqlParser.LAST, 0); }
		public TerminalNode LEAVES() { return getToken(CqlParser.LEAVES, 0); }
		public TerminalNode LESS() { return getToken(CqlParser.LESS, 0); }
		public TerminalNode LEVEL() { return getToken(CqlParser.LEVEL, 0); }
		public TerminalNode LIST() { return getToken(CqlParser.LIST, 0); }
		public TerminalNode LOCAL() { return getToken(CqlParser.LOCAL, 0); }
		public TerminalNode LOGFILE() { return getToken(CqlParser.LOGFILE, 0); }
		public TerminalNode LOGS() { return getToken(CqlParser.LOGS, 0); }
		public TerminalNode MASTER() { return getToken(CqlParser.MASTER, 0); }
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(CqlParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(CqlParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(CqlParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(CqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode MASTER_HOST() { return getToken(CqlParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(CqlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(CqlParser.MASTER_LOG_POS, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(CqlParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_PORT() { return getToken(CqlParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(CqlParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_SSL() { return getToken(CqlParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(CqlParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(CqlParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(CqlParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(CqlParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(CqlParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(CqlParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(CqlParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(CqlParser.MASTER_TLS_VERSION, 0); }
		public TerminalNode MASTER_USER() { return getToken(CqlParser.MASTER_USER, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(CqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(CqlParser.MAX_QUERIES_PER_HOUR, 0); }
		public TerminalNode MAX() { return getToken(CqlParser.MAX, 0); }
		public TerminalNode MAX_ROWS() { return getToken(CqlParser.MAX_ROWS, 0); }
		public TerminalNode MAX_SIZE() { return getToken(CqlParser.MAX_SIZE, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(CqlParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(CqlParser.MAX_USER_CONNECTIONS, 0); }
		public TerminalNode MEDIUM() { return getToken(CqlParser.MEDIUM, 0); }
		public TerminalNode MEMBER() { return getToken(CqlParser.MEMBER, 0); }
		public TerminalNode MEMORY() { return getToken(CqlParser.MEMORY, 0); }
		public TerminalNode MERGE() { return getToken(CqlParser.MERGE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(CqlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MID() { return getToken(CqlParser.MID, 0); }
		public TerminalNode MIGRATE() { return getToken(CqlParser.MIGRATE, 0); }
		public TerminalNode MIN() { return getToken(CqlParser.MIN, 0); }
		public TerminalNode MIN_ROWS() { return getToken(CqlParser.MIN_ROWS, 0); }
		public TerminalNode MODE() { return getToken(CqlParser.MODE, 0); }
		public TerminalNode MODIFY() { return getToken(CqlParser.MODIFY, 0); }
		public TerminalNode MUTEX() { return getToken(CqlParser.MUTEX, 0); }
		public TerminalNode MYSQL() { return getToken(CqlParser.MYSQL, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(CqlParser.MYSQL_ERRNO, 0); }
		public TerminalNode NAME() { return getToken(CqlParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(CqlParser.NAMES, 0); }
		public TerminalNode NCHAR() { return getToken(CqlParser.NCHAR, 0); }
		public TerminalNode NDB_STORED_USER() { return getToken(CqlParser.NDB_STORED_USER, 0); }
		public TerminalNode NEVER() { return getToken(CqlParser.NEVER, 0); }
		public TerminalNode NEXT() { return getToken(CqlParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(CqlParser.NO, 0); }
		public TerminalNode NOCOPY() { return getToken(CqlParser.NOCOPY, 0); }
		public TerminalNode NODEGROUP() { return getToken(CqlParser.NODEGROUP, 0); }
		public TerminalNode NONE() { return getToken(CqlParser.NONE, 0); }
		public TerminalNode NOWAIT() { return getToken(CqlParser.NOWAIT, 0); }
		public TerminalNode NUMBER() { return getToken(CqlParser.NUMBER, 0); }
		public TerminalNode ODBC() { return getToken(CqlParser.ODBC, 0); }
		public TerminalNode OFFLINE() { return getToken(CqlParser.OFFLINE, 0); }
		public TerminalNode OFFSET() { return getToken(CqlParser.OFFSET, 0); }
		public TerminalNode OF() { return getToken(CqlParser.OF, 0); }
		public TerminalNode OJ() { return getToken(CqlParser.OJ, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(CqlParser.OLD_PASSWORD, 0); }
		public TerminalNode ONE() { return getToken(CqlParser.ONE, 0); }
		public TerminalNode ONLINE() { return getToken(CqlParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(CqlParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(CqlParser.OPEN, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(CqlParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode OPTIONAL() { return getToken(CqlParser.OPTIONAL, 0); }
		public TerminalNode OPTIONS() { return getToken(CqlParser.OPTIONS, 0); }
		public TerminalNode ORDER() { return getToken(CqlParser.ORDER, 0); }
		public TerminalNode OWNER() { return getToken(CqlParser.OWNER, 0); }
		public TerminalNode PACK_KEYS() { return getToken(CqlParser.PACK_KEYS, 0); }
		public TerminalNode PAGE() { return getToken(CqlParser.PAGE, 0); }
		public TerminalNode PARSER() { return getToken(CqlParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(CqlParser.PARTIAL, 0); }
		public TerminalNode PARTITIONING() { return getToken(CqlParser.PARTITIONING, 0); }
		public TerminalNode PARTITIONS() { return getToken(CqlParser.PARTITIONS, 0); }
		public TerminalNode PASSWORD() { return getToken(CqlParser.PASSWORD, 0); }
		public TerminalNode PERSIST_RO_VARIABLES_ADMIN() { return getToken(CqlParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		public TerminalNode PHASE() { return getToken(CqlParser.PHASE, 0); }
		public TerminalNode PLUGINS() { return getToken(CqlParser.PLUGINS, 0); }
		public TerminalNode PLUGIN_DIR() { return getToken(CqlParser.PLUGIN_DIR, 0); }
		public TerminalNode PLUGIN() { return getToken(CqlParser.PLUGIN, 0); }
		public TerminalNode PORT() { return getToken(CqlParser.PORT, 0); }
		public TerminalNode PRECEDES() { return getToken(CqlParser.PRECEDES, 0); }
		public TerminalNode PREPARE() { return getToken(CqlParser.PREPARE, 0); }
		public TerminalNode PRESERVE() { return getToken(CqlParser.PRESERVE, 0); }
		public TerminalNode PREV() { return getToken(CqlParser.PREV, 0); }
		public TerminalNode PROCESSLIST() { return getToken(CqlParser.PROCESSLIST, 0); }
		public TerminalNode PROFILE() { return getToken(CqlParser.PROFILE, 0); }
		public TerminalNode PROFILES() { return getToken(CqlParser.PROFILES, 0); }
		public TerminalNode PROXY() { return getToken(CqlParser.PROXY, 0); }
		public TerminalNode QUERY() { return getToken(CqlParser.QUERY, 0); }
		public TerminalNode QUICK() { return getToken(CqlParser.QUICK, 0); }
		public TerminalNode REBUILD() { return getToken(CqlParser.REBUILD, 0); }
		public TerminalNode RECOVER() { return getToken(CqlParser.RECOVER, 0); }
		public TerminalNode RECURSIVE() { return getToken(CqlParser.RECURSIVE, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(CqlParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode REDUNDANT() { return getToken(CqlParser.REDUNDANT, 0); }
		public TerminalNode RELAY() { return getToken(CqlParser.RELAY, 0); }
		public TerminalNode RELAYLOG() { return getToken(CqlParser.RELAYLOG, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(CqlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(CqlParser.RELAY_LOG_POS, 0); }
		public TerminalNode REMOVE() { return getToken(CqlParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(CqlParser.REORGANIZE, 0); }
		public TerminalNode REPAIR() { return getToken(CqlParser.REPAIR, 0); }
		public TerminalNode REPLICATE_DO_DB() { return getToken(CqlParser.REPLICATE_DO_DB, 0); }
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(CqlParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(CqlParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(CqlParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(CqlParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(CqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(CqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATION() { return getToken(CqlParser.REPLICATION, 0); }
		public TerminalNode REPLICATION_APPLIER() { return getToken(CqlParser.REPLICATION_APPLIER, 0); }
		public TerminalNode REPLICATION_SLAVE_ADMIN() { return getToken(CqlParser.REPLICATION_SLAVE_ADMIN, 0); }
		public TerminalNode RESET() { return getToken(CqlParser.RESET, 0); }
		public TerminalNode RESOURCE_GROUP_ADMIN() { return getToken(CqlParser.RESOURCE_GROUP_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_USER() { return getToken(CqlParser.RESOURCE_GROUP_USER, 0); }
		public TerminalNode RESUME() { return getToken(CqlParser.RESUME, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(CqlParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode RETURNS() { return getToken(CqlParser.RETURNS, 0); }
		public TerminalNode ROLE() { return getToken(CqlParser.ROLE, 0); }
		public TerminalNode ROLE_ADMIN() { return getToken(CqlParser.ROLE_ADMIN, 0); }
		public TerminalNode ROLLBACK() { return getToken(CqlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(CqlParser.ROLLUP, 0); }
		public TerminalNode ROTATE() { return getToken(CqlParser.ROTATE, 0); }
		public TerminalNode ROW() { return getToken(CqlParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(CqlParser.ROWS, 0); }
		public TerminalNode ROW_FORMAT() { return getToken(CqlParser.ROW_FORMAT, 0); }
		public TerminalNode RTREE() { return getToken(CqlParser.RTREE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(CqlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEDULE() { return getToken(CqlParser.SCHEDULE, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(CqlParser.SCHEMA_NAME, 0); }
		public TerminalNode SECURITY() { return getToken(CqlParser.SECURITY, 0); }
		public TerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return getToken(CqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		public TerminalNode SERIAL() { return getToken(CqlParser.SERIAL, 0); }
		public TerminalNode SERVER() { return getToken(CqlParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(CqlParser.SESSION, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(CqlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SET_USER_ID() { return getToken(CqlParser.SET_USER_ID, 0); }
		public TerminalNode SHARE() { return getToken(CqlParser.SHARE, 0); }
		public TerminalNode SHARED() { return getToken(CqlParser.SHARED, 0); }
		public TerminalNode SHOW_ROUTINE() { return getToken(CqlParser.SHOW_ROUTINE, 0); }
		public TerminalNode SIGNED() { return getToken(CqlParser.SIGNED, 0); }
		public TerminalNode SIMPLE() { return getToken(CqlParser.SIMPLE, 0); }
		public TerminalNode SLAVE() { return getToken(CqlParser.SLAVE, 0); }
		public TerminalNode SLOW() { return getToken(CqlParser.SLOW, 0); }
		public TerminalNode SNAPSHOT() { return getToken(CqlParser.SNAPSHOT, 0); }
		public TerminalNode SOCKET() { return getToken(CqlParser.SOCKET, 0); }
		public TerminalNode SOME() { return getToken(CqlParser.SOME, 0); }
		public TerminalNode SONAME() { return getToken(CqlParser.SONAME, 0); }
		public TerminalNode SOUNDS() { return getToken(CqlParser.SOUNDS, 0); }
		public TerminalNode SOURCE() { return getToken(CqlParser.SOURCE, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(CqlParser.SQL_AFTER_GTIDS, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(CqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(CqlParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(CqlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(CqlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(CqlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_THREAD() { return getToken(CqlParser.SQL_THREAD, 0); }
		public TerminalNode STACKED() { return getToken(CqlParser.STACKED, 0); }
		public TerminalNode START() { return getToken(CqlParser.START, 0); }
		public TerminalNode STARTS() { return getToken(CqlParser.STARTS, 0); }
		public TerminalNode STATS_AUTO_RECALC() { return getToken(CqlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode STATS_PERSISTENT() { return getToken(CqlParser.STATS_PERSISTENT, 0); }
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(CqlParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode STATUS() { return getToken(CqlParser.STATUS, 0); }
		public TerminalNode STD() { return getToken(CqlParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(CqlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(CqlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(CqlParser.STDDEV_SAMP, 0); }
		public TerminalNode STOP() { return getToken(CqlParser.STOP, 0); }
		public TerminalNode STORAGE() { return getToken(CqlParser.STORAGE, 0); }
		public TerminalNode STRING() { return getToken(CqlParser.STRING, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(CqlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode SUBJECT() { return getToken(CqlParser.SUBJECT, 0); }
		public TerminalNode SUBPARTITION() { return getToken(CqlParser.SUBPARTITION, 0); }
		public TerminalNode SUBPARTITIONS() { return getToken(CqlParser.SUBPARTITIONS, 0); }
		public TerminalNode SUM() { return getToken(CqlParser.SUM, 0); }
		public TerminalNode SUSPEND() { return getToken(CqlParser.SUSPEND, 0); }
		public TerminalNode SWAPS() { return getToken(CqlParser.SWAPS, 0); }
		public TerminalNode SWITCHES() { return getToken(CqlParser.SWITCHES, 0); }
		public TerminalNode SYSTEM_VARIABLES_ADMIN() { return getToken(CqlParser.SYSTEM_VARIABLES_ADMIN, 0); }
		public TerminalNode TABLE_NAME() { return getToken(CqlParser.TABLE_NAME, 0); }
		public TerminalNode TABLESPACE() { return getToken(CqlParser.TABLESPACE, 0); }
		public TerminalNode TABLE_ENCRYPTION_ADMIN() { return getToken(CqlParser.TABLE_ENCRYPTION_ADMIN, 0); }
		public TerminalNode TEMPORARY() { return getToken(CqlParser.TEMPORARY, 0); }
		public TerminalNode TEMPTABLE() { return getToken(CqlParser.TEMPTABLE, 0); }
		public TerminalNode THAN() { return getToken(CqlParser.THAN, 0); }
		public TerminalNode TRADITIONAL() { return getToken(CqlParser.TRADITIONAL, 0); }
		public TerminalNode TRANSACTION() { return getToken(CqlParser.TRANSACTION, 0); }
		public TerminalNode TRANSACTIONAL() { return getToken(CqlParser.TRANSACTIONAL, 0); }
		public TerminalNode TRIGGERS() { return getToken(CqlParser.TRIGGERS, 0); }
		public TerminalNode TRUNCATE() { return getToken(CqlParser.TRUNCATE, 0); }
		public TerminalNode UNDEFINED() { return getToken(CqlParser.UNDEFINED, 0); }
		public TerminalNode UNDOFILE() { return getToken(CqlParser.UNDOFILE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(CqlParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode UNINSTALL() { return getToken(CqlParser.UNINSTALL, 0); }
		public TerminalNode UNKNOWN() { return getToken(CqlParser.UNKNOWN, 0); }
		public TerminalNode UNTIL() { return getToken(CqlParser.UNTIL, 0); }
		public TerminalNode UPGRADE() { return getToken(CqlParser.UPGRADE, 0); }
		public TerminalNode USA() { return getToken(CqlParser.USA, 0); }
		public TerminalNode USER() { return getToken(CqlParser.USER, 0); }
		public TerminalNode USE_FRM() { return getToken(CqlParser.USE_FRM, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(CqlParser.USER_RESOURCES, 0); }
		public TerminalNode VALIDATION() { return getToken(CqlParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(CqlParser.VALUE, 0); }
		public TerminalNode VAR_POP() { return getToken(CqlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(CqlParser.VAR_SAMP, 0); }
		public TerminalNode VARIABLES() { return getToken(CqlParser.VARIABLES, 0); }
		public TerminalNode VARIANCE() { return getToken(CqlParser.VARIANCE, 0); }
		public TerminalNode VERSION_TOKEN_ADMIN() { return getToken(CqlParser.VERSION_TOKEN_ADMIN, 0); }
		public TerminalNode VIEW() { return getToken(CqlParser.VIEW, 0); }
		public TerminalNode WAIT() { return getToken(CqlParser.WAIT, 0); }
		public TerminalNode WARNINGS() { return getToken(CqlParser.WARNINGS, 0); }
		public TerminalNode WITHOUT() { return getToken(CqlParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(CqlParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(CqlParser.WRAPPER, 0); }
		public TerminalNode X509() { return getToken(CqlParser.X509, 0); }
		public TerminalNode XA() { return getToken(CqlParser.XA, 0); }
		public TerminalNode XA_RECOVER_ADMIN() { return getToken(CqlParser.XA_RECOVER_ADMIN, 0); }
		public TerminalNode XML() { return getToken(CqlParser.XML, 0); }
		public TerminalNode VIA() { return getToken(CqlParser.VIA, 0); }
		public TerminalNode LASTVAL() { return getToken(CqlParser.LASTVAL, 0); }
		public TerminalNode NEXTVAL() { return getToken(CqlParser.NEXTVAL, 0); }
		public TerminalNode SETVAL() { return getToken(CqlParser.SETVAL, 0); }
		public TerminalNode PREVIOUS() { return getToken(CqlParser.PREVIOUS, 0); }
		public TerminalNode PERSISTENT() { return getToken(CqlParser.PERSISTENT, 0); }
		public TerminalNode REPLICATION_MASTER_ADMIN() { return getToken(CqlParser.REPLICATION_MASTER_ADMIN, 0); }
		public TerminalNode REPLICA() { return getToken(CqlParser.REPLICA, 0); }
		public TerminalNode READ_ONLY_ADMIN() { return getToken(CqlParser.READ_ONLY_ADMIN, 0); }
		public TerminalNode FEDERATED_ADMIN() { return getToken(CqlParser.FEDERATED_ADMIN, 0); }
		public TerminalNode BINLOG_MONITOR() { return getToken(CqlParser.BINLOG_MONITOR, 0); }
		public TerminalNode BINLOG_REPLAY() { return getToken(CqlParser.BINLOG_REPLAY, 0); }
		public TerminalNode ENCRYPTED() { return getToken(CqlParser.ENCRYPTED, 0); }
		public TerminalNode ENCRYPTION_KEY_ID() { return getToken(CqlParser.ENCRYPTION_KEY_ID, 0); }
		public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keywordsCanBeId; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitKeywordsCanBeId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeywordsCanBeIdContext keywordsCanBeId() throws RecognitionException {
		KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_keywordsCanBeId);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7047);
			_la = _input.LA(1);
			if ( !(((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CURRENT - 34)) | (1L << (DIAGNOSTICS - 34)) | (1L << (EXCEPT - 34)) | (1L << (GROUP - 34)) | (1L << (IGNORED - 34)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (NUMBER - 114)) | (1L << (OPTIONAL - 114)) | (1L << (ORDER - 114)) | (1L << (STACKED - 114)))) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & ((1L << (SERIAL - 233)) | (1L << (AVG - 233)) | (1L << (BIT_AND - 233)) | (1L << (BIT_OR - 233)) | (1L << (BIT_XOR - 233)) | (1L << (COUNT - 233)) | (1L << (GROUP_CONCAT - 233)) | (1L << (MAX - 233)) | (1L << (MIN - 233)) | (1L << (STD - 233)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (STDDEV - 297)) | (1L << (STDDEV_POP - 297)) | (1L << (STDDEV_SAMP - 297)) | (1L << (SUM - 297)) | (1L << (VAR_POP - 297)) | (1L << (VAR_SAMP - 297)) | (1L << (VARIANCE - 297)) | (1L << (ACCOUNT - 297)) | (1L << (ACTION - 297)) | (1L << (AFTER - 297)) | (1L << (AGGREGATE - 297)) | (1L << (ALGORITHM - 297)) | (1L << (ANY - 297)) | (1L << (AT - 297)) | (1L << (AUTHORS - 297)) | (1L << (AUTOCOMMIT - 297)) | (1L << (AUTOEXTEND_SIZE - 297)) | (1L << (AUTO_INCREMENT - 297)) | (1L << (AVG_ROW_LENGTH - 297)) | (1L << (BEGIN - 297)) | (1L << (BINLOG - 297)) | (1L << (BIT - 297)) | (1L << (BLOCK - 297)) | (1L << (BOOL - 297)) | (1L << (BOOLEAN - 297)) | (1L << (BTREE - 297)) | (1L << (CACHE - 297)) | (1L << (CASCADED - 297)) | (1L << (CHAIN - 297)) | (1L << (CHANGED - 297)) | (1L << (CHANNEL - 297)) | (1L << (CHECKSUM - 297)) | (1L << (PAGE_CHECKSUM - 297)) | (1L << (CIPHER - 297)) | (1L << (CLASS_ORIGIN - 297)) | (1L << (CLIENT - 297)) | (1L << (CLOSE - 297)) | (1L << (CLUSTERING - 297)) | (1L << (COALESCE - 297)) | (1L << (CODE - 297)) | (1L << (COLUMNS - 297)) | (1L << (COLUMN_FORMAT - 297)) | (1L << (COLUMN_NAME - 297)) | (1L << (COMMENT - 297)) | (1L << (COMMIT - 297)))) != 0) || ((((_la - 361)) & ~0x3f) == 0 && ((1L << (_la - 361)) & ((1L << (COMPACT - 361)) | (1L << (COMPLETION - 361)) | (1L << (COMPRESSED - 361)) | (1L << (COMPRESSION - 361)) | (1L << (CONCURRENT - 361)) | (1L << (CONNECT - 361)) | (1L << (CONNECTION - 361)) | (1L << (CONSISTENT - 361)) | (1L << (CONSTRAINT_CATALOG - 361)) | (1L << (CONSTRAINT_SCHEMA - 361)) | (1L << (CONSTRAINT_NAME - 361)) | (1L << (CONTAINS - 361)) | (1L << (CONTEXT - 361)) | (1L << (CONTRIBUTORS - 361)) | (1L << (COPY - 361)) | (1L << (CPU - 361)) | (1L << (CURSOR_NAME - 361)) | (1L << (DATA - 361)) | (1L << (DATAFILE - 361)) | (1L << (DEALLOCATE - 361)) | (1L << (DEFAULT_AUTH - 361)) | (1L << (DEFINER - 361)) | (1L << (DELAY_KEY_WRITE - 361)) | (1L << (DES_KEY_FILE - 361)) | (1L << (DIRECTORY - 361)) | (1L << (DISABLE - 361)) | (1L << (DISCARD - 361)) | (1L << (DISK - 361)) | (1L << (DO - 361)) | (1L << (DUMPFILE - 361)) | (1L << (DUPLICATE - 361)) | (1L << (DYNAMIC - 361)) | (1L << (ENABLE - 361)) | (1L << (ENCRYPTION - 361)) | (1L << (END - 361)) | (1L << (ENDS - 361)) | (1L << (ENGINE - 361)) | (1L << (ENGINES - 361)) | (1L << (ERROR - 361)) | (1L << (ERRORS - 361)) | (1L << (ESCAPE - 361)) | (1L << (EVEN - 361)) | (1L << (EVENT - 361)) | (1L << (EVENTS - 361)) | (1L << (EVERY - 361)) | (1L << (EXCHANGE - 361)) | (1L << (EXCLUSIVE - 361)) | (1L << (EXPIRE - 361)) | (1L << (EXPORT - 361)) | (1L << (EXTENDED - 361)) | (1L << (EXTENT_SIZE - 361)) | (1L << (FAST - 361)) | (1L << (FAULTS - 361)) | (1L << (FIELDS - 361)) | (1L << (FILE_BLOCK_SIZE - 361)) | (1L << (FILTER - 361)) | (1L << (FIRST - 361)) | (1L << (FIXED - 361)) | (1L << (FLUSH - 361)) | (1L << (FOLLOWS - 361)) | (1L << (FOUND - 361)) | (1L << (FULL - 361)) | (1L << (FUNCTION - 361)))) != 0) || ((((_la - 425)) & ~0x3f) == 0 && ((1L << (_la - 425)) & ((1L << (GENERAL - 425)) | (1L << (GLOBAL - 425)) | (1L << (GRANTS - 425)) | (1L << (GROUP_REPLICATION - 425)) | (1L << (HANDLER - 425)) | (1L << (HASH - 425)) | (1L << (HELP - 425)) | (1L << (HOST - 425)) | (1L << (HOSTS - 425)) | (1L << (IDENTIFIED - 425)) | (1L << (IGNORE_SERVER_IDS - 425)) | (1L << (IMPORT - 425)) | (1L << (INDEXES - 425)) | (1L << (INITIAL_SIZE - 425)) | (1L << (INPLACE - 425)) | (1L << (INSERT_METHOD - 425)) | (1L << (INSTALL - 425)) | (1L << (INSTANCE - 425)) | (1L << (INSTANT - 425)) | (1L << (INVOKER - 425)) | (1L << (IO - 425)) | (1L << (IO_THREAD - 425)) | (1L << (IPC - 425)) | (1L << (ISOLATION - 425)) | (1L << (ISSUER - 425)) | (1L << (JSON - 425)) | (1L << (KEY_BLOCK_SIZE - 425)) | (1L << (LANGUAGE - 425)) | (1L << (LAST - 425)) | (1L << (LEAVES - 425)) | (1L << (LESS - 425)) | (1L << (LEVEL - 425)) | (1L << (LIST - 425)) | (1L << (LOCAL - 425)) | (1L << (LOGFILE - 425)) | (1L << (LOGS - 425)) | (1L << (MASTER - 425)) | (1L << (MASTER_AUTO_POSITION - 425)) | (1L << (MASTER_CONNECT_RETRY - 425)) | (1L << (MASTER_DELAY - 425)) | (1L << (MASTER_HEARTBEAT_PERIOD - 425)) | (1L << (MASTER_HOST - 425)) | (1L << (MASTER_LOG_FILE - 425)) | (1L << (MASTER_LOG_POS - 425)) | (1L << (MASTER_PASSWORD - 425)) | (1L << (MASTER_PORT - 425)) | (1L << (MASTER_RETRY_COUNT - 425)) | (1L << (MASTER_SSL - 425)) | (1L << (MASTER_SSL_CA - 425)) | (1L << (MASTER_SSL_CAPATH - 425)) | (1L << (MASTER_SSL_CERT - 425)) | (1L << (MASTER_SSL_CIPHER - 425)) | (1L << (MASTER_SSL_CRL - 425)) | (1L << (MASTER_SSL_CRLPATH - 425)) | (1L << (MASTER_SSL_KEY - 425)) | (1L << (MASTER_TLS_VERSION - 425)) | (1L << (MASTER_USER - 425)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 425)) | (1L << (MAX_QUERIES_PER_HOUR - 425)) | (1L << (MAX_ROWS - 425)) | (1L << (MAX_SIZE - 425)) | (1L << (MAX_UPDATES_PER_HOUR - 425)) | (1L << (MAX_USER_CONNECTIONS - 425)))) != 0) || ((((_la - 489)) & ~0x3f) == 0 && ((1L << (_la - 489)) & ((1L << (MEDIUM - 489)) | (1L << (MEMBER - 489)) | (1L << (MERGE - 489)) | (1L << (MESSAGE_TEXT - 489)) | (1L << (MID - 489)) | (1L << (MIGRATE - 489)) | (1L << (MIN_ROWS - 489)) | (1L << (MODE - 489)) | (1L << (MODIFY - 489)) | (1L << (MUTEX - 489)) | (1L << (MYSQL - 489)) | (1L << (MYSQL_ERRNO - 489)) | (1L << (NAME - 489)) | (1L << (NAMES - 489)) | (1L << (NCHAR - 489)) | (1L << (NEVER - 489)) | (1L << (NEXT - 489)) | (1L << (NO - 489)) | (1L << (NOCOPY - 489)) | (1L << (NOWAIT - 489)) | (1L << (NODEGROUP - 489)) | (1L << (NONE - 489)) | (1L << (ODBC - 489)) | (1L << (OFFLINE - 489)) | (1L << (OFFSET - 489)) | (1L << (OF - 489)) | (1L << (OJ - 489)) | (1L << (OLD_PASSWORD - 489)) | (1L << (ONE - 489)) | (1L << (ONLINE - 489)) | (1L << (ONLY - 489)) | (1L << (OPEN - 489)) | (1L << (OPTIMIZER_COSTS - 489)) | (1L << (OPTIONS - 489)) | (1L << (OWNER - 489)) | (1L << (PACK_KEYS - 489)) | (1L << (PAGE - 489)) | (1L << (PARSER - 489)) | (1L << (PARTIAL - 489)) | (1L << (PARTITIONING - 489)) | (1L << (PARTITIONS - 489)) | (1L << (PASSWORD - 489)) | (1L << (PHASE - 489)) | (1L << (PLUGIN - 489)) | (1L << (PLUGIN_DIR - 489)) | (1L << (PLUGINS - 489)) | (1L << (PORT - 489)) | (1L << (PRECEDES - 489)) | (1L << (PREPARE - 489)) | (1L << (PRESERVE - 489)) | (1L << (PREV - 489)) | (1L << (PROCESSLIST - 489)) | (1L << (PROFILE - 489)) | (1L << (PROFILES - 489)) | (1L << (PROXY - 489)) | (1L << (QUERY - 489)) | (1L << (QUICK - 489)) | (1L << (REBUILD - 489)) | (1L << (RECOVER - 489)) | (1L << (RECURSIVE - 489)) | (1L << (REDO_BUFFER_SIZE - 489)) | (1L << (REDUNDANT - 489)) | (1L << (RELAY - 489)))) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & ((1L << (RELAY_LOG_FILE - 553)) | (1L << (RELAY_LOG_POS - 553)) | (1L << (RELAYLOG - 553)) | (1L << (REMOVE - 553)) | (1L << (REORGANIZE - 553)) | (1L << (REPAIR - 553)) | (1L << (REPLICATE_DO_DB - 553)) | (1L << (REPLICATE_DO_TABLE - 553)) | (1L << (REPLICATE_IGNORE_DB - 553)) | (1L << (REPLICATE_IGNORE_TABLE - 553)) | (1L << (REPLICATE_REWRITE_DB - 553)) | (1L << (REPLICATE_WILD_DO_TABLE - 553)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 553)) | (1L << (REPLICATION - 553)) | (1L << (RESET - 553)) | (1L << (RESUME - 553)) | (1L << (RETURNED_SQLSTATE - 553)) | (1L << (RETURNS - 553)) | (1L << (ROLE - 553)) | (1L << (ROLLBACK - 553)) | (1L << (ROLLUP - 553)) | (1L << (ROTATE - 553)) | (1L << (ROW - 553)) | (1L << (ROWS - 553)) | (1L << (ROW_FORMAT - 553)) | (1L << (RTREE - 553)) | (1L << (SAVEPOINT - 553)) | (1L << (SCHEDULE - 553)) | (1L << (SECURITY - 553)) | (1L << (SERVER - 553)) | (1L << (SESSION - 553)) | (1L << (SHARE - 553)) | (1L << (SHARED - 553)) | (1L << (SIGNED - 553)) | (1L << (SIMPLE - 553)) | (1L << (SLAVE - 553)) | (1L << (SLOW - 553)) | (1L << (SNAPSHOT - 553)) | (1L << (SOCKET - 553)) | (1L << (SOME - 553)) | (1L << (SONAME - 553)) | (1L << (SOUNDS - 553)) | (1L << (SOURCE - 553)) | (1L << (SQL_AFTER_GTIDS - 553)) | (1L << (SQL_AFTER_MTS_GAPS - 553)) | (1L << (SQL_BEFORE_GTIDS - 553)) | (1L << (SQL_BUFFER_RESULT - 553)) | (1L << (SQL_CACHE - 553)) | (1L << (SQL_NO_CACHE - 553)) | (1L << (SQL_THREAD - 553)) | (1L << (START - 553)) | (1L << (STARTS - 553)) | (1L << (STATS_AUTO_RECALC - 553)) | (1L << (STATS_PERSISTENT - 553)) | (1L << (STATS_SAMPLE_PAGES - 553)) | (1L << (STATUS - 553)) | (1L << (STOP - 553)) | (1L << (STORAGE - 553)) | (1L << (STRING - 553)) | (1L << (SUBCLASS_ORIGIN - 553)) | (1L << (SUBJECT - 553)) | (1L << (SUBPARTITION - 553)))) != 0) || ((((_la - 617)) & ~0x3f) == 0 && ((1L << (_la - 617)) & ((1L << (SUBPARTITIONS - 617)) | (1L << (SUSPEND - 617)) | (1L << (SWAPS - 617)) | (1L << (SWITCHES - 617)) | (1L << (TABLE_NAME - 617)) | (1L << (TABLESPACE - 617)) | (1L << (TEMPORARY - 617)) | (1L << (TEMPTABLE - 617)) | (1L << (THAN - 617)) | (1L << (TRADITIONAL - 617)) | (1L << (TRANSACTION - 617)) | (1L << (TRANSACTIONAL - 617)) | (1L << (TRIGGERS - 617)) | (1L << (TRUNCATE - 617)) | (1L << (UNDEFINED - 617)) | (1L << (UNDOFILE - 617)) | (1L << (UNDO_BUFFER_SIZE - 617)) | (1L << (UNINSTALL - 617)) | (1L << (UNKNOWN - 617)) | (1L << (UNTIL - 617)) | (1L << (UPGRADE - 617)) | (1L << (USER - 617)) | (1L << (USE_FRM - 617)) | (1L << (USER_RESOURCES - 617)) | (1L << (VALIDATION - 617)) | (1L << (VALUE - 617)) | (1L << (VARIABLES - 617)) | (1L << (VIEW - 617)) | (1L << (WAIT - 617)) | (1L << (WARNINGS - 617)) | (1L << (WITHOUT - 617)) | (1L << (WORK - 617)) | (1L << (WRAPPER - 617)) | (1L << (X509 - 617)) | (1L << (XA - 617)) | (1L << (XML - 617)) | (1L << (EUR - 617)) | (1L << (USA - 617)) | (1L << (JIS - 617)) | (1L << (ISO - 617)) | (1L << (INTERNAL - 617)))) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & ((1L << (AUDIT_ADMIN - 682)) | (1L << (BACKUP_ADMIN - 682)) | (1L << (BINLOG_ADMIN - 682)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 682)) | (1L << (CLONE_ADMIN - 682)) | (1L << (CONNECTION_ADMIN - 682)) | (1L << (ENCRYPTION_KEY_ADMIN - 682)) | (1L << (FIREWALL_ADMIN - 682)) | (1L << (FIREWALL_USER - 682)) | (1L << (ADMIN - 682)) | (1L << (GROUP_REPLICATION_ADMIN - 682)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 682)) | (1L << (NDB_STORED_USER - 682)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 682)) | (1L << (REPLICATION_APPLIER - 682)) | (1L << (REPLICATION_SLAVE_ADMIN - 682)) | (1L << (RESOURCE_GROUP_ADMIN - 682)) | (1L << (RESOURCE_GROUP_USER - 682)) | (1L << (ROLE_ADMIN - 682)) | (1L << (SESSION_VARIABLES_ADMIN - 682)) | (1L << (SET_USER_ID - 682)) | (1L << (SHOW_ROUTINE - 682)) | (1L << (SYSTEM_VARIABLES_ADMIN - 682)) | (1L << (TABLE_ENCRYPTION_ADMIN - 682)) | (1L << (VERSION_TOKEN_ADMIN - 682)) | (1L << (XA_RECOVER_ADMIN - 682)))) != 0) || _la==MEMORY || _la==CATALOG_NAME || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE || _la==SCHEMA_NAME || ((((_la - 1074)) & ~0x3f) == 0 && ((1L << (_la - 1074)) & ((1L << (VIA - 1074)) | (1L << (LASTVAL - 1074)) | (1L << (NEXTVAL - 1074)) | (1L << (SETVAL - 1074)) | (1L << (PREVIOUS - 1074)) | (1L << (PERSISTENT - 1074)) | (1L << (BINLOG_MONITOR - 1074)) | (1L << (BINLOG_REPLAY - 1074)) | (1L << (FEDERATED_ADMIN - 1074)) | (1L << (READ_ONLY_ADMIN - 1074)) | (1L << (REPLICA - 1074)) | (1L << (REPLICATION_MASTER_ADMIN - 1074)))) != 0) || _la==ENCRYPTED || _la==ENCRYPTION_KEY_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameBaseContext extends ParserRuleContext {
		public TerminalNode ABS() { return getToken(CqlParser.ABS, 0); }
		public TerminalNode ACOS() { return getToken(CqlParser.ACOS, 0); }
		public TerminalNode ADDDATE() { return getToken(CqlParser.ADDDATE, 0); }
		public TerminalNode ADDTIME() { return getToken(CqlParser.ADDTIME, 0); }
		public TerminalNode AES_DECRYPT() { return getToken(CqlParser.AES_DECRYPT, 0); }
		public TerminalNode AES_ENCRYPT() { return getToken(CqlParser.AES_ENCRYPT, 0); }
		public TerminalNode AREA() { return getToken(CqlParser.AREA, 0); }
		public TerminalNode ASBINARY() { return getToken(CqlParser.ASBINARY, 0); }
		public TerminalNode ASIN() { return getToken(CqlParser.ASIN, 0); }
		public TerminalNode ASTEXT() { return getToken(CqlParser.ASTEXT, 0); }
		public TerminalNode ASWKB() { return getToken(CqlParser.ASWKB, 0); }
		public TerminalNode ASWKT() { return getToken(CqlParser.ASWKT, 0); }
		public TerminalNode ASYMMETRIC_DECRYPT() { return getToken(CqlParser.ASYMMETRIC_DECRYPT, 0); }
		public TerminalNode ASYMMETRIC_DERIVE() { return getToken(CqlParser.ASYMMETRIC_DERIVE, 0); }
		public TerminalNode ASYMMETRIC_ENCRYPT() { return getToken(CqlParser.ASYMMETRIC_ENCRYPT, 0); }
		public TerminalNode ASYMMETRIC_SIGN() { return getToken(CqlParser.ASYMMETRIC_SIGN, 0); }
		public TerminalNode ASYMMETRIC_VERIFY() { return getToken(CqlParser.ASYMMETRIC_VERIFY, 0); }
		public TerminalNode ATAN() { return getToken(CqlParser.ATAN, 0); }
		public TerminalNode ATAN2() { return getToken(CqlParser.ATAN2, 0); }
		public TerminalNode BENCHMARK() { return getToken(CqlParser.BENCHMARK, 0); }
		public TerminalNode BIN() { return getToken(CqlParser.BIN, 0); }
		public TerminalNode BIT_COUNT() { return getToken(CqlParser.BIT_COUNT, 0); }
		public TerminalNode BIT_LENGTH() { return getToken(CqlParser.BIT_LENGTH, 0); }
		public TerminalNode BUFFER() { return getToken(CqlParser.BUFFER, 0); }
		public TerminalNode CEIL() { return getToken(CqlParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(CqlParser.CEILING, 0); }
		public TerminalNode CENTROID() { return getToken(CqlParser.CENTROID, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(CqlParser.CHARACTER_LENGTH, 0); }
		public TerminalNode CHARSET() { return getToken(CqlParser.CHARSET, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(CqlParser.CHAR_LENGTH, 0); }
		public TerminalNode COERCIBILITY() { return getToken(CqlParser.COERCIBILITY, 0); }
		public TerminalNode COLLATION() { return getToken(CqlParser.COLLATION, 0); }
		public TerminalNode COMPRESS() { return getToken(CqlParser.COMPRESS, 0); }
		public TerminalNode CONCAT() { return getToken(CqlParser.CONCAT, 0); }
		public TerminalNode CONCAT_WS() { return getToken(CqlParser.CONCAT_WS, 0); }
		public TerminalNode CONNECTION_ID() { return getToken(CqlParser.CONNECTION_ID, 0); }
		public TerminalNode CONV() { return getToken(CqlParser.CONV, 0); }
		public TerminalNode CONVERT_TZ() { return getToken(CqlParser.CONVERT_TZ, 0); }
		public TerminalNode COS() { return getToken(CqlParser.COS, 0); }
		public TerminalNode COT() { return getToken(CqlParser.COT, 0); }
		public TerminalNode COUNT() { return getToken(CqlParser.COUNT, 0); }
		public TerminalNode CRC32() { return getToken(CqlParser.CRC32, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PRIV_KEY() { return getToken(CqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PUB_KEY() { return getToken(CqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
		public TerminalNode CREATE_DH_PARAMETERS() { return getToken(CqlParser.CREATE_DH_PARAMETERS, 0); }
		public TerminalNode CREATE_DIGEST() { return getToken(CqlParser.CREATE_DIGEST, 0); }
		public TerminalNode CROSSES() { return getToken(CqlParser.CROSSES, 0); }
		public TerminalNode CUME_DIST() { return getToken(CqlParser.CUME_DIST, 0); }
		public TerminalNode DATABASE() { return getToken(CqlParser.DATABASE, 0); }
		public TerminalNode DATE() { return getToken(CqlParser.DATE, 0); }
		public TerminalNode DATEDIFF() { return getToken(CqlParser.DATEDIFF, 0); }
		public TerminalNode DATE_FORMAT() { return getToken(CqlParser.DATE_FORMAT, 0); }
		public TerminalNode DAY() { return getToken(CqlParser.DAY, 0); }
		public TerminalNode DAYNAME() { return getToken(CqlParser.DAYNAME, 0); }
		public TerminalNode DAYOFMONTH() { return getToken(CqlParser.DAYOFMONTH, 0); }
		public TerminalNode DAYOFWEEK() { return getToken(CqlParser.DAYOFWEEK, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(CqlParser.DAYOFYEAR, 0); }
		public TerminalNode DECODE() { return getToken(CqlParser.DECODE, 0); }
		public TerminalNode DEGREES() { return getToken(CqlParser.DEGREES, 0); }
		public TerminalNode DENSE_RANK() { return getToken(CqlParser.DENSE_RANK, 0); }
		public TerminalNode DES_DECRYPT() { return getToken(CqlParser.DES_DECRYPT, 0); }
		public TerminalNode DES_ENCRYPT() { return getToken(CqlParser.DES_ENCRYPT, 0); }
		public TerminalNode DIMENSION() { return getToken(CqlParser.DIMENSION, 0); }
		public TerminalNode DISJOINT() { return getToken(CqlParser.DISJOINT, 0); }
		public TerminalNode ELT() { return getToken(CqlParser.ELT, 0); }
		public TerminalNode ENCODE() { return getToken(CqlParser.ENCODE, 0); }
		public TerminalNode ENCRYPT() { return getToken(CqlParser.ENCRYPT, 0); }
		public TerminalNode ENDPOINT() { return getToken(CqlParser.ENDPOINT, 0); }
		public TerminalNode ENVELOPE() { return getToken(CqlParser.ENVELOPE, 0); }
		public TerminalNode EQUALS() { return getToken(CqlParser.EQUALS, 0); }
		public TerminalNode EXP() { return getToken(CqlParser.EXP, 0); }
		public TerminalNode EXPORT_SET() { return getToken(CqlParser.EXPORT_SET, 0); }
		public TerminalNode EXTERIORRING() { return getToken(CqlParser.EXTERIORRING, 0); }
		public TerminalNode EXTRACTVALUE() { return getToken(CqlParser.EXTRACTVALUE, 0); }
		public TerminalNode FIELD() { return getToken(CqlParser.FIELD, 0); }
		public TerminalNode FIND_IN_SET() { return getToken(CqlParser.FIND_IN_SET, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(CqlParser.FIRST_VALUE, 0); }
		public TerminalNode FLOOR() { return getToken(CqlParser.FLOOR, 0); }
		public TerminalNode FORMAT() { return getToken(CqlParser.FORMAT, 0); }
		public TerminalNode FOUND_ROWS() { return getToken(CqlParser.FOUND_ROWS, 0); }
		public TerminalNode FROM_BASE64() { return getToken(CqlParser.FROM_BASE64, 0); }
		public TerminalNode FROM_DAYS() { return getToken(CqlParser.FROM_DAYS, 0); }
		public TerminalNode FROM_UNIXTIME() { return getToken(CqlParser.FROM_UNIXTIME, 0); }
		public TerminalNode GEOMCOLLFROMTEXT() { return getToken(CqlParser.GEOMCOLLFROMTEXT, 0); }
		public TerminalNode GEOMCOLLFROMWKB() { return getToken(CqlParser.GEOMCOLLFROMWKB, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(CqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMTEXT() { return getToken(CqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMWKB() { return getToken(CqlParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode GEOMETRYFROMTEXT() { return getToken(CqlParser.GEOMETRYFROMTEXT, 0); }
		public TerminalNode GEOMETRYFROMWKB() { return getToken(CqlParser.GEOMETRYFROMWKB, 0); }
		public TerminalNode GEOMETRYN() { return getToken(CqlParser.GEOMETRYN, 0); }
		public TerminalNode GEOMETRYTYPE() { return getToken(CqlParser.GEOMETRYTYPE, 0); }
		public TerminalNode GEOMFROMTEXT() { return getToken(CqlParser.GEOMFROMTEXT, 0); }
		public TerminalNode GEOMFROMWKB() { return getToken(CqlParser.GEOMFROMWKB, 0); }
		public TerminalNode GET_FORMAT() { return getToken(CqlParser.GET_FORMAT, 0); }
		public TerminalNode GET_LOCK() { return getToken(CqlParser.GET_LOCK, 0); }
		public TerminalNode GLENGTH() { return getToken(CqlParser.GLENGTH, 0); }
		public TerminalNode GREATEST() { return getToken(CqlParser.GREATEST, 0); }
		public TerminalNode GTID_SUBSET() { return getToken(CqlParser.GTID_SUBSET, 0); }
		public TerminalNode GTID_SUBTRACT() { return getToken(CqlParser.GTID_SUBTRACT, 0); }
		public TerminalNode HEX() { return getToken(CqlParser.HEX, 0); }
		public TerminalNode HOUR() { return getToken(CqlParser.HOUR, 0); }
		public TerminalNode IFNULL() { return getToken(CqlParser.IFNULL, 0); }
		public TerminalNode INET6_ATON() { return getToken(CqlParser.INET6_ATON, 0); }
		public TerminalNode INET6_NTOA() { return getToken(CqlParser.INET6_NTOA, 0); }
		public TerminalNode INET_ATON() { return getToken(CqlParser.INET_ATON, 0); }
		public TerminalNode INET_NTOA() { return getToken(CqlParser.INET_NTOA, 0); }
		public TerminalNode INSTR() { return getToken(CqlParser.INSTR, 0); }
		public TerminalNode INTERIORRINGN() { return getToken(CqlParser.INTERIORRINGN, 0); }
		public TerminalNode INTERSECTS() { return getToken(CqlParser.INTERSECTS, 0); }
		public TerminalNode INVISIBLE() { return getToken(CqlParser.INVISIBLE, 0); }
		public TerminalNode ISCLOSED() { return getToken(CqlParser.ISCLOSED, 0); }
		public TerminalNode ISEMPTY() { return getToken(CqlParser.ISEMPTY, 0); }
		public TerminalNode ISNULL() { return getToken(CqlParser.ISNULL, 0); }
		public TerminalNode ISSIMPLE() { return getToken(CqlParser.ISSIMPLE, 0); }
		public TerminalNode IS_FREE_LOCK() { return getToken(CqlParser.IS_FREE_LOCK, 0); }
		public TerminalNode IS_IPV4() { return getToken(CqlParser.IS_IPV4, 0); }
		public TerminalNode IS_IPV4_COMPAT() { return getToken(CqlParser.IS_IPV4_COMPAT, 0); }
		public TerminalNode IS_IPV4_MAPPED() { return getToken(CqlParser.IS_IPV4_MAPPED, 0); }
		public TerminalNode IS_IPV6() { return getToken(CqlParser.IS_IPV6, 0); }
		public TerminalNode IS_USED_LOCK() { return getToken(CqlParser.IS_USED_LOCK, 0); }
		public TerminalNode LAG() { return getToken(CqlParser.LAG, 0); }
		public TerminalNode LAST_INSERT_ID() { return getToken(CqlParser.LAST_INSERT_ID, 0); }
		public TerminalNode LAST_VALUE() { return getToken(CqlParser.LAST_VALUE, 0); }
		public TerminalNode LCASE() { return getToken(CqlParser.LCASE, 0); }
		public TerminalNode LEAD() { return getToken(CqlParser.LEAD, 0); }
		public TerminalNode LEAST() { return getToken(CqlParser.LEAST, 0); }
		public TerminalNode LEFT() { return getToken(CqlParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(CqlParser.LENGTH, 0); }
		public TerminalNode LINEFROMTEXT() { return getToken(CqlParser.LINEFROMTEXT, 0); }
		public TerminalNode LINEFROMWKB() { return getToken(CqlParser.LINEFROMWKB, 0); }
		public TerminalNode LINESTRING() { return getToken(CqlParser.LINESTRING, 0); }
		public TerminalNode LINESTRINGFROMTEXT() { return getToken(CqlParser.LINESTRINGFROMTEXT, 0); }
		public TerminalNode LINESTRINGFROMWKB() { return getToken(CqlParser.LINESTRINGFROMWKB, 0); }
		public TerminalNode LN() { return getToken(CqlParser.LN, 0); }
		public TerminalNode LOAD_FILE() { return getToken(CqlParser.LOAD_FILE, 0); }
		public TerminalNode LOCATE() { return getToken(CqlParser.LOCATE, 0); }
		public TerminalNode LOG() { return getToken(CqlParser.LOG, 0); }
		public TerminalNode LOG10() { return getToken(CqlParser.LOG10, 0); }
		public TerminalNode LOG2() { return getToken(CqlParser.LOG2, 0); }
		public TerminalNode LOWER() { return getToken(CqlParser.LOWER, 0); }
		public TerminalNode LPAD() { return getToken(CqlParser.LPAD, 0); }
		public TerminalNode LTRIM() { return getToken(CqlParser.LTRIM, 0); }
		public TerminalNode MAKEDATE() { return getToken(CqlParser.MAKEDATE, 0); }
		public TerminalNode MAKETIME() { return getToken(CqlParser.MAKETIME, 0); }
		public TerminalNode MAKE_SET() { return getToken(CqlParser.MAKE_SET, 0); }
		public TerminalNode MASTER_POS_WAIT() { return getToken(CqlParser.MASTER_POS_WAIT, 0); }
		public TerminalNode MBRCONTAINS() { return getToken(CqlParser.MBRCONTAINS, 0); }
		public TerminalNode MBRDISJOINT() { return getToken(CqlParser.MBRDISJOINT, 0); }
		public TerminalNode MBREQUAL() { return getToken(CqlParser.MBREQUAL, 0); }
		public TerminalNode MBRINTERSECTS() { return getToken(CqlParser.MBRINTERSECTS, 0); }
		public TerminalNode MBROVERLAPS() { return getToken(CqlParser.MBROVERLAPS, 0); }
		public TerminalNode MBRTOUCHES() { return getToken(CqlParser.MBRTOUCHES, 0); }
		public TerminalNode MBRWITHIN() { return getToken(CqlParser.MBRWITHIN, 0); }
		public TerminalNode MD5() { return getToken(CqlParser.MD5, 0); }
		public TerminalNode MICROSECOND() { return getToken(CqlParser.MICROSECOND, 0); }
		public TerminalNode MINUTE() { return getToken(CqlParser.MINUTE, 0); }
		public TerminalNode MLINEFROMTEXT() { return getToken(CqlParser.MLINEFROMTEXT, 0); }
		public TerminalNode MLINEFROMWKB() { return getToken(CqlParser.MLINEFROMWKB, 0); }
		public TerminalNode MOD() { return getToken(CqlParser.MOD, 0); }
		public TerminalNode MONTH() { return getToken(CqlParser.MONTH, 0); }
		public TerminalNode MONTHNAME() { return getToken(CqlParser.MONTHNAME, 0); }
		public TerminalNode MPOINTFROMTEXT() { return getToken(CqlParser.MPOINTFROMTEXT, 0); }
		public TerminalNode MPOINTFROMWKB() { return getToken(CqlParser.MPOINTFROMWKB, 0); }
		public TerminalNode MPOLYFROMTEXT() { return getToken(CqlParser.MPOLYFROMTEXT, 0); }
		public TerminalNode MPOLYFROMWKB() { return getToken(CqlParser.MPOLYFROMWKB, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(CqlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTILINESTRINGFROMTEXT() { return getToken(CqlParser.MULTILINESTRINGFROMTEXT, 0); }
		public TerminalNode MULTILINESTRINGFROMWKB() { return getToken(CqlParser.MULTILINESTRINGFROMWKB, 0); }
		public TerminalNode MULTIPOINT() { return getToken(CqlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOINTFROMTEXT() { return getToken(CqlParser.MULTIPOINTFROMTEXT, 0); }
		public TerminalNode MULTIPOINTFROMWKB() { return getToken(CqlParser.MULTIPOINTFROMWKB, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(CqlParser.MULTIPOLYGON, 0); }
		public TerminalNode MULTIPOLYGONFROMTEXT() { return getToken(CqlParser.MULTIPOLYGONFROMTEXT, 0); }
		public TerminalNode MULTIPOLYGONFROMWKB() { return getToken(CqlParser.MULTIPOLYGONFROMWKB, 0); }
		public TerminalNode NAME_CONST() { return getToken(CqlParser.NAME_CONST, 0); }
		public TerminalNode NTH_VALUE() { return getToken(CqlParser.NTH_VALUE, 0); }
		public TerminalNode NTILE() { return getToken(CqlParser.NTILE, 0); }
		public TerminalNode NULLIF() { return getToken(CqlParser.NULLIF, 0); }
		public TerminalNode NUMGEOMETRIES() { return getToken(CqlParser.NUMGEOMETRIES, 0); }
		public TerminalNode NUMINTERIORRINGS() { return getToken(CqlParser.NUMINTERIORRINGS, 0); }
		public TerminalNode NUMPOINTS() { return getToken(CqlParser.NUMPOINTS, 0); }
		public TerminalNode OCT() { return getToken(CqlParser.OCT, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(CqlParser.OCTET_LENGTH, 0); }
		public TerminalNode ORD() { return getToken(CqlParser.ORD, 0); }
		public TerminalNode OVERLAPS() { return getToken(CqlParser.OVERLAPS, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(CqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERIOD_ADD() { return getToken(CqlParser.PERIOD_ADD, 0); }
		public TerminalNode PERIOD_DIFF() { return getToken(CqlParser.PERIOD_DIFF, 0); }
		public TerminalNode PI() { return getToken(CqlParser.PI, 0); }
		public TerminalNode POINT() { return getToken(CqlParser.POINT, 0); }
		public TerminalNode POINTFROMTEXT() { return getToken(CqlParser.POINTFROMTEXT, 0); }
		public TerminalNode POINTFROMWKB() { return getToken(CqlParser.POINTFROMWKB, 0); }
		public TerminalNode POINTN() { return getToken(CqlParser.POINTN, 0); }
		public TerminalNode POLYFROMTEXT() { return getToken(CqlParser.POLYFROMTEXT, 0); }
		public TerminalNode POLYFROMWKB() { return getToken(CqlParser.POLYFROMWKB, 0); }
		public TerminalNode POLYGON() { return getToken(CqlParser.POLYGON, 0); }
		public TerminalNode POLYGONFROMTEXT() { return getToken(CqlParser.POLYGONFROMTEXT, 0); }
		public TerminalNode POLYGONFROMWKB() { return getToken(CqlParser.POLYGONFROMWKB, 0); }
		public TerminalNode POSITION() { return getToken(CqlParser.POSITION, 0); }
		public TerminalNode POW() { return getToken(CqlParser.POW, 0); }
		public TerminalNode POWER() { return getToken(CqlParser.POWER, 0); }
		public TerminalNode QUARTER() { return getToken(CqlParser.QUARTER, 0); }
		public TerminalNode QUOTE() { return getToken(CqlParser.QUOTE, 0); }
		public TerminalNode RADIANS() { return getToken(CqlParser.RADIANS, 0); }
		public TerminalNode RAND() { return getToken(CqlParser.RAND, 0); }
		public TerminalNode RANK() { return getToken(CqlParser.RANK, 0); }
		public TerminalNode RANDOM_BYTES() { return getToken(CqlParser.RANDOM_BYTES, 0); }
		public TerminalNode RELEASE_LOCK() { return getToken(CqlParser.RELEASE_LOCK, 0); }
		public TerminalNode REVERSE() { return getToken(CqlParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(CqlParser.RIGHT, 0); }
		public TerminalNode ROUND() { return getToken(CqlParser.ROUND, 0); }
		public TerminalNode ROW_COUNT() { return getToken(CqlParser.ROW_COUNT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(CqlParser.ROW_NUMBER, 0); }
		public TerminalNode RPAD() { return getToken(CqlParser.RPAD, 0); }
		public TerminalNode RTRIM() { return getToken(CqlParser.RTRIM, 0); }
		public TerminalNode SECOND() { return getToken(CqlParser.SECOND, 0); }
		public TerminalNode SEC_TO_TIME() { return getToken(CqlParser.SEC_TO_TIME, 0); }
		public TerminalNode SCHEMA() { return getToken(CqlParser.SCHEMA, 0); }
		public TerminalNode SESSION_USER() { return getToken(CqlParser.SESSION_USER, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(CqlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SHA() { return getToken(CqlParser.SHA, 0); }
		public TerminalNode SHA1() { return getToken(CqlParser.SHA1, 0); }
		public TerminalNode SHA2() { return getToken(CqlParser.SHA2, 0); }
		public TerminalNode SIGN() { return getToken(CqlParser.SIGN, 0); }
		public TerminalNode SIN() { return getToken(CqlParser.SIN, 0); }
		public TerminalNode SLEEP() { return getToken(CqlParser.SLEEP, 0); }
		public TerminalNode SOUNDEX() { return getToken(CqlParser.SOUNDEX, 0); }
		public TerminalNode SQL_THREAD_WAIT_AFTER_GTIDS() { return getToken(CqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
		public TerminalNode SQRT() { return getToken(CqlParser.SQRT, 0); }
		public TerminalNode SRID() { return getToken(CqlParser.SRID, 0); }
		public TerminalNode STARTPOINT() { return getToken(CqlParser.STARTPOINT, 0); }
		public TerminalNode STRCMP() { return getToken(CqlParser.STRCMP, 0); }
		public TerminalNode STR_TO_DATE() { return getToken(CqlParser.STR_TO_DATE, 0); }
		public TerminalNode ST_AREA() { return getToken(CqlParser.ST_AREA, 0); }
		public TerminalNode ST_ASBINARY() { return getToken(CqlParser.ST_ASBINARY, 0); }
		public TerminalNode ST_ASTEXT() { return getToken(CqlParser.ST_ASTEXT, 0); }
		public TerminalNode ST_ASWKB() { return getToken(CqlParser.ST_ASWKB, 0); }
		public TerminalNode ST_ASWKT() { return getToken(CqlParser.ST_ASWKT, 0); }
		public TerminalNode ST_BUFFER() { return getToken(CqlParser.ST_BUFFER, 0); }
		public TerminalNode ST_CENTROID() { return getToken(CqlParser.ST_CENTROID, 0); }
		public TerminalNode ST_CONTAINS() { return getToken(CqlParser.ST_CONTAINS, 0); }
		public TerminalNode ST_CROSSES() { return getToken(CqlParser.ST_CROSSES, 0); }
		public TerminalNode ST_DIFFERENCE() { return getToken(CqlParser.ST_DIFFERENCE, 0); }
		public TerminalNode ST_DIMENSION() { return getToken(CqlParser.ST_DIMENSION, 0); }
		public TerminalNode ST_DISJOINT() { return getToken(CqlParser.ST_DISJOINT, 0); }
		public TerminalNode ST_DISTANCE() { return getToken(CqlParser.ST_DISTANCE, 0); }
		public TerminalNode ST_ENDPOINT() { return getToken(CqlParser.ST_ENDPOINT, 0); }
		public TerminalNode ST_ENVELOPE() { return getToken(CqlParser.ST_ENVELOPE, 0); }
		public TerminalNode ST_EQUALS() { return getToken(CqlParser.ST_EQUALS, 0); }
		public TerminalNode ST_EXTERIORRING() { return getToken(CqlParser.ST_EXTERIORRING, 0); }
		public TerminalNode ST_GEOMCOLLFROMTEXT() { return getToken(CqlParser.ST_GEOMCOLLFROMTEXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMTXT() { return getToken(CqlParser.ST_GEOMCOLLFROMTXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMWKB() { return getToken(CqlParser.ST_GEOMCOLLFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() { return getToken(CqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() { return getToken(CqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYFROMTEXT() { return getToken(CqlParser.ST_GEOMETRYFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYFROMWKB() { return getToken(CqlParser.ST_GEOMETRYFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYN() { return getToken(CqlParser.ST_GEOMETRYN, 0); }
		public TerminalNode ST_GEOMETRYTYPE() { return getToken(CqlParser.ST_GEOMETRYTYPE, 0); }
		public TerminalNode ST_GEOMFROMTEXT() { return getToken(CqlParser.ST_GEOMFROMTEXT, 0); }
		public TerminalNode ST_GEOMFROMWKB() { return getToken(CqlParser.ST_GEOMFROMWKB, 0); }
		public TerminalNode ST_INTERIORRINGN() { return getToken(CqlParser.ST_INTERIORRINGN, 0); }
		public TerminalNode ST_INTERSECTION() { return getToken(CqlParser.ST_INTERSECTION, 0); }
		public TerminalNode ST_INTERSECTS() { return getToken(CqlParser.ST_INTERSECTS, 0); }
		public TerminalNode ST_ISCLOSED() { return getToken(CqlParser.ST_ISCLOSED, 0); }
		public TerminalNode ST_ISEMPTY() { return getToken(CqlParser.ST_ISEMPTY, 0); }
		public TerminalNode ST_ISSIMPLE() { return getToken(CqlParser.ST_ISSIMPLE, 0); }
		public TerminalNode ST_LINEFROMTEXT() { return getToken(CqlParser.ST_LINEFROMTEXT, 0); }
		public TerminalNode ST_LINEFROMWKB() { return getToken(CqlParser.ST_LINEFROMWKB, 0); }
		public TerminalNode ST_LINESTRINGFROMTEXT() { return getToken(CqlParser.ST_LINESTRINGFROMTEXT, 0); }
		public TerminalNode ST_LINESTRINGFROMWKB() { return getToken(CqlParser.ST_LINESTRINGFROMWKB, 0); }
		public TerminalNode ST_NUMGEOMETRIES() { return getToken(CqlParser.ST_NUMGEOMETRIES, 0); }
		public TerminalNode ST_NUMINTERIORRING() { return getToken(CqlParser.ST_NUMINTERIORRING, 0); }
		public TerminalNode ST_NUMINTERIORRINGS() { return getToken(CqlParser.ST_NUMINTERIORRINGS, 0); }
		public TerminalNode ST_NUMPOINTS() { return getToken(CqlParser.ST_NUMPOINTS, 0); }
		public TerminalNode ST_OVERLAPS() { return getToken(CqlParser.ST_OVERLAPS, 0); }
		public TerminalNode ST_POINTFROMTEXT() { return getToken(CqlParser.ST_POINTFROMTEXT, 0); }
		public TerminalNode ST_POINTFROMWKB() { return getToken(CqlParser.ST_POINTFROMWKB, 0); }
		public TerminalNode ST_POINTN() { return getToken(CqlParser.ST_POINTN, 0); }
		public TerminalNode ST_POLYFROMTEXT() { return getToken(CqlParser.ST_POLYFROMTEXT, 0); }
		public TerminalNode ST_POLYFROMWKB() { return getToken(CqlParser.ST_POLYFROMWKB, 0); }
		public TerminalNode ST_POLYGONFROMTEXT() { return getToken(CqlParser.ST_POLYGONFROMTEXT, 0); }
		public TerminalNode ST_POLYGONFROMWKB() { return getToken(CqlParser.ST_POLYGONFROMWKB, 0); }
		public TerminalNode ST_SRID() { return getToken(CqlParser.ST_SRID, 0); }
		public TerminalNode ST_STARTPOINT() { return getToken(CqlParser.ST_STARTPOINT, 0); }
		public TerminalNode ST_SYMDIFFERENCE() { return getToken(CqlParser.ST_SYMDIFFERENCE, 0); }
		public TerminalNode ST_TOUCHES() { return getToken(CqlParser.ST_TOUCHES, 0); }
		public TerminalNode ST_UNION() { return getToken(CqlParser.ST_UNION, 0); }
		public TerminalNode ST_WITHIN() { return getToken(CqlParser.ST_WITHIN, 0); }
		public TerminalNode ST_X() { return getToken(CqlParser.ST_X, 0); }
		public TerminalNode ST_Y() { return getToken(CqlParser.ST_Y, 0); }
		public TerminalNode SUBDATE() { return getToken(CqlParser.SUBDATE, 0); }
		public TerminalNode SUBSTRING_INDEX() { return getToken(CqlParser.SUBSTRING_INDEX, 0); }
		public TerminalNode SUBTIME() { return getToken(CqlParser.SUBTIME, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(CqlParser.SYSTEM_USER, 0); }
		public TerminalNode TAN() { return getToken(CqlParser.TAN, 0); }
		public TerminalNode TIME() { return getToken(CqlParser.TIME, 0); }
		public TerminalNode TIMEDIFF() { return getToken(CqlParser.TIMEDIFF, 0); }
		public TerminalNode TIMESTAMP() { return getToken(CqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(CqlParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(CqlParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TIME_FORMAT() { return getToken(CqlParser.TIME_FORMAT, 0); }
		public TerminalNode TIME_TO_SEC() { return getToken(CqlParser.TIME_TO_SEC, 0); }
		public TerminalNode TOUCHES() { return getToken(CqlParser.TOUCHES, 0); }
		public TerminalNode TO_BASE64() { return getToken(CqlParser.TO_BASE64, 0); }
		public TerminalNode TO_DAYS() { return getToken(CqlParser.TO_DAYS, 0); }
		public TerminalNode TO_SECONDS() { return getToken(CqlParser.TO_SECONDS, 0); }
		public TerminalNode UCASE() { return getToken(CqlParser.UCASE, 0); }
		public TerminalNode UNCOMPRESS() { return getToken(CqlParser.UNCOMPRESS, 0); }
		public TerminalNode UNCOMPRESSED_LENGTH() { return getToken(CqlParser.UNCOMPRESSED_LENGTH, 0); }
		public TerminalNode UNHEX() { return getToken(CqlParser.UNHEX, 0); }
		public TerminalNode UNIX_TIMESTAMP() { return getToken(CqlParser.UNIX_TIMESTAMP, 0); }
		public TerminalNode UPDATEXML() { return getToken(CqlParser.UPDATEXML, 0); }
		public TerminalNode UPPER() { return getToken(CqlParser.UPPER, 0); }
		public TerminalNode UUID() { return getToken(CqlParser.UUID, 0); }
		public TerminalNode UUID_SHORT() { return getToken(CqlParser.UUID_SHORT, 0); }
		public TerminalNode VALIDATE_PASSWORD_STRENGTH() { return getToken(CqlParser.VALIDATE_PASSWORD_STRENGTH, 0); }
		public TerminalNode VERSION() { return getToken(CqlParser.VERSION, 0); }
		public TerminalNode VISIBLE() { return getToken(CqlParser.VISIBLE, 0); }
		public TerminalNode WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() { return getToken(CqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
		public TerminalNode WEEK() { return getToken(CqlParser.WEEK, 0); }
		public TerminalNode WEEKDAY() { return getToken(CqlParser.WEEKDAY, 0); }
		public TerminalNode WEEKOFYEAR() { return getToken(CqlParser.WEEKOFYEAR, 0); }
		public TerminalNode WEIGHT_STRING() { return getToken(CqlParser.WEIGHT_STRING, 0); }
		public TerminalNode WITHIN() { return getToken(CqlParser.WITHIN, 0); }
		public TerminalNode YEAR() { return getToken(CqlParser.YEAR, 0); }
		public TerminalNode YEARWEEK() { return getToken(CqlParser.YEARWEEK, 0); }
		public TerminalNode Y_FUNCTION() { return getToken(CqlParser.Y_FUNCTION, 0); }
		public TerminalNode X_FUNCTION() { return getToken(CqlParser.X_FUNCTION, 0); }
		public TerminalNode JSON_ARRAY() { return getToken(CqlParser.JSON_ARRAY, 0); }
		public TerminalNode JSON_OBJECT() { return getToken(CqlParser.JSON_OBJECT, 0); }
		public TerminalNode JSON_QUOTE() { return getToken(CqlParser.JSON_QUOTE, 0); }
		public TerminalNode JSON_CONTAINS() { return getToken(CqlParser.JSON_CONTAINS, 0); }
		public TerminalNode JSON_CONTAINS_PATH() { return getToken(CqlParser.JSON_CONTAINS_PATH, 0); }
		public TerminalNode JSON_EXTRACT() { return getToken(CqlParser.JSON_EXTRACT, 0); }
		public TerminalNode JSON_KEYS() { return getToken(CqlParser.JSON_KEYS, 0); }
		public TerminalNode JSON_OVERLAPS() { return getToken(CqlParser.JSON_OVERLAPS, 0); }
		public TerminalNode JSON_SEARCH() { return getToken(CqlParser.JSON_SEARCH, 0); }
		public TerminalNode JSON_VALUE() { return getToken(CqlParser.JSON_VALUE, 0); }
		public TerminalNode JSON_ARRAY_APPEND() { return getToken(CqlParser.JSON_ARRAY_APPEND, 0); }
		public TerminalNode JSON_ARRAY_INSERT() { return getToken(CqlParser.JSON_ARRAY_INSERT, 0); }
		public TerminalNode JSON_INSERT() { return getToken(CqlParser.JSON_INSERT, 0); }
		public TerminalNode JSON_MERGE() { return getToken(CqlParser.JSON_MERGE, 0); }
		public TerminalNode JSON_MERGE_PATCH() { return getToken(CqlParser.JSON_MERGE_PATCH, 0); }
		public TerminalNode JSON_MERGE_PRESERVE() { return getToken(CqlParser.JSON_MERGE_PRESERVE, 0); }
		public TerminalNode JSON_REMOVE() { return getToken(CqlParser.JSON_REMOVE, 0); }
		public TerminalNode JSON_REPLACE() { return getToken(CqlParser.JSON_REPLACE, 0); }
		public TerminalNode JSON_SET() { return getToken(CqlParser.JSON_SET, 0); }
		public TerminalNode JSON_UNQUOTE() { return getToken(CqlParser.JSON_UNQUOTE, 0); }
		public TerminalNode JSON_DEPTH() { return getToken(CqlParser.JSON_DEPTH, 0); }
		public TerminalNode JSON_LENGTH() { return getToken(CqlParser.JSON_LENGTH, 0); }
		public TerminalNode JSON_TYPE() { return getToken(CqlParser.JSON_TYPE, 0); }
		public TerminalNode JSON_VALID() { return getToken(CqlParser.JSON_VALID, 0); }
		public TerminalNode JSON_TABLE() { return getToken(CqlParser.JSON_TABLE, 0); }
		public TerminalNode JSON_SCHEMA_VALID() { return getToken(CqlParser.JSON_SCHEMA_VALID, 0); }
		public TerminalNode JSON_SCHEMA_VALIDATION_REPORT() { return getToken(CqlParser.JSON_SCHEMA_VALIDATION_REPORT, 0); }
		public TerminalNode JSON_PRETTY() { return getToken(CqlParser.JSON_PRETTY, 0); }
		public TerminalNode JSON_STORAGE_FREE() { return getToken(CqlParser.JSON_STORAGE_FREE, 0); }
		public TerminalNode JSON_STORAGE_SIZE() { return getToken(CqlParser.JSON_STORAGE_SIZE, 0); }
		public TerminalNode JSON_ARRAYAGG() { return getToken(CqlParser.JSON_ARRAYAGG, 0); }
		public TerminalNode JSON_OBJECTAGG() { return getToken(CqlParser.JSON_OBJECTAGG, 0); }
		public TerminalNode LASTVAL() { return getToken(CqlParser.LASTVAL, 0); }
		public TerminalNode NEXTVAL() { return getToken(CqlParser.NEXTVAL, 0); }
		public TerminalNode SETVAL() { return getToken(CqlParser.SETVAL, 0); }
		public FunctionNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionNameBase; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CqlParserVisitor ) return ((CqlParserVisitor<? extends T>)visitor).visitFunctionNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameBaseContext functionNameBase() throws RecognitionException {
		FunctionNameBaseContext _localctx = new FunctionNameBaseContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_functionNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7049);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || ((((_la - 96)) & ~0x3f) == 0 && ((1L << (_la - 96)) & ((1L << (LEFT - 96)) | (1L << (RIGHT - 96)) | (1L << (SCHEMA - 96)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (YEAR - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (POSITION - 275)))) != 0) || _la==INVISIBLE || ((((_la - 648)) & ~0x3f) == 0 && ((1L << (_la - 648)) & ((1L << (VISIBLE - 648)) | (1L << (QUARTER - 648)) | (1L << (MONTH - 648)) | (1L << (DAY - 648)) | (1L << (HOUR - 648)) | (1L << (MINUTE - 648)) | (1L << (WEEK - 648)) | (1L << (SECOND - 648)) | (1L << (MICROSECOND - 648)) | (1L << (SESSION_VARIABLES_ADMIN - 648)))) != 0) || ((((_la - 771)) & ~0x3f) == 0 && ((1L << (_la - 771)) & ((1L << (GEOMETRYCOLLECTION - 771)) | (1L << (LINESTRING - 771)) | (1L << (MULTILINESTRING - 771)) | (1L << (MULTIPOINT - 771)) | (1L << (MULTIPOLYGON - 771)) | (1L << (POINT - 771)) | (1L << (POLYGON - 771)) | (1L << (ABS - 771)) | (1L << (ACOS - 771)) | (1L << (ADDDATE - 771)) | (1L << (ADDTIME - 771)) | (1L << (AES_DECRYPT - 771)) | (1L << (AES_ENCRYPT - 771)) | (1L << (AREA - 771)) | (1L << (ASBINARY - 771)) | (1L << (ASIN - 771)) | (1L << (ASTEXT - 771)) | (1L << (ASWKB - 771)) | (1L << (ASWKT - 771)) | (1L << (ASYMMETRIC_DECRYPT - 771)) | (1L << (ASYMMETRIC_DERIVE - 771)) | (1L << (ASYMMETRIC_ENCRYPT - 771)) | (1L << (ASYMMETRIC_SIGN - 771)) | (1L << (ASYMMETRIC_VERIFY - 771)) | (1L << (ATAN - 771)) | (1L << (ATAN2 - 771)) | (1L << (BENCHMARK - 771)) | (1L << (BIN - 771)) | (1L << (BIT_COUNT - 771)) | (1L << (BIT_LENGTH - 771)) | (1L << (BUFFER - 771)) | (1L << (CEIL - 771)) | (1L << (CEILING - 771)) | (1L << (CENTROID - 771)) | (1L << (CHARACTER_LENGTH - 771)) | (1L << (CHARSET - 771)) | (1L << (CHAR_LENGTH - 771)) | (1L << (COERCIBILITY - 771)) | (1L << (COLLATION - 771)) | (1L << (COMPRESS - 771)) | (1L << (CONCAT - 771)) | (1L << (CONCAT_WS - 771)) | (1L << (CONNECTION_ID - 771)) | (1L << (CONV - 771)) | (1L << (CONVERT_TZ - 771)) | (1L << (COS - 771)) | (1L << (COT - 771)) | (1L << (CRC32 - 771)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 771)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 771)) | (1L << (CREATE_DH_PARAMETERS - 771)) | (1L << (CREATE_DIGEST - 771)) | (1L << (CROSSES - 771)) | (1L << (DATEDIFF - 771)) | (1L << (DATE_FORMAT - 771)) | (1L << (DAYNAME - 771)) | (1L << (DAYOFMONTH - 771)) | (1L << (DAYOFWEEK - 771)) | (1L << (DAYOFYEAR - 771)) | (1L << (DECODE - 771)) | (1L << (DEGREES - 771)))) != 0) || ((((_la - 835)) & ~0x3f) == 0 && ((1L << (_la - 835)) & ((1L << (DES_DECRYPT - 835)) | (1L << (DES_ENCRYPT - 835)) | (1L << (DIMENSION - 835)) | (1L << (DISJOINT - 835)) | (1L << (ELT - 835)) | (1L << (ENCODE - 835)) | (1L << (ENCRYPT - 835)) | (1L << (ENDPOINT - 835)) | (1L << (ENVELOPE - 835)) | (1L << (EQUALS - 835)) | (1L << (EXP - 835)) | (1L << (EXPORT_SET - 835)) | (1L << (EXTERIORRING - 835)) | (1L << (EXTRACTVALUE - 835)) | (1L << (FIELD - 835)) | (1L << (FIND_IN_SET - 835)) | (1L << (FLOOR - 835)) | (1L << (FORMAT - 835)) | (1L << (FOUND_ROWS - 835)) | (1L << (FROM_BASE64 - 835)) | (1L << (FROM_DAYS - 835)) | (1L << (FROM_UNIXTIME - 835)) | (1L << (GEOMCOLLFROMTEXT - 835)) | (1L << (GEOMCOLLFROMWKB - 835)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 835)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 835)) | (1L << (GEOMETRYFROMTEXT - 835)) | (1L << (GEOMETRYFROMWKB - 835)) | (1L << (GEOMETRYN - 835)) | (1L << (GEOMETRYTYPE - 835)) | (1L << (GEOMFROMTEXT - 835)) | (1L << (GEOMFROMWKB - 835)) | (1L << (GET_FORMAT - 835)) | (1L << (GET_LOCK - 835)) | (1L << (GLENGTH - 835)) | (1L << (GREATEST - 835)) | (1L << (GTID_SUBSET - 835)) | (1L << (GTID_SUBTRACT - 835)) | (1L << (HEX - 835)) | (1L << (IFNULL - 835)) | (1L << (INET6_ATON - 835)) | (1L << (INET6_NTOA - 835)) | (1L << (INET_ATON - 835)) | (1L << (INET_NTOA - 835)) | (1L << (INSTR - 835)) | (1L << (INTERIORRINGN - 835)) | (1L << (INTERSECTS - 835)) | (1L << (ISCLOSED - 835)) | (1L << (ISEMPTY - 835)) | (1L << (ISNULL - 835)) | (1L << (ISSIMPLE - 835)) | (1L << (IS_FREE_LOCK - 835)) | (1L << (IS_IPV4 - 835)) | (1L << (IS_IPV4_COMPAT - 835)) | (1L << (IS_IPV4_MAPPED - 835)) | (1L << (IS_IPV6 - 835)) | (1L << (IS_USED_LOCK - 835)) | (1L << (LAST_INSERT_ID - 835)) | (1L << (LCASE - 835)) | (1L << (LEAST - 835)) | (1L << (LENGTH - 835)) | (1L << (LINEFROMTEXT - 835)) | (1L << (LINEFROMWKB - 835)))) != 0) || ((((_la - 899)) & ~0x3f) == 0 && ((1L << (_la - 899)) & ((1L << (LINESTRINGFROMTEXT - 899)) | (1L << (LINESTRINGFROMWKB - 899)) | (1L << (LN - 899)) | (1L << (LOAD_FILE - 899)) | (1L << (LOCATE - 899)) | (1L << (LOG - 899)) | (1L << (LOG10 - 899)) | (1L << (LOG2 - 899)) | (1L << (LOWER - 899)) | (1L << (LPAD - 899)) | (1L << (LTRIM - 899)) | (1L << (MAKEDATE - 899)) | (1L << (MAKETIME - 899)) | (1L << (MAKE_SET - 899)) | (1L << (MASTER_POS_WAIT - 899)) | (1L << (MBRCONTAINS - 899)) | (1L << (MBRDISJOINT - 899)) | (1L << (MBREQUAL - 899)) | (1L << (MBRINTERSECTS - 899)) | (1L << (MBROVERLAPS - 899)) | (1L << (MBRTOUCHES - 899)) | (1L << (MBRWITHIN - 899)) | (1L << (MD5 - 899)) | (1L << (MLINEFROMTEXT - 899)) | (1L << (MLINEFROMWKB - 899)) | (1L << (MONTHNAME - 899)) | (1L << (MPOINTFROMTEXT - 899)) | (1L << (MPOINTFROMWKB - 899)) | (1L << (MPOLYFROMTEXT - 899)) | (1L << (MPOLYFROMWKB - 899)) | (1L << (MULTILINESTRINGFROMTEXT - 899)) | (1L << (MULTILINESTRINGFROMWKB - 899)) | (1L << (MULTIPOINTFROMTEXT - 899)) | (1L << (MULTIPOINTFROMWKB - 899)) | (1L << (MULTIPOLYGONFROMTEXT - 899)) | (1L << (MULTIPOLYGONFROMWKB - 899)) | (1L << (NAME_CONST - 899)) | (1L << (NULLIF - 899)) | (1L << (NUMGEOMETRIES - 899)) | (1L << (NUMINTERIORRINGS - 899)) | (1L << (NUMPOINTS - 899)) | (1L << (OCT - 899)) | (1L << (OCTET_LENGTH - 899)) | (1L << (ORD - 899)) | (1L << (OVERLAPS - 899)) | (1L << (PERIOD_ADD - 899)) | (1L << (PERIOD_DIFF - 899)) | (1L << (PI - 899)) | (1L << (POINTFROMTEXT - 899)) | (1L << (POINTFROMWKB - 899)) | (1L << (POINTN - 899)) | (1L << (POLYFROMTEXT - 899)) | (1L << (POLYFROMWKB - 899)) | (1L << (POLYGONFROMTEXT - 899)) | (1L << (POLYGONFROMWKB - 899)) | (1L << (POW - 899)) | (1L << (POWER - 899)) | (1L << (QUOTE - 899)) | (1L << (RADIANS - 899)) | (1L << (RAND - 899)) | (1L << (RANDOM_BYTES - 899)) | (1L << (RELEASE_LOCK - 899)) | (1L << (REVERSE - 899)) | (1L << (ROUND - 899)))) != 0) || ((((_la - 963)) & ~0x3f) == 0 && ((1L << (_la - 963)) & ((1L << (ROW_COUNT - 963)) | (1L << (RPAD - 963)) | (1L << (RTRIM - 963)) | (1L << (SEC_TO_TIME - 963)) | (1L << (SESSION_USER - 963)) | (1L << (SHA - 963)) | (1L << (SHA1 - 963)) | (1L << (SHA2 - 963)) | (1L << (SIGN - 963)) | (1L << (SIN - 963)) | (1L << (SLEEP - 963)) | (1L << (SOUNDEX - 963)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 963)) | (1L << (SQRT - 963)) | (1L << (SRID - 963)) | (1L << (STARTPOINT - 963)) | (1L << (STRCMP - 963)) | (1L << (STR_TO_DATE - 963)) | (1L << (ST_AREA - 963)) | (1L << (ST_ASBINARY - 963)) | (1L << (ST_ASTEXT - 963)) | (1L << (ST_ASWKB - 963)) | (1L << (ST_ASWKT - 963)) | (1L << (ST_BUFFER - 963)) | (1L << (ST_CENTROID - 963)) | (1L << (ST_CONTAINS - 963)) | (1L << (ST_CROSSES - 963)) | (1L << (ST_DIFFERENCE - 963)) | (1L << (ST_DIMENSION - 963)) | (1L << (ST_DISJOINT - 963)) | (1L << (ST_DISTANCE - 963)) | (1L << (ST_ENDPOINT - 963)) | (1L << (ST_ENVELOPE - 963)) | (1L << (ST_EQUALS - 963)) | (1L << (ST_EXTERIORRING - 963)) | (1L << (ST_GEOMCOLLFROMTEXT - 963)) | (1L << (ST_GEOMCOLLFROMTXT - 963)) | (1L << (ST_GEOMCOLLFROMWKB - 963)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 963)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 963)) | (1L << (ST_GEOMETRYFROMTEXT - 963)) | (1L << (ST_GEOMETRYFROMWKB - 963)) | (1L << (ST_GEOMETRYN - 963)) | (1L << (ST_GEOMETRYTYPE - 963)) | (1L << (ST_GEOMFROMTEXT - 963)) | (1L << (ST_GEOMFROMWKB - 963)) | (1L << (ST_INTERIORRINGN - 963)) | (1L << (ST_INTERSECTION - 963)) | (1L << (ST_INTERSECTS - 963)) | (1L << (ST_ISCLOSED - 963)) | (1L << (ST_ISEMPTY - 963)) | (1L << (ST_ISSIMPLE - 963)) | (1L << (ST_LINEFROMTEXT - 963)) | (1L << (ST_LINEFROMWKB - 963)) | (1L << (ST_LINESTRINGFROMTEXT - 963)) | (1L << (ST_LINESTRINGFROMWKB - 963)) | (1L << (ST_NUMGEOMETRIES - 963)) | (1L << (ST_NUMINTERIORRING - 963)) | (1L << (ST_NUMINTERIORRINGS - 963)) | (1L << (ST_NUMPOINTS - 963)) | (1L << (ST_OVERLAPS - 963)) | (1L << (ST_POINTFROMTEXT - 963)))) != 0) || ((((_la - 1027)) & ~0x3f) == 0 && ((1L << (_la - 1027)) & ((1L << (ST_POINTFROMWKB - 1027)) | (1L << (ST_POINTN - 1027)) | (1L << (ST_POLYFROMTEXT - 1027)) | (1L << (ST_POLYFROMWKB - 1027)) | (1L << (ST_POLYGONFROMTEXT - 1027)) | (1L << (ST_POLYGONFROMWKB - 1027)) | (1L << (ST_SRID - 1027)) | (1L << (ST_STARTPOINT - 1027)) | (1L << (ST_SYMDIFFERENCE - 1027)) | (1L << (ST_TOUCHES - 1027)) | (1L << (ST_UNION - 1027)) | (1L << (ST_WITHIN - 1027)) | (1L << (ST_X - 1027)) | (1L << (ST_Y - 1027)) | (1L << (SUBDATE - 1027)) | (1L << (SUBSTRING_INDEX - 1027)) | (1L << (SUBTIME - 1027)) | (1L << (SYSTEM_USER - 1027)) | (1L << (TAN - 1027)) | (1L << (TIMEDIFF - 1027)) | (1L << (TIMESTAMPADD - 1027)) | (1L << (TIMESTAMPDIFF - 1027)) | (1L << (TIME_FORMAT - 1027)) | (1L << (TIME_TO_SEC - 1027)) | (1L << (TOUCHES - 1027)) | (1L << (TO_BASE64 - 1027)) | (1L << (TO_DAYS - 1027)) | (1L << (TO_SECONDS - 1027)) | (1L << (UCASE - 1027)) | (1L << (UNCOMPRESS - 1027)) | (1L << (UNCOMPRESSED_LENGTH - 1027)) | (1L << (UNHEX - 1027)) | (1L << (UNIX_TIMESTAMP - 1027)) | (1L << (UPDATEXML - 1027)) | (1L << (UPPER - 1027)) | (1L << (UUID - 1027)) | (1L << (UUID_SHORT - 1027)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1027)) | (1L << (VERSION - 1027)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1027)) | (1L << (WEEKDAY - 1027)) | (1L << (WEEKOFYEAR - 1027)) | (1L << (WEIGHT_STRING - 1027)) | (1L << (WITHIN - 1027)) | (1L << (YEARWEEK - 1027)) | (1L << (Y_FUNCTION - 1027)) | (1L << (X_FUNCTION - 1027)) | (1L << (LASTVAL - 1027)) | (1L << (NEXTVAL - 1027)) | (1L << (SETVAL - 1027)))) != 0) || _la==MOD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 324:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 325:
			return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 326:
			return expressionAtom_sempred((ExpressionAtomContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 8);
		case 2:
			return precpred(_ctx, 6);
		case 3:
			return precpred(_ctx, 5);
		case 4:
			return precpred(_ctx, 3);
		case 5:
			return precpred(_ctx, 10);
		case 6:
			return precpred(_ctx, 9);
		case 7:
			return precpred(_ctx, 7);
		case 8:
			return precpred(_ctx, 4);
		case 9:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean expressionAtom_sempred(ExpressionAtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return precpred(_ctx, 4);
		case 11:
			return precpred(_ctx, 3);
		case 12:
			return precpred(_ctx, 2);
		case 13:
			return precpred(_ctx, 13);
		}
		return true;
	}

	private static final String _serializedATNSegment0 =
		"\u0004\u0001\u0477\u1b8c\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"+
		"\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"+
		"\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"+
		"\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"+
		"\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"+
		"\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"+
		"\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"+
		"\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"+
		"\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"+
		"\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"+
		"\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"+
		"\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"+
		"\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"+
		"\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"+
		"\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"+
		"\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007"+
		"\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007"+
		"\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007"+
		"\u00b3\u0002\u00b4\u0007\u00b4\u0002\u00b5\u0007\u00b5\u0002\u00b6\u0007"+
		"\u00b6\u0002\u00b7\u0007\u00b7\u0002\u00b8\u0007\u00b8\u0002\u00b9\u0007"+
		"\u00b9\u0002\u00ba\u0007\u00ba\u0002\u00bb\u0007\u00bb\u0002\u00bc\u0007"+
		"\u00bc\u0002\u00bd\u0007\u00bd\u0002\u00be\u0007\u00be\u0002\u00bf\u0007"+
		"\u00bf\u0002\u00c0\u0007\u00c0\u0002\u00c1\u0007\u00c1\u0002\u00c2\u0007"+
		"\u00c2\u0002\u00c3\u0007\u00c3\u0002\u00c4\u0007\u00c4\u0002\u00c5\u0007"+
		"\u00c5\u0002\u00c6\u0007\u00c6\u0002\u00c7\u0007\u00c7\u0002\u00c8\u0007"+
		"\u00c8\u0002\u00c9\u0007\u00c9\u0002\u00ca\u0007\u00ca\u0002\u00cb\u0007"+
		"\u00cb\u0002\u00cc\u0007\u00cc\u0002\u00cd\u0007\u00cd\u0002\u00ce\u0007"+
		"\u00ce\u0002\u00cf\u0007\u00cf\u0002\u00d0\u0007\u00d0\u0002\u00d1\u0007"+
		"\u00d1\u0002\u00d2\u0007\u00d2\u0002\u00d3\u0007\u00d3\u0002\u00d4\u0007"+
		"\u00d4\u0002\u00d5\u0007\u00d5\u0002\u00d6\u0007\u00d6\u0002\u00d7\u0007"+
		"\u00d7\u0002\u00d8\u0007\u00d8\u0002\u00d9\u0007\u00d9\u0002\u00da\u0007"+
		"\u00da\u0002\u00db\u0007\u00db\u0002\u00dc\u0007\u00dc\u0002\u00dd\u0007"+
		"\u00dd\u0002\u00de\u0007\u00de\u0002\u00df\u0007\u00df\u0002\u00e0\u0007"+
		"\u00e0\u0002\u00e1\u0007\u00e1\u0002\u00e2\u0007\u00e2\u0002\u00e3\u0007"+
		"\u00e3\u0002\u00e4\u0007\u00e4\u0002\u00e5\u0007\u00e5\u0002\u00e6\u0007"+
		"\u00e6\u0002\u00e7\u0007\u00e7\u0002\u00e8\u0007\u00e8\u0002\u00e9\u0007"+
		"\u00e9\u0002\u00ea\u0007\u00ea\u0002\u00eb\u0007\u00eb\u0002\u00ec\u0007"+
		"\u00ec\u0002\u00ed\u0007\u00ed\u0002\u00ee\u0007\u00ee\u0002\u00ef\u0007"+
		"\u00ef\u0002\u00f0\u0007\u00f0\u0002\u00f1\u0007\u00f1\u0002\u00f2\u0007"+
		"\u00f2\u0002\u00f3\u0007\u00f3\u0002\u00f4\u0007\u00f4\u0002\u00f5\u0007"+
		"\u00f5\u0002\u00f6\u0007\u00f6\u0002\u00f7\u0007\u00f7\u0002\u00f8\u0007"+
		"\u00f8\u0002\u00f9\u0007\u00f9\u0002\u00fa\u0007\u00fa\u0002\u00fb\u0007"+
		"\u00fb\u0002\u00fc\u0007\u00fc\u0002\u00fd\u0007\u00fd\u0002\u00fe\u0007"+
		"\u00fe\u0002\u00ff\u0007\u00ff\u0002\u0100\u0007\u0100\u0002\u0101\u0007"+
		"\u0101\u0002\u0102\u0007\u0102\u0002\u0103\u0007\u0103\u0002\u0104\u0007"+
		"\u0104\u0002\u0105\u0007\u0105\u0002\u0106\u0007\u0106\u0002\u0107\u0007"+
		"\u0107\u0002\u0108\u0007\u0108\u0002\u0109\u0007\u0109\u0002\u010a\u0007"+
		"\u010a\u0002\u010b\u0007\u010b\u0002\u010c\u0007\u010c\u0002\u010d\u0007"+
		"\u010d\u0002\u010e\u0007\u010e\u0002\u010f\u0007\u010f\u0002\u0110\u0007"+
		"\u0110\u0002\u0111\u0007\u0111\u0002\u0112\u0007\u0112\u0002\u0113\u0007"+
		"\u0113\u0002\u0114\u0007\u0114\u0002\u0115\u0007\u0115\u0002\u0116\u0007"+
		"\u0116\u0002\u0117\u0007\u0117\u0002\u0118\u0007\u0118\u0002\u0119\u0007"+
		"\u0119\u0002\u011a\u0007\u011a\u0002\u011b\u0007\u011b\u0002\u011c\u0007"+
		"\u011c\u0002\u011d\u0007\u011d\u0002\u011e\u0007\u011e\u0002\u011f\u0007"+
		"\u011f\u0002\u0120\u0007\u0120\u0002\u0121\u0007\u0121\u0002\u0122\u0007"+
		"\u0122\u0002\u0123\u0007\u0123\u0002\u0124\u0007\u0124\u0002\u0125\u0007"+
		"\u0125\u0002\u0126\u0007\u0126\u0002\u0127\u0007\u0127\u0002\u0128\u0007"+
		"\u0128\u0002\u0129\u0007\u0129\u0002\u012a\u0007\u012a\u0002\u012b\u0007"+
		"\u012b\u0002\u012c\u0007\u012c\u0002\u012d\u0007\u012d\u0002\u012e\u0007"+
		"\u012e\u0002\u012f\u0007\u012f\u0002\u0130\u0007\u0130\u0002\u0131\u0007"+
		"\u0131\u0002\u0132\u0007\u0132\u0002\u0133\u0007\u0133\u0002\u0134\u0007"+
		"\u0134\u0002\u0135\u0007\u0135\u0002\u0136\u0007\u0136\u0002\u0137\u0007"+
		"\u0137\u0002\u0138\u0007\u0138\u0002\u0139\u0007\u0139\u0002\u013a\u0007"+
		"\u013a\u0002\u013b\u0007\u013b\u0002\u013c\u0007\u013c\u0002\u013d\u0007"+
		"\u013d\u0002\u013e\u0007\u013e\u0002\u013f\u0007\u013f\u0002\u0140\u0007"+
		"\u0140\u0002\u0141\u0007\u0141\u0002\u0142\u0007\u0142\u0002\u0143\u0007"+
		"\u0143\u0002\u0144\u0007\u0144\u0002\u0145\u0007\u0145\u0002\u0146\u0007"+
		"\u0146\u0002\u0147\u0007\u0147\u0002\u0148\u0007\u0148\u0002\u0149\u0007"+
		"\u0149\u0002\u014a\u0007\u014a\u0002\u014b\u0007\u014b\u0002\u014c\u0007"+
		"\u014c\u0002\u014d\u0007\u014d\u0002\u014e\u0007\u014e\u0002\u014f\u0007"+
		"\u014f\u0002\u0150\u0007\u0150\u0002\u0151\u0007\u0151\u0002\u0152\u0007"+
		"\u0152\u0002\u0153\u0007\u0153\u0002\u0154\u0007\u0154\u0001\u0000\u0003"+
		"\u0000\u02ac\b\u0000\u0001\u0000\u0001\u0000\u0003\u0000\u02b0\b\u0000"+
		"\u0001\u0000\u0001\u0000\u0001\u0001\u0001\u0001\u0001\u0001\u0003\u0001"+
		"\u02b7\b\u0001\u0001\u0001\u0003\u0001\u02ba\b\u0001\u0001\u0001\u0005"+
		"\u0001\u02bd\b\u0001\n\u0001\f\u0001\u02c0\t\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0003\u0001\u02c5\b\u0001\u0001\u0001\u0003\u0001\u02c8\b"+
		"\u0001\u0001\u0001\u0003\u0001\u02cb\b\u0001\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0003\u0002\u02d4"+
		"\b\u0002\u0001\u0003\u0001\u0003\u0001\u0004\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0003\u0004\u02fe"+
		"\b\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001"+
		"\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0003\u0005\u030a"+
		"\b\u0005\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001"+
		"\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0003\u0006\u0315\b\u0006\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0326\b\u0007\u0001\b\u0001"+
		"\b\u0001\b\u0003\b\u032b\b\b\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0001\t\u0001\t\u0001\t\u0003\t\u0337\b\t\u0001\n\u0001\n\u0001"+
		"\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001"+
		"\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001"+
		"\n\u0001\n\u0001\n\u0001\n\u0001\n\u0003\n\u0352\b\n\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0003"+
		"\u000b\u035b\b\u000b\u0001\f\u0001\f\u0001\f\u0003\f\u0360\b\f\u0001\f"+
		"\u0001\f\u0005\f\u0364\b\f\n\f\f\f\u0367\t\f\u0001\r\u0001\r\u0003\r\u036b"+
		"\b\r\u0001\r\u0001\r\u0003\r\u036f\b\r\u0001\r\u0001\r\u0001\r\u0001\r"+
		"\u0001\r\u0001\r\u0001\r\u0003\r\u0378\b\r\u0001\r\u0003\r\u037b\b\r\u0001"+
		"\r\u0003\r\u037e\b\r\u0001\r\u0001\r\u0003\r\u0382\b\r\u0001\r\u0001\r"+
		"\u0001\r\u0001\u000e\u0001\u000e\u0001\u000e\u0003\u000e\u038a\b\u000e"+
		"\u0001\u000e\u0003\u000e\u038d\b\u000e\u0001\u000e\u0003\u000e\u0390\b"+
		"\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0003\u000e\u0396"+
		"\b\u000e\u0001\u000e\u0001\u000e\u0003\u000e\u039a\b\u000e\u0001\u000e"+
		"\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0003\u000e"+
		"\u03a2\b\u000e\u0001\u000e\u0005\u000e\u03a5\b\u000e\n\u000e\f\u000e\u03a8"+
		"\t\u000e\u0001\u000e\u0001\u000e\u0003\u000e\u03ac\b\u000e\u0001\u000e"+
		"\u0001\u000e\u0001\u000e\u0003\u000e\u03b1\b\u000e\u0001\u000e\u0005\u000e"+
		"\u03b4\b\u000e\n\u000e\f\u000e\u03b7\t\u000e\u0001\u000f\u0001\u000f\u0001"+
		"\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001"+
		"\u000f\u0003\u000f\u03c2\b\u000f\u0001\u000f\u0003\u000f\u03c5\b\u000f"+
		"\u0001\u000f\u0001\u000f\u0003\u000f\u03c9\b\u000f\u0001\u000f\u0003\u000f"+
		"\u03cc\b\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u03d0\b\u000f\u0001"+
		"\u000f\u0003\u000f\u03d3\b\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u03d7"+
		"\b\u000f\u0001\u000f\u0003\u000f\u03da\b\u000f\u0001\u000f\u0003\u000f"+
		"\u03dd\b\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u03e1\b\u000f\u0001"+
		"\u000f\u0003\u000f\u03e4\b\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u03e8"+
		"\b\u000f\u0001\u000f\u0001\u000f\u0001\u0010\u0001\u0010\u0003\u0010\u03ee"+
		"\b\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0003\u0010\u03f4"+
		"\b\u0010\u0001\u0010\u0001\u0010\u0005\u0010\u03f8\b\u0010\n\u0010\f\u0010"+
		"\u03fb\t\u0010\u0001\u0010\u0001\u0010\u0005\u0010\u03ff\b\u0010\n\u0010"+
		"\f\u0010\u0402\t\u0010\u0001\u0010\u0001\u0010\u0001\u0011\u0001\u0011"+
		"\u0003\u0011\u0408\b\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011"+
		"\u0003\u0011\u040e\b\u0011\u0001\u0011\u0001\u0011\u0005\u0011\u0412\b"+
		"\u0011\n\u0011\f\u0011\u0415\t\u0011\u0001\u0011\u0001\u0011\u0001\u0011"+
		"\u0001\u0011\u0005\u0011\u041b\b\u0011\n\u0011\f\u0011\u041e\t\u0011\u0001"+
		"\u0011\u0001\u0011\u0003\u0011\u0422\b\u0011\u0001\u0012\u0001\u0012\u0001"+
		"\u0012\u0001\u0012\u0001\u0012\u0003\u0012\u0429\b\u0012\u0001\u0012\u0001"+
		"\u0012\u0001\u0012\u0005\u0012\u042e\b\u0012\n\u0012\f\u0012\u0431\t\u0012"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0005\u0013\u043f\b\u0013\n\u0013\f\u0013\u0442\t\u0013\u0001\u0013\u0001"+
		"\u0013\u0001\u0014\u0001\u0014\u0001\u0014\u0003\u0014\u0449\b\u0014\u0001"+
		"\u0014\u0003\u0014\u044c\b\u0014\u0001\u0014\u0001\u0014\u0003\u0014\u0450"+
		"\b\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001"+
		"\u0014\u0001\u0014\u0001\u0014\u0003\u0014\u045a\b\u0014\u0001\u0014\u0001"+
		"\u0014\u0001\u0014\u0003\u0014\u045f\b\u0014\u0001\u0014\u0003\u0014\u0462"+
		"\b\u0014\u0001\u0014\u0001\u0014\u0003\u0014\u0466\b\u0014\u0001\u0014"+
		"\u0001\u0014\u0003\u0014\u046a\b\u0014\u0001\u0014\u0001\u0014\u0003\u0014"+
		"\u046e\b\u0014\u0001\u0014\u0005\u0014\u0471\b\u0014\n\u0014\f\u0014\u0474"+
		"\t\u0014\u0003\u0014\u0476\b\u0014\u0001\u0014\u0003\u0014\u0479\b\u0014"+
		"\u0001\u0014\u0003\u0014\u047c\b\u0014\u0001\u0014\u0003\u0014\u047f\b"+
		"\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0003"+
		"\u0014\u0486\b\u0014\u0001\u0014\u0003\u0014\u0489\b\u0014\u0001\u0014"+
		"\u0001\u0014\u0003\u0014\u048d\b\u0014\u0001\u0014\u0001\u0014\u0001\u0014"+
		"\u0001\u0014\u0003\u0014\u0493\b\u0014\u0001\u0014\u0005\u0014\u0496\b"+
		"\u0014\n\u0014\f\u0014\u0499\t\u0014\u0003\u0014\u049b\b\u0014\u0001\u0014"+
		"\u0003\u0014\u049e\b\u0014\u0003\u0014\u04a0\b\u0014\u0001\u0015\u0001"+
		"\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001"+
		"\u0015\u0001\u0015\u0003\u0015\u04ab\b\u0015\u0001\u0015\u0001\u0015\u0003"+
		"\u0015\u04af\b\u0015\u0001\u0015\u0003\u0015\u04b2\b\u0015\u0001\u0016"+
		"\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016"+
		"\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0003\u0016"+
		"\u04c0\b\u0016\u0001\u0016\u0003\u0016\u04c3\b\u0016\u0001\u0016\u0001"+
		"\u0016\u0003\u0016\u04c7\b\u0016\u0001\u0016\u0003\u0016\u04ca\b\u0016"+
		"\u0001\u0016\u0001\u0016\u0003\u0016\u04ce\b\u0016\u0001\u0016\u0003\u0016"+
		"\u04d1\b\u0016\u0001\u0016\u0001\u0016\u0003\u0016\u04d5\b\u0016\u0001"+
		"\u0016\u0003\u0016\u04d8\b\u0016\u0001\u0016\u0001\u0016\u0003\u0016\u04dc"+
		"\b\u0016\u0001\u0016\u0003\u0016\u04df\b\u0016\u0001\u0016\u0003\u0016"+
		"\u04e2\b\u0016\u0001\u0016\u0001\u0016\u0003\u0016\u04e6\b\u0016\u0001"+
		"\u0016\u0003\u0016\u04e9\b\u0016\u0001\u0016\u0001\u0016\u0003\u0016\u04ed"+
		"\b\u0016\u0001\u0016\u0001\u0016\u0001\u0017\u0001\u0017\u0001\u0017\u0003"+
		"\u0017\u04f4\b\u0017\u0001\u0017\u0003\u0017\u04f7\b\u0017\u0001\u0017"+
		"\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017"+
		"\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0003\u0017\u0504\b\u0017"+
		"\u0001\u0017\u0001\u0017\u0001\u0018\u0001\u0018\u0003\u0018\u050a\b\u0018"+
		"\u0001\u0018\u0001\u0018\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019"+
		"\u0001\u0019\u0005\u0019\u0513\b\u0019\n\u0019\f\u0019\u0516\t\u0019\u0001"+
		"\u0019\u0001\u0019\u0003\u0019\u051a\b\u0019\u0001\u0019\u0001\u0019\u0001"+
		"\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u0522\b\u0019\u0001"+
		"\u001a\u0001\u001a\u0001\u001b\u0001\u001b\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0003\u001c\u052b\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003"+
		"\u001c\u0530\b\u001c\u0001\u001c\u0003\u001c\u0533\b\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0003\u001c\u0538\b\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0540\b\u001c"+
		"\u0001\u001c\u0001\u001c\u0003\u001c\u0544\b\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0003\u001c\u0549\b\u001c\u0001\u001c\u0001\u001c\u0003\u001c"+
		"\u054d\b\u001c\u0001\u001d\u0003\u001d\u0550\b\u001d\u0001\u001d\u0001"+
		"\u001d\u0003\u001d\u0554\b\u001d\u0001\u001d\u0001\u001d\u0003\u001d\u0558"+
		"\b\u001d\u0001\u001d\u0003\u001d\u055b\b\u001d\u0001\u001d\u0001\u001d"+
		"\u0003\u001d\u055f\b\u001d\u0001\u001d\u0003\u001d\u0562\b\u001d\u0001"+
		"\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0003\u001e\u0569"+
		"\b\u001e\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001"+
		"\u001f\u0003\u001f\u0571\b\u001f\u0003\u001f\u0573\b\u001f\u0001 \u0001"+
		" \u0001 \u0005 \u0578\b \n \f \u057b\t \u0001 \u0001 \u0001 \u0003 \u0580"+
		"\b \u0001 \u0001 \u0001 \u0001 \u0005 \u0586\b \n \f \u0589\t \u0003 "+
		"\u058b\b \u0001 \u0001 \u0001 \u0005 \u0590\b \n \f \u0593\t \u0003 \u0595"+
		"\b \u0003 \u0597\b \u0001!\u0001!\u0001!\u0001!\u0003!\u059d\b!\u0001"+
		"\"\u0001\"\u0001\"\u0001\"\u0003\"\u05a3\b\"\u0001\"\u0001\"\u0001#\u0001"+
		"#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001"+
		"#\u0001#\u0003#\u05b4\b#\u0001$\u0001$\u0001$\u0001$\u0001$\u0003$\u05bb"+
		"\b$\u0001%\u0001%\u0001%\u0001&\u0001&\u0003&\u05c2\b&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0003&\u05ce\b&\u0001"+
		"&\u0001&\u0001&\u0003&\u05d3\b&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0003&\u05dc\b&\u0003&\u05de\b&\u0001\'\u0003\'\u05e1\b\'\u0001"+
		"\'\u0001\'\u0001\'\u0001(\u0001(\u0001(\u0001)\u0001)\u0001)\u0001)\u0001"+
		")\u0003)\u05ee\b)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001"+
		")\u0001)\u0001)\u0001)\u0003)\u05fb\b)\u0001)\u0001)\u0001)\u0003)\u0600"+
		"\b)\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001"+
		"*\u0001*\u0001*\u0001*\u0001*\u0003*\u0610\b*\u0001+\u0001+\u0001+\u0001"+
		"+\u0005+\u0616\b+\n+\f+\u0619\t+\u0001+\u0001+\u0001,\u0001,\u0001,\u0001"+
		",\u0001,\u0003,\u0622\b,\u0001-\u0001-\u0005-\u0626\b-\n-\f-\u0629\t-"+
		"\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0003"+
		".\u0634\b.\u0001.\u0003.\u0637\b.\u0001.\u0001.\u0001.\u0003.\u063c\b"+
		".\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001"+
		".\u0001.\u0003.\u0649\b.\u0001.\u0001.\u0001.\u0001.\u0001.\u0003.\u0650"+
		"\b.\u0001.\u0001.\u0001.\u0001.\u0001.\u0003.\u0657\b.\u0003.\u0659\b"+
		".\u0001.\u0001.\u0001.\u0001.\u0001.\u0003.\u0660\b.\u0001/\u0001/\u0003"+
		"/\u0664\b/\u0003/\u0666\b/\u0001/\u0001/\u0001/\u0003/\u066b\b/\u0001"+
		"/\u0003/\u066e\b/\u0001/\u0001/\u0005/\u0672\b/\n/\f/\u0675\t/\u0001/"+
		"\u0001/\u0003/\u0679\b/\u0003/\u067b\b/\u0001/\u0001/\u0003/\u067f\b/"+
		"\u0001/\u0003/\u0682\b/\u0001/\u0003/\u0685\b/\u0001/\u0001/\u0005/\u0689"+
		"\b/\n/\f/\u068c\t/\u0001/\u0001/\u0003/\u0690\b/\u0003/\u0692\b/\u0001"+
		"/\u0001/\u0001/\u0003/\u0697\b/\u0001/\u0001/\u0001/\u0001/\u0001/\u0003"+
		"/\u069e\b/\u0003/\u06a0\b/\u0001/\u0001/\u0001/\u0001/\u0001/\u0003/\u06a7"+
		"\b/\u00010\u00010\u00010\u00030\u06ac\b0\u00010\u00010\u00030\u06b0\b"+
		"0\u00010\u00030\u06b3\b0\u00011\u00011\u00011\u00011\u00011\u00011\u0003"+
		"1\u06bb\b1\u00011\u00011\u00011\u00011\u00011\u00011\u00031\u06c3\b1\u0003"+
		"1\u06c5\b1\u00012\u00012\u00012\u00012\u00012\u00012\u00032\u06cd\b2\u0001"+
		"3\u00013\u00033\u06d1\b3\u00013\u00033\u06d4\b3\u00013\u00013\u00053\u06d8"+
		"\b3\n3\f3\u06db\t3\u00013\u00013\u00033\u06df\b3\u00013\u00033\u06e2\b"+
		"3\u00013\u00013\u00053\u06e6\b3\n3\f3\u06e9\t3\u00033\u06eb\b3\u00014"+
		"\u00014\u00034\u06ef\b4\u00014\u00034\u06f2\b4\u00014\u00014\u00034\u06f6"+
		"\b4\u00014\u00014\u00014\u00034\u06fb\b4\u00014\u00014\u00034\u06ff\b"+
		"4\u00014\u00014\u00034\u0703\b4\u00014\u00014\u00034\u0707\b4\u00014\u0001"+
		"4\u00034\u070b\b4\u00014\u00014\u00034\u070f\b4\u00014\u00014\u00034\u0713"+
		"\b4\u00014\u00014\u00014\u00034\u0718\b4\u00014\u00014\u00014\u00034\u071d"+
		"\b4\u00014\u00014\u00014\u00034\u0722\b4\u00014\u00014\u00014\u00014\u0003"+
		"4\u0728\b4\u00014\u00014\u00014\u00034\u072d\b4\u00014\u00014\u00014\u0003"+
		"4\u0732\b4\u00014\u00014\u00014\u00014\u00034\u0738\b4\u00014\u00014\u0001"+
		"4\u00034\u073d\b4\u00014\u00014\u00014\u00034\u0742\b4\u00014\u00014\u0001"+
		"4\u00034\u0747\b4\u00014\u00014\u00014\u00034\u074c\b4\u00014\u00014\u0001"+
		"4\u00034\u0751\b4\u00014\u00014\u00014\u00034\u0756\b4\u00014\u00014\u0001"+
		"4\u00034\u075b\b4\u00014\u00014\u00014\u00034\u0760\b4\u00014\u00014\u0001"+
		"4\u00034\u0765\b4\u00014\u00014\u00014\u00034\u076a\b4\u00014\u00014\u0001"+
		"4\u00014\u00034\u0770\b4\u00014\u00014\u00014\u00014\u00014\u00014\u0003"+
		"4\u0778\b4\u00014\u00014\u00014\u00014\u00034\u077e\b4\u00015\u00015\u0001"+
		"6\u00016\u00016\u00017\u00017\u00017\u00017\u00017\u00037\u078a\b7\u0001"+
		"7\u00017\u00017\u00017\u00017\u00037\u0791\b7\u00037\u0793\b7\u00017\u0001"+
		"7\u00017\u00017\u00057\u0799\b7\n7\f7\u079c\t7\u00017\u00017\u00037\u07a0"+
		"\b7\u00018\u00038\u07a3\b8\u00018\u00018\u00018\u00018\u00018\u00018\u0003"+
		"8\u07ab\b8\u00018\u00018\u00018\u00018\u00038\u07b1\b8\u00018\u00018\u0001"+
		"8\u00018\u00018\u00018\u00018\u00018\u00018\u00018\u00018\u00018\u0001"+
		"8\u00018\u00038\u07c1\b8\u00018\u00018\u00018\u00018\u00018\u00018\u0001"+
		"8\u00018\u00018\u00018\u00038\u07cd\b8\u00038\u07cf\b8\u00019\u00039\u07d2"+
		"\b9\u00019\u00019\u00019\u00019\u00019\u00019\u00039\u07da\b9\u00019\u0001"+
		"9\u00019\u00019\u00039\u07e0\b9\u00019\u00019\u00019\u00019\u00039\u07e6"+
		"\b9\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0005"+
		":\u07f1\b:\n:\f:\u07f4\t:\u0001:\u0001:\u0005:\u07f8\b:\n:\f:\u07fb\t"+
		":\u0001:\u0001:\u0001:\u0001:\u0005:\u0801\b:\n:\f:\u0804\t:\u0001:\u0001"+
		":\u0003:\u0808\b:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0005"+
		":\u0811\b:\n:\f:\u0814\t:\u0001:\u0001:\u0001:\u0001:\u0005:\u081a\b:"+
		"\n:\f:\u081d\t:\u0001:\u0001:\u0003:\u0821\b:\u0001:\u0001:\u0001:\u0001"+
		":\u0001:\u0001:\u0001:\u0001:\u0005:\u082b\b:\n:\f:\u082e\t:\u0001:\u0001"+
		":\u0005:\u0832\b:\n:\f:\u0835\t:\u0001:\u0001:\u0001:\u0001:\u0005:\u083b"+
		"\b:\n:\f:\u083e\t:\u0001:\u0001:\u0003:\u0842\b:\u0001:\u0001:\u0001:"+
		"\u0001:\u0001:\u0001:\u0001:\u0001:\u0005:\u084c\b:\n:\f:\u084f\t:\u0001"+
		":\u0001:\u0005:\u0853\b:\n:\f:\u0856\t:\u0001:\u0001:\u0001:\u0001:\u0005"+
		":\u085c\b:\n:\f:\u085f\t:\u0001:\u0001:\u0003:\u0863\b:\u0001:\u0001:"+
		"\u0001:\u0005:\u0868\b:\n:\f:\u086b\t:\u0001:\u0001:\u0001:\u0001:\u0005"+
		":\u0871\b:\n:\f:\u0874\t:\u0001:\u0001:\u0003:\u0878\b:\u0003:\u087a\b"+
		":\u0001;\u0001;\u0001;\u0003;\u087f\b;\u0001<\u0001<\u0001<\u0001<\u0004"+
		"<\u0885\b<\u000b<\f<\u0886\u0001<\u0001<\u0001=\u0001=\u0001=\u0005=\u088e"+
		"\b=\n=\f=\u0891\t=\u0001>\u0003>\u0894\b>\u0001>\u0003>\u0897\b>\u0001"+
		">\u0001>\u0003>\u089b\b>\u0001>\u0001>\u0001>\u0003>\u08a0\b>\u0001>\u0001"+
		">\u0001>\u0001>\u0003>\u08a6\b>\u0001>\u0001>\u0001>\u0001>\u0003>\u08ac"+
		"\b>\u0001>\u0001>\u0001>\u0003>\u08b1\b>\u0001>\u0001>\u0001>\u0003>\u08b6"+
		"\b>\u0001>\u0001>\u0001>\u0003>\u08bb\b>\u0001>\u0001>\u0001>\u0003>\u08c0"+
		"\b>\u0001>\u0003>\u08c3\b>\u0001?\u0001?\u0001?\u0003?\u08c8\b?\u0001"+
		"?\u0004?\u08cb\b?\u000b?\f?\u08cc\u0001?\u0001?\u0001?\u0001?\u0001?\u0001"+
		"?\u0001?\u0001?\u0003?\u08d7\b?\u0001@\u0001@\u0003@\u08db\b@\u0001@\u0001"+
		"@\u0001@\u0001@\u0001@\u0003@\u08e2\b@\u0001@\u0001@\u0001@\u0003@\u08e7"+
		"\b@\u0001@\u0003@\u08ea\b@\u0001@\u0001@\u0001@\u0003@\u08ef\b@\u0001"+
		"@\u0003@\u08f2\b@\u0001@\u0001@\u0003@\u08f6\b@\u0001@\u0001@\u0003@\u08fa"+
		"\b@\u0001A\u0001A\u0001A\u0001A\u0005A\u0900\bA\nA\fA\u0903\tA\u0001B"+
		"\u0001B\u0001B\u0001B\u0001B\u0001B\u0001B\u0001C\u0001C\u0001C\u0001"+
		"C\u0001C\u0001C\u0001C\u0001C\u0001C\u0003C\u0915\bC\u0001C\u0003C\u0918"+
		"\bC\u0001C\u0003C\u091b\bC\u0001C\u0001C\u0003C\u091f\bC\u0001C\u0001"+
		"C\u0001D\u0001D\u0001D\u0001D\u0005D\u0927\bD\nD\fD\u092a\tD\u0001E\u0001"+
		"E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0005E\u0934\bE\nE\fE\u0937"+
		"\tE\u0001E\u0001E\u0001F\u0001F\u0003F\u093d\bF\u0001F\u0003F\u0940\b"+
		"F\u0001F\u0001F\u0001F\u0001F\u0001F\u0005F\u0947\bF\nF\fF\u094a\tF\u0003"+
		"F\u094c\bF\u0001F\u0003F\u094f\bF\u0001G\u0001G\u0001G\u0001G\u0001G\u0001"+
		"G\u0001G\u0001G\u0001G\u0003G\u095a\bG\u0001G\u0003G\u095d\bG\u0001G\u0001"+
		"G\u0003G\u0961\bG\u0001G\u0001G\u0001H\u0001H\u0001H\u0001H\u0003H\u0969"+
		"\bH\u0001H\u0003H\u096c\bH\u0001H\u0001H\u0001H\u0003H\u0971\bH\u0001"+
		"H\u0001H\u0001H\u0001H\u0001H\u0001H\u0003H\u0979\bH\u0001H\u0001H\u0001"+
		"H\u0001H\u0003H\u097f\bH\u0001H\u0001H\u0003H\u0983\bH\u0001I\u0001I\u0003"+
		"I\u0987\bI\u0001I\u0005I\u098a\bI\nI\fI\u098d\tI\u0001I\u0001I\u0003I"+
		"\u0991\bI\u0001I\u0003I\u0994\bI\u0001I\u0001I\u0001I\u0001I\u0001I\u0003"+
		"I\u099b\bI\u0001I\u0001I\u0003I\u099f\bI\u0001I\u0003I\u09a2\bI\u0001"+
		"I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0005I\u09ab\bI\nI\fI\u09ae"+
		"\tI\u0001I\u0001I\u0001I\u0001I\u0001I\u0003I\u09b5\bI\u0001I\u0003I\u09b8"+
		"\bI\u0001I\u0003I\u09bb\bI\u0001I\u0001I\u0005I\u09bf\bI\nI\fI\u09c2\t"+
		"I\u0001I\u0001I\u0001I\u0003I\u09c7\bI\u0003I\u09c9\bI\u0001I\u0001I\u0001"+
		"I\u0003I\u09ce\bI\u0001I\u0003I\u09d1\bI\u0001I\u0001I\u0005I\u09d5\b"+
		"I\nI\fI\u09d8\tI\u0001I\u0001I\u0001I\u0003I\u09dd\bI\u0003I\u09df\bI"+
		"\u0001I\u0001I\u0003I\u09e3\bI\u0001I\u0003I\u09e6\bI\u0001I\u0003I\u09e9"+
		"\bI\u0001I\u0001I\u0005I\u09ed\bI\nI\fI\u09f0\tI\u0001I\u0001I\u0001I"+
		"\u0003I\u09f5\bI\u0001I\u0003I\u09f8\bI\u0001I\u0001I\u0005I\u09fc\bI"+
		"\nI\fI\u09ff\tI\u0001I\u0001I\u0001I\u0003I\u0a04\bI\u0003I\u0a06\bI\u0001"+
		"I\u0001I\u0001I\u0003I\u0a0b\bI\u0001I\u0003I\u0a0e\bI\u0001I\u0001I\u0001"+
		"I\u0001I\u0001I\u0001I\u0003I\u0a16\bI\u0003I\u0a18\bI\u0001I\u0001I\u0001"+
		"I\u0001I\u0001I\u0001I\u0001I\u0003I\u0a21\bI\u0001I\u0001I\u0001I\u0003"+
		"I\u0a26\bI\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0003I\u0a2e\bI\u0001"+
		"I\u0001I\u0003I\u0a32\bI\u0001I\u0003I\u0a35\bI\u0001I\u0001I\u0001I\u0001"+
		"I\u0001I\u0001I\u0003I\u0a3d\bI\u0001I\u0001I\u0001I\u0001I\u0001I\u0001"+
		"I\u0001I\u0001I\u0003I\u0a47\bI\u0001I\u0001I\u0001I\u0003I\u0a4c\bI\u0001"+
		"I\u0003I\u0a4f\bI\u0001I\u0001I\u0001I\u0001I\u0001I\u0003I\u0a56\bI\u0001"+
		"I\u0001I\u0003I\u0a5a\bI\u0001I\u0003I\u0a5d\bI\u0001I\u0001I\u0003I\u0a61"+
		"\bI\u0001I\u0001I\u0001I\u0003I\u0a66\bI\u0001I\u0001I\u0001I\u0001I\u0001"+
		"I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001"+
		"I\u0001I\u0001I\u0001I\u0003I\u0a7a\bI\u0001I\u0001I\u0001I\u0001I\u0001"+
		"I\u0003I\u0a81\bI\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0003"+
		"I\u0a8a\bI\u0001I\u0001I\u0003I\u0a8e\bI\u0001I\u0001I\u0001I\u0001I\u0001"+
		"I\u0001I\u0001I\u0001I\u0001I\u0001I\u0003I\u0a9a\bI\u0001I\u0003I\u0a9d"+
		"\bI\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0003I\u0aa6\bI\u0001"+
		"I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0003"+
		"I\u0ab2\bI\u0001I\u0001I\u0001I\u0001I\u0005I\u0ab8\bI\nI\fI\u0abb\tI"+
		"\u0001I\u0001I\u0001I\u0001I\u0001I\u0003I\u0ac2\bI\u0001I\u0001I\u0001"+
		"I\u0001I\u0001I\u0003I\u0ac9\bI\u0001I\u0001I\u0001I\u0001I\u0001I\u0003"+
		"I\u0ad0\bI\u0001I\u0001I\u0001I\u0001I\u0001I\u0003I\u0ad7\bI\u0001I\u0001"+
		"I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0005"+
		"I\u0ae4\bI\nI\fI\u0ae7\tI\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001"+
		"I\u0001I\u0001I\u0001I\u0003I\u0af3\bI\u0001I\u0001I\u0001I\u0001I\u0003"+
		"I\u0af9\bI\u0001I\u0001I\u0001I\u0001I\u0003I\u0aff\bI\u0001I\u0001I\u0001"+
		"I\u0001I\u0003I\u0b05\bI\u0001I\u0001I\u0001I\u0001I\u0003I\u0b0b\bI\u0001"+
		"I\u0001I\u0001I\u0001I\u0003I\u0b11\bI\u0001I\u0001I\u0001I\u0001I\u0003"+
		"I\u0b17\bI\u0001J\u0001J\u0001J\u0003J\u0b1c\bJ\u0001J\u0001J\u0001K\u0001"+
		"K\u0001K\u0003K\u0b23\bK\u0001K\u0001K\u0001L\u0001L\u0001L\u0003L\u0b2a"+
		"\bL\u0001L\u0001L\u0001L\u0001L\u0001L\u0003L\u0b31\bL\u0001L\u0001L\u0001"+
		"L\u0003L\u0b36\bL\u0001L\u0005L\u0b39\bL\nL\fL\u0b3c\tL\u0001M\u0001M"+
		"\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001N\u0001N\u0001N\u0003"+
		"N\u0b49\bN\u0001N\u0001N\u0001O\u0001O\u0001O\u0003O\u0b50\bO\u0001O\u0001"+
		"O\u0001P\u0001P\u0001P\u0003P\u0b57\bP\u0001P\u0001P\u0001Q\u0001Q\u0003"+
		"Q\u0b5d\bQ\u0001Q\u0001Q\u0003Q\u0b61\bQ\u0001Q\u0001Q\u0003Q\u0b65\b"+
		"Q\u0001R\u0001R\u0001R\u0001R\u0001R\u0003R\u0b6c\bR\u0001R\u0003R\u0b6f"+
		"\bR\u0001S\u0001S\u0001S\u0003S\u0b74\bS\u0001S\u0001S\u0001T\u0001T\u0001"+
		"T\u0003T\u0b7b\bT\u0001T\u0001T\u0001T\u0005T\u0b80\bT\nT\fT\u0b83\tT"+
		"\u0001T\u0003T\u0b86\bT\u0001U\u0001U\u0001U\u0003U\u0b8b\bU\u0001U\u0001"+
		"U\u0001U\u0005U\u0b90\bU\nU\fU\u0b93\tU\u0001V\u0001V\u0001V\u0001V\u0001"+
		"V\u0001V\u0001V\u0001V\u0005V\u0b9d\bV\nV\fV\u0ba0\tV\u0003V\u0ba2\bV"+
		"\u0001V\u0001V\u0001V\u0003V\u0ba7\bV\u0001V\u0001V\u0001V\u0003V\u0bac"+
		"\bV\u0005V\u0bae\bV\nV\fV\u0bb1\tV\u0001V\u0001V\u0001V\u0003V\u0bb6\b"+
		"V\u0001W\u0001W\u0001W\u0001W\u0001W\u0005W\u0bbd\bW\nW\fW\u0bc0\tW\u0001"+
		"X\u0001X\u0001X\u0001X\u0001Y\u0001Y\u0003Y\u0bc8\bY\u0001Y\u0001Y\u0001"+
		"Z\u0001Z\u0001Z\u0001Z\u0001Z\u0003Z\u0bd1\bZ\u0001Z\u0003Z\u0bd4\bZ\u0001"+
		"[\u0001[\u0003[\u0bd8\b[\u0001\\\u0001\\\u0001\\\u0001]\u0001]\u0001]"+
		"\u0001]\u0003]\u0be1\b]\u0001^\u0001^\u0003^\u0be5\b^\u0001^\u0003^\u0be8"+
		"\b^\u0001^\u0003^\u0beb\b^\u0001^\u0001^\u0001^\u0001^\u0003^\u0bf1\b"+
		"^\u0001^\u0003^\u0bf4\b^\u0001^\u0001^\u0001^\u0001^\u0003^\u0bfa\b^\u0001"+
		"^\u0001^\u0001^\u0001^\u0001^\u0005^\u0c01\b^\n^\f^\u0c04\t^\u0003^\u0c06"+
		"\b^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0005^\u0c0f\b^\n"+
		"^\f^\u0c12\t^\u0003^\u0c14\b^\u0001_\u0001_\u0001_\u0003_\u0c19\b_\u0001"+
		"_\u0003_\u0c1c\b_\u0001_\u0001_\u0001_\u0003_\u0c21\b_\u0001_\u0001_\u0001"+
		"_\u0001_\u0001_\u0001_\u0001_\u0001_\u0003_\u0c2b\b_\u0001_\u0001_\u0001"+
		"_\u0003_\u0c30\b_\u0001_\u0001_\u0004_\u0c34\b_\u000b_\f_\u0c35\u0003"+
		"_\u0c38\b_\u0001_\u0001_\u0004_\u0c3c\b_\u000b_\f_\u0c3d\u0003_\u0c40"+
		"\b_\u0001_\u0001_\u0001_\u0001_\u0003_\u0c46\b_\u0001_\u0001_\u0001_\u0001"+
		"_\u0005_\u0c4c\b_\n_\f_\u0c4f\t_\u0001_\u0001_\u0003_\u0c53\b_\u0001_"+
		"\u0001_\u0001_\u0001_\u0005_\u0c59\b_\n_\f_\u0c5c\t_\u0003_\u0c5e\b_\u0001"+
		"`\u0001`\u0001`\u0003`\u0c63\b`\u0001`\u0003`\u0c66\b`\u0001`\u0001`\u0001"+
		"`\u0003`\u0c6b\b`\u0001`\u0001`\u0001`\u0001`\u0001`\u0001`\u0003`\u0c73"+
		"\b`\u0001`\u0001`\u0001`\u0001`\u0001`\u0001`\u0003`\u0c7b\b`\u0001`\u0001"+
		"`\u0001`\u0001`\u0003`\u0c81\b`\u0001`\u0001`\u0001`\u0001`\u0005`\u0c87"+
		"\b`\n`\f`\u0c8a\t`\u0001`\u0001`\u0003`\u0c8e\b`\u0001`\u0001`\u0001`"+
		"\u0001`\u0005`\u0c94\b`\n`\f`\u0c97\t`\u0003`\u0c99\b`\u0001a\u0001a\u0003"+
		"a\u0c9d\ba\u0001a\u0003a\u0ca0\ba\u0001a\u0001a\u0001a\u0001a\u0001a\u0001"+
		"a\u0003a\u0ca8\ba\u0001a\u0001a\u0001a\u0001a\u0003a\u0cae\ba\u0001a\u0001"+
		"a\u0001a\u0001a\u0001a\u0005a\u0cb5\ba\na\fa\u0cb8\ta\u0003a\u0cba\ba"+
		"\u0001b\u0001b\u0003b\u0cbe\bb\u0001b\u0001b\u0003b\u0cc2\bb\u0001b\u0001"+
		"b\u0004b\u0cc6\bb\u000bb\fb\u0cc7\u0001b\u0001b\u0003b\u0ccc\bb\u0001"+
		"b\u0001b\u0003b\u0cd0\bb\u0003b\u0cd2\bb\u0001b\u0003b\u0cd5\bb\u0001"+
		"b\u0003b\u0cd8\bb\u0001b\u0003b\u0cdb\bb\u0001b\u0001b\u0004b\u0cdf\b"+
		"b\u000bb\fb\u0ce0\u0001b\u0001b\u0003b\u0ce5\bb\u0001b\u0003b\u0ce8\b"+
		"b\u0001b\u0003b\u0ceb\bb\u0001b\u0003b\u0cee\bb\u0001b\u0003b\u0cf1\b"+
		"b\u0003b\u0cf3\bb\u0001c\u0001c\u0003c\u0cf7\bc\u0001d\u0001d\u0001d\u0001"+
		"d\u0003d\u0cfd\bd\u0001d\u0001d\u0001d\u0001d\u0003d\u0d03\bd\u0001d\u0005"+
		"d\u0d06\bd\nd\fd\u0d09\td\u0003d\u0d0b\bd\u0001e\u0001e\u0001e\u0001e"+
		"\u0003e\u0d11\be\u0001f\u0001f\u0003f\u0d15\bf\u0001g\u0001g\u0001g\u0001"+
		"g\u0001g\u0001g\u0003g\u0d1d\bg\u0001h\u0001h\u0003h\u0d21\bh\u0001h\u0003"+
		"h\u0d24\bh\u0001h\u0003h\u0d27\bh\u0001h\u0001h\u0001h\u0001h\u0001h\u0001"+
		"h\u0001h\u0003h\u0d30\bh\u0001h\u0001h\u0003h\u0d34\bh\u0001h\u0003h\u0d37"+
		"\bh\u0001h\u0001h\u0003h\u0d3b\bh\u0001i\u0001i\u0003i\u0d3f\bi\u0001"+
		"i\u0003i\u0d42\bi\u0001i\u0003i\u0d45\bi\u0001i\u0001i\u0001i\u0003i\u0d4a"+
		"\bi\u0001i\u0001i\u0001i\u0001i\u0003i\u0d50\bi\u0005i\u0d52\bi\ni\fi"+
		"\u0d55\ti\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0003i\u0d5e"+
		"\bi\u0001i\u0001i\u0001i\u0001i\u0003i\u0d64\bi\u0005i\u0d66\bi\ni\fi"+
		"\u0d69\ti\u0001i\u0001i\u0001i\u0003i\u0d6e\bi\u0001i\u0001i\u0003i\u0d72"+
		"\bi\u0001j\u0001j\u0001j\u0001j\u0003j\u0d78\bj\u0001j\u0003j\u0d7b\b"+
		"j\u0001k\u0001k\u0001k\u0001k\u0001k\u0001k\u0001k\u0001k\u0001k\u0001"+
		"k\u0003k\u0d87\bk\u0001k\u0001k\u0003k\u0d8b\bk\u0001k\u0001k\u0003k\u0d8f"+
		"\bk\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0003l\u0d97\bl\u0001l\u0001"+
		"l\u0003l\u0d9b\bl\u0001m\u0001m\u0001m\u0001m\u0001n\u0001n\u0003n\u0da3"+
		"\bn\u0001n\u0003n\u0da6\bn\u0001n\u0001n\u0003n\u0daa\bn\u0001n\u0003"+
		"n\u0dad\bn\u0001n\u0001n\u0001n\u0001n\u0005n\u0db3\bn\nn\fn\u0db6\tn"+
		"\u0001n\u0001n\u0003n\u0dba\bn\u0001n\u0003n\u0dbd\bn\u0001n\u0003n\u0dc0"+
		"\bn\u0001o\u0001o\u0003o\u0dc4\bo\u0001o\u0003o\u0dc7\bo\u0001o\u0001"+
		"o\u0001o\u0001o\u0001o\u0005o\u0dce\bo\no\fo\u0dd1\to\u0001o\u0001o\u0003"+
		"o\u0dd5\bo\u0001p\u0001p\u0001p\u0001p\u0001p\u0005p\u0ddc\bp\np\fp\u0ddf"+
		"\tp\u0001q\u0001q\u0003q\u0de3\bq\u0001r\u0001r\u0001r\u0005r\u0de8\b"+
		"r\nr\fr\u0deb\tr\u0001s\u0001s\u0005s\u0def\bs\ns\fs\u0df2\ts\u0001s\u0001"+
		"s\u0001s\u0005s\u0df7\bs\ns\fs\u0dfa\ts\u0001s\u0001s\u0003s\u0dfe\bs"+
		"\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0003t\u0e06\bt\u0001t\u0003"+
		"t\u0e09\bt\u0001t\u0003t\u0e0c\bt\u0001t\u0001t\u0001t\u0005t\u0e11\b"+
		"t\nt\ft\u0e14\tt\u0003t\u0e16\bt\u0001t\u0001t\u0001t\u0001t\u0001t\u0003"+
		"t\u0e1d\bt\u0001t\u0003t\u0e20\bt\u0001t\u0001t\u0001t\u0001t\u0001t\u0001"+
		"t\u0003t\u0e28\bt\u0001u\u0001u\u0001u\u0001u\u0003u\u0e2e\bu\u0001u\u0001"+
		"u\u0001u\u0001u\u0001v\u0001v\u0001v\u0001v\u0001v\u0003v\u0e39\bv\u0001"+
		"w\u0003w\u0e3c\bw\u0001w\u0001w\u0001w\u0001w\u0001w\u0001w\u0001w\u0001"+
		"w\u0001w\u0003w\u0e47\bw\u0001w\u0001w\u0001w\u0001w\u0003w\u0e4d\bw\u0001"+
		"w\u0001w\u0003w\u0e51\bw\u0001w\u0001w\u0001w\u0001w\u0001w\u0001w\u0001"+
		"w\u0001w\u0001w\u0003w\u0e5c\bw\u0001w\u0001w\u0001w\u0003w\u0e61\bw\u0003"+
		"w\u0e63\bw\u0001w\u0001w\u0003w\u0e67\bw\u0001x\u0001x\u0001x\u0001x\u0001"+
		"x\u0001x\u0001x\u0001x\u0003x\u0e71\bx\u0001y\u0001y\u0001y\u0001y\u0001"+
		"y\u0001y\u0001y\u0001y\u0003y\u0e7b\by\u0001z\u0001z\u0005z\u0e7f\bz\n"+
		"z\fz\u0e82\tz\u0001z\u0001z\u0003z\u0e86\bz\u0001z\u0003z\u0e89\bz\u0001"+
		"z\u0003z\u0e8c\bz\u0001z\u0003z\u0e8f\bz\u0001z\u0003z\u0e92\bz\u0001"+
		"z\u0003z\u0e95\bz\u0001z\u0003z\u0e98\bz\u0001z\u0001z\u0005z\u0e9c\b"+
		"z\nz\fz\u0e9f\tz\u0001z\u0001z\u0003z\u0ea3\bz\u0001z\u0003z\u0ea6\bz"+
		"\u0001z\u0003z\u0ea9\bz\u0001z\u0003z\u0eac\bz\u0001z\u0003z\u0eaf\bz"+
		"\u0001z\u0003z\u0eb2\bz\u0001z\u0003z\u0eb5\bz\u0003z\u0eb7\bz\u0001{"+
		"\u0001{\u0005{\u0ebb\b{\n{\f{\u0ebe\t{\u0001{\u0001{\u0003{\u0ec2\b{\u0001"+
		"{\u0003{\u0ec5\b{\u0001{\u0003{\u0ec8\b{\u0001{\u0003{\u0ecb\b{\u0001"+
		"{\u0003{\u0ece\b{\u0001{\u0003{\u0ed1\b{\u0001|\u0001|\u0003|\u0ed5\b"+
		"|\u0001|\u0001|\u0001}\u0001}\u0003}\u0edb\b}\u0001}\u0001}\u0003}\u0edf"+
		"\b}\u0001~\u0001~\u0001~\u0001~\u0001~\u0001~\u0001~\u0001~\u0003~\u0ee9"+
		"\b~\u0001\u007f\u0001\u007f\u0003\u007f\u0eed\b\u007f\u0001\u007f\u0001"+
		"\u007f\u0005\u007f\u0ef1\b\u007f\n\u007f\f\u007f\u0ef4\t\u007f\u0001\u0080"+
		"\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0003\u0080"+
		"\u0efc\b\u0080\u0001\u0080\u0003\u0080\u0eff\b\u0080\u0001\u0080\u0001"+
		"\u0080\u0003\u0080\u0f03\b\u0080\u0001\u0080\u0003\u0080\u0f06\b\u0080"+
		"\u0001\u0080\u0001\u0080\u0003\u0080\u0f0a\b\u0080\u0001\u0080\u0001\u0080"+
		"\u0003\u0080\u0f0e\b\u0080\u0001\u0080\u0003\u0080\u0f11\b\u0080\u0003"+
		"\u0080\u0f13\b\u0080\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0005"+
		"\u0081\u0f19\b\u0081\n\u0081\f\u0081\u0f1c\t\u0081\u0001\u0081\u0001\u0081"+
		"\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081"+
		"\u0001\u0081\u0003\u0081\u0f27\b\u0081\u0001\u0081\u0001\u0081\u0004\u0081"+
		"\u0f2b\b\u0081\u000b\u0081\f\u0081\u0f2c\u0003\u0081\u0f2f\b\u0081\u0001"+
		"\u0081\u0001\u0081\u0004\u0081\u0f33\b\u0081\u000b\u0081\f\u0081\u0f34"+
		"\u0003\u0081\u0f37\b\u0081\u0003\u0081\u0f39\b\u0081\u0001\u0082\u0001"+
		"\u0082\u0001\u0082\u0001\u0082\u0003\u0082\u0f3f\b\u0082\u0001\u0082\u0001"+
		"\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0003\u0082\u0f47"+
		"\b\u0082\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001"+
		"\u0083\u0003\u0083\u0f4f\b\u0083\u0001\u0084\u0001\u0084\u0003\u0084\u0f53"+
		"\b\u0084\u0001\u0084\u0001\u0084\u0003\u0084\u0f57\b\u0084\u0001\u0085"+
		"\u0001\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0005\u0085\u0f5e\b\u0085"+
		"\n\u0085\f\u0085\u0f61\t\u0085\u0001\u0085\u0001\u0085\u0003\u0085\u0f65"+
		"\b\u0085\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0087\u0001\u0087\u0001"+
		"\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001"+
		"\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0005\u0087\u0f77"+
		"\b\u0087\n\u0087\f\u0087\u0f7a\t\u0087\u0001\u0088\u0001\u0088\u0003\u0088"+
		"\u0f7e\b\u0088\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0003\u0089"+
		"\u0f84\b\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089"+
		"\u0003\u0089\u0f8b\b\u0089\u0001\u008a\u0001\u008a\u0001\u008a\u0003\u008a"+
		"\u0f90\b\u008a\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008b"+
		"\u0005\u008b\u0f97\b\u008b\n\u008b\f\u008b\u0f9a\t\u008b\u0003\u008b\u0f9c"+
		"\b\u008b\u0001\u008c\u0001\u008c\u0003\u008c\u0fa0\b\u008c\u0001\u008d"+
		"\u0001\u008d\u0003\u008d\u0fa4\b\u008d\u0001\u008d\u0001\u008d\u0003\u008d"+
		"\u0fa8\b\u008d\u0001\u008d\u0003\u008d\u0fab\b\u008d\u0001\u008d\u0003"+
		"\u008d\u0fae\b\u008d\u0001\u008d\u0003\u008d\u0fb1\b\u008d\u0001\u008e"+
		"\u0001\u008e\u0003\u008e\u0fb5\b\u008e\u0001\u008e\u0001\u008e\u0003\u008e"+
		"\u0fb9\b\u008e\u0001\u008e\u0003\u008e\u0fbc\b\u008e\u0001\u008e\u0003"+
		"\u008e\u0fbf\b\u008e\u0001\u008e\u0003\u008e\u0fc2\b\u008e\u0001\u008f"+
		"\u0001\u008f\u0001\u008f\u0001\u0090\u0001\u0090\u0003\u0090\u0fc9\b\u0090"+
		"\u0001\u0090\u0001\u0090\u0003\u0090\u0fcd\b\u0090\u0001\u0090\u0001\u0090"+
		"\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0092\u0001\u0092"+
		"\u0001\u0092\u0001\u0092\u0001\u0092\u0005\u0092\u0fda\b\u0092\n\u0092"+
		"\f\u0092\u0fdd\t\u0092\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0094"+
		"\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0095\u0001\u0095"+
		"\u0003\u0095\u0fe9\b\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095"+
		"\u0005\u0095\u0fef\b\u0095\n\u0095\f\u0095\u0ff2\t\u0095\u0001\u0096\u0001"+
		"\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0003"+
		"\u0096\u0ffb\b\u0096\u0001\u0097\u0001\u0097\u0003\u0097\u0fff\b\u0097"+
		"\u0001\u0097\u0003\u0097\u1002\b\u0097\u0001\u0097\u0001\u0097\u0001\u0098"+
		"\u0001\u0098\u0003\u0098\u1008\b\u0098\u0001\u0098\u0003\u0098\u100b\b"+
		"\u0098\u0001\u0098\u0003\u0098\u100e\b\u0098\u0001\u0099\u0001\u0099\u0001"+
		"\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0003\u0099\u1017"+
		"\b\u0099\u0001\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0001"+
		"\u009a\u0001\u009a\u0003\u009a\u1020\b\u009a\u0001\u009b\u0001\u009b\u0001"+
		"\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0005\u009b\u1028\b\u009b\n"+
		"\u009b\f\u009b\u102b\t\u009b\u0001\u009b\u0003\u009b\u102e\b\u009b\u0001"+
		"\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0005"+
		"\u009c\u1036\b\u009c\n\u009c\f\u009c\u1039\t\u009c\u0001\u009d\u0001\u009d"+
		"\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0003\u009d"+
		"\u1042\b\u009d\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009f\u0001\u009f"+
		"\u0001\u009f\u0003\u009f\u104a\b\u009f\u0001\u009f\u0003\u009f\u104d\b"+
		"\u009f\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0005"+
		"\u00a0\u1054\b\u00a0\n\u00a0\f\u00a0\u1057\t\u00a0\u0003\u00a0\u1059\b"+
		"\u00a0\u0001\u00a0\u0001\u00a0\u0003\u00a0\u105d\b\u00a0\u0001\u00a0\u0005"+
		"\u00a0\u1060\b\u00a0\n\u00a0\f\u00a0\u1063\t\u00a0\u0001\u00a0\u0003\u00a0"+
		"\u1066\b\u00a0\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1"+
		"\u0005\u00a1\u106d\b\u00a1\n\u00a1\f\u00a1\u1070\t\u00a1\u0003\u00a1\u1072"+
		"\b\u00a1\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a3\u0001\u00a3\u0001"+
		"\u00a3\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001"+
		"\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001"+
		"\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001"+
		"\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0005\u00a4\u108f\b\u00a4\n"+
		"\u00a4\f\u00a4\u1092\t\u00a4\u0003\u00a4\u1094\b\u00a4\u0001\u00a4\u0003"+
		"\u00a4\u1097\b\u00a4\u0001\u00a5\u0001\u00a5\u0001\u00a6\u0001\u00a6\u0001"+
		"\u00a7\u0001\u00a7\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001"+
		"\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001"+
		"\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001"+
		"\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001"+
		"\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001"+
		"\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001"+
		"\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001"+
		"\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0005"+
		"\u00a9\u10cd\b\u00a9\n\u00a9\f\u00a9\u10d0\t\u00a9\u0001\u00a9\u0001\u00a9"+
		"\u0003\u00a9\u10d4\b\u00a9\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa"+
		"\u0001\u00aa\u0001\u00aa\u0001\u00ab\u0001\u00ab\u0001\u00ac\u0001\u00ac"+
		"\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac"+
		"\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac"+
		"\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0003\u00ac\u10f0\b\u00ac"+
		"\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad"+
		"\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad"+
		"\u0003\u00ad\u10fe\b\u00ad\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0005\u00ae"+
		"\u1103\b\u00ae\n\u00ae\f\u00ae\u1106\t\u00ae\u0001\u00ae\u0003\u00ae\u1109"+
		"\b\u00ae\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0003\u00af\u110f"+
		"\b\u00af\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001"+
		"\u00b0\u0003\u00b0\u1117\b\u00b0\u0003\u00b0\u1119\b\u00b0\u0001\u00b1"+
		"\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b2\u0001\u00b2\u0001\u00b2"+
		"\u0001\u00b2\u0001\u00b2\u0003\u00b2\u1124\b\u00b2\u0001\u00b3\u0001\u00b3"+
		"\u0001\u00b3\u0001\u00b3\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4"+
		"\u0003\u00b4\u112e\b\u00b4\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5"+
		"\u0001\u00b5\u0003\u00b5\u1135\b\u00b5\u0001\u00b6\u0001\u00b6\u0001\u00b6"+
		"\u0001\u00b6\u0003\u00b6\u113b\b\u00b6\u0001\u00b7\u0001\u00b7\u0001\u00b7"+
		"\u0001\u00b7\u0001\u00b8\u0001\u00b8\u0003\u00b8\u1143\b\u00b8\u0001\u00b9"+
		"\u0001\u00b9\u0001\u00b9\u0003\u00b9\u1148\b\u00b9\u0001\u00b9\u0001\u00b9"+
		"\u0001\u00b9\u0001\u00b9\u0005\u00b9\u114e\b\u00b9\n\u00b9\f\u00b9\u1151"+
		"\t\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0005\u00b9\u1156\b\u00b9"+
		"\n\u00b9\f\u00b9\u1159\t\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0005"+
		"\u00b9\u115e\b\u00b9\n\u00b9\f\u00b9\u1161\t\u00b9\u0001\u00b9\u0001\u00b9"+
		"\u0001\u00b9\u0005\u00b9\u1166\b\u00b9\n\u00b9\f\u00b9\u1169\t\u00b9\u0001"+
		"\u00b9\u0005\u00b9\u116c\b\u00b9\n\u00b9\f\u00b9\u116f\t\u00b9\u0003\u00b9"+
		"\u1171\b\u00b9\u0001\u00b9\u0001\u00b9\u0003\u00b9\u1175\b\u00b9\u0001"+
		"\u00ba\u0001\u00ba\u0001\u00ba\u0003\u00ba\u117a\b\u00ba\u0001\u00ba\u0004"+
		"\u00ba\u117d\b\u00ba\u000b\u00ba\f\u00ba\u117e\u0001\u00ba\u0001\u00ba"+
		"\u0004\u00ba\u1183\b\u00ba\u000b\u00ba\f\u00ba\u1184\u0003\u00ba\u1187"+
		"\b\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00bb\u0001\u00bb\u0001"+
		"\u00bb\u0001\u00bb\u0004\u00bb\u1190\b\u00bb\u000b\u00bb\f\u00bb\u1191"+
		"\u0001\u00bb\u0005\u00bb\u1195\b\u00bb\n\u00bb\f\u00bb\u1198\t\u00bb\u0001"+
		"\u00bb\u0001\u00bb\u0004\u00bb\u119c\b\u00bb\u000b\u00bb\f\u00bb\u119d"+
		"\u0003\u00bb\u11a0\b\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bc"+
		"\u0001\u00bc\u0001\u00bc\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00be"+
		"\u0001\u00be\u0001\u00be\u0003\u00be\u11ae\b\u00be\u0001\u00be\u0001\u00be"+
		"\u0004\u00be\u11b2\b\u00be\u000b\u00be\f\u00be\u11b3\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0003\u00be\u11b9\b\u00be\u0001\u00bf\u0001\u00bf\u0001"+
		"\u00bf\u0003\u00bf\u11be\b\u00bf\u0001\u00bf\u0001\u00bf\u0004\u00bf\u11c2"+
		"\b\u00bf\u000b\u00bf\f\u00bf\u11c3\u0001\u00bf\u0001\u00bf\u0001\u00bf"+
		"\u0001\u00bf\u0001\u00bf\u0003\u00bf\u11cb\b\u00bf\u0001\u00c0\u0001\u00c0"+
		"\u0001\u00c0\u0001\u00c1\u0001\u00c1\u0001\u00c1\u0003\u00c1\u11d3\b\u00c1"+
		"\u0001\u00c1\u0001\u00c1\u0001\u00c1\u0001\u00c1\u0004\u00c1\u11d9\b\u00c1"+
		"\u000b\u00c1\f\u00c1\u11da\u0001\u00c1\u0001\u00c1\u0001\u00c1\u0003\u00c1"+
		"\u11e0\b\u00c1\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0003\u00c2"+
		"\u11e6\b\u00c2\u0001\u00c2\u0003\u00c2\u11e9\b\u00c2\u0001\u00c2\u0001"+
		"\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0003\u00c2\u11f1"+
		"\b\u00c2\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0003"+
		"\u00c3\u11f8\b\u00c3\u0001\u00c4\u0001\u00c4\u0001\u00c4\u0001\u00c4\u0001"+
		"\u00c4\u0001\u00c4\u0001\u00c4\u0003\u00c4\u1201\b\u00c4\u0001\u00c4\u0003"+
		"\u00c4\u1204\b\u00c4\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0001"+
		"\u00c5\u0001\u00c5\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001"+
		"\u00c6\u0001\u00c6\u0001\u00c6\u0005\u00c6\u1213\b\u00c6\n\u00c6\f\u00c6"+
		"\u1216\t\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c7\u0001\u00c7\u0001\u00c7"+
		"\u0003\u00c7\u121d\b\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7"+
		"\u0001\u00c7\u0001\u00c7\u0003\u00c7\u1225\b\u00c7\u0001\u00c8\u0001\u00c8"+
		"\u0003\u00c8\u1229\b\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c9\u0001\u00c9"+
		"\u0001\u00c9\u0003\u00c9\u1230\b\u00c9\u0001\u00c9\u0001\u00c9\u0004\u00c9"+
		"\u1234\b\u00c9\u000b\u00c9\f\u00c9\u1235\u0001\u00ca\u0001\u00ca\u0001"+
		"\u00ca\u0001\u00ca\u0004\u00ca\u123c\b\u00ca\u000b\u00ca\f\u00ca\u123d"+
		"\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0005\u00cb"+
		"\u1245\b\u00cb\n\u00cb\f\u00cb\u1248\t\u00cb\u0001\u00cb\u0001\u00cb\u0001"+
		"\u00cb\u0003\u00cb\u124d\b\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0005"+
		"\u00cb\u1252\b\u00cb\n\u00cb\f\u00cb\u1255\t\u00cb\u0001\u00cb\u0001\u00cb"+
		"\u0001\u00cb\u0001\u00cb\u0003\u00cb\u125b\b\u00cb\u0001\u00cb\u0005\u00cb"+
		"\u125e\b\u00cb\n\u00cb\f\u00cb\u1261\t\u00cb\u0003\u00cb\u1263\b\u00cb"+
		"\u0003\u00cb\u1265\b\u00cb\u0001\u00cb\u0001\u00cb\u0004\u00cb\u1269\b"+
		"\u00cb\u000b\u00cb\f\u00cb\u126a\u0003\u00cb\u126d\b\u00cb\u0001\u00cb"+
		"\u0001\u00cb\u0005\u00cb\u1271\b\u00cb\n\u00cb\f\u00cb\u1274\t\u00cb\u0003"+
		"\u00cb\u1276\b\u00cb\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001"+
		"\u00cc\u0005\u00cc\u127d\b\u00cc\n\u00cc\f\u00cc\u1280\t\u00cc\u0001\u00cc"+
		"\u0001\u00cc\u0001\u00cc\u0003\u00cc\u1285\b\u00cc\u0001\u00cc\u0001\u00cc"+
		"\u0001\u00cc\u0005\u00cc\u128a\b\u00cc\n\u00cc\f\u00cc\u128d\t\u00cc\u0001"+
		"\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0003\u00cc\u1293\b\u00cc\u0001"+
		"\u00cc\u0005\u00cc\u1296\b\u00cc\n\u00cc\f\u00cc\u1299\t\u00cc\u0003\u00cc"+
		"\u129b\b\u00cc\u0003\u00cc\u129d\b\u00cc\u0001\u00cc\u0001\u00cc\u0004"+
		"\u00cc\u12a1\b\u00cc\u000b\u00cc\f\u00cc\u12a2\u0003\u00cc\u12a5\b\u00cc"+
		"\u0001\u00cc\u0001\u00cc\u0005\u00cc\u12a9\b\u00cc\n\u00cc\f\u00cc\u12ac"+
		"\t\u00cc\u0003\u00cc\u12ae\b\u00cc\u0001\u00cd\u0001\u00cd\u0001\u00cd"+
		"\u0003\u00cd\u12b3\b\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0005\u00cd"+
		"\u12b8\b\u00cd\n\u00cd\f\u00cd\u12bb\t\u00cd\u0001\u00ce\u0001\u00ce\u0001"+
		"\u00ce\u0001\u00ce\u0005\u00ce\u12c1\b\u00ce\n\u00ce\f\u00ce\u12c4\t\u00ce"+
		"\u0001\u00ce\u0001\u00ce\u0003\u00ce\u12c8\b\u00ce\u0001\u00ce\u0001\u00ce"+
		"\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0005\u00ce\u12cf\b\u00ce\n\u00ce"+
		"\f\u00ce\u12d2\t\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00ce"+
		"\u0003\u00ce\u12d8\b\u00ce\u0001\u00ce\u0005\u00ce\u12db\b\u00ce\n\u00ce"+
		"\f\u00ce\u12de\t\u00ce\u0003\u00ce\u12e0\b\u00ce\u0003\u00ce\u12e2\b\u00ce"+
		"\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0005\u00ce\u12e8\b\u00ce"+
		"\n\u00ce\f\u00ce\u12eb\t\u00ce\u0003\u00ce\u12ed\b\u00ce\u0001\u00ce\u0001"+
		"\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0003\u00ce\u12f5"+
		"\b\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0003\u00ce\u12fa\b\u00ce"+
		"\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0003\u00ce\u12ff\b\u00ce\u0005\u00ce"+
		"\u1301\b\u00ce\n\u00ce\f\u00ce\u1304\t\u00ce\u0001\u00ce\u0001\u00ce\u0001"+
		"\u00ce\u0003\u00ce\u1309\b\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0003"+
		"\u00ce\u130e\b\u00ce\u0005\u00ce\u1310\b\u00ce\n\u00ce\f\u00ce\u1313\t"+
		"\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0003\u00ce\u1318\b\u00ce\u0003"+
		"\u00ce\u131a\b\u00ce\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0001"+
		"\u00cf\u0001\u00cf\u0001\u00cf\u0005\u00cf\u1323\b\u00cf\n\u00cf\f\u00cf"+
		"\u1326\t\u00cf\u0003\u00cf\u1328\b\u00cf\u0001\u00cf\u0001\u00cf\u0001"+
		"\u00cf\u0005\u00cf\u132d\b\u00cf\n\u00cf\f\u00cf\u1330\t\u00cf\u0003\u00cf"+
		"\u1332\b\u00cf\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0"+
		"\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0005\u00d0\u133c\b\u00d0\n\u00d0"+
		"\f\u00d0\u133f\t\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0003\u00d0"+
		"\u1344\b\u00d0\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1"+
		"\u0005\u00d1\u134b\b\u00d1\n\u00d1\f\u00d1\u134e\t\u00d1\u0001\u00d2\u0001"+
		"\u00d2\u0001\u00d2\u0001\u00d2\u0005\u00d2\u1354\b\u00d2\n\u00d2\f\u00d2"+
		"\u1357\t\u00d2\u0001\u00d2\u0001\u00d2\u0003\u00d2\u135b\b\u00d2\u0001"+
		"\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0005\u00d2\u1362"+
		"\b\u00d2\n\u00d2\f\u00d2\u1365\t\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2"+
		"\u0003\u00d2\u136a\b\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2"+
		"\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0005\u00d2\u1373\b\u00d2\n\u00d2"+
		"\f\u00d2\u1376\t\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2"+
		"\u0005\u00d2\u137c\b\u00d2\n\u00d2\f\u00d2\u137f\t\u00d2\u0001\u00d2\u0001"+
		"\u00d2\u0001\u00d2\u0003\u00d2\u1384\b\u00d2\u0001\u00d2\u0001\u00d2\u0001"+
		"\u00d2\u0003\u00d2\u1389\b\u00d2\u0005\u00d2\u138b\b\u00d2\n\u00d2\f\u00d2"+
		"\u138e\t\u00d2\u0003\u00d2\u1390\b\u00d2\u0001\u00d3\u0001\u00d3\u0001"+
		"\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0005"+
		"\u00d3\u139a\b\u00d3\n\u00d3\f\u00d3\u139d\t\u00d3\u0001\u00d4\u0001\u00d4"+
		"\u0001\u00d4\u0001\u00d4\u0003\u00d4\u13a3\b\u00d4\u0001\u00d4\u0001\u00d4"+
		"\u0001\u00d4\u0003\u00d4\u13a8\b\u00d4\u0001\u00d5\u0001\u00d5\u0001\u00d5"+
		"\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6"+
		"\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0003\u00d6\u13b7\b\u00d6"+
		"\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0003\u00d6"+
		"\u13be\b\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6"+
		"\u0001\u00d6\u0003\u00d6\u13c6\b\u00d6\u0001\u00d6\u0003\u00d6\u13c9\b"+
		"\u00d6\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001"+
		"\u00d7\u0001\u00d7\u0001\u00d7\u0003\u00d7\u13d3\b\u00d7\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0003\u00d8\u13dd\b\u00d8\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001"+
		"\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0003\u00d9\u13e7"+
		"\b\u00d9\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00db\u0001\u00db\u0001"+
		"\u00db\u0001\u00db\u0001\u00db\u0003\u00db\u13f1\b\u00db\u0001\u00dc\u0001"+
		"\u00dc\u0003\u00dc\u13f5\b\u00dc\u0001\u00dc\u0001\u00dc\u0003\u00dc\u13f9"+
		"\b\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001"+
		"\u00dc\u0001\u00dc\u0001\u00dc\u0003\u00dc\u1403\b\u00dc\u0001\u00dc\u0001"+
		"\u00dc\u0001\u00dc\u0003\u00dc\u1408\b\u00dc\u0001\u00dc\u0001\u00dc\u0001"+
		"\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001"+
		"\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001"+
		"\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001"+
		"\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001"+
		"\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001"+
		"\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001"+
		"\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001"+
		"\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001"+
		"\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001"+
		"\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0003\u00dc\u1447"+
		"\b\u00dc\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001"+
		"\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001"+
		"\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0003\u00dd\u1459"+
		"\b\u00dd\u0001\u00de\u0001\u00de\u0001\u00de\u0001\u00de\u0001\u00df\u0001"+
		"\u00df\u0003\u00df\u1461\b\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0001"+
		"\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0005\u00df\u146b"+
		"\b\u00df\n\u00df\f\u00df\u146e\t\u00df\u0001\u00df\u0001\u00df\u0001\u00df"+
		"\u0001\u00df\u0003\u00df\u1474\b\u00df\u0003\u00df\u1476\b\u00df\u0001"+
		"\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0005"+
		"\u00df\u147e\b\u00df\n\u00df\f\u00df\u1481\t\u00df\u0003\u00df\u1483\b"+
		"\u00df\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0005\u00e0\u1489"+
		"\b\u00e0\n\u00e0\f\u00e0\u148c\t\u00e0\u0001\u00e1\u0001\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0003\u00e1\u1492\b\u00e1\u0001\u00e2\u0001\u00e2\u0003\u00e2"+
		"\u1496\b\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e3\u0001\u00e3"+
		"\u0003\u00e3\u149d\b\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0003\u00e3"+
		"\u14a2\b\u00e3\u0001\u00e3\u0003\u00e3\u14a5\b\u00e3\u0001\u00e3\u0003"+
		"\u00e3\u14a8\b\u00e3\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001"+
		"\u00e4\u0001\u00e4\u0001\u00e4\u0003\u00e4\u14b1\b\u00e4\u0001\u00e5\u0001"+
		"\u00e5\u0003\u00e5\u14b5\b\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e6\u0001\u00e6\u0001"+
		"\u00e6\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0001\u00e7\u0001\u00e7\u0001"+
		"\u00e7\u0001\u00e7\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001"+
		"\u00e8\u0003\u00e8\u14cd\b\u00e8\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001"+
		"\u00e8\u0001\u00e8\u0003\u00e8\u14d4\b\u00e8\u0005\u00e8\u14d6\b\u00e8"+
		"\n\u00e8\f\u00e8\u14d9\t\u00e8\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001"+
		"\u00e8\u0003\u00e8\u14df\b\u00e8\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001"+
		"\u00e8\u0001\u00e8\u0003\u00e8\u14e6\b\u00e8\u0001\u00e8\u0003\u00e8\u14e9"+
		"\b\u00e8\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001"+
		"\u00e8\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001"+
		"\u00e8\u0005\u00e8\u14f7\b\u00e8\n\u00e8\f\u00e8\u14fa\t\u00e8\u0003\u00e8"+
		"\u14fc\b\u00e8\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9"+
		"\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0003\u00e9\u1506\b\u00e9\u0001\u00e9"+
		"\u0001\u00e9\u0003\u00e9\u150a\b\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9"+
		"\u0001\u00e9\u0003\u00e9\u1510\b\u00e9\u0001\u00e9\u0003\u00e9\u1513\b"+
		"\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0003\u00e9\u1518\b\u00e9\u0001"+
		"\u00e9\u0001\u00e9\u0003\u00e9\u151c\b\u00e9\u0001\u00e9\u0001\u00e9\u0001"+
		"\u00e9\u0001\u00e9\u0001\u00e9\u0003\u00e9\u1523\b\u00e9\u0001\u00e9\u0003"+
		"\u00e9\u1526\b\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0003"+
		"\u00e9\u152c\b\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001"+
		"\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001"+
		"\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001"+
		"\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0003"+
		"\u00e9\u1544\b\u00e9\u0001\u00e9\u0003\u00e9\u1547\b\u00e9\u0001\u00e9"+
		"\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9"+
		"\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0003\u00e9\u1553\b\u00e9\u0001\u00e9"+
		"\u0003\u00e9\u1556\b\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9"+
		"\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0003\u00e9\u1560\b\u00e9"+
		"\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9"+
		"\u0003\u00e9\u1568\b\u00e9\u0001\u00e9\u0001\u00e9\u0003\u00e9\u156c\b"+
		"\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0003"+
		"\u00e9\u1573\b\u00e9\u0001\u00e9\u0003\u00e9\u1576\b\u00e9\u0001\u00e9"+
		"\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0005\u00e9\u157d\b\u00e9"+
		"\n\u00e9\f\u00e9\u1580\t\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0003"+
		"\u00e9\u1585\b\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0003"+
		"\u00e9\u158b\b\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001"+
		"\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0003\u00e9\u1595\b\u00e9\u0003"+
		"\u00e9\u1597\b\u00e9\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0003"+
		"\u00ea\u159d\b\u00ea\u0001\u00ea\u0003\u00ea\u15a0\b\u00ea\u0001\u00ea"+
		"\u0003\u00ea\u15a3\b\u00ea\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb"+
		"\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb"+
		"\u0003\u00eb\u15af\b\u00eb\u0001\u00eb\u0003\u00eb\u15b2\b\u00eb\u0001"+
		"\u00ec\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0003\u00ec\u15b8\b\u00ec\u0001"+
		"\u00ed\u0003\u00ed\u15bb\b\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001"+
		"\u00ed\u0001\u00ed\u0001\u00ed\u0003\u00ed\u15c3\b\u00ed\u0001\u00ed\u0001"+
		"\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0003\u00ed\u15cb"+
		"\b\u00ed\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0003\u00ee\u15d1"+
		"\b\u00ee\u0001\u00ee\u0001\u00ee\u0003\u00ee\u15d5\b\u00ee\u0001\u00ef"+
		"\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef"+
		"\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0003\u00ef"+
		"\u15e3\b\u00ef\u0001\u00f0\u0001\u00f0\u0001\u00f0\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0005\u00f1\u15ed\b\u00f1\n\u00f1"+
		"\f\u00f1\u15f0\t\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0003\u00f1\u15f6\b\u00f1\u0001\u00f1\u0003\u00f1\u15f9\b\u00f1\u0001"+
		"\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f2\u0001\u00f2\u0003\u00f2\u1600"+
		"\b\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0005\u00f2\u1605\b\u00f2"+
		"\n\u00f2\f\u00f2\u1608\t\u00f2\u0001\u00f3\u0001\u00f3\u0003\u00f3\u160c"+
		"\b\u00f3\u0001\u00f3\u0004\u00f3\u160f\b\u00f3\u000b\u00f3\f\u00f3\u1610"+
		"\u0001\u00f3\u0003\u00f3\u1614\b\u00f3\u0001\u00f4\u0001\u00f4\u0001\u00f4"+
		"\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0005\u00f4\u161d\b\u00f4"+
		"\n\u00f4\f\u00f4\u1620\t\u00f4\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001"+
		"\u00f5\u0001\u00f6\u0001\u00f6\u0001\u00f7\u0001\u00f7\u0003\u00f7\u162a"+
		"\b\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0003\u00f7\u1630"+
		"\b\u00f7\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0003\u00f8\u1635\b\u00f8"+
		"\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8"+
		"\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0003\u00f8"+
		"\u1642\b\u00f8\u0003\u00f8\u1644\b\u00f8\u0001\u00f8\u0001\u00f8\u0001"+
		"\u00f8\u0003\u00f8\u1649\b\u00f8\u0001\u00f8\u0001\u00f8\u0003\u00f8\u164d"+
		"\b\u00f8\u0001\u00f8\u0003\u00f8\u1650\b\u00f8\u0003\u00f8\u1652\b\u00f8"+
		"\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0003\u00f9"+
		"\u1659\b\u00f9\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fa"+
		"\u0003\u00fa\u1660\b\u00fa\u0001\u00fa\u0003\u00fa\u1663\b\u00fa\u0001"+
		"\u00fa\u0003\u00fa\u1666\b\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0001"+
		"\u00fa\u0003\u00fa\u166c\b\u00fa\u0001\u00fa\u0001\u00fa\u0003\u00fa\u1670"+
		"\b\u00fa\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0003\u00fb\u1676"+
		"\b\u00fb\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0003\u00fc\u167c"+
		"\b\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001"+
		"\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0003"+
		"\u00ff\u1689\b\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0003\u00ff\u168e"+
		"\b\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0005\u00ff\u1694"+
		"\b\u00ff\n\u00ff\f\u00ff\u1697\t\u00ff\u0003\u00ff\u1699\b\u00ff\u0001"+
		"\u0100\u0001\u0100\u0001\u0100\u0003\u0100\u169e\b\u0100\u0001\u0100\u0001"+
		"\u0100\u0001\u0100\u0003\u0100\u16a3\b\u0100\u0001\u0100\u0001\u0100\u0001"+
		"\u0100\u0001\u0100\u0005\u0100\u16a9\b\u0100\n\u0100\f\u0100\u16ac\t\u0100"+
		"\u0003\u0100\u16ae\b\u0100\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101"+
		"\u0001\u0101\u0001\u0101\u0003\u0101\u16b6\b\u0101\u0001\u0102\u0001\u0102"+
		"\u0003\u0102\u16ba\b\u0102\u0001\u0102\u0001\u0102\u0001\u0102\u0001\u0102"+
		"\u0001\u0102\u0001\u0102\u0001\u0102\u0001\u0102\u0001\u0102\u0005\u0102"+
		"\u16c5\b\u0102\n\u0102\f\u0102\u16c8\t\u0102\u0001\u0102\u0001\u0102\u0001"+
		"\u0102\u0003\u0102\u16cd\b\u0102\u0001\u0102\u0001\u0102\u0001\u0102\u0001"+
		"\u0102\u0001\u0102\u0001\u0102\u0001\u0102\u0001\u0102\u0005\u0102\u16d7"+
		"\b\u0102\n\u0102\f\u0102\u16da\t\u0102\u0003\u0102\u16dc\b\u0102\u0001"+
		"\u0103\u0001\u0103\u0001\u0104\u0001\u0104\u0001\u0104\u0001\u0104\u0001"+
		"\u0104\u0003\u0104\u16e5\b\u0104\u0001\u0104\u0001\u0104\u0001\u0104\u0003"+
		"\u0104\u16ea\b\u0104\u0001\u0105\u0001\u0105\u0001\u0105\u0001\u0105\u0003"+
		"\u0105\u16f0\b\u0105\u0001\u0106\u0001\u0106\u0001\u0107\u0001\u0107\u0003"+
		"\u0107\u16f6\b\u0107\u0001\u0108\u0001\u0108\u0001\u0108\u0003\u0108\u16fb"+
		"\b\u0108\u0003\u0108\u16fd\b\u0108\u0001\u0108\u0001\u0108\u0001\u0108"+
		"\u0003\u0108\u1702\b\u0108\u0003\u0108\u1704\b\u0108\u0001\u0109\u0001"+
		"\u0109\u0003\u0109\u1708\b\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001"+
		"\u0109\u0003\u0109\u170e\b\u0109\u0001\u0109\u0003\u0109\u1711\b\u0109"+
		"\u0001\u0109\u0003\u0109\u1714\b\u0109\u0001\u010a\u0001\u010a\u0001\u010a"+
		"\u0001\u010a\u0001\u010a\u0001\u010a\u0003\u010a\u171c\b\u010a\u0001\u010b"+
		"\u0001\u010b\u0001\u010c\u0001\u010c\u0001\u010c\u0001\u010c\u0003\u010c"+
		"\u1724\b\u010c\u0001\u010d\u0001\u010d\u0003\u010d\u1728\b\u010d\u0001"+
		"\u010e\u0001\u010e\u0001\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0001"+
		"\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0001"+
		"\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0004\u010f\u173a\b\u010f\u000b"+
		"\u010f\f\u010f\u173b\u0001\u0110\u0001\u0110\u0001\u0110\u0001\u0110\u0001"+
		"\u0110\u0003\u0110\u1743\b\u0110\u0003\u0110\u1745\b\u0110\u0001\u0111"+
		"\u0001\u0111\u0001\u0111\u0004\u0111\u174a\b\u0111\u000b\u0111\f\u0111"+
		"\u174b\u0003\u0111\u174e\b\u0111\u0001\u0112\u0001\u0112\u0003\u0112\u1752"+
		"\b\u0112\u0001\u0113\u0001\u0113\u0001\u0113\u0003\u0113\u1757\b\u0113"+
		"\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0114"+
		"\u0001\u0114\u0001\u0114\u0001\u0114\u0003\u0114\u1762\b\u0114\u0001\u0115"+
		"\u0001\u0115\u0001\u0115\u0003\u0115\u1767\b\u0115\u0001\u0116\u0001\u0116"+
		"\u0001\u0117\u0001\u0117\u0003\u0117\u176d\b\u0117\u0001\u0118\u0003\u0118"+
		"\u1770\b\u0118\u0001\u0118\u0001\u0118\u0003\u0118\u1774\b\u0118\u0001"+
		"\u0118\u0004\u0118\u1777\b\u0118\u000b\u0118\f\u0118\u1778\u0001\u0118"+
		"\u0003\u0118\u177c\b\u0118\u0001\u0118\u0001\u0118\u0003\u0118\u1780\b"+
		"\u0118\u0001\u0118\u0001\u0118\u0003\u0118\u1784\b\u0118\u0003\u0118\u1786"+
		"\b\u0118\u0001\u0119\u0001\u0119\u0001\u011a\u0003\u011a\u178b\b\u011a"+
		"\u0001\u011a\u0001\u011a\u0001\u011b\u0003\u011b\u1790\b\u011b\u0001\u011b"+
		"\u0001\u011b\u0001\u011c\u0001\u011c\u0001\u011c\u0001\u011c\u0001\u011c"+
		"\u0001\u011c\u0001\u011c\u0001\u011c\u0001\u011c\u0003\u011c\u179d\b\u011c"+
		"\u0001\u011c\u0003\u011c\u17a0\b\u011c\u0001\u011d\u0001\u011d\u0003\u011d"+
		"\u17a4\b\u011d\u0001\u011d\u0003\u011d\u17a7\b\u011d\u0001\u011d\u0003"+
		"\u011d\u17aa\b\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0003\u011d\u17af"+
		"\b\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0003\u011d\u17b4\b\u011d"+
		"\u0001\u011d\u0001\u011d\u0001\u011d\u0003\u011d\u17b9\b\u011d\u0001\u011d"+
		"\u0003\u011d\u17bc\b\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0003\u011d"+
		"\u17c1\b\u011d\u0001\u011d\u0003\u011d\u17c4\b\u011d\u0001\u011d\u0001"+
		"\u011d\u0001\u011d\u0001\u011d\u0003\u011d\u17ca\b\u011d\u0001\u011d\u0003"+
		"\u011d\u17cd\b\u011d\u0001\u011d\u0001\u011d\u0003\u011d\u17d1\b\u011d"+
		"\u0001\u011d\u0005\u011d\u17d4\b\u011d\n\u011d\f\u011d\u17d7\t\u011d\u0001"+
		"\u011d\u0001\u011d\u0003\u011d\u17db\b\u011d\u0001\u011d\u0005\u011d\u17de"+
		"\b\u011d\n\u011d\f\u011d\u17e1\t\u011d\u0001\u011d\u0001\u011d\u0003\u011d"+
		"\u17e5\b\u011d\u0001\u011d\u0003\u011d\u17e8\b\u011d\u0001\u011d\u0005"+
		"\u011d\u17eb\b\u011d\n\u011d\f\u011d\u17ee\t\u011d\u0001\u011d\u0001\u011d"+
		"\u0003\u011d\u17f2\b\u011d\u0001\u011d\u0005\u011d\u17f5\b\u011d\n\u011d"+
		"\f\u011d\u17f8\t\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0003\u011d"+
		"\u17fd\b\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0003\u011d\u1802\b"+
		"\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0003\u011d\u1807\b\u011d\u0001"+
		"\u011d\u0001\u011d\u0001\u011d\u0003\u011d\u180c\b\u011d\u0001\u011d\u0003"+
		"\u011d\u180f\b\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0003\u011d\u1814"+
		"\b\u011d\u0001\u011d\u0001\u011d\u0003\u011d\u1818\b\u011d\u0001\u011d"+
		"\u0001\u011d\u0003\u011d\u181c\b\u011d\u0001\u011e\u0001\u011e\u0001\u011e"+
		"\u0001\u011e\u0005\u011e\u1822\b\u011e\n\u011e\f\u011e\u1825\t\u011e\u0001"+
		"\u011e\u0001\u011e\u0001\u011f\u0001\u011f\u0003\u011f\u182b\b\u011f\u0001"+
		"\u011f\u0001\u011f\u0003\u011f\u182f\b\u011f\u0001\u011f\u0001\u011f\u0001"+
		"\u011f\u0003\u011f\u1834\b\u011f\u0001\u011f\u0001\u011f\u0001\u011f\u0003"+
		"\u011f\u1839\b\u011f\u0001\u011f\u0001\u011f\u0003\u011f\u183d\b\u011f"+
		"\u0003\u011f\u183f\b\u011f\u0001\u011f\u0003\u011f\u1842\b\u011f\u0001"+
		"\u0120\u0001\u0120\u0001\u0120\u0001\u0120\u0001\u0121\u0001\u0121\u0001"+
		"\u0121\u0001\u0121\u0001\u0121\u0001\u0121\u0001\u0122\u0001\u0122\u0001"+
		"\u0122\u0001\u0122\u0003\u0122\u1852\b\u0122\u0001\u0122\u0001\u0122\u0001"+
		"\u0123\u0001\u0123\u0001\u0123\u0005\u0123\u1859\b\u0123\n\u0123\f\u0123"+
		"\u185c\t\u0123\u0001\u0124\u0001\u0124\u0001\u0124\u0005\u0124\u1861\b"+
		"\u0124\n\u0124\f\u0124\u1864\t\u0124\u0001\u0125\u0001\u0125\u0001\u0125"+
		"\u0001\u0125\u0005\u0125\u186a\b\u0125\n\u0125\f\u0125\u186d\t\u0125\u0001"+
		"\u0125\u0001\u0125\u0001\u0126\u0001\u0126\u0001\u0126\u0005\u0126\u1874"+
		"\b\u0126\n\u0126\f\u0126\u1877\t\u0126\u0001\u0127\u0001\u0127\u0001\u0127"+
		"\u0005\u0127\u187c\b\u0127\n\u0127\f\u0127\u187f\t\u0127\u0001\u0128\u0001"+
		"\u0128\u0001\u0128\u0005\u0128\u1884\b\u0128\n\u0128\f\u0128\u1887\t\u0128"+
		"\u0001\u0129\u0001\u0129\u0001\u0129\u0005\u0129\u188c\b\u0129\n\u0129"+
		"\f\u0129\u188f\t\u0129\u0001\u012a\u0001\u012a\u0001\u012a\u0005\u012a"+
		"\u1894\b\u012a\n\u012a\f\u012a\u1897\t\u012a\u0001\u012b\u0001\u012b\u0001"+
		"\u012b\u0001\u012b\u0001\u012b\u0001\u012b\u0001\u012b\u0001\u012b\u0001"+
		"\u012b\u0003\u012b\u18a2\b\u012b\u0001\u012b\u0001\u012b\u0001\u012b\u0001"+
		"\u012b\u0001\u012b\u0003\u012b\u18a9\b\u012b\u0001\u012b\u0001\u012b\u0001"+
		"\u012b\u0001\u012b\u0001\u012b\u0001\u012b\u0001\u012b\u0001\u012b\u0001"+
		"\u012b\u0001\u012b\u0001\u012b\u0001\u012b\u0001\u012b\u0001\u012b\u0001"+
		"\u012b\u0001\u012b\u0001\u012b\u0003\u012b\u18bc\b\u012b\u0001\u012c\u0001"+
		"\u012c\u0001\u012c\u0003\u012c\u18c1\b\u012c\u0001\u012c\u0003\u012c\u18c4"+
		"\b\u012c\u0001\u012c\u0001\u012c\u0001\u012c\u0003\u012c\u18c9\b\u012c"+
		"\u0001\u012c\u0003\u012c\u18cc\b\u012c\u0001\u012d\u0001\u012d\u0003\u012d"+
		"\u18d0\b\u012d\u0001\u012e\u0001\u012e\u0001\u012e\u0001\u012f\u0001\u012f"+
		"\u0001\u012f\u0001\u012f\u0001\u0130\u0001\u0130\u0001\u0130\u0001\u0130"+
		"\u0001\u0130\u0001\u0130\u0003\u0130\u18df\b\u0130\u0001\u0130\u0001\u0130"+
		"\u0001\u0130\u0001\u0130\u0001\u0130\u0003\u0130\u18e6\b\u0130\u0001\u0130"+
		"\u0001\u0130\u0001\u0130\u0003\u0130\u18eb\b\u0130\u0001\u0131\u0001\u0131"+
		"\u0001\u0131\u0003\u0131\u18f0\b\u0131\u0001\u0131\u0001\u0131\u0001\u0131"+
		"\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131"+
		"\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131"+
		"\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131"+
		"\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131"+
		"\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131"+
		"\u0001\u0131\u0001\u0131\u0001\u0131\u0004\u0131\u1916\b\u0131\u000b\u0131"+
		"\f\u0131\u1917\u0001\u0131\u0001\u0131\u0003\u0131\u191c\b\u0131\u0001"+
		"\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0004\u0131\u1922\b\u0131\u000b"+
		"\u0131\f\u0131\u1923\u0001\u0131\u0001\u0131\u0003\u0131\u1928\b\u0131"+
		"\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131"+
		"\u0001\u0131\u0003\u0131\u1931\b\u0131\u0001\u0131\u0001\u0131\u0001\u0131"+
		"\u0001\u0131\u0001\u0131\u0001\u0131\u0003\u0131\u1939\b\u0131\u0001\u0131"+
		"\u0001\u0131\u0001\u0131\u0003\u0131\u193e\b\u0131\u0001\u0131\u0001\u0131"+
		"\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0003\u0131\u1946\b\u0131"+
		"\u0001\u0131\u0001\u0131\u0001\u0131\u0003\u0131\u194b\b\u0131\u0001\u0131"+
		"\u0001\u0131\u0001\u0131\u0003\u0131\u1950\b\u0131\u0003\u0131\u1952\b"+
		"\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001"+
		"\u0131\u0001\u0131\u0003\u0131\u195b\b\u0131\u0001\u0131\u0001\u0131\u0001"+
		"\u0131\u0003\u0131\u1960\b\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001"+
		"\u0131\u0001\u0131\u0001\u0131\u0003\u0131\u1968\b\u0131\u0001\u0131\u0001"+
		"\u0131\u0001\u0131\u0003\u0131\u196d\b\u0131\u0001\u0131\u0001\u0131\u0001"+
		"\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0003\u0131\u1975\b\u0131\u0001"+
		"\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0003"+
		"\u0131\u197d\b\u0131\u0001\u0131\u0003\u0131\u1980\b\u0131\u0001\u0131"+
		"\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131"+
		"\u0001\u0131\u0003\u0131\u198a\b\u0131\u0001\u0131\u0001\u0131\u0001\u0131"+
		"\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131"+
		"\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131"+
		"\u0001\u0131\u0003\u0131\u199c\b\u0131\u0001\u0131\u0001\u0131\u0001\u0131"+
		"\u0001\u0131\u0003\u0131\u19a2\b\u0131\u0001\u0131\u0001\u0131\u0003\u0131"+
		"\u19a6\b\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0003\u0131"+
		"\u19ac\b\u0131\u0001\u0131\u0001\u0131\u0003\u0131\u19b0\b\u0131\u0001"+
		"\u0131\u0001\u0131\u0003\u0131\u19b4\b\u0131\u0001\u0132\u0001\u0132\u0001"+
		"\u0132\u0001\u0132\u0001\u0132\u0001\u0133\u0001\u0133\u0001\u0133\u0001"+
		"\u0133\u0005\u0133\u19bf\b\u0133\n\u0133\f\u0133\u19c2\t\u0133\u0001\u0133"+
		"\u0001\u0133\u0001\u0133\u0001\u0133\u0001\u0133\u0003\u0133\u19c9\b\u0133"+
		"\u0001\u0134\u0001\u0134\u0003\u0134\u19cd\b\u0134\u0001\u0135\u0001\u0135"+
		"\u0001\u0135\u0003\u0135\u19d2\b\u0135\u0001\u0135\u0001\u0135\u0001\u0135"+
		"\u0003\u0135\u19d7\b\u0135\u0001\u0135\u0001\u0135\u0001\u0135\u0001\u0135"+
		"\u0003\u0135\u19dd\b\u0135\u0001\u0135\u0001\u0135\u0001\u0135\u0003\u0135"+
		"\u19e2\b\u0135\u0001\u0135\u0001\u0135\u0003\u0135\u19e6\b\u0135\u0001"+
		"\u0135\u0001\u0135\u0001\u0135\u0003\u0135\u19eb\b\u0135\u0001\u0135\u0001"+
		"\u0135\u0001\u0135\u0003\u0135\u19f0\b\u0135\u0001\u0135\u0001\u0135\u0001"+
		"\u0135\u0003\u0135\u19f5\b\u0135\u0001\u0135\u0001\u0135\u0001\u0135\u0001"+
		"\u0135\u0001\u0135\u0001\u0135\u0005\u0135\u19fd\b\u0135\n\u0135\f\u0135"+
		"\u1a00\t\u0135\u0003\u0135\u1a02\b\u0135\u0001\u0135\u0001\u0135\u0003"+
		"\u0135\u1a06\b\u0135\u0001\u0135\u0001\u0135\u0003\u0135\u1a0a\b\u0135"+
		"\u0001\u0136\u0001\u0136\u0001\u0136\u0001\u0136\u0001\u0136\u0003\u0136"+
		"\u1a11\b\u0136\u0001\u0136\u0001\u0136\u0003\u0136\u1a15\b\u0136\u0001"+
		"\u0136\u0001\u0136\u0001\u0136\u0001\u0136\u0001\u0136\u0001\u0136\u0001"+
		"\u0136\u0001\u0136\u0001\u0136\u0001\u0136\u0001\u0136\u0001\u0136\u0001"+
		"\u0136\u0001\u0136\u0001\u0136\u0001\u0136\u0001\u0136\u0001\u0136\u0001"+
		"\u0136\u0001\u0136\u0001\u0136\u0001\u0136\u0001\u0136\u0001\u0136\u0001"+
		"\u0136\u0001\u0136\u0001\u0136\u0003\u0136\u1a32\b\u0136\u0001\u0137\u0001"+
		"\u0137\u0001\u0137\u0003\u0137\u1a37\b\u0137\u0001\u0137\u0001\u0137\u0003"+
		"\u0137\u1a3b\b\u0137\u0001\u0138\u0003\u0138\u1a3e\b\u0138\u0001\u0138"+
		"\u0003\u0138\u1a41\b\u0138\u0001\u0138\u0003\u0138\u1a44\b\u0138\u0001"+
		"\u0138\u0003\u0138\u1a47\b\u0138\u0001\u0139\u0001\u0139\u0001\u013a\u0001"+
		"\u013a\u0001\u013a\u0001\u013b\u0001\u013b\u0001\u013c\u0001\u013c\u0003"+
		"\u013c\u1a52\b\u013c\u0001\u013d\u0001\u013d\u0001\u013d\u0001\u013d\u0001"+
		"\u013d\u0001\u013e\u0001\u013e\u0001\u013e\u0001\u013e\u0001\u013e\u0001"+
		"\u013e\u0001\u013e\u0003\u013e\u1a60\b\u013e\u0001\u013f\u0001\u013f\u0001"+
		"\u013f\u0001\u013f\u0001\u013f\u0005\u013f\u1a67\b\u013f\n\u013f\f\u013f"+
		"\u1a6a\t\u013f\u0001\u0140\u0001\u0140\u0001\u0140\u0001\u0140\u0001\u0140"+
		"\u0001\u0140\u0001\u0140\u0001\u0140\u0001\u0140\u0001\u0140\u0001\u0140"+
		"\u0001\u0140\u0001\u0140\u0001\u0140\u0001\u0140\u0001\u0140\u0001\u0140"+
		"\u0001\u0140\u0001\u0140\u0001\u0140\u0001\u0140\u0001\u0140\u0001\u0140"+
		"\u0003\u0140\u1a83\b\u0140\u0001\u0141\u0001\u0141\u0001\u0141\u0001\u0141"+
		"\u0001\u0141\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0003\u0142"+
		"\u1a8e\b\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142"+
		"\u0003\u0142\u1a95\b\u0142\u0005\u0142\u1a97\b\u0142\n\u0142\f\u0142\u1a9a"+
		"\t\u0142\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0003\u0143\u1aa0"+
		"\b\u0143\u0001\u0144\u0001\u0144\u0001\u0144\u0001\u0144\u0001\u0144\u0001"+
		"\u0144\u0003\u0144\u1aa8\b\u0144\u0001\u0144\u0001\u0144\u0001\u0144\u0003"+
		"\u0144\u1aad\b\u0144\u0001\u0144\u0001\u0144\u0001\u0144\u0001\u0144\u0005"+
		"\u0144\u1ab3\b\u0144\n\u0144\f\u0144\u1ab6\t\u0144\u0001\u0145\u0001\u0145"+
		"\u0001\u0145\u0003\u0145\u1abb\b\u0145\u0001\u0145\u0001\u0145\u0001\u0145"+
		"\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0003\u0145"+
		"\u1ac5\b\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145"+
		"\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145"+
		"\u0003\u0145\u1ad2\b\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145"+
		"\u0003\u0145\u1ad8\b\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145"+
		"\u0003\u0145\u1ade\b\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145"+
		"\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145"+
		"\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0003\u0145\u1aee\b\u0145"+
		"\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0003\u0145\u1af4\b\u0145"+
		"\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145"+
		"\u0001\u0145\u0005\u0145\u1afd\b\u0145\n\u0145\f\u0145\u1b00\t\u0145\u0001"+
		"\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001"+
		"\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001"+
		"\u0146\u0001\u0146\u0005\u0146\u1b10\b\u0146\n\u0146\f\u0146\u1b13\t\u0146"+
		"\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146"+
		"\u0001\u0146\u0004\u0146\u1b1c\b\u0146\u000b\u0146\f\u0146\u1b1d\u0001"+
		"\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001"+
		"\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001"+
		"\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0003\u0146\u1b30\b\u0146\u0001"+
		"\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001"+
		"\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001"+
		"\u0146\u0001\u0146\u0001\u0146\u0005\u0146\u1b41\b\u0146\n\u0146\f\u0146"+
		"\u1b44\t\u0146\u0001\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001\u0147"+
		"\u0001\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0003\u0147\u1b4f\b\u0147"+
		"\u0001\u0148\u0001\u0148\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149"+
		"\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149"+
		"\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0003\u0149\u1b61\b\u0149"+
		"\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a"+
		"\u0001\u014a\u0003\u014a\u1b6a\b\u014a\u0001\u014b\u0001\u014b\u0001\u014b"+
		"\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0003\u014b\u1b73\b\u014b"+
		"\u0001\u014c\u0001\u014c\u0001\u014d\u0001\u014d\u0001\u014d\u0001\u014d"+
		"\u0001\u014d\u0003\u014d\u1b7c\b\u014d\u0001\u014e\u0001\u014e\u0001\u014f"+
		"\u0001\u014f\u0001\u0150\u0001\u0150\u0001\u0151\u0001\u0151\u0001\u0152"+
		"\u0001\u0152\u0001\u0153\u0001\u0153\u0001\u0154\u0001\u0154\u0001\u0154"+
		"\u0000\u0003\u0288\u028a\u028c\u0155\u0000\u0002\u0004\u0006\b\n\f\u000e"+
		"\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDF"+
		"HJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c"+
		"\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4"+
		"\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc"+
		"\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4"+
		"\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec"+
		"\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104"+
		"\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c"+
		"\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134"+
		"\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c"+
		"\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164"+
		"\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c"+
		"\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194"+
		"\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac"+
		"\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4"+
		"\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc"+
		"\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4"+
		"\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c"+
		"\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224"+
		"\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c"+
		"\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254"+
		"\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c"+
		"\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284"+
		"\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c"+
		"\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u0000\u008b\u0002\u0000%%\u0093\u0093"+
		"\u0002\u0000\u0200\u0200\u0206\u0206\u0003\u0000EE\u009a\u009a\u00af\u00af"+
		"\u0005\u0000((\u0177\u0177\u01b7\u01b7\u01bb\u01bb\u01fb\u01fb\u0004\u0000"+
		"((\u0197\u0197\u01fe\u01fe\u024a\u024a\u0002\u0000\u01f3\u01f3\u0466\u0466"+
		"\u0002\u0000NN\u008a\u008a\u0002\u0000\u000e\u000e\u0145\u0145\u0003\u0000"+
		"**UU\u00b2\u00b2\u0002\u0000\u01a5\u01a5\u0218\u0218\u0003\u0000\u01eb"+
		"\u01eb\u0271\u0271\u0279\u0279\u0002\u0000\u017e\u017e\u01bd\u01bd\u0002"+
		"\u0000\u0157\u0157\u01cb\u01cb\u0003\u0000\u0155\u0155\u01ae\u01ae\u0243"+
		"\u0243\u0002\u0000\u01bc\u01bc\u0288\u0288\u0002\u0000\u01fa\u01fa\u0292"+
		"\u0292\u0003\u0000PPTTzz\u0003\u0000((\u0188\u0188\u01a2\u01a2\u0003\u0000"+
		"((\u0184\u0184\u02f8\u02f8\u0002\u0000\u0264\u0264\u0287\u0287\u0002\u0000"+
		"QQ[[\u0003\u0000\u01a7\u01a7\u020f\u020f\u024c\u024c\u0002\u0000EE\u009a"+
		"\u009a\u0001\u0000\u015b\u015c\u0001\u0000\u045c\u045d\u0002\u0000\u0466"+
		"\u0466\u046e\u046e\u0003\u0000\u01a1\u01a1\u01c6\u01c6\u01fa\u01fa\u0002"+
		"\u0000((\u045c\u045d\u0007\u0000((\u0169\u0169\u016b\u016b\u0188\u0188"+
		"\u01a2\u01a2\u0227\u0227\u046e\u046e\u0002\u0000\u01f3\u01f3\u01ff\u01ff"+
		"\u0001\u0000\u045d\u045e\u0002\u0000\u0005\u000511\u0004\u0000((\u0177"+
		"\u0177\u01b7\u01b7\u01bb\u01bb\u0002\u0000\u0019\u0019\u001d\u001d\u0002"+
		"\u0000\f\f\u00a9\u00a9\u0002\u0000\u00ba\u00ba\u028c\u028c\u0003\u0000"+
		"((\u0177\u0177\u01b7\u01b7\u0002\u0000\u0014\u0014\u008d\u008d\u0003\u0000"+
		"))KKhh\u0002\u0000hh\u016d\u016d\u0002\u0000\u0164\u0164\u019e\u019e\u0002"+
		"\u0000dd\u0241\u0241\u0002\u0000))hh\u0002\u0000\u0006\u0006//\u0002\u0000"+
		"\u00b6\u00b6\u0284\u0284\u0004\u0000\u01a1\u01a1\u01c6\u01c6\u01f9\u01f9"+
		"\u021c\u021c\u0002\u0000\u01a1\u01a1\u01f9\u01f9\u0002\u0000\r\r++\u0003"+
		"\u0000BBNN\u00b4\u00b4\u0002\u0000!!SS\u0002\u0000``\u0091\u0091\u0002"+
		"\u0000\u0006\u0006/0\u0001\u0000\u0259\u025a\u0002\u0000\u01aa\u01aa\u0248"+
		"\u0248\u0002\u0000\u00dc\u00dc\u01ce\u01ce\u0005\u0000ii\u01d3\u01d4\u01d6"+
		"\u01d6\u01da\u01e2\u0229\u0229\u0004\u0000\u01d0\u01d1\u01d5\u01d5\u01d7"+
		"\u01d8\u022a\u022a\u0003\u0000jj\u01cf\u01cf\u01d9\u01d9\u0002\u0000\u01bf"+
		"\u01bf\u025b\u025b\u0002\u0000\u0255\u0255\u0257\u0257\u0002\u0000\u014f"+
		"\u014f\u025c\u025c\u0002\u0000ZZ\u0238\u0238\u0002\u000011\u017c\u017c"+
		"\u0003\u0000\u001e\u001e==\u00ad\u00ad\u0003\u0000\u0080\u0080\u00a6\u00a6"+
		"\u01a8\u01a8\u0002\u0000ff\u00b0\u00b0\u0003\u0000\u015f\u015f\u024d\u024d"+
		"\u043c\u043c\u0002\u0000&&\u0286\u0286\u0002\u0000pp\u01cb\u01cb\u0002"+
		"\u0000\u00a6\u00a6\u02a0\u02a0\u0002\u0000\u019a\u019a\u0222\u0222\u0004"+
		"\u0000\u00c8\u00c8\u00ca\u00ca\u00d0\u00d0\u0265\u0265\u0002\u0000\u043e"+
		"\u043e\u044e\u044e\u0002\u0000\u0150\u0150\u022b\u022b\u0002\u0000DDP"+
		"P\u0006\u0000\u0080\u0080\u00a6\u00a6\u00ab\u00ab\u0193\u0193\u01a8\u01a8"+
		"\u0286\u0286\u0002\u0000\u01f2\u01f2\u0261\u0261\u0002\u0000\u0190\u0190"+
		"\u028a\u028a\u0002\u0000\u0080\u0080\u01a8\u01a8\u0003\u0000QQ\\\\\u01b5"+
		"\u01b5\u0003\u0000\u01aa\u01aa\u01cb\u01cb\u0248\u0248\u0002\u0000\u0261"+
		"\u0261\u0285\u0285\u0002\u0000\u016f\u016f\u0221\u0221\u0006\u0000\u00dc"+
		"\u00dc\u018d\u018d\u018f\u018f\u01a9\u01a9\u0228\u0228\u024e\u024e\u0002"+
		"\u0000+,>>\u0003\u0000\u019a\u019a\u0211\u0211\u0355\u0355\u0002\u0000"+
		"\u01c3\u01c3\u0273\u0273\n\u0000\u015e\u015e\u0166\u0166\u0171\u0173\u0179"+
		"\u0179\u01ec\u01ec\u01f4\u01f4\u0266\u0266\u026d\u026d\u0324\u0324\u03cc"+
		"\u03cc\u0002\u0000\"\"\u00a3\u00a3\u0002\u0000rr\u03c3\u03c3\u000b\u0000"+
		"\u015e\u015e\u0166\u0166\u0171\u0173\u0179\u0179\u01ec\u01ec\u01f4\u01f4"+
		"\u0239\u0239\u0266\u0266\u026d\u026d\u0324\u0324\u03cc\u03cc\u0001\u0000"+
		"\u0473\u0474\u0004\u0000\u016e\u016e\u02f3\u02fe\u0466\u0466\u046e\u046f"+
		"\u0003\u0000\u045c\u045e\u0467\u0467\u0469\u0469\u0002\u0000??\u00ac\u00ac"+
		"\u0002\u0000qq\u046a\u046a\u0005\u0000\u0018\u0018\u00d8\u00da\u00e1\u00e1"+
		"\u00e3\u00e6\u01f7\u01f7\u0002\u0000\u0018\u0018\u00d9\u00d9\u0002\u0000"+
		"\u0018\u0018\u00d8\u00d8\u0001\u0000\u00be\u00c9\u0003\u0000\u00b1\u00b1"+
		"\u00bd\u00bd\u024b\u024b\u0002\u0000\u00cd\u00d2\u01a2\u01a2\u0006\u0000"+
		"\u00d3\u00d3\u00de\u00de\u00e0\u00e0\u00e2\u00e2\u00e9\u00e9\u0153\u0154"+
		"\u0004\u0000\u00d4\u00d7\u00dc\u00dd\u00df\u00df\u0151\u0151\u0002\u0000"+
		"\u0096\u0096\u00e7\u00e7\u0002\u0000\u01c3\u01c3\u0303\u030b\u0002\u0000"+
		"\u00dc\u00dc\u01f7\u01f7\u0005\u0000\u00c2\u00c2\u00c8\u00c8\u00d3\u00d4"+
		"\u00d6\u00d6\u01c3\u01c3\u0002\u0000\u00b1\u00b1\u024b\u024b\u0001\u0000"+
		"\u0433\u0434\u0002\u0000\u01f9\u01f9\u0436\u0436\u0002\u0000\u0132\u0135"+
		"\u0139\u0139\u0002\u0000##\u0130\u0133\u0001\u0000\u013c\u013d\u0003\u0000"+
		"\u0010\u0010^^\u00aa\u00aa\u0002\u0000\u00d8\u00d8\u00dc\u00dc\u0002\u0000"+
		"\u00d3\u00d4\u00d6\u00d6\u0003\u0000\r\r++\u03c1\u03c1\u0003\u0000\u0115"+
		"\u0115\u0121\u0122\u012c\u012c\u0003\u0000\u0116\u0118\u0128\u012b\u012d"+
		"\u012f\u0002\u0000\u011e\u011e\u0120\u0120\u0002\u0000\u011c\u011c\u011f"+
		"\u011f\u0002\u0000\u011a\u011b\u0125\u0127\u0002\u0000\u0082\u0082\u0241"+
		"\u0241\u0002\u0000\u01a4\u01a4\u0219\u0219\u0002\u0000\u0204\u0204\u0212"+
		"\u0212\u0002\u0000oo\u0451\u0451\u0003\u0000??\u00ac\u00ac\u027d\u027d"+
		"\u0002\u0000\u0086\u0086\u0092\u0092\u0003\u0000\u0006\u0006\u0148\u0148"+
		"\u0251\u0251\u0003\u0000oo\u044a\u044b\u0451\u0452\u0001\u0000\u0447\u044d"+
		"\u0002\u0000\u00dc\u00dc\u02ca\u02f2\u0001\u0000\u02ff\u0302\u0001\u0000"+
		"\u02a0\u02a8\u0001\u0000\u0298\u029f\u0003\u0000\u00d3\u00d7\u00e4\u00e4"+
		"\u00e7\u00e7$\u0000\"\"..88IIOOrrvvyy\u00a3\u00a3\u00e9\u00e9\u0115\u0119"+
		"\u011d\u011d\u0121\u0122\u0128\u012f\u0143\u01a3\u01a5\u01bb\u01bd\u0218"+
		"\u021a\u0239\u023b\u0263\u0265\u026e\u0270\u0277\u0279\u0286\u0289\u028a"+
		"\u028c\u0291\u0293\u0297\u02aa\u02b2\u02b7\u02b9\u02bb\u02c1\u02c3\u02c9"+
		"\u02f8\u02f8\u0324\u0324\u034b\u034b\u03c7\u03c7\u03cc\u03cc\u0432\u043d"+
		"\u0476\u0477\u0017\u0000%%``\u0091\u0091\u0093\u0093\u00d3\u00d5\u00d7"+
		"\u00d7\u00f5\u0114\u0119\u011c\u011e\u0120\u0123\u0127\u013b\u013b\u01bc"+
		"\u01bc\u0288\u0288\u0298\u029f\u02c3\u02c3\u0303\u0303\u0306\u0323\u0325"+
		"\u034a\u034c\u03c6\u03c8\u03cb\u03cd\u0431\u0433\u0435\u044d\u044d\u206a"+
		"\u0000\u02ab\u0001\u0000\u0000\u0000\u0002\u02be\u0001\u0000\u0000\u0000"+
		"\u0004\u02d3\u0001\u0000\u0000\u0000\u0006\u02d5\u0001\u0000\u0000\u0000"+
		"\b\u02fd\u0001\u0000\u0000\u0000\n\u0309\u0001\u0000\u0000\u0000\f\u0314"+
		"\u0001\u0000\u0000\u0000\u000e\u0325\u0001\u0000\u0000\u0000\u0010\u032a"+
		"\u0001\u0000\u0000\u0000\u0012\u0336\u0001\u0000\u0000\u0000\u0014\u0351"+
		"\u0001\u0000\u0000\u0000\u0016\u035a\u0001\u0000\u0000\u0000\u0018\u035c"+
		"\u0001\u0000\u0000\u0000\u001a\u0368\u0001\u0000\u0000\u0000\u001c\u0386"+
		"\u0001\u0000\u0000\u0000\u001e\u03b8\u0001\u0000\u0000\u0000 \u03eb\u0001"+
		"\u0000\u0000\u0000\"\u0405\u0001\u0000\u0000\u0000$\u0423\u0001\u0000"+
		"\u0000\u0000&\u0432\u0001\u0000\u0000\u0000(\u049f\u0001\u0000\u0000\u0000"+
		"*\u04a1\u0001\u0000\u0000\u0000,\u04b3\u0001\u0000\u0000\u0000.\u04f0"+
		"\u0001\u0000\u0000\u00000\u0507\u0001\u0000\u0000\u00002\u050d\u0001\u0000"+
		"\u0000\u00004\u0523\u0001\u0000\u0000\u00006\u0525\u0001\u0000\u0000\u0000"+
		"8\u0527\u0001\u0000\u0000\u0000:\u0561\u0001\u0000\u0000\u0000<\u0568"+
		"\u0001\u0000\u0000\u0000>\u056a\u0001\u0000\u0000\u0000@\u0596\u0001\u0000"+
		"\u0000\u0000B\u059c\u0001\u0000\u0000\u0000D\u059e\u0001\u0000\u0000\u0000"+
		"F\u05b3\u0001\u0000\u0000\u0000H\u05ba\u0001\u0000\u0000\u0000J\u05bc"+
		"\u0001\u0000\u0000\u0000L\u05dd\u0001\u0000\u0000\u0000N\u05e0\u0001\u0000"+
		"\u0000\u0000P\u05e5\u0001\u0000\u0000\u0000R\u05ff\u0001\u0000\u0000\u0000"+
		"T\u060f\u0001\u0000\u0000\u0000V\u0611\u0001\u0000\u0000\u0000X\u0621"+
		"\u0001\u0000\u0000\u0000Z\u0623\u0001\u0000\u0000\u0000\\\u065f\u0001"+
		"\u0000\u0000\u0000^\u06a6\u0001\u0000\u0000\u0000`\u06a8\u0001\u0000\u0000"+
		"\u0000b\u06c4\u0001\u0000\u0000\u0000d\u06cc\u0001\u0000\u0000\u0000f"+
		"\u06ea\u0001\u0000\u0000\u0000h\u077d\u0001\u0000\u0000\u0000j\u077f\u0001"+
		"\u0000\u0000\u0000l\u0781\u0001\u0000\u0000\u0000n\u0784\u0001\u0000\u0000"+
		"\u0000p\u07ce\u0001\u0000\u0000\u0000r\u07e5\u0001\u0000\u0000\u0000t"+
		"\u0879\u0001\u0000\u0000\u0000v\u087e\u0001\u0000\u0000\u0000x\u0880\u0001"+
		"\u0000\u0000\u0000z\u088a\u0001\u0000\u0000\u0000|\u08c2\u0001\u0000\u0000"+
		"\u0000~\u08d6\u0001\u0000\u0000\u0000\u0080\u08d8\u0001\u0000\u0000\u0000"+
		"\u0082\u08fb\u0001\u0000\u0000\u0000\u0084\u0904\u0001\u0000\u0000\u0000"+
		"\u0086\u090b\u0001\u0000\u0000\u0000\u0088\u0922\u0001\u0000\u0000\u0000"+
		"\u008a\u092b\u0001\u0000\u0000\u0000\u008c\u093a\u0001\u0000\u0000\u0000"+
		"\u008e\u0950\u0001\u0000\u0000\u0000\u0090\u0964\u0001\u0000\u0000\u0000"+
		"\u0092\u0b16\u0001\u0000\u0000\u0000\u0094\u0b18\u0001\u0000\u0000\u0000"+
		"\u0096\u0b1f\u0001\u0000\u0000\u0000\u0098\u0b26\u0001\u0000\u0000\u0000"+
		"\u009a\u0b3d\u0001\u0000\u0000\u0000\u009c\u0b45\u0001\u0000\u0000\u0000"+
		"\u009e\u0b4c\u0001\u0000\u0000\u0000\u00a0\u0b53\u0001\u0000\u0000\u0000"+
		"\u00a2\u0b5a\u0001\u0000\u0000\u0000\u00a4\u0b66\u0001\u0000\u0000\u0000"+
		"\u00a6\u0b70\u0001\u0000\u0000\u0000\u00a8\u0b77\u0001\u0000\u0000\u0000"+
		"\u00aa\u0b87\u0001\u0000\u0000\u0000\u00ac\u0bb5\u0001\u0000\u0000\u0000"+
		"\u00ae\u0bb7\u0001\u0000\u0000\u0000\u00b0\u0bc1\u0001\u0000\u0000\u0000"+
		"\u00b2\u0bc5\u0001\u0000\u0000\u0000\u00b4\u0bcb\u0001\u0000\u0000\u0000"+
		"\u00b6\u0bd7\u0001\u0000\u0000\u0000\u00b8\u0bd9\u0001\u0000\u0000\u0000"+
		"\u00ba\u0be0\u0001\u0000\u0000\u0000\u00bc\u0be2\u0001\u0000\u0000\u0000"+
		"\u00be\u0c15\u0001\u0000\u0000\u0000\u00c0\u0c5f\u0001\u0000\u0000\u0000"+
		"\u00c2\u0c9a\u0001\u0000\u0000\u0000\u00c4\u0cf2\u0001\u0000\u0000\u0000"+
		"\u00c6\u0cf6\u0001\u0000\u0000\u0000\u00c8\u0d0a\u0001\u0000\u0000\u0000"+
		"\u00ca\u0d0c\u0001\u0000\u0000\u0000\u00cc\u0d14\u0001\u0000\u0000\u0000"+
		"\u00ce\u0d1c\u0001\u0000\u0000\u0000\u00d0\u0d1e\u0001\u0000\u0000\u0000"+
		"\u00d2\u0d3c\u0001\u0000\u0000\u0000\u00d4\u0d73\u0001\u0000\u0000\u0000"+
		"\u00d6\u0d7c\u0001\u0000\u0000\u0000\u00d8\u0d90\u0001\u0000\u0000\u0000"+
		"\u00da\u0d9c\u0001\u0000\u0000\u0000\u00dc\u0da0\u0001\u0000\u0000\u0000"+
		"\u00de\u0dc1\u0001\u0000\u0000\u0000\u00e0\u0dd6\u0001\u0000\u0000\u0000"+
		"\u00e2\u0de0\u0001\u0000\u0000\u0000\u00e4\u0de4\u0001\u0000\u0000\u0000"+
		"\u00e6\u0dfd\u0001\u0000\u0000\u0000\u00e8\u0e27\u0001\u0000\u0000\u0000"+
		"\u00ea\u0e29\u0001\u0000\u0000\u0000\u00ec\u0e38\u0001\u0000\u0000\u0000"+
		"\u00ee\u0e66\u0001\u0000\u0000\u0000\u00f0\u0e70\u0001\u0000\u0000\u0000"+
		"\u00f2\u0e7a\u0001\u0000\u0000\u0000\u00f4\u0eb6\u0001\u0000\u0000\u0000"+
		"\u00f6\u0eb8\u0001\u0000\u0000\u0000\u00f8\u0ed2\u0001\u0000\u0000\u0000"+
		"\u00fa\u0ed8\u0001\u0000\u0000\u0000\u00fc\u0ee8\u0001\u0000\u0000\u0000"+
		"\u00fe\u0eec\u0001\u0000\u0000\u0000\u0100\u0f12\u0001\u0000\u0000\u0000"+
		"\u0102\u0f38\u0001\u0000\u0000\u0000\u0104\u0f46\u0001\u0000\u0000\u0000"+
		"\u0106\u0f4e\u0001\u0000\u0000\u0000\u0108\u0f52\u0001\u0000\u0000\u0000"+
		"\u010a\u0f58\u0001\u0000\u0000\u0000\u010c\u0f66\u0001\u0000\u0000\u0000"+
		"\u010e\u0f69\u0001\u0000\u0000\u0000\u0110\u0f7b\u0001\u0000\u0000\u0000"+
		"\u0112\u0f7f\u0001\u0000\u0000\u0000\u0114\u0f8f\u0001\u0000\u0000\u0000"+
		"\u0116\u0f91\u0001\u0000\u0000\u0000\u0118\u0f9d\u0001\u0000\u0000\u0000"+
		"\u011a\u0fa1\u0001\u0000\u0000\u0000\u011c\u0fb2\u0001\u0000\u0000\u0000"+
		"\u011e\u0fc3\u0001\u0000\u0000\u0000\u0120\u0fc6\u0001\u0000\u0000\u0000"+
		"\u0122\u0fd0\u0001\u0000\u0000\u0000\u0124\u0fd4\u0001\u0000\u0000\u0000"+
		"\u0126\u0fde\u0001\u0000\u0000\u0000\u0128\u0fe1\u0001\u0000\u0000\u0000"+
		"\u012a\u0fe6\u0001\u0000\u0000\u0000\u012c\u0ffa\u0001\u0000\u0000\u0000"+
		"\u012e\u0ffc\u0001\u0000\u0000\u0000\u0130\u100d\u0001\u0000\u0000\u0000"+
		"\u0132\u1016\u0001\u0000\u0000\u0000\u0134\u101f\u0001\u0000\u0000\u0000"+
		"\u0136\u1021\u0001\u0000\u0000\u0000\u0138\u102f\u0001\u0000\u0000\u0000"+
		"\u013a\u103a\u0001\u0000\u0000\u0000\u013c\u1043\u0001\u0000\u0000\u0000"+
		"\u013e\u1046\u0001\u0000\u0000\u0000\u0140\u104e\u0001\u0000\u0000\u0000"+
		"\u0142\u1067\u0001\u0000\u0000\u0000\u0144\u1073\u0001\u0000\u0000\u0000"+
		"\u0146\u1076\u0001\u0000\u0000\u0000\u0148\u1096\u0001\u0000\u0000\u0000"+
		"\u014a\u1098\u0001\u0000\u0000\u0000\u014c\u109a\u0001\u0000\u0000\u0000"+
		"\u014e\u109c\u0001\u0000\u0000\u0000\u0150\u109e\u0001\u0000\u0000\u0000"+
		"\u0152\u10d3\u0001\u0000\u0000\u0000\u0154\u10d5\u0001\u0000\u0000\u0000"+
		"\u0156\u10db\u0001\u0000\u0000\u0000\u0158\u10ef\u0001\u0000\u0000\u0000"+
		"\u015a\u10fd\u0001\u0000\u0000\u0000\u015c\u1108\u0001\u0000\u0000\u0000"+
		"\u015e\u110a\u0001\u0000\u0000\u0000\u0160\u1110\u0001\u0000\u0000\u0000"+
		"\u0162\u111a\u0001\u0000\u0000\u0000\u0164\u111e\u0001\u0000\u0000\u0000"+
		"\u0166\u1125\u0001\u0000\u0000\u0000\u0168\u1129\u0001\u0000\u0000\u0000"+
		"\u016a\u112f\u0001\u0000\u0000\u0000\u016c\u1136\u0001\u0000\u0000\u0000"+
		"\u016e\u113c\u0001\u0000\u0000\u0000\u0170\u1142\u0001\u0000\u0000\u0000"+
		"\u0172\u1147\u0001\u0000\u0000\u0000\u0174\u1176\u0001\u0000\u0000\u0000"+
		"\u0176\u118b\u0001\u0000\u0000\u0000\u0178\u11a4\u0001\u0000\u0000\u0000"+
		"\u017a\u11a7\u0001\u0000\u0000\u0000\u017c\u11ad\u0001\u0000\u0000\u0000"+
		"\u017e\u11bd\u0001\u0000\u0000\u0000\u0180\u11cc\u0001\u0000\u0000\u0000"+
		"\u0182\u11d2\u0001\u0000\u0000\u0000\u0184\u11f0\u0001\u0000\u0000\u0000"+
		"\u0186\u11f2\u0001\u0000\u0000\u0000\u0188\u11f9\u0001\u0000\u0000\u0000"+
		"\u018a\u1205\u0001\u0000\u0000\u0000\u018c\u120b\u0001\u0000\u0000\u0000"+
		"\u018e\u1224\u0001\u0000\u0000\u0000\u0190\u1228\u0001\u0000\u0000\u0000"+
		"\u0192\u122c\u0001\u0000\u0000\u0000\u0194\u1237\u0001\u0000\u0000\u0000"+
		"\u0196\u1275\u0001\u0000\u0000\u0000\u0198\u12ad\u0001\u0000\u0000\u0000"+
		"\u019a\u12af\u0001\u0000\u0000\u0000\u019c\u1319\u0001\u0000\u0000\u0000"+
		"\u019e\u1331\u0001\u0000\u0000\u0000\u01a0\u1333\u0001\u0000\u0000\u0000"+
		"\u01a2\u1345\u0001\u0000\u0000\u0000\u01a4\u138f\u0001\u0000\u0000\u0000"+
		"\u01a6\u1391\u0001\u0000\u0000\u0000\u01a8\u139e\u0001\u0000\u0000\u0000"+
		"\u01aa\u13a9\u0001\u0000\u0000\u0000\u01ac\u13c8\u0001\u0000\u0000\u0000"+
		"\u01ae\u13d2\u0001\u0000\u0000\u0000\u01b0\u13dc\u0001\u0000\u0000\u0000"+
		"\u01b2\u13de\u0001\u0000\u0000\u0000\u01b4\u13e8\u0001\u0000\u0000\u0000"+
		"\u01b6\u13eb\u0001\u0000\u0000\u0000\u01b8\u1446\u0001\u0000\u0000\u0000"+
		"\u01ba\u1458\u0001\u0000\u0000\u0000\u01bc\u145a\u0001\u0000\u0000\u0000"+
		"\u01be\u145e\u0001\u0000\u0000\u0000\u01c0\u1484\u0001\u0000\u0000\u0000"+
		"\u01c2\u148d\u0001\u0000\u0000\u0000\u01c4\u1493\u0001\u0000\u0000\u0000"+
		"\u01c6\u149a\u0001\u0000\u0000\u0000\u01c8\u14b0\u0001\u0000\u0000\u0000"+
		"\u01ca\u14b2\u0001\u0000\u0000\u0000\u01cc\u14bd\u0001\u0000\u0000\u0000"+
		"\u01ce\u14c3\u0001\u0000\u0000\u0000\u01d0\u14fb\u0001\u0000\u0000\u0000"+
		"\u01d2\u1596\u0001\u0000\u0000\u0000\u01d4\u15a2\u0001\u0000\u0000\u0000"+
		"\u01d6\u15b1\u0001\u0000\u0000\u0000\u01d8\u15b7\u0001\u0000\u0000\u0000"+
		"\u01da\u15ca\u0001\u0000\u0000\u0000\u01dc\u15d4\u0001\u0000\u0000\u0000"+
		"\u01de\u15e2\u0001\u0000\u0000\u0000\u01e0\u15e4\u0001\u0000\u0000\u0000"+
		"\u01e2\u15e7\u0001\u0000\u0000\u0000\u01e4\u15fd\u0001\u0000\u0000\u0000"+
		"\u01e6\u1609\u0001\u0000\u0000\u0000\u01e8\u1615\u0001\u0000\u0000\u0000"+
		"\u01ea\u1621\u0001\u0000\u0000\u0000\u01ec\u1625\u0001\u0000\u0000\u0000"+
		"\u01ee\u1627\u0001\u0000\u0000\u0000\u01f0\u1651\u0001\u0000\u0000\u0000"+
		"\u01f2\u1658\u0001\u0000\u0000\u0000\u01f4\u165a\u0001\u0000\u0000\u0000"+
		"\u01f6\u1671\u0001\u0000\u0000\u0000\u01f8\u1677\u0001\u0000\u0000\u0000"+
		"\u01fa\u167f\u0001\u0000\u0000\u0000\u01fc\u1682\u0001\u0000\u0000\u0000"+
		"\u01fe\u1685\u0001\u0000\u0000\u0000\u0200\u169a\u0001\u0000\u0000\u0000"+
		"\u0202\u16af\u0001\u0000\u0000\u0000\u0204\u16b7\u0001\u0000\u0000\u0000"+
		"\u0206\u16dd\u0001\u0000\u0000\u0000\u0208\u16e9\u0001\u0000\u0000\u0000"+
		"\u020a\u16eb\u0001\u0000\u0000\u0000\u020c\u16f1\u0001\u0000\u0000\u0000"+
		"\u020e\u16f5\u0001\u0000\u0000\u0000\u0210\u1703\u0001\u0000\u0000\u0000"+
		"\u0212\u1710\u0001\u0000\u0000\u0000\u0214\u171b\u0001\u0000\u0000\u0000"+
		"\u0216\u171d\u0001\u0000\u0000\u0000\u0218\u1723\u0001\u0000\u0000\u0000"+
		"\u021a\u1727\u0001\u0000\u0000\u0000\u021c\u1729\u0001\u0000\u0000\u0000"+
		"\u021e\u172b\u0001\u0000\u0000\u0000\u0220\u173d\u0001\u0000\u0000\u0000"+
		"\u0222\u174d\u0001\u0000\u0000\u0000\u0224\u1751\u0001\u0000\u0000\u0000"+
		"\u0226\u1756\u0001\u0000\u0000\u0000\u0228\u1761\u0001\u0000\u0000\u0000"+
		"\u022a\u1766\u0001\u0000\u0000\u0000\u022c\u1768\u0001\u0000\u0000\u0000"+
		"\u022e\u176c\u0001\u0000\u0000\u0000\u0230\u1785\u0001\u0000\u0000\u0000"+
		"\u0232\u1787\u0001\u0000\u0000\u0000\u0234\u178a\u0001\u0000\u0000\u0000"+
		"\u0236\u178f\u0001\u0000\u0000\u0000\u0238\u179f\u0001\u0000\u0000\u0000"+
		"\u023a\u181b\u0001\u0000\u0000\u0000\u023c\u181d\u0001\u0000\u0000\u0000"+
		"\u023e\u183e\u0001\u0000\u0000\u0000\u0240\u1843\u0001\u0000\u0000\u0000"+
		"\u0242\u1847\u0001\u0000\u0000\u0000\u0244\u184d\u0001\u0000\u0000\u0000"+
		"\u0246\u1855\u0001\u0000\u0000\u0000\u0248\u185d\u0001\u0000\u0000\u0000"+
		"\u024a\u1865\u0001\u0000\u0000\u0000\u024c\u1870\u0001\u0000\u0000\u0000"+
		"\u024e\u1878\u0001\u0000\u0000\u0000\u0250\u1880\u0001\u0000\u0000\u0000"+
		"\u0252\u1888\u0001\u0000\u0000\u0000\u0254\u1890\u0001\u0000\u0000\u0000"+
		"\u0256\u18bb\u0001\u0000\u0000\u0000\u0258\u18cb\u0001\u0000\u0000\u0000"+
		"\u025a\u18cf\u0001\u0000\u0000\u0000\u025c\u18d1\u0001\u0000\u0000\u0000"+
		"\u025e\u18d4\u0001\u0000\u0000\u0000\u0260\u18ea\u0001\u0000\u0000\u0000"+
		"\u0262\u19b3\u0001\u0000\u0000\u0000\u0264\u19b5\u0001\u0000\u0000\u0000"+
		"\u0266\u19c8\u0001\u0000\u0000\u0000\u0268\u19ca\u0001\u0000\u0000\u0000"+
		"\u026a\u1a09\u0001\u0000\u0000\u0000\u026c\u1a31\u0001\u0000\u0000\u0000"+
		"\u026e\u1a33\u0001\u0000\u0000\u0000\u0270\u1a3d\u0001\u0000\u0000\u0000"+
		"\u0272\u1a48\u0001\u0000\u0000\u0000\u0274\u1a4a\u0001\u0000\u0000\u0000"+
		"\u0276\u1a4d\u0001\u0000\u0000\u0000\u0278\u1a51\u0001\u0000\u0000\u0000"+
		"\u027a\u1a53\u0001\u0000\u0000\u0000\u027c\u1a5f\u0001\u0000\u0000\u0000"+
		"\u027e\u1a61\u0001\u0000\u0000\u0000\u0280\u1a82\u0001\u0000\u0000\u0000"+
		"\u0282\u1a84\u0001\u0000\u0000\u0000\u0284\u1a8d\u0001\u0000\u0000\u0000"+
		"\u0286\u1a9f\u0001\u0000\u0000\u0000\u0288\u1aac\u0001\u0000\u0000\u0000"+
		"\u028a\u1ab7\u0001\u0000\u0000\u0000\u028c\u1b2f\u0001\u0000\u0000\u0000"+
		"\u028e\u1b4e\u0001\u0000\u0000\u0000\u0290\u1b50\u0001\u0000\u0000\u0000"+
		"\u0292\u1b60\u0001\u0000\u0000\u0000\u0294\u1b69\u0001\u0000\u0000\u0000"+
		"\u0296\u1b72\u0001\u0000\u0000\u0000\u0298\u1b74\u0001\u0000\u0000\u0000"+
		"\u029a\u1b7b\u0001\u0000\u0000\u0000\u029c\u1b7d\u0001\u0000\u0000\u0000"+
		"\u029e\u1b7f\u0001\u0000\u0000\u0000\u02a0\u1b81\u0001\u0000\u0000\u0000"+
		"\u02a2\u1b83\u0001\u0000\u0000\u0000\u02a4\u1b85\u0001\u0000\u0000\u0000"+
		"\u02a6\u1b87\u0001\u0000\u0000\u0000\u02a8\u1b89\u0001\u0000\u0000\u0000"+
		"\u02aa\u02ac\u0003\u0002\u0001\u0000\u02ab\u02aa\u0001\u0000\u0000\u0000"+
		"\u02ab\u02ac\u0001\u0000\u0000\u0000\u02ac\u02af\u0001\u0000\u0000\u0000"+
		"\u02ad\u02ae\u0005\u044b\u0000\u0000\u02ae\u02b0\u0005\u044b\u0000\u0000"+
		"\u02af\u02ad\u0001\u0000\u0000\u0000\u02af\u02b0\u0001\u0000\u0000\u0000"+
		"\u02b0\u02b1\u0001\u0000\u0000\u0000\u02b1\u02b2\u0005\u0000\u0000\u0001"+
		"\u02b2\u0001\u0001\u0000\u0000\u0000\u02b3\u02b6\u0003\u0004\u0002\u0000"+
		"\u02b4\u02b5\u0005\u044b\u0000\u0000\u02b5\u02b7\u0005\u044b\u0000\u0000"+
		"\u02b6\u02b4\u0001\u0000\u0000\u0000\u02b6\u02b7\u0001\u0000\u0000\u0000"+
		"\u02b7\u02b9\u0001\u0000\u0000\u0000\u02b8\u02ba\u0005\u045a\u0000\u0000"+
		"\u02b9\u02b8\u0001\u0000\u0000\u0000\u02b9\u02ba\u0001\u0000\u0000\u0000"+
		"\u02ba\u02bd\u0001\u0000\u0000\u0000\u02bb\u02bd\u0003\u0006\u0003\u0000"+
		"\u02bc\u02b3\u0001\u0000\u0000\u0000\u02bc\u02bb\u0001\u0000\u0000\u0000"+
		"\u02bd\u02c0\u0001\u0000\u0000\u0000\u02be\u02bc\u0001\u0000\u0000\u0000"+
		"\u02be\u02bf\u0001\u0000\u0000\u0000\u02bf\u02ca\u0001\u0000\u0000\u0000"+
		"\u02c0\u02be\u0001\u0000\u0000\u0000\u02c1\u02c7\u0003\u0004\u0002\u0000"+
		"\u02c2\u02c3\u0005\u044b\u0000\u0000\u02c3\u02c5\u0005\u044b\u0000\u0000"+
		"\u02c4\u02c2\u0001\u0000\u0000\u0000\u02c4\u02c5\u0001\u0000\u0000\u0000"+
		"\u02c5\u02c6\u0001\u0000\u0000\u0000\u02c6\u02c8\u0005\u045a\u0000\u0000"+
		"\u02c7\u02c4\u0001\u0000\u0000\u0000\u02c7\u02c8\u0001\u0000\u0000\u0000"+
		"\u02c8\u02cb\u0001\u0000\u0000\u0000\u02c9\u02cb\u0003\u0006\u0003\u0000"+
		"\u02ca\u02c1\u0001\u0000\u0000\u0000\u02ca\u02c9\u0001\u0000\u0000\u0000"+
		"\u02cb\u0003\u0001\u0000\u0000\u0000\u02cc\u02d4\u0003\b\u0004\u0000\u02cd"+
		"\u02d4\u0003\n\u0005\u0000\u02ce\u02d4\u0003\f\u0006\u0000\u02cf\u02d4"+
		"\u0003\u000e\u0007\u0000\u02d0\u02d4\u0003\u0010\b\u0000\u02d1\u02d4\u0003"+
		"\u0014\n\u0000\u02d2\u02d4\u0003\u0016\u000b\u0000\u02d3\u02cc\u0001\u0000"+
		"\u0000\u0000\u02d3\u02cd\u0001\u0000\u0000\u0000\u02d3\u02ce\u0001\u0000"+
		"\u0000\u0000\u02d3\u02cf\u0001\u0000\u0000\u0000\u02d3\u02d0\u0001\u0000"+
		"\u0000\u0000\u02d3\u02d1\u0001\u0000\u0000\u0000\u02d3\u02d2\u0001\u0000"+
		"\u0000\u0000\u02d4\u0005\u0001\u0000\u0000\u0000\u02d5\u02d6\u0005\u045a"+
		"\u0000\u0000\u02d6\u0007\u0001\u0000\u0000\u0000\u02d7\u02fe\u0003\u0018"+
		"\f\u0000\u02d8\u02fe\u0003\u001a\r\u0000\u02d9\u02fe\u0003\u001c\u000e"+
		"\u0000\u02da\u02fe\u0003\u001e\u000f\u0000\u02db\u02fe\u0003 \u0010\u0000"+
		"\u02dc\u02fe\u0003\"\u0011\u0000\u02dd\u02fe\u0003&\u0013\u0000\u02de"+
		"\u02fe\u0003(\u0014\u0000\u02df\u02fe\u0003*\u0015\u0000\u02e0\u02fe\u0003"+
		",\u0016\u0000\u02e1\u02fe\u0003.\u0017\u0000\u02e2\u02fe\u00038\u001c"+
		"\u0000\u02e3\u02fe\u0003$\u0012\u0000\u02e4\u02fe\u0003~?\u0000\u02e5"+
		"\u02fe\u0003\u0080@\u0000\u02e6\u02fe\u0003\u0082A\u0000\u02e7\u02fe\u0003"+
		"\u0084B\u0000\u02e8\u02fe\u0003\u0086C\u0000\u02e9\u02fe\u0003\u0088D"+
		"\u0000\u02ea\u02fe\u0003\u008aE\u0000\u02eb\u02fe\u0003\u008cF\u0000\u02ec"+
		"\u02fe\u0003\u008eG\u0000\u02ed\u02fe\u0003\u0090H\u0000\u02ee\u02fe\u0003"+
		"\u0094J\u0000\u02ef\u02fe\u0003\u0096K\u0000\u02f0\u02fe\u0003\u0098L"+
		"\u0000\u02f1\u02fe\u0003\u009aM\u0000\u02f2\u02fe\u0003\u009cN\u0000\u02f3"+
		"\u02fe\u0003\u009eO\u0000\u02f4\u02fe\u0003\u00a0P\u0000\u02f5\u02fe\u0003"+
		"\u00a2Q\u0000\u02f6\u02fe\u0003\u00a4R\u0000\u02f7\u02fe\u0003\u00a6S"+
		"\u0000\u02f8\u02fe\u0003\u00a8T\u0000\u02f9\u02fe\u0003\u00aaU\u0000\u02fa"+
		"\u02fe\u0003\u00acV\u0000\u02fb\u02fe\u0003\u00aeW\u0000\u02fc\u02fe\u0003"+
		"\u00b2Y\u0000\u02fd\u02d7\u0001\u0000\u0000\u0000\u02fd\u02d8\u0001\u0000"+
		"\u0000\u0000\u02fd\u02d9\u0001\u0000\u0000\u0000\u02fd\u02da\u0001\u0000"+
		"\u0000\u0000\u02fd\u02db\u0001\u0000\u0000\u0000\u02fd\u02dc\u0001\u0000"+
		"\u0000\u0000\u02fd\u02dd\u0001\u0000\u0000\u0000\u02fd\u02de\u0001\u0000"+
		"\u0000\u0000\u02fd\u02df\u0001\u0000\u0000\u0000\u02fd\u02e0\u0001\u0000"+
		"\u0000\u0000\u02fd\u02e1\u0001\u0000\u0000\u0000\u02fd\u02e2\u0001\u0000"+
		"\u0000\u0000\u02fd\u02e3\u0001\u0000\u0000\u0000\u02fd\u02e4\u0001\u0000"+
		"\u0000\u0000\u02fd\u02e5\u0001\u0000\u0000\u0000\u02fd\u02e6\u0001\u0000"+
		"\u0000\u0000\u02fd\u02e7\u0001\u0000\u0000\u0000\u02fd\u02e8\u0001\u0000"+
		"\u0000\u0000\u02fd\u02e9\u0001\u0000\u0000\u0000\u02fd\u02ea\u0001\u0000"+
		"\u0000\u0000\u02fd\u02eb\u0001\u0000\u0000\u0000\u02fd\u02ec\u0001\u0000"+
		"\u0000\u0000\u02fd\u02ed\u0001\u0000\u0000\u0000\u02fd\u02ee\u0001\u0000"+
		"\u0000\u0000\u02fd\u02ef\u0001\u0000\u0000\u0000\u02fd\u02f0\u0001\u0000"+
		"\u0000\u0000\u02fd\u02f1\u0001\u0000\u0000\u0000\u02fd\u02f2\u0001\u0000"+
		"\u0000\u0000\u02fd\u02f3\u0001\u0000\u0000\u0000\u02fd\u02f4\u0001\u0000"+
		"\u0000\u0000\u02fd\u02f5\u0001\u0000\u0000\u0000\u02fd\u02f6\u0001\u0000"+
		"\u0000\u0000\u02fd\u02f7\u0001\u0000\u0000\u0000\u02fd\u02f8\u0001\u0000"+
		"\u0000\u0000\u02fd\u02f9\u0001\u0000\u0000\u0000\u02fd\u02fa\u0001\u0000"+
		"\u0000\u0000\u02fd\u02fb\u0001\u0000\u0000\u0000\u02fd\u02fc\u0001\u0000"+
		"\u0000\u0000\u02fe\t\u0001\u0000\u0000\u0000\u02ff\u030a\u0003\u00c4b"+
		"\u0000\u0300\u030a\u0003\u00bc^\u0000\u0301\u030a\u0003\u00c6c\u0000\u0302"+
		"\u030a\u0003\u00b6[\u0000\u0303\u030a\u0003\u00c2a\u0000\u0304\u030a\u0003"+
		"\u00b4Z\u0000\u0305\u030a\u0003\u00be_\u0000\u0306\u030a\u0003\u00c0`"+
		"\u0000\u0307\u030a\u0003\u00b8\\\u0000\u0308\u030a\u0003\u00ba]\u0000"+
		"\u0309\u02ff\u0001\u0000\u0000\u0000\u0309\u0300\u0001\u0000\u0000\u0000"+
		"\u0309\u0301\u0001\u0000\u0000\u0000\u0309\u0302\u0001\u0000\u0000\u0000"+
		"\u0309\u0303\u0001\u0000\u0000\u0000\u0309\u0304\u0001\u0000\u0000\u0000"+
		"\u0309\u0305\u0001\u0000\u0000\u0000\u0309\u0306\u0001\u0000\u0000\u0000"+
		"\u0309\u0307\u0001\u0000\u0000\u0000\u0309\u0308\u0001\u0000\u0000\u0000"+
		"\u030a\u000b\u0001\u0000\u0000\u0000\u030b\u0315\u0003\u0116\u008b\u0000"+
		"\u030c\u0315\u0003\u0118\u008c\u0000\u030d\u0315\u0003\u011a\u008d\u0000"+
		"\u030e\u0315\u0003\u011c\u008e\u0000\u030f\u0315\u0003\u011e\u008f\u0000"+
		"\u0310\u0315\u0003\u0120\u0090\u0000\u0311\u0315\u0003\u0122\u0091\u0000"+
		"\u0312\u0315\u0003\u0124\u0092\u0000\u0313\u0315\u0003\u0126\u0093\u0000"+
		"\u0314\u030b\u0001\u0000\u0000\u0000\u0314\u030c\u0001\u0000\u0000\u0000"+
		"\u0314\u030d\u0001\u0000\u0000\u0000\u0314\u030e\u0001\u0000\u0000\u0000"+
		"\u0314\u030f\u0001\u0000\u0000\u0000\u0314\u0310\u0001\u0000\u0000\u0000"+
		"\u0314\u0311\u0001\u0000\u0000\u0000\u0314\u0312\u0001\u0000\u0000\u0000"+
		"\u0314\u0313\u0001\u0000\u0000\u0000\u0315\r\u0001\u0000\u0000\u0000\u0316"+
		"\u0326\u0003\u0136\u009b\u0000\u0317\u0326\u0003\u0138\u009c\u0000\u0318"+
		"\u0326\u0003\u013a\u009d\u0000\u0319\u0326\u0003\u013c\u009e\u0000\u031a"+
		"\u0326\u0003\u013e\u009f\u0000\u031b\u0326\u0003\u0140\u00a0\u0000\u031c"+
		"\u0326\u0003\u0142\u00a1\u0000\u031d\u0326\u0003\u0144\u00a2\u0000\u031e"+
		"\u0326\u0003\u0146\u00a3\u0000\u031f\u0326\u0003\u015e\u00af\u0000\u0320"+
		"\u0326\u0003\u0160\u00b0\u0000\u0321\u0326\u0003\u0162\u00b1\u0000\u0322"+
		"\u0326\u0003\u0164\u00b2\u0000\u0323\u0326\u0003\u0166\u00b3\u0000\u0324"+
		"\u0326\u0003\u0168\u00b4\u0000\u0325\u0316\u0001\u0000\u0000\u0000\u0325"+
		"\u0317\u0001\u0000\u0000\u0000\u0325\u0318\u0001\u0000\u0000\u0000\u0325"+
		"\u0319\u0001\u0000\u0000\u0000\u0325\u031a\u0001\u0000\u0000\u0000\u0325"+
		"\u031b\u0001\u0000\u0000\u0000\u0325\u031c\u0001\u0000\u0000\u0000\u0325"+
		"\u031d\u0001\u0000\u0000\u0000\u0325\u031e\u0001\u0000\u0000\u0000\u0325"+
		"\u031f\u0001\u0000\u0000\u0000\u0325\u0320\u0001\u0000\u0000\u0000\u0325"+
		"\u0321\u0001\u0000\u0000\u0000\u0325\u0322\u0001\u0000\u0000\u0000\u0325"+
		"\u0323\u0001\u0000\u0000\u0000\u0325\u0324\u0001\u0000\u0000\u0000\u0326"+
		"\u000f\u0001\u0000\u0000\u0000\u0327\u032b\u0003\u016a\u00b5\u0000\u0328"+
		"\u032b\u0003\u016c\u00b6\u0000\u0329\u032b\u0003\u016e\u00b7\u0000\u032a"+
		"\u0327\u0001\u0000\u0000\u0000\u032a\u0328\u0001\u0000\u0000\u0000\u032a"+
		"\u0329\u0001\u0000\u0000\u0000\u032b\u0011\u0001\u0000\u0000\u0000\u032c"+
		"\u0337\u0003\u0172\u00b9\u0000\u032d\u0337\u0003\u0174\u00ba\u0000\u032e"+
		"\u0337\u0003\u0176\u00bb\u0000\u032f\u0337\u0003\u017a\u00bd\u0000\u0330"+
		"\u0337\u0003\u017c\u00be\u0000\u0331\u0337\u0003\u017e\u00bf\u0000\u0332"+
		"\u0337\u0003\u0182\u00c1\u0000\u0333\u0337\u0003\u0178\u00bc\u0000\u0334"+
		"\u0337\u0003\u0180\u00c0\u0000\u0335\u0337\u0003\u0184\u00c2\u0000\u0336"+
		"\u032c\u0001\u0000\u0000\u0000\u0336\u032d\u0001\u0000\u0000\u0000\u0336"+
		"\u032e\u0001\u0000\u0000\u0000\u0336\u032f\u0001\u0000\u0000\u0000\u0336"+
		"\u0330\u0001\u0000\u0000\u0000\u0336\u0331\u0001\u0000\u0000\u0000\u0336"+
		"\u0332\u0001\u0000\u0000\u0000\u0336\u0333\u0001\u0000\u0000\u0000\u0336"+
		"\u0334\u0001\u0000\u0000\u0000\u0336\u0335\u0001\u0000\u0000\u0000\u0337"+
		"\u0013\u0001\u0000\u0000\u0000\u0338\u0352\u0003\u0196\u00cb\u0000\u0339"+
		"\u0352\u0003\u0198\u00cc\u0000\u033a\u0352\u0003\u019a\u00cd\u0000\u033b"+
		"\u0352\u0003\u019c\u00ce\u0000\u033c\u0352\u0003\u01a0\u00d0\u0000\u033d"+
		"\u0352\u0003\u01a2\u00d1\u0000\u033e\u0352\u0003\u01a4\u00d2\u0000\u033f"+
		"\u0352\u0003\u01a6\u00d3\u0000\u0340\u0352\u0003\u01be\u00df\u0000\u0341"+
		"\u0352\u0003\u01c0\u00e0\u0000\u0342\u0352\u0003\u01c2\u00e1\u0000\u0343"+
		"\u0352\u0003\u01c4\u00e2\u0000\u0344\u0352\u0003\u01c6\u00e3\u0000\u0345"+
		"\u0352\u0003\u01ca\u00e5\u0000\u0346\u0352\u0003\u01cc\u00e6\u0000\u0347"+
		"\u0352\u0003\u01ce\u00e7\u0000\u0348\u0352\u0003\u01d0\u00e8\u0000\u0349"+
		"\u0352\u0003\u01d2\u00e9\u0000\u034a\u0352\u0003\u01e0\u00f0\u0000\u034b"+
		"\u0352\u0003\u01e2\u00f1\u0000\u034c\u0352\u0003\u01e4\u00f2\u0000\u034d"+
		"\u0352\u0003\u01e6\u00f3\u0000\u034e\u0352\u0003\u01e8\u00f4\u0000\u034f"+
		"\u0352\u0003\u01ea\u00f5\u0000\u0350\u0352\u0003\u01ec\u00f6\u0000\u0351"+
		"\u0338\u0001\u0000\u0000\u0000\u0351\u0339\u0001\u0000\u0000\u0000\u0351"+
		"\u033a\u0001\u0000\u0000\u0000\u0351\u033b\u0001\u0000\u0000\u0000\u0351"+
		"\u033c\u0001\u0000\u0000\u0000\u0351\u033d\u0001\u0000\u0000\u0000\u0351"+
		"\u033e\u0001\u0000\u0000\u0000\u0351\u033f\u0001\u0000\u0000\u0000\u0351"+
		"\u0340\u0001\u0000\u0000\u0000\u0351\u0341\u0001\u0000\u0000\u0000\u0351"+
		"\u0342\u0001\u0000\u0000\u0000\u0351\u0343\u0001\u0000\u0000\u0000\u0351"+
		"\u0344\u0001\u0000\u0000\u0000\u0351\u0345\u0001\u0000\u0000\u0000\u0351"+
		"\u0346\u0001\u0000\u0000\u0000\u0351\u0347\u0001\u0000\u0000\u0000\u0351"+
		"\u0348\u0001\u0000\u0000\u0000\u0351\u0349\u0001\u0000\u0000\u0000\u0351"+
		"\u034a\u0001\u0000\u0000\u0000\u0351\u034b\u0001\u0000\u0000\u0000\u0351"+
		"\u034c\u0001\u0000\u0000\u0000\u0351\u034d\u0001\u0000\u0000\u0000\u0351"+
		"\u034e\u0001\u0000\u0000\u0000\u0351\u034f\u0001\u0000\u0000\u0000\u0351"+
		"\u0350\u0001\u0000\u0000\u0000\u0352\u0015\u0001\u0000\u0000\u0000\u0353"+
		"\u035b\u0003\u01f6\u00fb\u0000\u0354\u035b\u0003\u01f8\u00fc\u0000\u0355"+
		"\u035b\u0003\u01fa\u00fd\u0000\u0356\u035b\u0003\u01fc\u00fe\u0000\u0357"+
		"\u035b\u0003\u01fe\u00ff\u0000\u0358\u035b\u0003\u0200\u0100\u0000\u0359"+
		"\u035b\u0003\u0204\u0102\u0000\u035a\u0353\u0001\u0000\u0000\u0000\u035a"+
		"\u0354\u0001\u0000\u0000\u0000\u035a\u0355\u0001\u0000\u0000\u0000\u035a"+
		"\u0356\u0001\u0000\u0000\u0000\u035a\u0357\u0001\u0000\u0000\u0000\u035a"+
		"\u0358\u0001\u0000\u0000\u0000\u035a\u0359\u0001\u0000\u0000\u0000\u035b"+
		"\u0017\u0001\u0000\u0000\u0000\u035c\u035d\u0005 \u0000\u0000\u035d\u035f"+
		"\u0007\u0000\u0000\u0000\u035e\u0360\u0003\u025e\u012f\u0000\u035f\u035e"+
		"\u0001\u0000\u0000\u0000\u035f\u0360\u0001\u0000\u0000\u0000\u0360\u0361"+
		"\u0001\u0000\u0000\u0000\u0361\u0365\u0003\u0226\u0113\u0000\u0362\u0364"+
		"\u0003:\u001d\u0000\u0363\u0362\u0001\u0000\u0000\u0000\u0364\u0367\u0001"+
		"\u0000\u0000\u0000\u0365\u0363\u0001\u0000\u0000\u0000\u0365\u0366\u0001"+
		"\u0000\u0000\u0000\u0366\u0019\u0001\u0000\u0000\u0000\u0367\u0365\u0001"+
		"\u0000\u0000\u0000\u0368\u036a\u0005 \u0000\u0000\u0369\u036b\u0003>\u001f"+
		"\u0000\u036a\u0369\u0001\u0000\u0000\u0000\u036a\u036b\u0001\u0000\u0000"+
		"\u0000\u036b\u036c\u0001\u0000\u0000\u0000\u036c\u036e\u0005\u0193\u0000"+
		"\u0000\u036d\u036f\u0003\u025e\u012f\u0000\u036e\u036d\u0001\u0000\u0000"+
		"\u0000\u036e\u036f\u0001\u0000\u0000\u0000\u036f\u0370\u0001\u0000\u0000"+
		"\u0000\u0370\u0371\u0003\u020a\u0105\u0000\u0371\u0372\u0005s\u0000\u0000"+
		"\u0372\u0373\u0005\u0245\u0000\u0000\u0373\u037a\u0003@ \u0000\u0374\u0375"+
		"\u0005s\u0000\u0000\u0375\u0377\u0005\u016a\u0000\u0000\u0376\u0378\u0005"+
		"o\u0000\u0000\u0377\u0376\u0001\u0000\u0000\u0000\u0377\u0378\u0001\u0000"+
		"\u0000\u0000\u0378\u0379\u0001\u0000\u0000\u0000\u0379\u037b\u0005\u021b"+
		"\u0000\u0000\u037a\u0374\u0001\u0000\u0000\u0000\u037a\u037b\u0001\u0000"+
		"\u0000\u0000\u037b\u037d\u0001\u0000\u0000\u0000\u037c\u037e\u0003H$\u0000"+
		"\u037d\u037c\u0001\u0000\u0000\u0000\u037d\u037e\u0001\u0000\u0000\u0000"+
		"\u037e\u0381\u0001\u0000\u0000\u0000\u037f\u0380\u0005\u0167\u0000\u0000"+
		"\u0380\u0382\u0005\u0466\u0000\u0000\u0381\u037f\u0001\u0000\u0000\u0000"+
		"\u0381\u0382\u0001\u0000\u0000\u0000\u0382\u0383\u0001\u0000\u0000\u0000"+
		"\u0383\u0384\u0005\u0185\u0000\u0000\u0384\u0385\u0003\u0170\u00b8\u0000"+
		"\u0385\u001b\u0001\u0000\u0000\u0000\u0386\u0389\u0005 \u0000\u0000\u0387"+
		"\u0388\u0005x\u0000\u0000\u0388\u038a\u0005\u008a\u0000\u0000\u0389\u0387"+
		"\u0001\u0000\u0000\u0000\u0389\u038a\u0001\u0000\u0000\u0000\u038a\u038c"+
		"\u0001\u0000\u0000\u0000\u038b\u038d\u0007\u0001\u0000\u0000\u038c\u038b"+
		"\u0001\u0000\u0000\u0000\u038c\u038d\u0001\u0000\u0000\u0000\u038d\u038f"+
		"\u0001\u0000\u0000\u0000\u038e\u0390\u0007\u0002\u0000\u0000\u038f\u038e"+
		"\u0001\u0000\u0000\u0000\u038f\u0390\u0001\u0000\u0000\u0000\u0390\u0391"+
		"\u0001\u0000\u0000\u0000\u0391\u0395\u0005Q\u0000\u0000\u0392\u0393\u0005"+
		"M\u0000\u0000\u0393\u0394\u0005o\u0000\u0000\u0394\u0396\u00059\u0000"+
		"\u0000\u0395\u0392\u0001\u0000\u0000\u0000\u0395\u0396\u0001\u0000\u0000"+
		"\u0000\u0396\u0397\u0001\u0000\u0000\u0000\u0397\u0399\u0003\u0226\u0113"+
		"\u0000\u0398\u039a\u0003J%\u0000\u0399\u0398\u0001\u0000\u0000\u0000\u0399"+
		"\u039a\u0001\u0000\u0000\u0000\u039a\u039b\u0001\u0000\u0000\u0000\u039b"+
		"\u039c\u0005s\u0000\u0000\u039c\u039d\u0003\u020c\u0106\u0000\u039d\u03a1"+
		"\u0003\u024a\u0125\u0000\u039e\u039f\u0005\u0289\u0000\u0000\u039f\u03a2"+
		"\u0003\u022c\u0116\u0000\u03a0\u03a2\u0005\u01fc\u0000\u0000\u03a1\u039e"+
		"\u0001\u0000\u0000\u0000\u03a1\u03a0\u0001\u0000\u0000\u0000\u03a1\u03a2"+
		"\u0001\u0000\u0000\u0000\u03a2\u03a6\u0001\u0000\u0000\u0000\u03a3\u03a5"+
		"\u0003L&\u0000\u03a4\u03a3\u0001\u0000\u0000\u0000\u03a5\u03a8\u0001\u0000"+
		"\u0000\u0000\u03a6\u03a4\u0001\u0000\u0000\u0000\u03a6\u03a7\u0001\u0000"+
		"\u0000\u0000\u03a7\u03b5\u0001\u0000\u0000\u0000\u03a8\u03a6\u0001\u0000"+
		"\u0000\u0000\u03a9\u03ab\u0005\u0147\u0000\u0000\u03aa\u03ac\u0005\u044e"+
		"\u0000\u0000\u03ab\u03aa\u0001\u0000\u0000\u0000\u03ab\u03ac\u0001\u0000"+
		"\u0000\u0000\u03ac\u03ad\u0001\u0000\u0000\u0000\u03ad\u03b4\u0007\u0003"+
		"\u0000\u0000\u03ae\u03b0\u0005f\u0000\u0000\u03af\u03b1\u0005\u044e\u0000"+
		"\u0000\u03b0\u03af\u0001\u0000\u0000\u0000\u03b0\u03b1\u0001\u0000\u0000"+
		"\u0000\u03b1\u03b2\u0001\u0000\u0000\u0000\u03b2\u03b4\u0007\u0004\u0000"+
		"\u0000\u03b3\u03a9\u0001\u0000\u0000\u0000\u03b3\u03ae\u0001\u0000\u0000"+
		"\u0000\u03b4\u03b7\u0001\u0000\u0000\u0000\u03b5\u03b3\u0001\u0000\u0000"+
		"\u0000\u03b5\u03b6\u0001\u0000\u0000\u0000\u03b6\u001d\u0001\u0000\u0000"+
		"\u0000\u03b7\u03b5\u0001\u0000\u0000\u0000\u03b8\u03b9\u0005 \u0000\u0000"+
		"\u03b9\u03ba\u0005\u01cc\u0000\u0000\u03ba\u03bb\u0005I\u0000\u0000\u03bb"+
		"\u03bc\u0003\u0226\u0113\u0000\u03bc\u03bd\u0005\u0005\u0000\u0000\u03bd"+
		"\u03be\u0005\u027a\u0000\u0000\u03be\u03c4\u0005\u0466\u0000\u0000\u03bf"+
		"\u03c1\u0005\u01b6\u0000\u0000\u03c0\u03c2\u0005\u044e\u0000\u0000\u03c1"+
		"\u03c0\u0001\u0000\u0000\u0000\u03c1\u03c2\u0001\u0000\u0000\u0000\u03c2"+
		"\u03c3\u0001\u0000\u0000\u0000\u03c3\u03c5\u0003\u022e\u0117\u0000\u03c4"+
		"\u03bf\u0001\u0000\u0000\u0000\u03c4\u03c5\u0001\u0000\u0000\u0000\u03c5"+
		"\u03cb\u0001\u0000\u0000\u0000\u03c6\u03c8\u0005\u027b\u0000\u0000\u03c7"+
		"\u03c9\u0005\u044e\u0000\u0000\u03c8\u03c7\u0001\u0000\u0000\u0000\u03c8"+
		"\u03c9\u0001\u0000\u0000\u0000\u03c9\u03ca\u0001\u0000\u0000\u0000\u03ca"+
		"\u03cc\u0003\u022e\u0117\u0000\u03cb\u03c6\u0001\u0000\u0000\u0000\u03cb"+
		"\u03cc\u0001\u0000\u0000\u0000\u03cc\u03d2\u0001\u0000\u0000\u0000\u03cd"+
		"\u03cf\u0005\u0226\u0000\u0000\u03ce\u03d0\u0005\u044e\u0000\u0000\u03cf"+
		"\u03ce\u0001\u0000\u0000\u0000\u03cf\u03d0\u0001\u0000\u0000\u0000\u03d0"+
		"\u03d1\u0001\u0000\u0000\u0000\u03d1\u03d3\u0003\u022e\u0117\u0000\u03d2"+
		"\u03cd\u0001\u0000\u0000\u0000\u03d2\u03d3\u0001\u0000\u0000\u0000\u03d3"+
		"\u03d9\u0001\u0000\u0000\u0000\u03d4\u03d6\u0005\u01fd\u0000\u0000\u03d5"+
		"\u03d7\u0005\u044e\u0000\u0000\u03d6\u03d5\u0001\u0000\u0000\u0000\u03d6"+
		"\u03d7\u0001\u0000\u0000\u0000\u03d7\u03d8\u0001\u0000\u0000\u0000\u03d8"+
		"\u03da\u0003\u0226\u0113\u0000\u03d9\u03d4\u0001\u0000\u0000\u0000\u03d9"+
		"\u03da\u0001\u0000\u0000\u0000\u03da\u03dc\u0001\u0000\u0000\u0000\u03db"+
		"\u03dd\u0005\u0289\u0000\u0000\u03dc\u03db\u0001\u0000\u0000\u0000\u03dc"+
		"\u03dd\u0001\u0000\u0000\u0000\u03dd\u03e3\u0001\u0000\u0000\u0000\u03de"+
		"\u03e0\u0005\u0167\u0000\u0000\u03df\u03e1\u0005\u044e\u0000\u0000\u03e0"+
		"\u03df\u0001\u0000\u0000\u0000\u03e0\u03e1\u0001\u0000\u0000\u0000\u03e1"+
		"\u03e2\u0001\u0000\u0000\u0000\u03e2\u03e4\u0005\u0466\u0000\u0000\u03e3"+
		"\u03de\u0001\u0000\u0000\u0000\u03e3\u03e4\u0001\u0000\u0000\u0000\u03e4"+
		"\u03e5\u0001\u0000\u0000\u0000\u03e5\u03e7\u0005\u018d\u0000\u0000\u03e6"+
		"\u03e8\u0005\u044e\u0000\u0000\u03e7\u03e6\u0001\u0000\u0000\u0000\u03e7"+
		"\u03e8\u0001\u0000\u0000\u0000\u03e8\u03e9\u0001\u0000\u0000\u0000\u03e9"+
		"\u03ea\u0003\u021c\u010e\u0000\u03ea\u001f\u0001\u0000\u0000\u0000\u03eb"+
		"\u03ed\u0005 \u0000\u0000\u03ec\u03ee\u0003>\u001f\u0000\u03ed\u03ec\u0001"+
		"\u0000\u0000\u0000\u03ed\u03ee\u0001\u0000\u0000\u0000\u03ee\u03ef\u0001"+
		"\u0000\u0000\u0000\u03ef\u03f0\u0005\u0080\u0000\u0000\u03f0\u03f1\u0003"+
		"\u020a\u0105\u0000\u03f1\u03f3\u0005\u0457\u0000\u0000\u03f2\u03f4\u0003"+
		"N\'\u0000\u03f3\u03f2\u0001\u0000\u0000\u0000\u03f3\u03f4\u0001\u0000"+
		"\u0000\u0000\u03f4\u03f9\u0001\u0000\u0000\u0000\u03f5\u03f6\u0005\u0459"+
		"\u0000\u0000\u03f6\u03f8\u0003N\'\u0000\u03f7\u03f5\u0001\u0000\u0000"+
		"\u0000\u03f8\u03fb\u0001\u0000\u0000\u0000\u03f9\u03f7\u0001\u0000\u0000"+
		"\u0000\u03f9\u03fa\u0001\u0000\u0000\u0000\u03fa\u03fc\u0001\u0000\u0000"+
		"\u0000\u03fb\u03f9\u0001\u0000\u0000\u0000\u03fc\u0400\u0005\u0458\u0000"+
		"\u0000\u03fd\u03ff\u0003R)\u0000\u03fe\u03fd\u0001\u0000\u0000\u0000\u03ff"+
		"\u0402\u0001\u0000\u0000\u0000\u0400\u03fe\u0001\u0000\u0000\u0000\u0400"+
		"\u0401\u0001\u0000\u0000\u0000\u0401\u0403\u0001\u0000\u0000\u0000\u0402"+
		"\u0400\u0001\u0000\u0000\u0000\u0403\u0404\u0003\u0170\u00b8\u0000\u0404"+
		"!\u0001\u0000\u0000\u0000\u0405\u0407\u0005";
	private static final String _serializedATNSegment1 =
		" \u0000\u0000\u0406\u0408\u0003>\u001f\u0000\u0407\u0406\u0001\u0000\u0000"+
		"\u0000\u0407\u0408\u0001\u0000\u0000\u0000\u0408\u0409\u0001\u0000\u0000"+
		"\u0000\u0409\u040a\u0005\u01a8\u0000\u0000\u040a\u040b\u0003\u020a\u0105"+
		"\u0000\u040b\u040d\u0005\u0457\u0000\u0000\u040c\u040e\u0003P(\u0000\u040d"+
		"\u040c\u0001\u0000\u0000\u0000\u040d\u040e\u0001\u0000\u0000\u0000\u040e"+
		"\u0413\u0001\u0000\u0000\u0000\u040f\u0410\u0005\u0459\u0000\u0000\u0410"+
		"\u0412\u0003P(\u0000\u0411\u040f\u0001\u0000\u0000\u0000\u0412\u0415\u0001"+
		"\u0000\u0000\u0000\u0413\u0411\u0001\u0000\u0000\u0000\u0413\u0414\u0001"+
		"\u0000\u0000\u0000\u0414\u0416\u0001\u0000\u0000\u0000\u0415\u0413\u0001"+
		"\u0000\u0000\u0000\u0416\u0417\u0005\u0458\u0000\u0000\u0417\u0418\u0005"+
		"\u023b\u0000\u0000\u0418\u041c\u0003\u023a\u011d\u0000\u0419\u041b\u0003"+
		"R)\u0000\u041a\u0419\u0001\u0000\u0000\u0000\u041b\u041e\u0001\u0000\u0000"+
		"\u0000\u041c\u041a\u0001\u0000\u0000\u0000\u041c\u041d\u0001\u0000\u0000"+
		"\u0000\u041d\u0421\u0001\u0000\u0000\u0000\u041e\u041c\u0001\u0000\u0000"+
		"\u0000\u041f\u0422\u0003\u0170\u00b8\u0000\u0420\u0422\u0003\u0180\u00c0"+
		"\u0000\u0421\u041f\u0001\u0000\u0000\u0000\u0421\u0420\u0001\u0000\u0000"+
		"\u0000\u0422#\u0001\u0000\u0000\u0000\u0423\u0424\u0005 \u0000\u0000\u0424"+
		"\u0428\u0005\u023c\u0000\u0000\u0425\u0426\u0005M\u0000\u0000\u0426\u0427"+
		"\u0005o\u0000\u0000\u0427\u0429\u00059\u0000\u0000\u0428\u0425\u0001\u0000"+
		"\u0000\u0000\u0428\u0429\u0001\u0000\u0000\u0000\u0429\u042a\u0001\u0000"+
		"\u0000\u0000\u042a\u042f\u0003\u020e\u0107\u0000\u042b\u042c\u0005\u0459"+
		"\u0000\u0000\u042c\u042e\u0003\u020e\u0107\u0000\u042d\u042b\u0001\u0000"+
		"\u0000\u0000\u042e\u0431\u0001\u0000\u0000\u0000\u042f\u042d\u0001\u0000"+
		"\u0000\u0000\u042f\u0430\u0001\u0000\u0000\u0000\u0430%\u0001\u0000\u0000"+
		"\u0000\u0431\u042f\u0001\u0000\u0000\u0000\u0432\u0433\u0005 \u0000\u0000"+
		"\u0433\u0434\u0005\u0247\u0000\u0000\u0434\u0435\u0003\u0226\u0113\u0000"+
		"\u0435\u0436\u0005C\u0000\u0000\u0436\u0437\u0005\u017a\u0000\u0000\u0437"+
		"\u0438\u0005\u028e\u0000\u0000\u0438\u0439\u0007\u0005\u0000\u0000\u0439"+
		"\u043a\u0005\u020a\u0000\u0000\u043a\u043b\u0005\u0457\u0000\u0000\u043b"+
		"\u0440\u0003T*\u0000\u043c\u043d\u0005\u0459\u0000\u0000\u043d\u043f\u0003"+
		"T*\u0000\u043e\u043c\u0001\u0000\u0000\u0000\u043f\u0442\u0001\u0000\u0000"+
		"\u0000\u0440\u043e\u0001\u0000\u0000\u0000\u0440\u0441\u0001\u0000\u0000"+
		"\u0000\u0441\u0443\u0001\u0000\u0000\u0000\u0442\u0440\u0001\u0000\u0000"+
		"\u0000\u0443\u0444\u0005\u0458\u0000\u0000\u0444\'\u0001\u0000\u0000\u0000"+
		"\u0445\u0448\u0005 \u0000\u0000\u0446\u0447\u0005x\u0000\u0000\u0447\u0449"+
		"\u0005\u008a\u0000\u0000\u0448\u0446\u0001\u0000\u0000\u0000\u0448\u0449"+
		"\u0001\u0000\u0000\u0000\u0449\u044b\u0001\u0000\u0000\u0000\u044a\u044c"+
		"\u0005\u0270\u0000\u0000\u044b\u044a\u0001\u0000\u0000\u0000\u044b\u044c"+
		"\u0001\u0000\u0000\u0000\u044c\u044d\u0001\u0000\u0000\u0000\u044d\u044f"+
		"\u0005\u00a6\u0000\u0000\u044e\u0450\u0003\u025e\u012f\u0000\u044f\u044e"+
		"\u0001\u0000\u0000\u0000\u044f\u0450\u0001\u0000\u0000\u0000\u0450\u0451"+
		"\u0001\u0000\u0000\u0000\u0451\u0459\u0003\u020c\u0106\u0000\u0452\u0453"+
		"\u0005a\u0000\u0000\u0453\u045a\u0003\u020c\u0106\u0000\u0454\u0455\u0005"+
		"\u0457\u0000\u0000\u0455\u0456\u0005a\u0000\u0000\u0456\u0457\u0003\u020c"+
		"\u0106\u0000\u0457\u0458\u0005\u0458\u0000\u0000\u0458\u045a\u0001\u0000"+
		"\u0000\u0000\u0459\u0452\u0001\u0000\u0000\u0000\u0459\u0454\u0001\u0000"+
		"\u0000\u0000\u045a\u04a0\u0001\u0000\u0000\u0000\u045b\u045e\u0005 \u0000"+
		"\u0000\u045c\u045d\u0005x\u0000\u0000\u045d\u045f\u0005\u008a\u0000\u0000"+
		"\u045e\u045c\u0001\u0000\u0000\u0000\u045e\u045f\u0001\u0000\u0000\u0000"+
		"\u045f\u0461\u0001\u0000\u0000\u0000\u0460\u0462\u0005\u0270\u0000\u0000"+
		"\u0461\u0460\u0001\u0000\u0000\u0000\u0461\u0462\u0001\u0000\u0000\u0000"+
		"\u0462\u0463\u0001\u0000\u0000\u0000\u0463\u0465\u0005\u00a6\u0000\u0000"+
		"\u0464\u0466\u0003\u025e\u012f\u0000\u0465\u0464\u0001\u0000\u0000\u0000"+
		"\u0465\u0466\u0001\u0000\u0000\u0000\u0466\u0467\u0001\u0000\u0000\u0000"+
		"\u0467\u0469\u0003\u020c\u0106\u0000\u0468\u046a\u0003V+\u0000\u0469\u0468"+
		"\u0001\u0000\u0000\u0000\u0469\u046a\u0001\u0000\u0000\u0000\u046a\u0475"+
		"\u0001\u0000\u0000\u0000\u046b\u0472\u0003h4\u0000\u046c\u046e\u0005\u0459"+
		"\u0000\u0000\u046d\u046c\u0001\u0000\u0000\u0000\u046d\u046e\u0001\u0000"+
		"\u0000\u0000\u046e\u046f\u0001\u0000\u0000\u0000\u046f\u0471\u0003h4\u0000"+
		"\u0470\u046d\u0001\u0000\u0000\u0000\u0471\u0474\u0001\u0000\u0000\u0000"+
		"\u0472\u0470\u0001\u0000\u0000\u0000\u0472\u0473\u0001\u0000\u0000\u0000"+
		"\u0473\u0476\u0001\u0000\u0000\u0000\u0474\u0472\u0001\u0000\u0000\u0000"+
		"\u0475\u046b\u0001\u0000\u0000\u0000\u0475\u0476\u0001\u0000\u0000\u0000"+
		"\u0476\u0478\u0001\u0000\u0000\u0000\u0477\u0479\u0003n7\u0000\u0478\u0477"+
		"\u0001\u0000\u0000\u0000\u0478\u0479\u0001\u0000\u0000\u0000\u0479\u047b"+
		"\u0001\u0000\u0000\u0000\u047a\u047c\u0007\u0006\u0000\u0000\u047b\u047a"+
		"\u0001\u0000\u0000\u0000\u047b\u047c\u0001\u0000\u0000\u0000\u047c\u047e"+
		"\u0001\u0000\u0000\u0000\u047d\u047f\u0005\f\u0000\u0000\u047e\u047d\u0001"+
		"\u0000\u0000\u0000\u047e\u047f\u0001\u0000\u0000\u0000\u047f\u0480\u0001"+
		"\u0000\u0000\u0000\u0480\u0481\u0003\u00c4b\u0000\u0481\u04a0\u0001\u0000"+
		"\u0000\u0000\u0482\u0485\u0005 \u0000\u0000\u0483\u0484\u0005x\u0000\u0000"+
		"\u0484\u0486\u0005\u008a\u0000\u0000\u0485\u0483\u0001\u0000\u0000\u0000"+
		"\u0485\u0486\u0001\u0000\u0000\u0000\u0486\u0488\u0001\u0000\u0000\u0000"+
		"\u0487\u0489\u0005\u0270\u0000\u0000\u0488\u0487\u0001\u0000\u0000\u0000"+
		"\u0488\u0489\u0001\u0000\u0000\u0000\u0489\u048a\u0001\u0000\u0000\u0000"+
		"\u048a\u048c\u0005\u00a6\u0000\u0000\u048b\u048d\u0003\u025e\u012f\u0000"+
		"\u048c\u048b\u0001\u0000\u0000\u0000\u048c\u048d\u0001\u0000\u0000\u0000"+
		"\u048d\u048e\u0001\u0000\u0000\u0000\u048e\u048f\u0003\u020c\u0106\u0000"+
		"\u048f\u049a\u0003V+\u0000\u0490\u0497\u0003h4\u0000\u0491\u0493\u0005"+
		"\u0459\u0000\u0000\u0492\u0491\u0001\u0000\u0000\u0000\u0492\u0493\u0001"+
		"\u0000\u0000\u0000\u0493\u0494\u0001\u0000\u0000\u0000\u0494\u0496\u0003"+
		"h4\u0000\u0495\u0492\u0001\u0000\u0000\u0000\u0496\u0499\u0001\u0000\u0000"+
		"\u0000\u0497\u0495\u0001\u0000\u0000\u0000\u0497\u0498\u0001\u0000\u0000"+
		"\u0000\u0498\u049b\u0001\u0000\u0000\u0000\u0499\u0497\u0001\u0000\u0000"+
		"\u0000\u049a\u0490\u0001\u0000\u0000\u0000\u049a\u049b\u0001\u0000\u0000"+
		"\u0000\u049b\u049d\u0001\u0000\u0000\u0000\u049c\u049e\u0003n7\u0000\u049d"+
		"\u049c\u0001\u0000\u0000\u0000\u049d\u049e\u0001\u0000\u0000\u0000\u049e"+
		"\u04a0\u0001\u0000\u0000\u0000\u049f\u0445\u0001\u0000\u0000\u0000\u049f"+
		"\u045b\u0001\u0000\u0000\u0000\u049f\u0482\u0001\u0000\u0000\u0000\u04a0"+
		")\u0001\u0000\u0000\u0000\u04a1\u04a2\u0005 \u0000\u0000\u04a2\u04a3\u0005"+
		"\u026e\u0000\u0000\u04a3\u04a4\u0003\u0226\u0113\u0000\u04a4\u04a5\u0005"+
		"\u0005\u0000\u0000\u04a5\u04a6\u0005\u017b\u0000\u0000\u04a6\u04aa\u0005"+
		"\u0466\u0000\u0000\u04a7\u04a8\u0005\u019f\u0000\u0000\u04a8\u04a9\u0005"+
		"\u044e\u0000\u0000\u04a9\u04ab\u0003\u022e\u0117\u0000\u04aa\u04a7\u0001"+
		"\u0000\u0000\u0000\u04aa\u04ab\u0001\u0000\u0000\u0000\u04ab\u04b1\u0001"+
		"\u0000\u0000\u0000\u04ac\u04ae\u0005\u018d\u0000\u0000\u04ad\u04af\u0005"+
		"\u044e\u0000\u0000\u04ae\u04ad\u0001\u0000\u0000\u0000\u04ae\u04af\u0001"+
		"\u0000\u0000\u0000\u04af\u04b0\u0001\u0000\u0000\u0000\u04b0\u04b2\u0003"+
		"\u021c\u010e\u0000\u04b1\u04ac\u0001\u0000\u0000\u0000\u04b1\u04b2\u0001"+
		"\u0000\u0000\u0000\u04b2+\u0001\u0000\u0000\u0000\u04b3\u04b4\u0005 \u0000"+
		"\u0000\u04b4\u04b5\u0005\u026e\u0000\u0000\u04b5\u04b6\u0003\u0226\u0113"+
		"\u0000\u04b6\u04b7\u0005\u0005\u0000\u0000\u04b7\u04b8\u0005\u017b\u0000"+
		"\u0000\u04b8\u04b9\u0005\u0466\u0000\u0000\u04b9\u04ba\u0005\u00b4\u0000"+
		"\u0000\u04ba\u04bb\u0005\u01cc\u0000\u0000\u04bb\u04bc\u0005I\u0000\u0000"+
		"\u04bc\u04c2\u0003\u0226\u0113\u0000\u04bd\u04bf\u0005\u019b\u0000\u0000"+
		"\u04be\u04c0\u0005\u044e\u0000\u0000\u04bf\u04be\u0001\u0000\u0000\u0000"+
		"\u04bf\u04c0\u0001\u0000\u0000\u0000\u04c0\u04c1\u0001\u0000\u0000\u0000"+
		"\u04c1\u04c3\u0003\u022e\u0117\u0000\u04c2\u04bd\u0001\u0000\u0000\u0000"+
		"\u04c2\u04c3\u0001\u0000\u0000\u0000\u04c3\u04c9\u0001\u0000\u0000\u0000"+
		"\u04c4\u04c6\u0005\u01b6\u0000\u0000\u04c5\u04c7\u0005\u044e\u0000\u0000"+
		"\u04c6\u04c5\u0001\u0000\u0000\u0000\u04c6\u04c7\u0001\u0000\u0000\u0000"+
		"\u04c7\u04c8\u0001\u0000\u0000\u0000\u04c8\u04ca\u0003\u022e\u0117\u0000"+
		"\u04c9\u04c4\u0001\u0000\u0000\u0000\u04c9\u04ca\u0001\u0000\u0000\u0000"+
		"\u04ca\u04d0\u0001\u0000\u0000\u0000\u04cb\u04cd\u0005\u014c\u0000\u0000"+
		"\u04cc\u04ce\u0005\u044e\u0000\u0000\u04cd\u04cc\u0001\u0000\u0000\u0000"+
		"\u04cd\u04ce\u0001\u0000\u0000\u0000\u04ce\u04cf\u0001\u0000\u0000\u0000"+
		"\u04cf\u04d1\u0003\u022e\u0117\u0000\u04d0\u04cb\u0001\u0000\u0000\u0000"+
		"\u04d0\u04d1\u0001\u0000\u0000\u0000\u04d1\u04d7\u0001\u0000\u0000\u0000"+
		"\u04d2\u04d4\u0005\u01e6\u0000\u0000\u04d3\u04d5\u0005\u044e\u0000\u0000"+
		"\u04d4\u04d3\u0001\u0000\u0000\u0000\u04d4\u04d5\u0001\u0000\u0000\u0000"+
		"\u04d5\u04d6\u0001\u0000\u0000\u0000\u04d6\u04d8\u0003\u022e\u0117\u0000"+
		"\u04d7\u04d2\u0001\u0000\u0000\u0000\u04d7\u04d8\u0001\u0000\u0000\u0000"+
		"\u04d8\u04de\u0001\u0000\u0000\u0000\u04d9\u04db\u0005\u01fd\u0000\u0000"+
		"\u04da\u04dc\u0005\u044e\u0000\u0000\u04db\u04da\u0001\u0000\u0000\u0000"+
		"\u04db\u04dc\u0001\u0000\u0000\u0000\u04dc\u04dd\u0001\u0000\u0000\u0000"+
		"\u04dd\u04df\u0003\u0226\u0113\u0000\u04de\u04d9\u0001\u0000\u0000\u0000"+
		"\u04de\u04df\u0001\u0000\u0000\u0000\u04df\u04e1\u0001\u0000\u0000\u0000"+
		"\u04e0\u04e2\u0005\u0289\u0000\u0000\u04e1\u04e0\u0001\u0000\u0000\u0000"+
		"\u04e1\u04e2\u0001\u0000\u0000\u0000\u04e2\u04e8\u0001\u0000\u0000\u0000"+
		"\u04e3\u04e5\u0005\u0167\u0000\u0000\u04e4\u04e6\u0005\u044e\u0000\u0000"+
		"\u04e5\u04e4\u0001\u0000\u0000\u0000\u04e5\u04e6\u0001\u0000\u0000\u0000"+
		"\u04e6\u04e7\u0001\u0000\u0000\u0000\u04e7\u04e9\u0005\u0466\u0000\u0000"+
		"\u04e8\u04e3\u0001\u0000\u0000\u0000\u04e8\u04e9\u0001\u0000\u0000\u0000"+
		"\u04e9\u04ea\u0001\u0000\u0000\u0000\u04ea\u04ec\u0005\u018d\u0000\u0000"+
		"\u04eb\u04ed\u0005\u044e\u0000\u0000\u04ec\u04eb\u0001\u0000\u0000\u0000"+
		"\u04ec\u04ed\u0001\u0000\u0000\u0000\u04ed\u04ee\u0001\u0000\u0000\u0000"+
		"\u04ee\u04ef\u0003\u021c\u010e\u0000\u04ef-\u0001\u0000\u0000\u0000\u04f0"+
		"\u04f3\u0005 \u0000\u0000\u04f1\u04f2\u0005x\u0000\u0000\u04f2\u04f4\u0005"+
		"\u008a\u0000\u0000\u04f3\u04f1\u0001\u0000\u0000\u0000\u04f3\u04f4\u0001"+
		"\u0000\u0000\u0000\u04f4\u04f6\u0001\u0000\u0000\u0000\u04f5\u04f7\u0003"+
		">\u001f\u0000\u04f6\u04f5\u0001\u0000\u0000\u0000\u04f6\u04f7\u0001\u0000"+
		"\u0000\u0000\u04f7\u04f8\u0001\u0000\u0000\u0000\u04f8\u04f9\u0005\u00ab"+
		"\u0000\u0000\u04f9\u04fa\u0003\u020a\u0105\u0000\u04fa\u04fb\u0007\u0007"+
		"\u0000\u0000\u04fb\u04fc\u0007\b\u0000\u0000\u04fc\u04fd\u0005s\u0000"+
		"\u0000\u04fd\u04fe\u0003\u020c\u0106\u0000\u04fe\u04ff\u0005A\u0000\u0000"+
		"\u04ff\u0500\u00052\u0000\u0000\u0500\u0503\u0005\u0240\u0000\u0000\u0501"+
		"\u0502\u0007\t\u0000\u0000\u0502\u0504\u0003\u020a\u0105\u0000\u0503\u0501"+
		"\u0001\u0000\u0000\u0000\u0503\u0504\u0001\u0000\u0000\u0000\u0504\u0505"+
		"\u0001\u0000\u0000\u0000\u0505\u0506\u0003\u0170\u00b8\u0000\u0506/\u0001"+
		"\u0000\u0000\u0000\u0507\u0509\u0005\u00ba\u0000\u0000\u0508\u050a\u0005"+
		"\u0225\u0000\u0000\u0509\u0508\u0001\u0000\u0000\u0000\u0509\u050a\u0001"+
		"\u0000\u0000\u0000\u050a\u050b\u0001\u0000\u0000\u0000\u050b\u050c\u0003"+
		"2\u0019\u0000\u050c1\u0001\u0000\u0000\u0000\u050d\u0519\u00034\u001a"+
		"\u0000\u050e\u050f\u0005\u0457\u0000\u0000\u050f\u0514\u00036\u001b\u0000"+
		"\u0510\u0511\u0005\u0459\u0000\u0000\u0511\u0513\u00036\u001b\u0000\u0512"+
		"\u0510\u0001\u0000\u0000\u0000\u0513\u0516\u0001\u0000\u0000\u0000\u0514"+
		"\u0512\u0001\u0000\u0000\u0000\u0514\u0515\u0001\u0000\u0000\u0000\u0515"+
		"\u0517\u0001\u0000\u0000\u0000\u0516\u0514\u0001\u0000\u0000\u0000\u0517"+
		"\u0518\u0005\u0458\u0000\u0000\u0518\u051a\u0001\u0000\u0000\u0000\u0519"+
		"\u050e\u0001\u0000\u0000\u0000\u0519\u051a\u0001\u0000\u0000\u0000\u051a"+
		"\u051b\u0001\u0000\u0000\u0000\u051b\u051c\u0005\f\u0000\u0000\u051c\u051d"+
		"\u0005\u0457\u0000\u0000\u051d\u051e\u0003\n\u0005\u0000\u051e\u0521\u0005"+
		"\u0458\u0000\u0000\u051f\u0520\u0005\u0459\u0000\u0000\u0520\u0522\u0003"+
		"2\u0019\u0000\u0521\u051f\u0001\u0000\u0000\u0000\u0521\u0522\u0001\u0000"+
		"\u0000\u0000\u05223\u0001\u0000\u0000\u0000\u0523\u0524\u0003\u0226\u0113"+
		"\u0000\u05245\u0001\u0000\u0000\u0000\u0525\u0526\u0003\u0226\u0113\u0000"+
		"\u05267\u0001\u0000\u0000\u0000\u0527\u052a\u0005 \u0000\u0000\u0528\u0529"+
		"\u0005x\u0000\u0000\u0529\u052b\u0005\u008a\u0000\u0000\u052a\u0528\u0001"+
		"\u0000\u0000\u0000\u052a\u052b\u0001\u0000\u0000\u0000\u052b\u052f\u0001"+
		"\u0000\u0000\u0000\u052c\u052d\u0005\u0147\u0000\u0000\u052d\u052e\u0005"+
		"\u044e\u0000\u0000\u052e\u0530\u0007\n\u0000\u0000\u052f\u052c\u0001\u0000"+
		"\u0000\u0000\u052f\u0530\u0001\u0000\u0000\u0000\u0530\u0532\u0001\u0000"+
		"\u0000\u0000\u0531\u0533\u0003>\u001f\u0000\u0532\u0531\u0001\u0000\u0000"+
		"\u0000\u0532\u0533\u0001\u0000\u0000\u0000\u0533\u0537\u0001\u0000\u0000"+
		"\u0000\u0534\u0535\u0005\u009b\u0000\u0000\u0535\u0536\u0005\u0246\u0000"+
		"\u0000\u0536\u0538\u0007\u000b\u0000\u0000\u0537\u0534\u0001\u0000\u0000"+
		"\u0000\u0537\u0538\u0001\u0000\u0000\u0000\u0538\u0539\u0001\u0000\u0000"+
		"\u0000\u0539\u053a\u0005\u0286\u0000\u0000\u053a\u053f\u0003\u020a\u0105"+
		"\u0000\u053b\u053c\u0005\u0457\u0000\u0000\u053c\u053d\u0003\u0246\u0123"+
		"\u0000\u053d\u053e\u0005\u0458\u0000\u0000\u053e\u0540\u0001\u0000\u0000"+
		"\u0000\u053f\u053b\u0001\u0000\u0000\u0000\u053f\u0540\u0001\u0000\u0000"+
		"\u0000\u0540\u0541\u0001\u0000\u0000\u0000\u0541\u0543\u0005\f\u0000\u0000"+
		"\u0542\u0544\u00030\u0018\u0000\u0543\u0542\u0001\u0000\u0000\u0000\u0543"+
		"\u0544\u0001\u0000\u0000\u0000\u0544\u0545\u0001\u0000\u0000\u0000\u0545"+
		"\u054c\u0003\u00c4b\u0000\u0546\u0548\u0005\u00ba\u0000\u0000\u0547\u0549"+
		"\u0007\f\u0000\u0000\u0548\u0547\u0001\u0000\u0000\u0000\u0548\u0549\u0001"+
		"\u0000\u0000\u0000\u0549\u054a\u0001\u0000\u0000\u0000\u054a\u054b\u0005"+
		"\u0019\u0000\u0000\u054b\u054d\u0005u\u0000\u0000\u054c\u0546\u0001\u0000"+
		"\u0000\u0000\u054c\u054d\u0001\u0000\u0000\u0000\u054d9\u0001\u0000\u0000"+
		"\u0000\u054e\u0550\u0005(\u0000\u0000\u054f\u054e\u0001\u0000\u0000\u0000"+
		"\u054f\u0550\u0001\u0000\u0000\u0000\u0550\u0551\u0001\u0000\u0000\u0000"+
		"\u0551\u0553\u0003<\u001e\u0000\u0552\u0554\u0005\u044e\u0000\u0000\u0553"+
		"\u0552\u0001\u0000\u0000\u0000\u0553\u0554\u0001\u0000\u0000\u0000\u0554"+
		"\u0557\u0001\u0000\u0000\u0000\u0555\u0558\u0003\u0218\u010c\u0000\u0556"+
		"\u0558\u0005(\u0000\u0000\u0557\u0555\u0001\u0000\u0000\u0000\u0557\u0556"+
		"\u0001\u0000\u0000\u0000\u0558\u0562\u0001\u0000\u0000\u0000\u0559\u055b"+
		"\u0005(\u0000\u0000\u055a\u0559\u0001\u0000\u0000\u0000\u055a\u055b\u0001"+
		"\u0000\u0000\u0000\u055b\u055c\u0001\u0000\u0000\u0000\u055c\u055e\u0005"+
		"\u001a\u0000\u0000\u055d\u055f\u0005\u044e\u0000\u0000\u055e\u055d\u0001"+
		"\u0000\u0000\u0000\u055e\u055f\u0001\u0000\u0000\u0000\u055f\u0560\u0001"+
		"\u0000\u0000\u0000\u0560\u0562\u0003\u021a\u010d\u0000\u0561\u054f\u0001"+
		"\u0000\u0000\u0000\u0561\u055a\u0001\u0000\u0000\u0000\u0562;\u0001\u0000"+
		"\u0000\u0000\u0563\u0564\u0005\u0018\u0000\u0000\u0564\u0569\u0005\u0096"+
		"\u0000\u0000\u0565\u0569\u0005\u0329\u0000\u0000\u0566\u0567\u0005\u00d8"+
		"\u0000\u0000\u0567\u0569\u0005\u0096\u0000\u0000\u0568\u0563\u0001\u0000"+
		"\u0000\u0000\u0568\u0565\u0001\u0000\u0000\u0000\u0568\u0566\u0001\u0000"+
		"\u0000\u0000\u0569=\u0001\u0000\u0000\u0000\u056a\u056b\u0005\u017e\u0000"+
		"\u0000\u056b\u0572\u0005\u044e\u0000\u0000\u056c\u0573\u0003\u0214\u010a"+
		"\u0000\u056d\u0570\u0005#\u0000\u0000\u056e\u056f\u0005\u0457\u0000\u0000"+
		"\u056f\u0571\u0005\u0458\u0000\u0000\u0570\u056e\u0001\u0000\u0000\u0000"+
		"\u0570\u0571\u0001\u0000\u0000\u0000\u0571\u0573\u0001\u0000\u0000\u0000"+
		"\u0572\u056c\u0001\u0000\u0000\u0000\u0572\u056d\u0001\u0000\u0000\u0000"+
		"\u0573?\u0001\u0000\u0000\u0000\u0574\u0575\u0005\u0149\u0000\u0000\u0575"+
		"\u0579\u0003B!\u0000\u0576\u0578\u0003D\"\u0000\u0577\u0576\u0001\u0000"+
		"\u0000\u0000\u0578\u057b\u0001\u0000\u0000\u0000\u0579\u0577\u0001\u0000"+
		"\u0000\u0000\u0579\u057a\u0001\u0000\u0000\u0000\u057a\u0597\u0001\u0000"+
		"\u0000\u0000\u057b\u0579\u0001\u0000\u0000\u0000\u057c\u057f\u0005\u0195"+
		"\u0000\u0000\u057d\u0580\u0003\u022c\u0116\u0000\u057e\u0580\u0003\u0288"+
		"\u0144\u0000\u057f\u057d\u0001\u0000\u0000\u0000\u057f\u057e\u0001\u0000"+
		"\u0000\u0000\u0580\u0581\u0001\u0000\u0000\u0000\u0581\u058a\u0003F#\u0000"+
		"\u0582\u0583\u0005\u025d\u0000\u0000\u0583\u0587\u0003B!\u0000\u0584\u0586"+
		"\u0003D\"\u0000\u0585\u0584\u0001\u0000\u0000\u0000\u0586\u0589\u0001"+
		"\u0000\u0000\u0000\u0587\u0585\u0001\u0000\u0000\u0000\u0587\u0588\u0001"+
		"\u0000\u0000\u0000\u0588\u058b\u0001\u0000\u0000\u0000\u0589\u0587\u0001"+
		"\u0000\u0000\u0000\u058a\u0582\u0001\u0000\u0000\u0000\u058a\u058b\u0001"+
		"\u0000\u0000\u0000\u058b\u0594\u0001\u0000\u0000\u0000\u058c\u058d\u0005"+
		"\u018c\u0000\u0000\u058d\u0591\u0003B!\u0000\u058e\u0590\u0003D\"\u0000"+
		"\u058f\u058e\u0001\u0000\u0000\u0000\u0590\u0593\u0001\u0000\u0000\u0000"+
		"\u0591\u058f\u0001\u0000\u0000\u0000\u0591\u0592\u0001\u0000\u0000\u0000"+
		"\u0592\u0595\u0001\u0000\u0000\u0000\u0593\u0591\u0001\u0000\u0000\u0000"+
		"\u0594\u058c\u0001\u0000\u0000\u0000\u0594\u0595\u0001\u0000\u0000\u0000"+
		"\u0595\u0597\u0001\u0000\u0000\u0000\u0596\u0574\u0001\u0000\u0000\u0000"+
		"\u0596\u057c\u0001\u0000\u0000\u0000\u0597A\u0001\u0000\u0000\u0000\u0598"+
		"\u059d\u0005\u0132\u0000\u0000\u0599\u059d\u0003\u0230\u0118\u0000\u059a"+
		"\u059d\u0003\u022c\u0116\u0000\u059b\u059d\u0003\u0288\u0144\u0000\u059c"+
		"\u0598\u0001\u0000\u0000\u0000\u059c\u0599\u0001\u0000\u0000\u0000\u059c"+
		"\u059a\u0001\u0000\u0000\u0000\u059c\u059b\u0001\u0000\u0000\u0000\u059d"+
		"C\u0001\u0000\u0000\u0000\u059e\u059f\u0005\u044a\u0000\u0000\u059f\u05a2"+
		"\u0005V\u0000\u0000\u05a0\u05a3\u0003\u022c\u0116\u0000\u05a1\u05a3\u0003"+
		"\u0288\u0144\u0000\u05a2\u05a0\u0001\u0000\u0000\u0000\u05a2\u05a1\u0001"+
		"\u0000\u0000\u0000\u05a3\u05a4\u0001\u0000\u0000\u0000\u05a4\u05a5\u0003"+
		"F#\u0000\u05a5E\u0001\u0000\u0000\u0000\u05a6\u05b4\u0003\u02a2\u0151"+
		"\u0000\u05a7\u05b4\u0005\u00d7\u0000\u0000\u05a8\u05b4\u0005\u00ea\u0000"+
		"\u0000\u05a9\u05b4\u0005\u00eb\u0000\u0000\u05aa\u05b4\u0005\u00ec\u0000"+
		"\u0000\u05ab\u05b4\u0005\u00ed\u0000\u0000\u05ac\u05b4\u0005\u00ee\u0000"+
		"\u0000\u05ad\u05b4\u0005\u00ef\u0000\u0000\u05ae\u05b4\u0005\u00f0\u0000"+
		"\u0000\u05af\u05b4\u0005\u00f1\u0000\u0000\u05b0\u05b4\u0005\u00f2\u0000"+
		"\u0000\u05b1\u05b4\u0005\u00f3\u0000\u0000\u05b2\u05b4\u0005\u00f4\u0000"+
		"\u0000\u05b3\u05a6\u0001\u0000\u0000\u0000\u05b3\u05a7\u0001\u0000\u0000"+
		"\u0000\u05b3\u05a8\u0001\u0000\u0000\u0000\u05b3\u05a9\u0001\u0000\u0000"+
		"\u0000\u05b3\u05aa\u0001\u0000\u0000\u0000\u05b3\u05ab\u0001\u0000\u0000"+
		"\u0000\u05b3\u05ac\u0001\u0000\u0000\u0000\u05b3\u05ad\u0001\u0000\u0000"+
		"\u0000\u05b3\u05ae\u0001\u0000\u0000\u0000\u05b3\u05af\u0001\u0000\u0000"+
		"\u0000\u05b3\u05b0\u0001\u0000\u0000\u0000\u05b3\u05b1\u0001\u0000\u0000"+
		"\u0000\u05b3\u05b2\u0001\u0000\u0000\u0000\u05b4G\u0001\u0000\u0000\u0000"+
		"\u05b5\u05bb\u0005\u0189\u0000\u0000\u05b6\u05bb\u0005\u0182\u0000\u0000"+
		"\u05b7\u05b8\u0005\u0182\u0000\u0000\u05b8\u05b9\u0005s\u0000\u0000\u05b9"+
		"\u05bb\u0005\u024d\u0000\u0000\u05ba\u05b5\u0001\u0000\u0000\u0000\u05ba"+
		"\u05b6\u0001\u0000\u0000\u0000\u05ba\u05b7\u0001\u0000\u0000\u0000\u05bb"+
		"I\u0001\u0000\u0000\u0000\u05bc\u05bd\u0005\u00b5\u0000\u0000\u05bd\u05be"+
		"\u0007\r\u0000\u0000\u05beK\u0001\u0000\u0000\u0000\u05bf\u05c1\u0005"+
		"\u01c4\u0000\u0000\u05c0\u05c2\u0005\u044e\u0000\u0000\u05c1\u05c0\u0001"+
		"\u0000\u0000\u0000\u05c1\u05c2\u0001\u0000\u0000\u0000\u05c2\u05c3\u0001"+
		"\u0000\u0000\u0000\u05c3\u05de\u0003\u022e\u0117\u0000\u05c4\u05de\u0003"+
		"J%\u0000\u05c5\u05c6\u0005\u00ba\u0000\u0000\u05c6\u05c7\u0005\u020e\u0000"+
		"\u0000\u05c7\u05de\u0003\u0226\u0113\u0000\u05c8\u05c9\u0005\u0167\u0000"+
		"\u0000\u05c9\u05de\u0005\u0466\u0000\u0000\u05ca\u05de\u0007\u000e\u0000"+
		"\u0000\u05cb\u05cd\u0005\u034b\u0000\u0000\u05cc\u05ce\u0005\u044e\u0000"+
		"\u0000\u05cd\u05cc\u0001\u0000\u0000\u0000\u05cd\u05ce\u0001\u0000\u0000"+
		"\u0000\u05ce\u05cf\u0001\u0000\u0000\u0000\u05cf\u05de\u0005\u0466\u0000"+
		"\u0000\u05d0\u05d2\u0005\u03c7\u0000\u0000\u05d1\u05d3\u0005\u044e\u0000"+
		"\u0000\u05d2\u05d1\u0001\u0000\u0000\u0000\u05d2\u05d3\u0001\u0000\u0000"+
		"\u0000\u05d3\u05d4\u0001\u0000\u0000\u0000\u05d4\u05de\u0005\u0466\u0000"+
		"\u0000\u05d5\u05d6\u0005\u0161\u0000\u0000\u05d6\u05d7\u0005\u044e\u0000"+
		"\u0000\u05d7\u05de\u0007\u000f\u0000\u0000\u05d8\u05dc\u0005O\u0000\u0000"+
		"\u05d9\u05da\u0005o\u0000\u0000\u05da\u05dc\u0005O\u0000\u0000\u05db\u05d8"+
		"\u0001\u0000\u0000\u0000\u05db\u05d9\u0001\u0000\u0000\u0000\u05dc\u05de"+
		"\u0001\u0000\u0000\u0000\u05dd\u05bf\u0001\u0000\u0000\u0000\u05dd\u05c4"+
		"\u0001\u0000\u0000\u0000\u05dd\u05c5\u0001\u0000\u0000\u0000\u05dd\u05c8"+
		"\u0001\u0000\u0000\u0000\u05dd\u05ca\u0001\u0000\u0000\u0000\u05dd\u05cb"+
		"\u0001\u0000\u0000\u0000\u05dd\u05d0\u0001\u0000\u0000\u0000\u05dd\u05d5"+
		"\u0001\u0000\u0000\u0000\u05dd\u05db\u0001\u0000\u0000\u0000\u05deM\u0001"+
		"\u0000\u0000\u0000\u05df\u05e1\u0007\u0010\u0000\u0000\u05e0\u05df\u0001"+
		"\u0000\u0000\u0000\u05e0\u05e1\u0001\u0000\u0000\u0000\u05e1\u05e2\u0001"+
		"\u0000\u0000\u0000\u05e2\u05e3\u0003\u0226\u0113\u0000\u05e3\u05e4\u0003"+
		"\u023a\u011d\u0000\u05e4O\u0001\u0000\u0000\u0000\u05e5\u05e6\u0003\u0226"+
		"\u0113\u0000\u05e6\u05e7\u0003\u023a\u011d\u0000\u05e7Q\u0001\u0000\u0000"+
		"\u0000\u05e8\u05e9\u0005\u0167\u0000\u0000\u05e9\u0600\u0005\u0466\u0000"+
		"\u0000\u05ea\u05eb\u0005\u01c5\u0000\u0000\u05eb\u0600\u0005\u009b\u0000"+
		"\u0000\u05ec\u05ee\u0005o\u0000\u0000\u05ed\u05ec\u0001\u0000\u0000\u0000"+
		"\u05ed\u05ee\u0001\u0000\u0000\u0000\u05ee\u05ef\u0001\u0000\u0000\u0000"+
		"\u05ef\u0600\u0005-\u0000\u0000\u05f0\u05f1\u0005\u0174\u0000\u0000\u05f1"+
		"\u05fb\u0005\u009b\u0000\u0000\u05f2\u05f3\u0005\u01fa\u0000\u0000\u05f3"+
		"\u05fb\u0005\u009b\u0000\u0000\u05f4\u05f5\u0005\u0084\u0000\u0000\u05f5"+
		"\u05f6\u0005\u009b\u0000\u0000\u05f6\u05fb\u0005\u017a\u0000\u0000\u05f7"+
		"\u05f8\u0005m\u0000\u0000\u05f8\u05f9\u0005\u009b\u0000\u0000\u05f9\u05fb"+
		"\u0005\u017a\u0000\u0000\u05fa\u05f0\u0001\u0000\u0000\u0000\u05fa\u05f2"+
		"\u0001\u0000\u0000\u0000\u05fa\u05f4\u0001\u0000\u0000\u0000\u05fa\u05f7"+
		"\u0001\u0000\u0000\u0000\u05fb\u0600\u0001\u0000\u0000\u0000\u05fc\u05fd"+
		"\u0005\u009b\u0000\u0000\u05fd\u05fe\u0005\u0246\u0000\u0000\u05fe\u0600"+
		"\u0007\u000b\u0000\u0000\u05ff\u05e8\u0001\u0000\u0000\u0000\u05ff\u05ea"+
		"\u0001\u0000\u0000\u0000\u05ff\u05ed\u0001\u0000\u0000\u0000\u05ff\u05fa"+
		"\u0001\u0000\u0000\u0000\u05ff\u05fc\u0001\u0000\u0000\u0000\u0600S\u0001"+
		"\u0000\u0000\u0000\u0601\u0602\u0005\u01b0\u0000\u0000\u0602\u0610\u0005"+
		"\u0466\u0000\u0000\u0603\u0604\u0005%\u0000\u0000\u0604\u0610\u0005\u0466"+
		"\u0000\u0000\u0605\u0606\u0005\u0280\u0000\u0000\u0606\u0610\u0005\u0466"+
		"\u0000\u0000\u0607\u0608\u0005\u0212\u0000\u0000\u0608\u0610\u0005\u0466"+
		"\u0000\u0000\u0609\u060a\u0005\u0250\u0000\u0000\u060a\u0610\u0005\u0466"+
		"\u0000\u0000\u060b\u060c\u0005\u020b\u0000\u0000\u060c\u0610\u0005\u0466"+
		"\u0000\u0000\u060d\u060e\u0005\u0217\u0000\u0000\u060e\u0610\u0003\u022c"+
		"\u0116\u0000\u060f\u0601\u0001\u0000\u0000\u0000\u060f\u0603\u0001\u0000"+
		"\u0000\u0000\u060f\u0605\u0001\u0000\u0000\u0000\u060f\u0607\u0001\u0000"+
		"\u0000\u0000\u060f\u0609\u0001\u0000\u0000\u0000\u060f\u060b\u0001\u0000"+
		"\u0000\u0000\u060f\u060d\u0001\u0000\u0000\u0000\u0610U\u0001\u0000\u0000"+
		"\u0000\u0611\u0612\u0005\u0457\u0000\u0000\u0612\u0617\u0003X,\u0000\u0613"+
		"\u0614\u0005\u0459\u0000\u0000\u0614\u0616\u0003X,\u0000\u0615\u0613\u0001"+
		"\u0000\u0000\u0000\u0616\u0619\u0001\u0000\u0000\u0000\u0617\u0615\u0001"+
		"\u0000\u0000\u0000\u0617\u0618\u0001\u0000\u0000\u0000\u0618\u061a\u0001"+
		"\u0000\u0000\u0000\u0619\u0617\u0001\u0000\u0000\u0000\u061a\u061b\u0005"+
		"\u0458\u0000\u0000\u061bW\u0001\u0000\u0000\u0000\u061c\u061d\u0003\u0226"+
		"\u0113\u0000\u061d\u061e\u0003Z-\u0000\u061e\u0622\u0001\u0000\u0000\u0000"+
		"\u061f\u0622\u0003^/\u0000\u0620\u0622\u0003f3\u0000\u0621\u061c\u0001"+
		"\u0000\u0000\u0000\u0621\u061f\u0001\u0000\u0000\u0000\u0621\u0620\u0001"+
		"\u0000\u0000\u0000\u0622Y\u0001\u0000\u0000\u0000\u0623\u0627\u0003\u023a"+
		"\u011d\u0000\u0624\u0626\u0003\\.\u0000\u0625\u0624\u0001\u0000\u0000"+
		"\u0000\u0626\u0629\u0001\u0000\u0000\u0000\u0627\u0625\u0001\u0000\u0000"+
		"\u0000\u0627\u0628\u0001\u0000\u0000\u0000\u0628[\u0001\u0000\u0000\u0000"+
		"\u0629\u0627\u0001\u0000\u0000\u0000\u062a\u0660\u0003\u0236\u011b\u0000"+
		"\u062b\u062c\u0005(\u0000\u0000\u062c\u0660\u0003\u0256\u012b\u0000\u062d"+
		"\u0660\u0005\u0288\u0000\u0000\u062e\u0660\u0005\u01bc\u0000\u0000\u062f"+
		"\u0634\u0005\u014d\u0000\u0000\u0630\u0631\u0005s\u0000\u0000\u0631\u0632"+
		"\u0005\u00b2\u0000\u0000\u0632\u0634\u0003\u0258\u012c\u0000\u0633\u062f"+
		"\u0001\u0000\u0000\u0000\u0633\u0630\u0001\u0000\u0000\u0000\u0634\u0660"+
		"\u0001\u0000\u0000\u0000\u0635\u0637\u0005\u007f\u0000\u0000\u0636\u0635"+
		"\u0001\u0000\u0000\u0000\u0636\u0637\u0001\u0000\u0000\u0000\u0637\u0638"+
		"\u0001\u0000\u0000\u0000\u0638\u0660\u0005[\u0000\u0000\u0639\u063b\u0005"+
		"\u00af\u0000\u0000\u063a\u063c\u0005[\u0000\u0000\u063b\u063a\u0001\u0000"+
		"\u0000\u0000\u063b\u063c\u0001\u0000\u0000\u0000\u063c\u0660\u0001\u0000"+
		"\u0000\u0000\u063d\u063e\u0005\u0167\u0000\u0000\u063e\u0660\u0005\u0466"+
		"\u0000\u0000\u063f\u0640\u0005\u0165\u0000\u0000\u0640\u0660\u0007\u0011"+
		"\u0000\u0000\u0641\u0642\u0005\u0263\u0000\u0000\u0642\u0660\u0007\u0012"+
		"\u0000\u0000\u0643\u0660\u0003`0\u0000\u0644\u0645\u0005\u001a\u0000\u0000"+
		"\u0645\u0660\u0003\u021a\u010d\u0000\u0646\u0647\u0005F\u0000\u0000\u0647"+
		"\u0649\u0005\b\u0000\u0000\u0648\u0646\u0001\u0000\u0000\u0000\u0648\u0649"+
		"\u0001\u0000\u0000\u0000\u0649\u064a\u0001\u0000\u0000\u0000\u064a\u064b"+
		"\u0005\f\u0000\u0000\u064b\u064c\u0005\u0457\u0000\u0000\u064c\u064d\u0003"+
		"\u0288\u0144\u0000\u064d\u064f\u0005\u0458\u0000\u0000\u064e\u0650\u0007"+
		"\u0013\u0000\u0000\u064f\u064e\u0001\u0000\u0000\u0000\u064f\u0650\u0001"+
		"\u0000\u0000\u0000\u0650\u0660\u0001\u0000\u0000\u0000\u0651\u0652\u0005"+
		"\u00e9\u0000\u0000\u0652\u0653\u0005(\u0000\u0000\u0653\u0660\u0005\u0284"+
		"\u0000\u0000\u0654\u0656\u0005\u001d\u0000\u0000\u0655\u0657\u0003\u0226"+
		"\u0113\u0000\u0656\u0655\u0001\u0000\u0000\u0000\u0656\u0657\u0001\u0000"+
		"\u0000\u0000\u0657\u0659\u0001\u0000\u0000\u0000\u0658\u0654\u0001\u0000"+
		"\u0000\u0000\u0658\u0659\u0001\u0000\u0000\u0000\u0659\u065a\u0001\u0000"+
		"\u0000\u0000\u065a\u065b\u0005\u0019\u0000\u0000\u065b\u065c\u0005\u0457"+
		"\u0000\u0000\u065c\u065d\u0003\u0288\u0144\u0000\u065d\u065e\u0005\u0458"+
		"\u0000\u0000\u065e\u0660\u0001\u0000\u0000\u0000\u065f\u062a\u0001\u0000"+
		"\u0000\u0000\u065f\u062b\u0001\u0000\u0000\u0000\u065f\u062d\u0001\u0000"+
		"\u0000\u0000\u065f\u062e\u0001\u0000\u0000\u0000\u065f\u0633\u0001\u0000"+
		"\u0000\u0000\u065f\u0636\u0001\u0000\u0000\u0000\u065f\u0639\u0001\u0000"+
		"\u0000\u0000\u065f\u063d\u0001\u0000\u0000\u0000\u065f\u063f\u0001\u0000"+
		"\u0000\u0000\u065f\u0641\u0001\u0000\u0000\u0000\u065f\u0643\u0001\u0000"+
		"\u0000\u0000\u065f\u0644\u0001\u0000\u0000\u0000\u065f\u0648\u0001\u0000"+
		"\u0000\u0000\u065f\u0651\u0001\u0000\u0000\u0000\u065f\u0658\u0001\u0000"+
		"\u0000\u0000\u0660]\u0001\u0000\u0000\u0000\u0661\u0663\u0005\u001d\u0000"+
		"\u0000\u0662\u0664\u0003\u0226\u0113\u0000\u0663\u0662\u0001\u0000\u0000"+
		"\u0000\u0663\u0664\u0001\u0000\u0000\u0000\u0664\u0666\u0001\u0000\u0000"+
		"\u0000\u0665\u0661\u0001\u0000\u0000\u0000\u0665\u0666\u0001\u0000\u0000"+
		"\u0000\u0666\u0667\u0001\u0000\u0000\u0000\u0667\u0668\u0005\u007f\u0000"+
		"\u0000\u0668\u066a\u0005[\u0000\u0000\u0669\u066b\u0003\u0226\u0113\u0000"+
		"\u066a\u0669\u0001\u0000\u0000\u0000\u066a\u066b\u0001\u0000\u0000\u0000"+
		"\u066b\u066d\u0001\u0000\u0000\u0000\u066c\u066e\u0003J%\u0000\u066d\u066c"+
		"\u0001\u0000\u0000\u0000\u066d\u066e\u0001\u0000\u0000\u0000\u066e\u066f"+
		"\u0001\u0000\u0000\u0000\u066f\u0673\u0003\u024a\u0125\u0000\u0670\u0672"+
		"\u0003L&\u0000\u0671\u0670\u0001\u0000\u0000\u0000\u0672\u0675\u0001\u0000"+
		"\u0000\u0000\u0673\u0671\u0001\u0000\u0000\u0000\u0673\u0674\u0001\u0000"+
		"\u0000\u0000\u0674\u06a7\u0001\u0000\u0000\u0000\u0675\u0673\u0001\u0000"+
		"\u0000\u0000\u0676\u0678\u0005\u001d\u0000\u0000\u0677\u0679\u0003\u0226"+
		"\u0113\u0000\u0678\u0677\u0001\u0000\u0000\u0000\u0678\u0679\u0001\u0000"+
		"\u0000\u0000\u0679\u067b\u0001\u0000\u0000\u0000\u067a\u0676\u0001\u0000"+
		"\u0000\u0000\u067a\u067b\u0001\u0000\u0000\u0000\u067b\u067c\u0001\u0000"+
		"\u0000\u0000\u067c\u067e\u0005\u00af\u0000\u0000\u067d\u067f\u0007\u0014"+
		"\u0000\u0000\u067e\u067d\u0001\u0000\u0000\u0000\u067e\u067f\u0001\u0000"+
		"\u0000\u0000\u067f\u0681\u0001\u0000\u0000\u0000\u0680\u0682\u0003\u0226"+
		"\u0113\u0000\u0681\u0680\u0001\u0000\u0000\u0000\u0681\u0682\u0001\u0000"+
		"\u0000\u0000\u0682\u0684\u0001\u0000\u0000\u0000\u0683\u0685\u0003J%\u0000"+
		"\u0684\u0683\u0001\u0000\u0000\u0000\u0684\u0685\u0001\u0000\u0000\u0000"+
		"\u0685\u0686\u0001\u0000\u0000\u0000\u0686\u068a\u0003\u024a\u0125\u0000"+
		"\u0687\u0689\u0003L&\u0000\u0688\u0687\u0001\u0000\u0000\u0000\u0689\u068c"+
		"\u0001\u0000\u0000\u0000\u068a\u0688\u0001\u0000\u0000\u0000\u068a\u068b"+
		"\u0001\u0000\u0000\u0000\u068b\u06a7\u0001\u0000\u0000\u0000\u068c\u068a"+
		"\u0001\u0000\u0000\u0000\u068d\u068f\u0005\u001d\u0000\u0000\u068e\u0690"+
		"\u0003\u0226\u0113\u0000\u068f\u068e\u0001\u0000\u0000\u0000\u068f\u0690"+
		"\u0001\u0000\u0000\u0000\u0690\u0692\u0001\u0000\u0000\u0000\u0691\u068d"+
		"\u0001\u0000\u0000\u0000\u0691\u0692\u0001\u0000\u0000\u0000\u0692\u0693"+
		"\u0001\u0000\u0000\u0000\u0693\u0694\u0005C\u0000\u0000\u0694\u0696\u0005"+
		"[\u0000\u0000\u0695\u0697\u0003\u0226\u0113\u0000\u0696\u0695\u0001\u0000"+
		"\u0000\u0000\u0696\u0697\u0001\u0000\u0000\u0000\u0697\u0698\u0001\u0000"+
		"\u0000\u0000\u0698\u0699\u0003\u024a\u0125\u0000\u0699\u069a\u0003`0\u0000"+
		"\u069a\u06a7\u0001\u0000\u0000\u0000\u069b\u069d\u0005\u001d\u0000\u0000"+
		"\u069c\u069e\u0003\u0226\u0113\u0000\u069d\u069c\u0001\u0000\u0000\u0000"+
		"\u069d\u069e\u0001\u0000\u0000\u0000\u069e\u06a0\u0001\u0000\u0000\u0000"+
		"\u069f\u069b\u0001\u0000\u0000\u0000\u069f\u06a0\u0001\u0000\u0000\u0000"+
		"\u06a0\u06a1\u0001\u0000\u0000\u0000\u06a1\u06a2\u0005\u0019\u0000\u0000"+
		"\u06a2\u06a3\u0005\u0457\u0000\u0000\u06a3\u06a4\u0003\u0288\u0144\u0000"+
		"\u06a4\u06a5\u0005\u0458\u0000\u0000\u06a5\u06a7\u0001\u0000\u0000\u0000"+
		"\u06a6\u0665\u0001\u0000\u0000\u0000\u06a6\u067a\u0001\u0000\u0000\u0000"+
		"\u06a6\u0691\u0001\u0000\u0000\u0000\u06a6\u069f\u0001\u0000\u0000\u0000"+
		"\u06a7_\u0001\u0000\u0000\u0000\u06a8\u06a9\u0005\u0085\u0000\u0000\u06a9"+
		"\u06ab\u0003\u020c\u0106\u0000\u06aa\u06ac\u0003\u024a\u0125\u0000\u06ab"+
		"\u06aa\u0001\u0000\u0000\u0000\u06ab\u06ac\u0001\u0000\u0000\u0000\u06ac"+
		"\u06af\u0001\u0000\u0000\u0000\u06ad\u06ae\u0005k\u0000\u0000\u06ae\u06b0"+
		"\u0007\u0015\u0000\u0000\u06af\u06ad\u0001\u0000\u0000\u0000\u06af\u06b0"+
		"\u0001\u0000\u0000\u0000\u06b0\u06b2\u0001\u0000\u0000\u0000\u06b1\u06b3"+
		"\u0003b1\u0000\u06b2\u06b1\u0001\u0000\u0000\u0000\u06b2\u06b3\u0001\u0000"+
		"\u0000\u0000\u06b3a\u0001\u0000\u0000\u0000\u06b4\u06b5\u0005s\u0000\u0000"+
		"\u06b5\u06b6\u0005*\u0000\u0000\u06b6\u06ba\u0003d2\u0000\u06b7\u06b8"+
		"\u0005s\u0000\u0000\u06b8\u06b9\u0005\u00b2\u0000\u0000\u06b9\u06bb\u0003"+
		"d2\u0000\u06ba\u06b7\u0001\u0000\u0000\u0000\u06ba\u06bb\u0001\u0000\u0000"+
		"\u0000\u06bb\u06c5\u0001\u0000\u0000\u0000\u06bc\u06bd\u0005s\u0000\u0000"+
		"\u06bd\u06be\u0005\u00b2\u0000\u0000\u06be\u06c2\u0003d2\u0000\u06bf\u06c0"+
		"\u0005s\u0000\u0000\u06c0\u06c1\u0005*\u0000\u0000\u06c1\u06c3\u0003d"+
		"2\u0000\u06c2\u06bf\u0001\u0000\u0000\u0000\u06c2\u06c3\u0001\u0000\u0000"+
		"\u0000\u06c3\u06c5\u0001\u0000\u0000\u0000\u06c4\u06b4\u0001\u0000\u0000"+
		"\u0000\u06c4\u06bc\u0001\u0000\u0000\u0000\u06c5c\u0001\u0000\u0000\u0000"+
		"\u06c6\u06cd\u0005\u008d\u0000\u0000\u06c7\u06cd\u0005\u0014\u0000\u0000"+
		"\u06c8\u06c9\u0005\u0096\u0000\u0000\u06c9\u06cd\u0005q\u0000\u0000\u06ca"+
		"\u06cb\u0005\u01fa\u0000\u0000\u06cb\u06cd\u0005\u0144\u0000\u0000\u06cc"+
		"\u06c6\u0001\u0000\u0000\u0000\u06cc\u06c7\u0001\u0000\u0000\u0000\u06cc"+
		"\u06c8\u0001\u0000\u0000\u0000\u06cc\u06ca\u0001\u0000\u0000\u0000\u06cd"+
		"e\u0001\u0000\u0000\u0000\u06ce\u06d0\u0007\u0014\u0000\u0000\u06cf\u06d1"+
		"\u0003\u0226\u0113\u0000\u06d0\u06cf\u0001\u0000\u0000\u0000\u06d0\u06d1"+
		"\u0001\u0000\u0000\u0000\u06d1\u06d3\u0001\u0000\u0000\u0000\u06d2\u06d4"+
		"\u0003J%\u0000\u06d3\u06d2\u0001\u0000\u0000\u0000\u06d3\u06d4\u0001\u0000"+
		"\u0000\u0000\u06d4\u06d5\u0001\u0000\u0000\u0000\u06d5\u06d9\u0003\u024a"+
		"\u0125\u0000\u06d6\u06d8\u0003L&\u0000\u06d7\u06d6\u0001\u0000\u0000\u0000"+
		"\u06d8\u06db\u0001\u0000\u0000\u0000\u06d9\u06d7\u0001\u0000\u0000\u0000"+
		"\u06d9\u06da\u0001\u0000\u0000\u0000\u06da\u06eb\u0001\u0000\u0000\u0000"+
		"\u06db\u06d9\u0001\u0000\u0000\u0000\u06dc\u06de\u0007\u0016\u0000\u0000"+
		"\u06dd\u06df\u0007\u0014\u0000\u0000\u06de\u06dd\u0001\u0000\u0000\u0000"+
		"\u06de\u06df\u0001\u0000\u0000\u0000\u06df\u06e1\u0001\u0000\u0000\u0000"+
		"\u06e0\u06e2\u0003\u0226\u0113\u0000\u06e1\u06e0\u0001\u0000\u0000\u0000"+
		"\u06e1\u06e2\u0001\u0000\u0000\u0000\u06e2\u06e3\u0001\u0000\u0000\u0000"+
		"\u06e3\u06e7\u0003\u024a\u0125\u0000\u06e4\u06e6\u0003L&\u0000\u06e5\u06e4"+
		"\u0001\u0000\u0000\u0000\u06e6\u06e9\u0001\u0000\u0000\u0000\u06e7\u06e5"+
		"\u0001\u0000\u0000\u0000\u06e7\u06e8\u0001\u0000\u0000\u0000\u06e8\u06eb"+
		"\u0001\u0000\u0000\u0000\u06e9\u06e7\u0001\u0000\u0000\u0000\u06ea\u06ce"+
		"\u0001\u0000\u0000\u0000\u06ea\u06dc\u0001\u0000\u0000\u0000\u06ebg\u0001"+
		"\u0000\u0000\u0000\u06ec\u06ee\u0005\u018d\u0000\u0000\u06ed\u06ef\u0005"+
		"\u044e\u0000\u0000\u06ee\u06ed\u0001\u0000\u0000\u0000\u06ee\u06ef\u0001"+
		"\u0000\u0000\u0000\u06ef\u06f1\u0001\u0000\u0000\u0000\u06f0\u06f2\u0003"+
		"\u021c\u010e\u0000\u06f1\u06f0\u0001\u0000\u0000\u0000\u06f1\u06f2\u0001"+
		"\u0000\u0000\u0000\u06f2\u077e\u0001\u0000\u0000\u0000\u06f3\u06f5\u0005"+
		"\u014d\u0000\u0000\u06f4\u06f6\u0005\u044e\u0000\u0000\u06f5\u06f4\u0001"+
		"\u0000\u0000\u0000\u06f5\u06f6\u0001\u0000\u0000\u0000\u06f6\u06f7\u0001"+
		"\u0000\u0000\u0000\u06f7\u077e\u0003\u022c\u0116\u0000\u06f8\u06fa\u0005"+
		"\u014e\u0000\u0000\u06f9\u06fb\u0005\u044e\u0000\u0000\u06fa\u06f9\u0001"+
		"\u0000\u0000\u0000\u06fa\u06fb\u0001\u0000\u0000\u0000\u06fb\u06fc\u0001"+
		"\u0000\u0000\u0000\u06fc\u077e\u0003\u022c\u0116\u0000\u06fd\u06ff\u0005"+
		"(\u0000\u0000\u06fe\u06fd\u0001\u0000\u0000\u0000\u06fe\u06ff\u0001\u0000"+
		"\u0000\u0000\u06ff\u0700\u0001\u0000\u0000\u0000\u0700\u0702\u0003<\u001e"+
		"\u0000\u0701\u0703\u0005\u044e\u0000\u0000\u0702\u0701\u0001\u0000\u0000"+
		"\u0000\u0702\u0703\u0001\u0000\u0000\u0000\u0703\u0706\u0001\u0000\u0000"+
		"\u0000\u0704\u0707\u0003\u0218\u010c\u0000\u0705\u0707\u0005(\u0000\u0000"+
		"\u0706\u0704\u0001\u0000\u0000\u0000\u0706\u0705\u0001\u0000\u0000\u0000"+
		"\u0707\u077e\u0001\u0000\u0000\u0000\u0708\u070a\u0007\u0017\u0000\u0000"+
		"\u0709\u070b\u0005\u044e\u0000\u0000\u070a\u0709\u0001\u0000\u0000\u0000"+
		"\u070a\u070b\u0001\u0000\u0000\u0000\u070b\u070c\u0001\u0000\u0000\u0000"+
		"\u070c\u077e\u0007\u0018\u0000\u0000\u070d\u070f\u0005(\u0000\u0000\u070e"+
		"\u070d\u0001\u0000\u0000\u0000\u070e\u070f\u0001\u0000\u0000\u0000\u070f"+
		"\u0710\u0001\u0000\u0000\u0000\u0710\u0712\u0005\u001a\u0000\u0000\u0711"+
		"\u0713\u0005\u044e\u0000\u0000\u0712\u0711\u0001\u0000\u0000\u0000\u0712"+
		"\u0713\u0001\u0000\u0000\u0000\u0713\u0714\u0001\u0000\u0000\u0000\u0714"+
		"\u077e\u0003\u021a\u010d\u0000\u0715\u0717\u0005\u0167\u0000\u0000\u0716"+
		"\u0718\u0005\u044e\u0000\u0000\u0717\u0716\u0001\u0000\u0000\u0000\u0717"+
		"\u0718\u0001\u0000\u0000\u0000\u0718\u0719\u0001\u0000\u0000\u0000\u0719"+
		"\u077e\u0005\u0466\u0000\u0000\u071a\u071c\u0005\u016c\u0000\u0000\u071b"+
		"\u071d\u0005\u044e\u0000\u0000\u071c\u071b\u0001\u0000\u0000\u0000\u071c"+
		"\u071d\u0001\u0000\u0000\u0000\u071d\u071e\u0001\u0000\u0000\u0000\u071e"+
		"\u077e\u0007\u0019\u0000\u0000\u071f\u0721\u0005\u016f\u0000\u0000\u0720"+
		"\u0722\u0005\u044e\u0000\u0000\u0721\u0720\u0001\u0000\u0000\u0000\u0721"+
		"\u0722\u0001\u0000\u0000\u0000\u0722\u0723\u0001\u0000\u0000\u0000\u0723"+
		"\u077e\u0005\u0466\u0000\u0000\u0724\u0725\u0005\u017a\u0000\u0000\u0725"+
		"\u0727\u0005\u0181\u0000\u0000\u0726\u0728\u0005\u044e\u0000\u0000\u0727"+
		"\u0726\u0001\u0000\u0000\u0000\u0727\u0728\u0001\u0000\u0000\u0000\u0728"+
		"\u0729\u0001\u0000\u0000\u0000\u0729\u077e\u0005\u0466\u0000\u0000\u072a"+
		"\u072c\u0005\u017f\u0000\u0000\u072b\u072d\u0005\u044e\u0000\u0000\u072c"+
		"\u072b\u0001\u0000\u0000\u0000\u072c\u072d\u0001\u0000\u0000\u0000\u072d"+
		"\u072e\u0001\u0000\u0000\u0000\u072e\u077e\u0007\u0018\u0000\u0000\u072f"+
		"\u0731\u0005\u018a\u0000\u0000\u0730\u0732\u0005\u044e\u0000\u0000\u0731"+
		"\u0730\u0001\u0000\u0000\u0000\u0731\u0732\u0001\u0000\u0000\u0000\u0732"+
		"\u0733\u0001\u0000\u0000\u0000\u0733\u077e\u0005\u0466\u0000\u0000\u0734"+
		"\u0735\u0005Q\u0000\u0000\u0735\u0737\u0005\u0181\u0000\u0000\u0736\u0738"+
		"\u0005\u044e\u0000\u0000\u0737\u0736\u0001\u0000\u0000\u0000\u0737\u0738"+
		"\u0001\u0000\u0000\u0000\u0738\u0739\u0001\u0000\u0000\u0000\u0739\u077e"+
		"\u0005\u0466\u0000\u0000\u073a\u073c\u0005\u01b8\u0000\u0000\u073b\u073d"+
		"\u0005\u044e\u0000\u0000\u073c\u073b\u0001\u0000\u0000\u0000\u073c\u073d"+
		"\u0001\u0000\u0000\u0000\u073d\u073e\u0001\u0000\u0000\u0000\u073e\u077e"+
		"\u0007\u001a\u0000\u0000\u073f\u0741\u0005\u01c4\u0000\u0000\u0740\u0742"+
		"\u0005\u044e\u0000\u0000\u0741\u0740\u0001\u0000\u0000\u0000\u0741\u0742"+
		"\u0001\u0000\u0000\u0000\u0742\u0743\u0001\u0000\u0000\u0000\u0743\u077e"+
		"\u0003\u022e\u0117\u0000\u0744\u0746\u0005\u01e5\u0000\u0000\u0745\u0747"+
		"\u0005\u044e\u0000\u0000\u0746\u0745\u0001\u0000\u0000\u0000\u0746\u0747"+
		"\u0001\u0000\u0000\u0000\u0747\u0748\u0001\u0000\u0000\u0000\u0748\u077e"+
		"\u0003\u022c\u0116\u0000\u0749\u074b\u0005\u01ef\u0000\u0000\u074a\u074c"+
		"\u0005\u044e\u0000\u0000\u074b\u074a\u0001\u0000\u0000\u0000\u074b\u074c"+
		"\u0001\u0000\u0000\u0000\u074c\u074d\u0001\u0000\u0000\u0000\u074d\u077e"+
		"\u0003\u022c\u0116\u0000\u074e\u0750\u0005\u020c\u0000\u0000\u074f\u0751"+
		"\u0005\u044e\u0000\u0000\u0750\u074f\u0001\u0000\u0000\u0000\u0750\u0751"+
		"\u0001\u0000\u0000\u0000\u0751\u0752\u0001\u0000\u0000\u0000\u0752\u077e"+
		"\u0007\u001b\u0000\u0000\u0753\u0755\u0005\u0212\u0000\u0000\u0754\u0756"+
		"\u0005\u044e\u0000\u0000\u0755\u0754\u0001\u0000\u0000\u0000\u0755\u0756"+
		"\u0001\u0000\u0000\u0000\u0756\u0757\u0001\u0000\u0000\u0000\u0757\u077e"+
		"\u0005\u0466\u0000\u0000\u0758\u075a\u0005\u0242\u0000\u0000\u0759\u075b"+
		"\u0005\u044e\u0000\u0000\u075a\u0759\u0001\u0000\u0000\u0000\u075a\u075b"+
		"\u0001\u0000\u0000\u0000\u075b\u075c\u0001\u0000\u0000\u0000\u075c\u077e"+
		"\u0007\u001c\u0000\u0000\u075d\u075f\u0005\u025e\u0000\u0000\u075e\u0760"+
		"\u0005\u044e\u0000\u0000\u075f\u075e\u0001\u0000\u0000\u0000\u075f\u0760"+
		"\u0001\u0000\u0000\u0000\u0760\u0761\u0001\u0000\u0000\u0000\u0761\u077e"+
		"\u0007\u001b\u0000\u0000\u0762\u0764\u0005\u025f\u0000\u0000\u0763\u0765"+
		"\u0005\u044e\u0000\u0000\u0764\u0763\u0001\u0000\u0000\u0000\u0764\u0765"+
		"\u0001\u0000\u0000\u0000\u0765\u0766\u0001\u0000\u0000\u0000\u0766\u077e"+
		"\u0007\u001b\u0000\u0000\u0767\u0769\u0005\u0260\u0000\u0000\u0768\u076a"+
		"\u0005\u044e\u0000\u0000\u0769\u0768\u0001\u0000\u0000\u0000\u0769\u076a"+
		"\u0001\u0000\u0000\u0000\u076a\u076b\u0001\u0000\u0000\u0000\u076b\u077e"+
		"\u0003\u022c\u0116\u0000\u076c\u076d\u0005\u026e\u0000\u0000\u076d\u076f"+
		"\u0003\u0226\u0113\u0000\u076e\u0770\u0003l6\u0000\u076f\u076e\u0001\u0000"+
		"\u0000\u0000\u076f\u0770\u0001\u0000\u0000\u0000\u0770\u077e\u0001\u0000"+
		"\u0000\u0000\u0771\u0772\u0005\u026f\u0000\u0000\u0772\u0773\u0005\u044e"+
		"\u0000\u0000\u0773\u077e\u0003j5\u0000\u0774\u077e\u0003l6\u0000\u0775"+
		"\u0777\u0005\u00ae\u0000\u0000\u0776\u0778\u0005\u044e\u0000\u0000\u0777"+
		"\u0776\u0001\u0000\u0000\u0000\u0777\u0778\u0001\u0000\u0000\u0000\u0778"+
		"\u0779\u0001\u0000\u0000\u0000\u0779\u077a\u0005\u0457\u0000\u0000\u077a"+
		"\u077b\u0003\u0248\u0124\u0000\u077b\u077c\u0005\u0458\u0000\u0000\u077c"+
		"\u077e\u0001\u0000\u0000\u0000\u077d\u06ec\u0001\u0000\u0000\u0000\u077d"+
		"\u06f3\u0001\u0000\u0000\u0000\u077d\u06f8\u0001\u0000\u0000\u0000\u077d"+
		"\u06fe\u0001\u0000\u0000\u0000\u077d\u0708\u0001\u0000\u0000\u0000\u077d"+
		"\u070e\u0001\u0000\u0000\u0000\u077d\u0715\u0001\u0000\u0000\u0000\u077d"+
		"\u071a\u0001\u0000\u0000\u0000\u077d\u071f\u0001\u0000\u0000\u0000\u077d"+
		"\u0724\u0001\u0000\u0000\u0000\u077d\u072a\u0001\u0000\u0000\u0000\u077d"+
		"\u072f\u0001\u0000\u0000\u0000\u077d\u0734\u0001\u0000\u0000\u0000\u077d"+
		"\u073a\u0001\u0000\u0000\u0000\u077d\u073f\u0001\u0000\u0000\u0000\u077d"+
		"\u0744\u0001\u0000\u0000\u0000\u077d\u0749\u0001\u0000\u0000\u0000\u077d"+
		"\u074e\u0001\u0000\u0000\u0000\u077d\u0753\u0001\u0000\u0000\u0000\u077d"+
		"\u0758\u0001\u0000\u0000\u0000\u077d\u075d\u0001\u0000\u0000\u0000\u077d"+
		"\u0762\u0001\u0000\u0000\u0000\u077d\u0767\u0001\u0000\u0000\u0000\u077d"+
		"\u076c\u0001\u0000\u0000\u0000\u077d\u0771\u0001\u0000\u0000\u0000\u077d"+
		"\u0774\u0001\u0000\u0000\u0000\u077d\u0775\u0001\u0000\u0000\u0000\u077e"+
		"i\u0001\u0000\u0000\u0000\u077f\u0780\u0007\u001d\u0000\u0000\u0780k\u0001"+
		"\u0000\u0000\u0000\u0781\u0782\u0005\u0263\u0000\u0000\u0782\u0783\u0007"+
		"\u0012\u0000\u0000\u0783m\u0001\u0000\u0000\u0000\u0784\u0785\u0005~\u0000"+
		"\u0000\u0785\u0786\u0005\u0012\u0000\u0000\u0786\u0789\u0003p8\u0000\u0787"+
		"\u0788\u0005\u0211\u0000\u0000\u0788\u078a\u0003\u022c\u0116\u0000\u0789"+
		"\u0787\u0001\u0000\u0000\u0000\u0789\u078a\u0001\u0000\u0000\u0000\u078a"+
		"\u0792\u0001\u0000\u0000\u0000\u078b\u078c\u0005\u0268\u0000\u0000\u078c"+
		"\u078d\u0005\u0012\u0000\u0000\u078d\u0790\u0003r9\u0000\u078e\u078f\u0005"+
		"\u0269\u0000\u0000\u078f\u0791\u0003\u022c\u0116\u0000\u0790\u078e\u0001"+
		"\u0000\u0000\u0000\u0790\u0791\u0001\u0000\u0000\u0000\u0791\u0793\u0001"+
		"\u0000\u0000\u0000\u0792\u078b\u0001\u0000\u0000\u0000\u0792\u0793\u0001"+
		"\u0000\u0000\u0000\u0793\u079f\u0001\u0000\u0000\u0000\u0794\u0795\u0005"+
		"\u0457\u0000\u0000\u0795\u079a\u0003t:\u0000\u0796\u0797\u0005\u0459\u0000"+
		"\u0000\u0797\u0799\u0003t:\u0000\u0798\u0796\u0001\u0000\u0000\u0000\u0799"+
		"\u079c\u0001\u0000\u0000\u0000\u079a\u0798\u0001\u0000\u0000\u0000\u079a"+
		"\u079b\u0001\u0000\u0000\u0000\u079b\u079d\u0001\u0000\u0000\u0000\u079c"+
		"\u079a\u0001\u0000\u0000\u0000\u079d\u079e\u0005\u0458\u0000\u0000\u079e"+
		"\u07a0\u0001\u0000\u0000\u0000\u079f\u0794\u0001\u0000\u0000\u0000\u079f"+
		"\u07a0\u0001\u0000\u0000\u0000\u07a0o\u0001\u0000\u0000\u0000\u07a1\u07a3"+
		"\u0005c\u0000\u0000\u07a2\u07a1\u0001\u0000\u0000\u0000\u07a2\u07a3\u0001"+
		"\u0000\u0000\u0000\u07a3\u07a4\u0001\u0000\u0000\u0000\u07a4\u07a5\u0005"+
		"\u01ae\u0000\u0000\u07a5\u07a6\u0005\u0457\u0000\u0000\u07a6\u07a7\u0003"+
		"\u0288\u0144\u0000\u07a7\u07a8\u0005\u0458\u0000\u0000\u07a8\u07cf\u0001"+
		"\u0000\u0000\u0000\u07a9\u07ab\u0005c\u0000\u0000\u07aa\u07a9\u0001\u0000"+
		"\u0000\u0000\u07aa\u07ab\u0001\u0000\u0000\u0000\u07ab\u07ac\u0001\u0000"+
		"\u0000\u0000\u07ac\u07b0\u0005[\u0000\u0000\u07ad\u07ae\u0005\u0147\u0000"+
		"\u0000\u07ae\u07af\u0005\u044e\u0000\u0000\u07af\u07b1\u0007\u001e\u0000"+
		"\u0000\u07b0\u07ad\u0001\u0000\u0000\u0000\u07b0\u07b1\u0001\u0000\u0000"+
		"\u0000\u07b1\u07b2\u0001\u0000\u0000\u0000\u07b2\u07b3\u0005\u0457\u0000"+
		"\u0000\u07b3\u07b4\u0003\u0246\u0123\u0000\u07b4\u07b5\u0005\u0458\u0000"+
		"\u0000\u07b5\u07cf\u0001\u0000\u0000\u0000\u07b6\u07c0\u0005\u0082\u0000"+
		"\u0000\u07b7\u07b8\u0005\u0457\u0000\u0000\u07b8\u07b9\u0003\u0288\u0144"+
		"\u0000\u07b9\u07ba\u0005\u0458\u0000\u0000\u07ba\u07c1\u0001\u0000\u0000"+
		"\u0000\u07bb\u07bc\u0005\u0164\u0000\u0000\u07bc\u07bd\u0005\u0457\u0000"+
		"\u0000\u07bd\u07be\u0003\u0246\u0123\u0000\u07be\u07bf\u0005\u0458\u0000"+
		"\u0000\u07bf\u07c1\u0001\u0000\u0000\u0000\u07c0\u07b7\u0001\u0000\u0000"+
		"\u0000\u07c0\u07bb\u0001\u0000\u0000\u0000\u07c1\u07cf\u0001\u0000\u0000"+
		"\u0000\u07c2\u07cc\u0005\u01ca\u0000\u0000\u07c3\u07c4\u0005\u0457\u0000"+
		"\u0000\u07c4\u07c5\u0003\u0288\u0144\u0000\u07c5\u07c6\u0005\u0458\u0000"+
		"\u0000\u07c6\u07cd\u0001\u0000\u0000\u0000\u07c7\u07c8\u0005\u0164\u0000"+
		"\u0000\u07c8\u07c9\u0005\u0457\u0000\u0000\u07c9\u07ca\u0003\u0246\u0123"+
		"\u0000\u07ca\u07cb\u0005\u0458\u0000\u0000\u07cb\u07cd\u0001\u0000\u0000"+
		"\u0000\u07cc\u07c3\u0001\u0000\u0000\u0000\u07cc\u07c7\u0001\u0000\u0000"+
		"\u0000\u07cd\u07cf\u0001\u0000\u0000\u0000\u07ce\u07a2\u0001\u0000\u0000"+
		"\u0000\u07ce\u07aa\u0001\u0000\u0000\u0000\u07ce\u07b6\u0001\u0000\u0000"+
		"\u0000\u07ce\u07c2\u0001\u0000\u0000\u0000\u07cfq\u0001\u0000\u0000\u0000"+
		"\u07d0\u07d2\u0005c\u0000\u0000\u07d1\u07d0\u0001\u0000\u0000\u0000\u07d1"+
		"\u07d2\u0001\u0000\u0000\u0000\u07d2\u07d3\u0001\u0000\u0000\u0000\u07d3"+
		"\u07d4\u0005\u01ae\u0000\u0000\u07d4\u07d5\u0005\u0457\u0000\u0000\u07d5"+
		"\u07d6\u0003\u0288\u0144\u0000\u07d6\u07d7\u0005\u0458\u0000\u0000\u07d7"+
		"\u07e6\u0001\u0000\u0000\u0000\u07d8\u07da\u0005c\u0000\u0000\u07d9\u07d8"+
		"\u0001\u0000\u0000\u0000\u07d9\u07da\u0001\u0000\u0000\u0000\u07da\u07db"+
		"\u0001\u0000\u0000\u0000\u07db\u07df\u0005[\u0000\u0000\u07dc\u07dd\u0005"+
		"\u0147\u0000\u0000\u07dd\u07de\u0005\u044e\u0000\u0000\u07de\u07e0\u0007"+
		"\u001e\u0000\u0000\u07df\u07dc\u0001\u0000\u0000\u0000\u07df\u07e0\u0001"+
		"\u0000\u0000\u0000\u07e0\u07e1\u0001\u0000\u0000\u0000\u07e1\u07e2\u0005"+
		"\u0457\u0000\u0000\u07e2\u07e3\u0003\u0246\u0123\u0000\u07e3\u07e4\u0005"+
		"\u0458\u0000\u0000\u07e4\u07e6\u0001\u0000\u0000\u0000\u07e5\u07d1\u0001"+
		"\u0000\u0000\u0000\u07e5\u07d9\u0001\u0000\u0000\u0000\u07e6s\u0001\u0000"+
		"\u0000\u0000\u07e7\u07e8\u0005~\u0000\u0000\u07e8\u07e9\u0003\u0226\u0113"+
		"\u0000\u07e9\u07ea\u0005\u00b6\u0000\u0000\u07ea\u07eb\u0005\u01c8\u0000"+
		"\u0000\u07eb\u07ec\u0005\u0272\u0000\u0000\u07ec\u07ed\u0005\u0457\u0000"+
		"\u0000\u07ed\u07f2\u0003v;\u0000\u07ee\u07ef\u0005\u0459\u0000\u0000\u07ef"+
		"\u07f1\u0003v;\u0000\u07f0\u07ee\u0001\u0000\u0000\u0000\u07f1\u07f4\u0001"+
		"\u0000\u0000\u0000\u07f2\u07f0\u0001\u0000\u0000\u0000\u07f2\u07f3\u0001"+
		"\u0000\u0000\u0000\u07f3\u07f5\u0001\u0000\u0000\u0000\u07f4\u07f2\u0001"+
		"\u0000\u0000\u0000\u07f5\u07f9\u0005\u0458\u0000\u0000\u07f6\u07f8\u0003"+
		"|>\u0000\u07f7\u07f6\u0001\u0000\u0000\u0000\u07f8\u07fb\u0001\u0000\u0000"+
		"\u0000\u07f9\u07f7\u0001\u0000\u0000\u0000\u07f9\u07fa\u0001\u0000\u0000"+
		"\u0000\u07fa\u0807\u0001\u0000\u0000\u0000\u07fb\u07f9\u0001\u0000\u0000"+
		"\u0000\u07fc\u07fd\u0005\u0457\u0000\u0000\u07fd\u0802\u0003z=\u0000\u07fe"+
		"\u07ff\u0005\u0459\u0000\u0000\u07ff\u0801\u0003z=\u0000\u0800\u07fe\u0001"+
		"\u0000\u0000\u0000\u0801\u0804\u0001\u0000\u0000\u0000\u0802\u0800\u0001"+
		"\u0000\u0000\u0000\u0802\u0803\u0001\u0000\u0000\u0000\u0803\u0805\u0001"+
		"\u0000\u0000\u0000\u0804\u0802\u0001\u0000\u0000\u0000\u0805\u0806\u0005"+
		"\u0458\u0000\u0000\u0806\u0808\u0001\u0000\u0000\u0000\u0807\u07fc\u0001"+
		"\u0000\u0000\u0000\u0807\u0808\u0001\u0000\u0000\u0000\u0808\u087a\u0001"+
		"\u0000\u0000\u0000\u0809\u080a\u0005~\u0000\u0000\u080a\u080b\u0003\u0226"+
		"\u0113\u0000\u080b\u080c\u0005\u00b6\u0000\u0000\u080c\u080d\u0005\u01c8"+
		"\u0000\u0000\u080d\u080e\u0005\u0272\u0000\u0000\u080e\u0812\u0003v;\u0000"+
		"\u080f\u0811\u0003|>\u0000\u0810\u080f\u0001\u0000\u0000\u0000\u0811\u0814"+
		"\u0001\u0000\u0000\u0000\u0812\u0810\u0001\u0000\u0000\u0000\u0812\u0813"+
		"\u0001\u0000\u0000\u0000\u0813\u0820\u0001\u0000\u0000\u0000\u0814\u0812"+
		"\u0001\u0000\u0000\u0000\u0815\u0816\u0005\u0457\u0000\u0000\u0816\u081b"+
		"\u0003z=\u0000\u0817\u0818\u0005\u0459\u0000\u0000\u0818\u081a\u0003z"+
		"=\u0000\u0819\u0817\u0001\u0000\u0000\u0000\u081a\u081d\u0001\u0000\u0000"+
		"\u0000\u081b\u0819\u0001\u0000\u0000\u0000\u081b\u081c\u0001\u0000\u0000"+
		"\u0000\u081c\u081e\u0001\u0000\u0000\u0000\u081d\u081b\u0001\u0000\u0000"+
		"\u0000\u081e\u081f\u0005\u0458\u0000\u0000\u081f\u0821\u0001\u0000\u0000"+
		"\u0000\u0820\u0815\u0001\u0000\u0000\u0000\u0820\u0821\u0001\u0000\u0000"+
		"\u0000\u0821\u087a\u0001\u0000\u0000\u0000\u0822\u0823\u0005~\u0000\u0000"+
		"\u0823\u0824\u0003\u0226\u0113\u0000\u0824\u0825\u0005\u00b6\u0000\u0000"+
		"\u0825\u0826\u0005P\u0000\u0000\u0826\u0827\u0005\u0457\u0000\u0000\u0827"+
		"\u082c\u0003v;\u0000\u0828\u0829\u0005\u0459\u0000\u0000\u0829\u082b\u0003"+
		"v;\u0000\u082a\u0828\u0001\u0000\u0000\u0000\u082b\u082e\u0001\u0000\u0000"+
		"\u0000\u082c\u082a\u0001\u0000\u0000\u0000\u082c\u082d\u0001\u0000\u0000"+
		"\u0000\u082d\u082f\u0001\u0000\u0000\u0000\u082e\u082c\u0001\u0000\u0000"+
		"\u0000\u082f\u0833\u0005\u0458\u0000\u0000\u0830\u0832\u0003|>\u0000\u0831"+
		"\u0830\u0001\u0000\u0000\u0000\u0832\u0835\u0001\u0000\u0000\u0000\u0833"+
		"\u0831\u0001\u0000\u0000\u0000\u0833\u0834\u0001\u0000\u0000\u0000\u0834"+
		"\u0841\u0001\u0000\u0000\u0000\u0835\u0833\u0001\u0000\u0000\u0000\u0836"+
		"\u0837\u0005\u0457\u0000\u0000\u0837\u083c\u0003z=\u0000\u0838\u0839\u0005"+
		"\u0459\u0000\u0000\u0839\u083b\u0003z=\u0000\u083a\u0838\u0001\u0000\u0000"+
		"\u0000\u083b\u083e\u0001\u0000\u0000\u0000\u083c\u083a\u0001\u0000\u0000"+
		"\u0000\u083c\u083d\u0001\u0000\u0000\u0000\u083d\u083f\u0001\u0000\u0000"+
		"\u0000\u083e\u083c\u0001\u0000\u0000\u0000\u083f\u0840\u0005\u0458\u0000"+
		"\u0000\u0840\u0842\u0001\u0000\u0000\u0000\u0841\u0836\u0001\u0000\u0000"+
		"\u0000\u0841\u0842\u0001\u0000\u0000\u0000\u0842\u087a\u0001\u0000\u0000"+
		"\u0000\u0843\u0844\u0005~\u0000\u0000\u0844\u0845\u0003\u0226\u0113\u0000"+
		"\u0845\u0846\u0005\u00b6\u0000\u0000\u0846\u0847\u0005P\u0000\u0000\u0847"+
		"\u0848\u0005\u0457\u0000\u0000\u0848\u084d\u0003x<\u0000\u0849\u084a\u0005"+
		"\u0459\u0000\u0000\u084a\u084c\u0003x<\u0000\u084b\u0849\u0001\u0000\u0000"+
		"\u0000\u084c\u084f\u0001\u0000\u0000\u0000\u084d\u084b\u0001\u0000\u0000"+
		"\u0000\u084d\u084e\u0001\u0000\u0000\u0000\u084e\u0850\u0001\u0000\u0000"+
		"\u0000\u084f\u084d\u0001\u0000\u0000\u0000\u0850\u0854\u0005\u0458\u0000"+
		"\u0000\u0851\u0853\u0003|>\u0000\u0852\u0851\u0001\u0000\u0000\u0000\u0853"+
		"\u0856\u0001\u0000\u0000\u0000\u0854\u0852\u0001\u0000\u0000\u0000\u0854"+
		"\u0855\u0001\u0000\u0000\u0000\u0855\u0862\u0001\u0000\u0000\u0000\u0856"+
		"\u0854\u0001\u0000\u0000\u0000\u0857\u0858\u0005\u0457\u0000\u0000\u0858"+
		"\u085d\u0003z=\u0000\u0859\u085a\u0005\u0459\u0000\u0000\u085a\u085c\u0003"+
		"z=\u0000\u085b\u0859\u0001\u0000\u0000\u0000\u085c\u085f\u0001\u0000\u0000"+
		"\u0000\u085d\u085b\u0001\u0000\u0000\u0000\u085d\u085e\u0001\u0000\u0000"+
		"\u0000\u085e\u0860\u0001\u0000\u0000\u0000\u085f\u085d\u0001\u0000\u0000"+
		"\u0000\u0860\u0861\u0005\u0458\u0000\u0000\u0861\u0863\u0001\u0000\u0000"+
		"\u0000\u0862\u0857\u0001\u0000\u0000\u0000\u0862\u0863\u0001\u0000\u0000"+
		"\u0000\u0863\u087a\u0001\u0000\u0000\u0000\u0864\u0865\u0005~\u0000\u0000"+
		"\u0865\u0869\u0003\u0226\u0113\u0000\u0866\u0868\u0003|>\u0000\u0867\u0866"+
		"\u0001\u0000\u0000\u0000\u0868\u086b\u0001\u0000\u0000\u0000\u0869\u0867"+
		"\u0001\u0000\u0000\u0000\u0869\u086a\u0001\u0000\u0000\u0000\u086a\u0877"+
		"\u0001\u0000\u0000\u0000\u086b\u0869\u0001\u0000\u0000\u0000\u086c\u086d"+
		"\u0005\u0457\u0000\u0000\u086d\u0872\u0003z=\u0000\u086e\u086f\u0005\u0459"+
		"\u0000\u0000\u086f\u0871\u0003z=\u0000\u0870\u086e\u0001\u0000\u0000\u0000"+
		"\u0871\u0874\u0001\u0000\u0000\u0000\u0872\u0870\u0001\u0000\u0000\u0000"+
		"\u0872\u0873\u0001\u0000\u0000\u0000\u0873\u0875\u0001\u0000\u0000\u0000"+
		"\u0874\u0872\u0001\u0000\u0000\u0000\u0875\u0876\u0005\u0458\u0000\u0000"+
		"\u0876\u0878\u0001\u0000\u0000\u0000\u0877\u086c\u0001\u0000\u0000\u0000"+
		"\u0877\u0878\u0001\u0000\u0000\u0000\u0878\u087a\u0001\u0000\u0000\u0000"+
		"\u0879\u07e7\u0001\u0000\u0000\u0000\u0879\u0809\u0001\u0000\u0000\u0000"+
		"\u0879\u0822\u0001\u0000\u0000\u0000\u0879\u0843\u0001\u0000\u0000\u0000"+
		"\u0879\u0864\u0001\u0000\u0000\u0000\u087au\u0001\u0000\u0000\u0000\u087b"+
		"\u087f\u0003\u0238\u011c\u0000\u087c\u087f\u0003\u0288\u0144\u0000\u087d"+
		"\u087f\u0005l\u0000\u0000\u087e\u087b\u0001\u0000\u0000\u0000\u087e\u087c"+
		"\u0001\u0000\u0000\u0000\u087e\u087d\u0001\u0000\u0000\u0000\u087fw\u0001"+
		"\u0000\u0000\u0000\u0880\u0881\u0005\u0457\u0000\u0000\u0881\u0884\u0003"+
		"v;\u0000\u0882\u0883\u0005\u0459\u0000\u0000\u0883\u0885\u0003v;\u0000"+
		"\u0884\u0882\u0001\u0000\u0000\u0000\u0885\u0886\u0001\u0000\u0000\u0000"+
		"\u0886\u0884\u0001\u0000\u0000\u0000\u0886\u0887\u0001\u0000\u0000\u0000"+
		"\u0887\u0888\u0001\u0000\u0000\u0000\u0888\u0889\u0005\u0458\u0000\u0000"+
		"\u0889y\u0001\u0000\u0000\u0000\u088a\u088b\u0005\u0268\u0000\u0000\u088b"+
		"\u088f\u0003\u0226\u0113\u0000\u088c\u088e\u0003|>\u0000\u088d\u088c\u0001"+
		"\u0000\u0000\u0000\u088e\u0891\u0001\u0000\u0000\u0000\u088f\u088d\u0001"+
		"\u0000\u0000\u0000\u088f\u0890\u0001\u0000\u0000\u0000\u0890{\u0001\u0000"+
		"\u0000\u0000\u0891\u088f\u0001\u0000\u0000\u0000\u0892\u0894\u0005(\u0000"+
		"\u0000\u0893\u0892\u0001\u0000\u0000\u0000\u0893\u0894\u0001\u0000\u0000"+
		"\u0000\u0894\u0896\u0001\u0000\u0000\u0000\u0895\u0897\u0005\u0263\u0000"+
		"\u0000\u0896\u0895\u0001\u0000\u0000\u0000\u0896\u0897\u0001\u0000\u0000"+
		"\u0000\u0897\u0898\u0001\u0000\u0000\u0000\u0898\u089a\u0005\u018d\u0000"+
		"\u0000\u0899\u089b\u0005\u044e\u0000\u0000\u089a\u0899\u0001\u0000\u0000"+
		"\u0000\u089a\u089b\u0001\u0000\u0000\u0000\u089b\u089c\u0001\u0000\u0000"+
		"\u0000\u089c\u08c3\u0003\u021c\u010e\u0000\u089d\u089f\u0005\u0167\u0000"+
		"\u0000\u089e\u08a0\u0005\u044e\u0000\u0000\u089f\u089e\u0001\u0000\u0000"+
		"\u0000\u089f\u08a0\u0001\u0000\u0000\u0000\u08a0\u08a1\u0001\u0000\u0000"+
		"\u0000\u08a1\u08c3\u0005\u0466\u0000\u0000\u08a2\u08a3\u0005\u017a\u0000"+
		"\u0000\u08a3\u08a5\u0005\u0181\u0000\u0000\u08a4\u08a6\u0005\u044e\u0000"+
		"\u0000\u08a5\u08a4\u0001\u0000\u0000\u0000\u08a5\u08a6\u0001\u0000\u0000"+
		"\u0000\u08a6\u08a7\u0001\u0000\u0000\u0000\u08a7\u08c3\u0005\u0466\u0000"+
		"\u0000\u08a8\u08a9\u0005Q\u0000\u0000\u08a9\u08ab\u0005\u0181\u0000\u0000"+
		"\u08aa\u08ac\u0005\u044e\u0000\u0000\u08ab\u08aa\u0001\u0000\u0000\u0000"+
		"\u08ab\u08ac\u0001\u0000\u0000\u0000\u08ac\u08ad\u0001\u0000\u0000\u0000"+
		"\u08ad\u08c3\u0005\u0466\u0000\u0000\u08ae\u08b0\u0005\u01e5\u0000\u0000"+
		"\u08af\u08b1\u0005\u044e\u0000\u0000\u08b0\u08af\u0001\u0000\u0000\u0000"+
		"\u08b0\u08b1\u0001\u0000\u0000\u0000\u08b1\u08b2\u0001\u0000\u0000\u0000"+
		"\u08b2\u08c3\u0003\u022c\u0116\u0000\u08b3\u08b5\u0005\u01ef\u0000\u0000"+
		"\u08b4\u08b6\u0005\u044e\u0000\u0000\u08b5\u08b4\u0001\u0000\u0000\u0000"+
		"\u08b5\u08b6\u0001\u0000\u0000\u0000\u08b6\u08b7\u0001\u0000\u0000\u0000"+
		"\u08b7\u08c3\u0003\u022c\u0116\u0000\u08b8\u08ba\u0005\u026e\u0000\u0000"+
		"\u08b9\u08bb\u0005\u044e\u0000\u0000\u08ba\u08b9\u0001\u0000\u0000\u0000"+
		"\u08ba\u08bb\u0001\u0000\u0000\u0000\u08bb\u08bc\u0001\u0000\u0000\u0000"+
		"\u08bc\u08c3\u0003\u0226\u0113\u0000\u08bd\u08bf\u0005\u01fd\u0000\u0000"+
		"\u08be\u08c0\u0005\u044e\u0000\u0000\u08bf\u08be\u0001\u0000\u0000\u0000"+
		"\u08bf\u08c0\u0001\u0000\u0000\u0000\u08c0\u08c1\u0001\u0000\u0000\u0000"+
		"\u08c1\u08c3\u0003\u0226\u0113\u0000\u08c2\u0893\u0001\u0000\u0000\u0000"+
		"\u08c2\u089d\u0001\u0000\u0000\u0000\u08c2\u08a2\u0001\u0000\u0000\u0000"+
		"\u08c2\u08a8\u0001\u0000\u0000\u0000\u08c2\u08ae\u0001\u0000\u0000\u0000"+
		"\u08c2\u08b3\u0001\u0000\u0000\u0000\u08c2\u08b8\u0001\u0000\u0000\u0000"+
		"\u08c2\u08bd\u0001\u0000\u0000\u0000\u08c3}\u0001\u0000\u0000\u0000\u08c4"+
		"\u08c5\u0005\u0007\u0000\u0000\u08c5\u08c7\u0007\u0000\u0000\u0000\u08c6"+
		"\u08c8\u0003\u0226\u0113\u0000\u08c7\u08c6\u0001\u0000\u0000\u0000\u08c7"+
		"\u08c8\u0001\u0000\u0000\u0000\u08c8\u08ca\u0001\u0000\u0000\u0000\u08c9"+
		"\u08cb\u0003:\u001d\u0000\u08ca\u08c9\u0001\u0000\u0000\u0000\u08cb\u08cc"+
		"\u0001\u0000\u0000\u0000\u08cc\u08ca\u0001\u0000\u0000\u0000\u08cc\u08cd"+
		"\u0001\u0000\u0000\u0000\u08cd\u08d7\u0001\u0000\u0000\u0000\u08ce\u08cf"+
		"\u0005\u0007\u0000\u0000\u08cf\u08d0\u0007\u0000\u0000\u0000\u08d0\u08d1"+
		"\u0003\u0226\u0113\u0000\u08d1\u08d2\u0005\u027f\u0000\u0000\u08d2\u08d3"+
		"\u0005\u017a\u0000\u0000\u08d3\u08d4\u0005\u0181\u0000\u0000\u08d4\u08d5"+
		"\u0005\u01f5\u0000\u0000\u08d5\u08d7\u0001\u0000\u0000\u0000\u08d6\u08c4"+
		"\u0001\u0000\u0000\u0000\u08d6\u08ce\u0001\u0000\u0000\u0000\u08d7\u007f"+
		"\u0001\u0000\u0000\u0000\u08d8\u08da\u0005\u0007\u0000\u0000\u08d9\u08db"+
		"\u0003>\u001f\u0000\u08da\u08d9\u0001\u0000\u0000\u0000\u08da\u08db\u0001"+
		"\u0000\u0000\u0000\u08db\u08dc\u0001\u0000\u0000\u0000\u08dc\u08dd\u0005"+
		"\u0193\u0000\u0000\u08dd\u08e1\u0003\u020a\u0105\u0000\u08de\u08df\u0005"+
		"s\u0000\u0000\u08df\u08e0\u0005\u0245\u0000\u0000\u08e0\u08e2\u0003@ "+
		"\u0000\u08e1\u08de\u0001\u0000\u0000\u0000\u08e1\u08e2\u0001\u0000\u0000"+
		"\u0000\u08e2\u08e9\u0001\u0000\u0000\u0000\u08e3\u08e4\u0005s\u0000\u0000"+
		"\u08e4\u08e6\u0005\u016a\u0000\u0000\u08e5\u08e7\u0005o\u0000\u0000\u08e6"+
		"\u08e5\u0001\u0000\u0000\u0000\u08e6\u08e7\u0001\u0000\u0000\u0000\u08e7"+
		"\u08e8\u0001\u0000\u0000\u0000\u08e8\u08ea\u0005\u021b\u0000\u0000\u08e9"+
		"\u08e3\u0001\u0000\u0000\u0000\u08e9\u08ea\u0001\u0000\u0000\u0000\u08ea"+
		"\u08ee\u0001\u0000\u0000\u0000\u08eb\u08ec\u0005\u0088\u0000\u0000\u08ec"+
		"\u08ed\u0005\u00a9\u0000\u0000\u08ed\u08ef\u0003\u020a\u0105\u0000\u08ee"+
		"\u08eb\u0001\u0000\u0000\u0000\u08ee\u08ef\u0001\u0000\u0000\u0000\u08ef"+
		"\u08f1\u0001\u0000\u0000\u0000\u08f0\u08f2\u0003H$\u0000\u08f1\u08f0\u0001"+
		"\u0000\u0000\u0000\u08f1\u08f2\u0001\u0000\u0000\u0000\u08f2\u08f5\u0001"+
		"\u0000\u0000\u0000\u08f3\u08f4\u0005\u0167\u0000\u0000\u08f4\u08f6\u0005"+
		"\u0466\u0000\u0000\u08f5\u08f3\u0001\u0000\u0000\u0000\u08f5\u08f6\u0001"+
		"\u0000\u0000\u0000\u08f6\u08f9\u0001\u0000\u0000\u0000\u08f7\u08f8\u0005"+
		"\u0185\u0000\u0000\u08f8\u08fa\u0003\u0170\u00b8\u0000\u08f9\u08f7\u0001"+
		"\u0000\u0000\u0000\u08f9\u08fa\u0001\u0000\u0000\u0000\u08fa\u0081\u0001"+
		"\u0000\u0000\u0000\u08fb\u08fc\u0005\u0007\u0000\u0000\u08fc\u08fd\u0005"+
		"\u01a8\u0000\u0000\u08fd\u0901\u0003\u020a\u0105\u0000\u08fe\u0900\u0003"+
		"R)\u0000\u08ff\u08fe\u0001\u0000\u0000\u0000\u0900\u0903\u0001\u0000\u0000"+
		"\u0000\u0901\u08ff\u0001\u0000\u0000\u0000\u0901\u0902\u0001\u0000\u0000"+
		"\u0000\u0902\u0083\u0001\u0000\u0000\u0000\u0903\u0901\u0001\u0000\u0000"+
		"\u0000\u0904\u0905\u0005\u0007\u0000\u0000\u0905\u0906\u0005\u01ba\u0000"+
		"\u0000\u0906\u0907\u0005\u023f\u0000\u0000\u0907\u0908\u0005\u02f7\u0000"+
		"\u0000\u0908\u0909\u0005\u01ce\u0000\u0000\u0909\u090a\u0005[\u0000\u0000"+
		"\u090a\u0085\u0001\u0000\u0000\u0000\u090b\u090c\u0005\u0007\u0000\u0000"+
		"\u090c\u090d\u0005\u01cc\u0000\u0000\u090d\u090e\u0005I\u0000\u0000\u090e"+
		"\u090f\u0003\u0226\u0113\u0000\u090f\u0910\u0005\u0005\u0000\u0000\u0910"+
		"\u0911\u0005\u027a\u0000\u0000\u0911\u0917\u0005\u0466\u0000\u0000\u0912"+
		"\u0914\u0005\u01b6\u0000\u0000\u0913\u0915\u0005\u044e\u0000\u0000\u0914"+
		"\u0913\u0001\u0000\u0000\u0000\u0914\u0915\u0001\u0000\u0000\u0000\u0915"+
		"\u0916\u0001\u0000\u0000\u0000\u0916\u0918\u0003\u022e\u0117\u0000\u0917"+
		"\u0912\u0001\u0000\u0000\u0000\u0917\u0918\u0001\u0000\u0000\u0000\u0918"+
		"\u091a\u0001\u0000\u0000\u0000\u0919\u091b\u0005\u0289\u0000\u0000\u091a"+
		"\u0919\u0001\u0000\u0000\u0000\u091a\u091b\u0001\u0000\u0000\u0000\u091b"+
		"\u091c\u0001\u0000\u0000\u0000\u091c\u091e\u0005\u018d\u0000\u0000\u091d"+
		"\u091f\u0005\u044e\u0000\u0000\u091e\u091d\u0001\u0000\u0000\u0000\u091e"+
		"\u091f\u0001\u0000\u0000\u0000\u091f\u0920\u0001\u0000\u0000\u0000\u0920"+
		"\u0921\u0003\u021c\u010e\u0000\u0921\u0087\u0001\u0000\u0000\u0000\u0922"+
		"\u0923\u0005\u0007\u0000\u0000\u0923\u0924\u0005\u0080\u0000\u0000\u0924"+
		"\u0928\u0003\u020a\u0105\u0000\u0925\u0927\u0003R)\u0000\u0926\u0925\u0001"+
		"\u0000\u0000\u0000\u0927\u092a\u0001\u0000\u0000\u0000\u0928\u0926\u0001"+
		"\u0000\u0000\u0000\u0928\u0929\u0001\u0000\u0000\u0000\u0929\u0089\u0001"+
		"\u0000\u0000\u0000\u092a\u0928\u0001\u0000\u0000\u0000\u092b\u092c\u0005"+
		"\u0007\u0000\u0000\u092c\u092d\u0005\u0247\u0000\u0000\u092d\u092e\u0003"+
		"\u0226\u0113\u0000\u092e\u092f\u0005\u020a\u0000\u0000\u092f\u0930\u0005"+
		"\u0457\u0000\u0000\u0930\u0935\u0003T*\u0000\u0931\u0932\u0005\u0459\u0000"+
		"\u0000\u0932\u0934\u0003T*\u0000\u0933\u0931\u0001\u0000\u0000\u0000\u0934"+
		"\u0937\u0001\u0000\u0000\u0000\u0935\u0933\u0001\u0000\u0000\u0000\u0935"+
		"\u0936\u0001\u0000\u0000\u0000\u0936\u0938\u0001\u0000\u0000\u0000\u0937"+
		"\u0935\u0001\u0000\u0000\u0000\u0938\u0939\u0005\u0458\u0000\u0000\u0939"+
		"\u008b\u0001\u0000\u0000\u0000\u093a\u093c\u0005\u0007\u0000\u0000\u093b"+
		"\u093d\u0007\u0001\u0000\u0000\u093c\u093b\u0001\u0000\u0000\u0000\u093c"+
		"\u093d\u0001\u0000\u0000\u0000\u093d\u093f\u0001\u0000\u0000\u0000\u093e"+
		"\u0940\u0005N\u0000\u0000\u093f\u093e\u0001\u0000\u0000\u0000\u093f\u0940"+
		"\u0001\u0000\u0000\u0000\u0940\u0941\u0001\u0000\u0000\u0000\u0941\u0942"+
		"\u0005\u00a6\u0000\u0000\u0942\u094b\u0003\u020c\u0106\u0000\u0943\u0948"+
		"\u0003\u0092I\u0000\u0944\u0945\u0005\u0459\u0000\u0000\u0945\u0947\u0003"+
		"\u0092I\u0000\u0946\u0944\u0001\u0000\u0000\u0000\u0947\u094a\u0001\u0000"+
		"\u0000\u0000\u0948\u0946\u0001\u0000\u0000\u0000\u0948\u0949\u0001\u0000"+
		"\u0000\u0000\u0949\u094c\u0001\u0000\u0000\u0000\u094a\u0948\u0001\u0000"+
		"\u0000\u0000\u094b\u0943\u0001\u0000\u0000\u0000\u094b\u094c\u0001\u0000"+
		"\u0000\u0000\u094c\u094e\u0001\u0000\u0000\u0000\u094d\u094f\u0003n7\u0000"+
		"\u094e\u094d\u0001\u0000\u0000\u0000\u094e\u094f\u0001\u0000\u0000\u0000"+
		"\u094f\u008d\u0001\u0000\u0000\u0000\u0950\u0951\u0005\u0007\u0000\u0000"+
		"\u0951\u0952\u0005\u026e\u0000\u0000\u0952\u0953\u0003\u0226\u0113\u0000"+
		"\u0953\u0954\u0007\u001f\u0000\u0000\u0954\u0955\u0005\u017b\u0000\u0000"+
		"\u0955\u0959\u0005\u0466\u0000\u0000\u0956\u0957\u0005\u01b6\u0000\u0000"+
		"\u0957\u0958\u0005\u044e\u0000\u0000\u0958\u095a\u0003\u022e\u0117\u0000"+
		"\u0959\u0956\u0001\u0000\u0000\u0000\u0959\u095a\u0001\u0000\u0000\u0000"+
		"\u095a\u095c\u0001\u0000\u0000\u0000\u095b\u095d\u0005\u0289\u0000\u0000"+
		"\u095c\u095b\u0001\u0000\u0000\u0000\u095c\u095d\u0001\u0000\u0000\u0000"+
		"\u095d\u095e\u0001\u0000\u0000\u0000\u095e\u0960\u0005\u018d\u0000\u0000"+
		"\u095f\u0961\u0005\u044e\u0000\u0000\u0960\u095f\u0001\u0000\u0000\u0000"+
		"\u0960\u0961\u0001\u0000\u0000\u0000\u0961\u0962\u0001\u0000\u0000\u0000"+
		"\u0962\u0963\u0003\u021c\u010e\u0000\u0963\u008f\u0001\u0000\u0000\u0000"+
		"\u0964\u0968\u0005\u0007\u0000\u0000\u0965\u0966\u0005\u0147\u0000\u0000"+
		"\u0966\u0967\u0005\u044e\u0000\u0000\u0967\u0969\u0007\n\u0000\u0000\u0968"+
		"\u0965\u0001\u0000\u0000\u0000\u0968\u0969\u0001\u0000\u0000\u0000\u0969"+
		"\u096b\u0001\u0000\u0000\u0000\u096a\u096c\u0003>\u001f\u0000\u096b\u096a"+
		"\u0001\u0000\u0000\u0000\u096b\u096c\u0001\u0000\u0000\u0000\u096c\u0970"+
		"\u0001\u0000\u0000\u0000\u096d\u096e\u0005\u009b\u0000\u0000\u096e\u096f"+
		"\u0005\u0246\u0000\u0000\u096f\u0971\u0007\u000b\u0000\u0000\u0970\u096d"+
		"\u0001\u0000\u0000\u0000\u0970\u0971\u0001\u0000\u0000\u0000\u0971\u0972"+
		"\u0001\u0000\u0000\u0000\u0972\u0973\u0005\u0286\u0000\u0000\u0973\u0978"+
		"\u0003\u020a\u0105\u0000\u0974\u0975\u0005\u0457\u0000\u0000\u0975\u0976"+
		"\u0003\u0246\u0123\u0000\u0976\u0977\u0005\u0458\u0000\u0000\u0977\u0979"+
		"\u0001\u0000\u0000\u0000\u0978\u0974\u0001\u0000\u0000\u0000\u0978\u0979"+
		"\u0001\u0000\u0000\u0000\u0979\u097a\u0001\u0000\u0000\u0000\u097a\u097b"+
		"\u0005\f\u0000\u0000\u097b\u0982\u0003\u00c4b\u0000\u097c\u097e\u0005"+
		"\u00ba\u0000\u0000\u097d\u097f\u0007\f\u0000\u0000\u097e\u097d\u0001\u0000"+
		"\u0000\u0000\u097e\u097f\u0001\u0000\u0000\u0000\u097f\u0980\u0001\u0000"+
		"\u0000\u0000\u0980\u0981\u0005\u0019\u0000\u0000\u0981\u0983\u0005u\u0000"+
		"\u0000\u0982\u097c\u0001\u0000\u0000\u0000\u0982\u0983\u0001\u0000\u0000"+
		"\u0000\u0983\u0091\u0001\u0000\u0000\u0000\u0984\u098b\u0003h4\u0000\u0985"+
		"\u0987\u0005\u0459\u0000\u0000\u0986\u0985\u0001\u0000\u0000\u0000\u0986"+
		"\u0987\u0001\u0000\u0000\u0000\u0987\u0988\u0001\u0000\u0000\u0000\u0988"+
		"\u098a\u0003h4\u0000\u0989\u0986\u0001\u0000\u0000\u0000\u098a\u098d\u0001"+
		"\u0000\u0000\u0000\u098b\u0989\u0001\u0000\u0000\u0000\u098b\u098c\u0001"+
		"\u0000\u0000\u0000\u098c\u0b17\u0001\u0000\u0000\u0000\u098d\u098b\u0001"+
		"\u0000\u0000\u0000\u098e\u0990\u0005\u0005\u0000\u0000\u098f\u0991\u0005"+
		"\u001b\u0000\u0000\u0990\u098f\u0001\u0000\u0000\u0000\u0990\u0991\u0001"+
		"\u0000\u0000\u0000\u0991\u0993\u0001\u0000\u0000\u0000\u0992\u0994\u0003"+
		"\u025e\u012f\u0000\u0993\u0992\u0001\u0000\u0000\u0000\u0993\u0994\u0001"+
		"\u0000\u0000\u0000\u0994\u0995\u0001\u0000\u0000\u0000\u0995\u0996\u0003"+
		"\u0226\u0113\u0000\u0996\u099a\u0003Z-\u0000\u0997\u099b\u0005\u01a1\u0000"+
		"\u0000\u0998\u0999\u0005\u0145\u0000\u0000\u0999\u099b\u0003\u0226\u0113"+
		"\u0000\u099a\u0997\u0001\u0000\u0000\u0000\u099a\u0998\u0001\u0000\u0000"+
		"\u0000\u099a\u099b\u0001\u0000\u0000\u0000\u099b\u0b17\u0001\u0000\u0000"+
		"\u0000\u099c\u099e\u0005\u0005\u0000\u0000\u099d\u099f\u0005\u001b\u0000"+
		"\u0000\u099e\u099d\u0001\u0000\u0000\u0000\u099e\u099f\u0001\u0000\u0000"+
		"\u0000\u099f\u09a1\u0001\u0000\u0000\u0000\u09a0\u09a2\u0003\u025e\u012f"+
		"\u0000\u09a1\u09a0\u0001\u0000\u0000\u0000\u09a1\u09a2\u0001\u0000\u0000"+
		"\u0000\u09a2\u09a3\u0001\u0000\u0000\u0000\u09a3\u09a4\u0005\u0457\u0000"+
		"\u0000\u09a4\u09a5\u0003\u0226\u0113\u0000\u09a5\u09ac\u0003Z-\u0000\u09a6"+
		"\u09a7\u0005\u0459\u0000\u0000\u09a7\u09a8\u0003\u0226\u0113\u0000\u09a8"+
		"\u09a9\u0003Z-\u0000\u09a9\u09ab\u0001\u0000\u0000\u0000\u09aa\u09a6\u0001"+
		"\u0000\u0000\u0000\u09ab\u09ae\u0001\u0000\u0000\u0000\u09ac\u09aa\u0001"+
		"\u0000\u0000\u0000\u09ac\u09ad\u0001\u0000\u0000\u0000\u09ad\u09af\u0001"+
		"\u0000\u0000\u0000\u09ae\u09ac\u0001\u0000\u0000\u0000\u09af\u09b0\u0005"+
		"\u0458\u0000\u0000\u09b0\u0b17\u0001\u0000\u0000\u0000\u09b1\u09b2\u0005"+
		"\u0005\u0000\u0000\u09b2\u09b4\u0007\u0014\u0000\u0000\u09b3\u09b5\u0003"+
		"\u025e\u012f\u0000\u09b4\u09b3\u0001\u0000\u0000\u0000\u09b4\u09b5\u0001"+
		"\u0000\u0000\u0000\u09b5\u09b7\u0001\u0000\u0000\u0000\u09b6\u09b8\u0003"+
		"\u0226\u0113\u0000\u09b7\u09b6\u0001\u0000\u0000\u0000\u09b7\u09b8\u0001"+
		"\u0000\u0000\u0000\u09b8\u09ba\u0001\u0000\u0000\u0000\u09b9\u09bb\u0003"+
		"J%\u0000\u09ba\u09b9\u0001\u0000\u0000\u0000\u09ba\u09bb\u0001\u0000\u0000"+
		"\u0000\u09bb\u09bc\u0001\u0000\u0000\u0000\u09bc\u09c0\u0003\u024a\u0125"+
		"\u0000\u09bd\u09bf\u0003L&\u0000\u09be\u09bd\u0001\u0000\u0000\u0000\u09bf"+
		"\u09c2\u0001\u0000\u0000\u0000\u09c0\u09be\u0001\u0000\u0000\u0000\u09c0"+
		"\u09c1\u0001\u0000\u0000\u0000\u09c1\u0b17\u0001\u0000\u0000\u0000\u09c2"+
		"\u09c0\u0001\u0000\u0000\u0000\u09c3\u09c8\u0005\u0005\u0000\u0000\u09c4"+
		"\u09c6\u0005\u001d\u0000\u0000\u09c5\u09c7\u0003\u0226\u0113\u0000\u09c6"+
		"\u09c5\u0001\u0000\u0000\u0000\u09c6\u09c7\u0001\u0000\u0000\u0000\u09c7"+
		"\u09c9\u0001\u0000\u0000\u0000\u09c8\u09c4\u0001\u0000\u0000\u0000\u09c8"+
		"\u09c9\u0001\u0000\u0000\u0000\u09c9\u09ca\u0001\u0000\u0000\u0000\u09ca"+
		"\u09cb\u0005\u007f\u0000\u0000\u09cb\u09cd\u0005[\u0000\u0000\u09cc\u09ce"+
		"\u0003\u0226\u0113\u0000\u09cd\u09cc\u0001\u0000\u0000\u0000\u09cd\u09ce"+
		"\u0001\u0000\u0000\u0000\u09ce\u09d0\u0001\u0000\u0000\u0000\u09cf\u09d1"+
		"\u0003J%\u0000\u09d0\u09cf\u0001\u0000\u0000\u0000\u09d0\u09d1\u0001\u0000"+
		"\u0000\u0000\u09d1\u09d2\u0001\u0000\u0000\u0000\u09d2\u09d6\u0003\u024a"+
		"\u0125\u0000\u09d3\u09d5\u0003L&\u0000\u09d4\u09d3\u0001\u0000\u0000\u0000"+
		"\u09d5\u09d8\u0001\u0000\u0000\u0000\u09d6\u09d4\u0001\u0000\u0000\u0000"+
		"\u09d6\u09d7\u0001\u0000\u0000\u0000\u09d7\u0b17\u0001\u0000\u0000\u0000"+
		"\u09d8\u09d6\u0001\u0000\u0000\u0000\u09d9\u09de\u0005\u0005\u0000\u0000"+
		"\u09da\u09dc\u0005\u001d\u0000\u0000\u09db\u09dd\u0003\u0226\u0113\u0000"+
		"\u09dc\u09db\u0001\u0000\u0000\u0000\u09dc\u09dd\u0001\u0000\u0000\u0000"+
		"\u09dd\u09df\u0001\u0000\u0000\u0000\u09de\u09da\u0001\u0000\u0000\u0000"+
		"\u09de\u09df\u0001\u0000\u0000\u0000\u09df\u09e0\u0001\u0000\u0000\u0000"+
		"\u09e0\u09e2\u0005\u00af\u0000\u0000\u09e1\u09e3\u0007\u0014\u0000\u0000"+
		"\u09e2\u09e1\u0001\u0000\u0000\u0000\u09e2\u09e3\u0001\u0000\u0000\u0000"+
		"\u09e3\u09e5\u0001\u0000\u0000\u0000\u09e4\u09e6\u0003\u0226\u0113\u0000"+
		"\u09e5\u09e4\u0001\u0000\u0000\u0000\u09e5\u09e6\u0001\u0000\u0000\u0000"+
		"\u09e6\u09e8\u0001\u0000\u0000\u0000\u09e7\u09e9\u0003J%\u0000\u09e8\u09e7"+
		"\u0001\u0000\u0000\u0000\u09e8\u09e9\u0001\u0000\u0000\u0000\u09e9\u09ea"+
		"\u0001\u0000\u0000\u0000\u09ea\u09ee\u0003\u024a\u0125\u0000\u09eb\u09ed"+
		"\u0003L&\u0000\u09ec\u09eb\u0001\u0000\u0000\u0000\u09ed\u09f0\u0001\u0000"+
		"\u0000\u0000\u09ee\u09ec\u0001\u0000\u0000\u0000\u09ee\u09ef\u0001\u0000"+
		"\u0000\u0000\u09ef\u0b17\u0001\u0000\u0000\u0000\u09f0\u09ee\u0001\u0000"+
		"\u0000\u0000\u09f1\u09f2\u0005\u0005\u0000\u0000\u09f2\u09f4\u0007\u0016"+
		"\u0000\u0000\u09f3\u09f5\u0007\u0014\u0000\u0000\u09f4\u09f3\u0001\u0000"+
		"\u0000\u0000\u09f4\u09f5\u0001\u0000\u0000\u0000\u09f5\u09f7\u0001\u0000"+
		"\u0000\u0000\u09f6\u09f8\u0003\u0226\u0113\u0000\u09f7\u09f6\u0001\u0000"+
		"\u0000\u0000\u09f7\u09f8\u0001\u0000\u0000\u0000\u09f8\u09f9\u0001\u0000"+
		"\u0000\u0000\u09f9\u09fd\u0003\u024a\u0125\u0000\u09fa\u09fc\u0003L&\u0000"+
		"\u09fb\u09fa\u0001\u0000\u0000\u0000\u09fc\u09ff\u0001\u0000\u0000\u0000"+
		"\u09fd\u09fb\u0001\u0000\u0000\u0000\u09fd\u09fe\u0001\u0000\u0000\u0000"+
		"\u09fe\u0b17\u0001\u0000\u0000\u0000\u09ff\u09fd\u0001\u0000\u0000\u0000"+
		"\u0a00\u0a05\u0005\u0005\u0000\u0000\u0a01\u0a03\u0005\u001d\u0000\u0000"+
		"\u0a02\u0a04\u0003\u0226\u0113\u0000\u0a03\u0a02\u0001\u0000\u0000\u0000"+
		"\u0a03\u0a04\u0001\u0000\u0000\u0000\u0a04\u0a06\u0001\u0000\u0000\u0000"+
		"\u0a05\u0a01\u0001\u0000\u0000\u0000\u0a05\u0a06\u0001\u0000\u0000\u0000"+
		"\u0a06\u0a07\u0001\u0000\u0000\u0000\u0a07\u0a08\u0005C\u0000\u0000\u0a08"+
		"\u0a0a\u0005[\u0000\u0000\u0a09\u0a0b\u0003\u025e\u012f\u0000\u0a0a\u0a09"+
		"\u0001\u0000\u0000\u0000\u0a0a\u0a0b\u0001\u0000\u0000\u0000\u0a0b\u0a0d"+
		"\u0001\u0000\u0000\u0000\u0a0c\u0a0e\u0003\u0226\u0113\u0000\u0a0d\u0a0c"+
		"\u0001\u0000\u0000\u0000\u0a0d\u0a0e\u0001\u0000\u0000\u0000\u0a0e\u0a0f"+
		"\u0001\u0000\u0000\u0000\u0a0f\u0a10\u0003\u024a\u0125\u0000\u0a10\u0a11"+
		"\u0003`0\u0000\u0a11\u0b17\u0001\u0000\u0000\u0000\u0a12\u0a17\u0005\u0005"+
		"\u0000\u0000\u0a13\u0a15\u0005\u001d\u0000\u0000\u0a14\u0a16\u0003\u0226"+
		"\u0113\u0000\u0a15\u0a14\u0001\u0000\u0000\u0000\u0a15\u0a16\u0001\u0000"+
		"\u0000\u0000\u0a16\u0a18\u0001\u0000\u0000\u0000\u0a17\u0a13\u0001\u0000"+
		"\u0000\u0000\u0a17\u0a18\u0001\u0000\u0000\u0000\u0a18\u0a19\u0001\u0000"+
		"\u0000\u0000\u0a19\u0a1a\u0005\u0019\u0000\u0000\u0a1a\u0a1b\u0005\u0457"+
		"\u0000\u0000\u0a1b\u0a1c\u0003\u0288\u0144\u0000\u0a1c\u0a1d\u0005\u0458"+
		"\u0000\u0000\u0a1d\u0b17\u0001\u0000\u0000\u0000\u0a1e\u0a20\u0005\u0147"+
		"\u0000\u0000\u0a1f\u0a21\u0005\u044e\u0000\u0000\u0a20\u0a1f\u0001\u0000"+
		"\u0000\u0000\u0a20\u0a21\u0001\u0000\u0000\u0000\u0a21\u0a22\u0001\u0000"+
		"\u0000\u0000\u0a22\u0b17\u0007 \u0000\u0000\u0a23\u0a25\u0005\u0007\u0000"+
		"\u0000\u0a24\u0a26\u0005\u001b\u0000\u0000\u0a25\u0a24\u0001\u0000\u0000"+
		"\u0000\u0a25\u0a26\u0001\u0000\u0000\u0000\u0a26\u0a27\u0001\u0000\u0000"+
		"\u0000\u0a27\u0a2d\u0003\u0226\u0113\u0000\u0a28\u0a29\u0005\u0096\u0000"+
		"\u0000\u0a29\u0a2a\u0005(\u0000\u0000\u0a2a\u0a2e\u0003\u0256\u012b\u0000"+
		"\u0a2b\u0a2c\u00051\u0000\u0000\u0a2c\u0a2e\u0005(\u0000\u0000\u0a2d\u0a28"+
		"\u0001\u0000\u0000\u0000\u0a2d\u0a2b\u0001\u0000\u0000\u0000\u0a2e\u0b17"+
		"\u0001\u0000\u0000\u0000\u0a2f\u0a31\u0005\u0017\u0000\u0000\u0a30\u0a32"+
		"\u0005\u001b\u0000\u0000\u0a31\u0a30\u0001\u0000\u0000\u0000\u0a31\u0a32"+
		"\u0001\u0000\u0000\u0000\u0a32\u0a34\u0001\u0000\u0000\u0000\u0a33\u0a35"+
		"\u0003\u025c\u012e\u0000\u0a34\u0a33\u0001\u0000\u0000\u0000\u0a34\u0a35"+
		"\u0001\u0000\u0000\u0000\u0a35\u0a36\u0001\u0000\u0000\u0000\u0a36\u0a37"+
		"\u0003\u0226\u0113\u0000\u0a37\u0a38\u0003\u0226\u0113\u0000\u0a38\u0a3c"+
		"\u0003Z-\u0000\u0a39\u0a3d\u0005\u01a1\u0000\u0000\u0a3a\u0a3b\u0005\u0145"+
		"\u0000\u0000\u0a3b\u0a3d\u0003\u0226\u0113\u0000\u0a3c\u0a39\u0001\u0000"+
		"\u0000\u0000\u0a3c\u0a3a\u0001\u0000\u0000\u0000\u0a3c\u0a3d\u0001\u0000"+
		"\u0000\u0000\u0a3d\u0b17\u0001\u0000\u0000\u0000\u0a3e\u0a3f\u0005\u0088"+
		"\u0000\u0000\u0a3f\u0a40\u0005\u001b\u0000\u0000\u0a40\u0a41\u0003\u0226"+
		"\u0113\u0000\u0a41\u0a42\u0005\u00a9\u0000\u0000\u0a42\u0a43\u0003\u0226"+
		"\u0113\u0000\u0a43\u0b17\u0001\u0000\u0000\u0000\u0a44\u0a46\u0005f\u0000"+
		"\u0000\u0a45\u0a47\u0005\u044e\u0000\u0000\u0a46\u0a45\u0001\u0000\u0000"+
		"\u0000\u0a46\u0a47\u0001\u0000\u0000\u0000\u0a47\u0a48\u0001\u0000\u0000"+
		"\u0000\u0a48\u0b17\u0007\u0004\u0000\u0000\u0a49\u0a4b\u0005\u01f1\u0000"+
		"\u0000\u0a4a\u0a4c\u0005\u001b\u0000\u0000\u0a4b\u0a4a\u0001\u0000\u0000"+
		"\u0000\u0a4b\u0a4c\u0001\u0000\u0000\u0000\u0a4c\u0a4e\u0001\u0000\u0000"+
		"\u0000\u0a4d\u0a4f\u0003\u025c\u012e\u0000\u0a4e\u0a4d\u0001\u0000\u0000"+
		"\u0000\u0a4e\u0a4f\u0001\u0000\u0000\u0000\u0a4f\u0a50\u0001\u0000\u0000"+
		"\u0000\u0a50\u0a51\u0003\u0226\u0113\u0000\u0a51\u0a55\u0003Z-\u0000\u0a52"+
		"\u0a56\u0005\u01a1\u0000\u0000\u0a53\u0a54\u0005\u0145\u0000\u0000\u0a54"+
		"\u0a56\u0003\u0226\u0113\u0000\u0a55\u0a52\u0001\u0000\u0000\u0000\u0a55"+
		"\u0a53\u0001\u0000\u0000\u0000\u0a55\u0a56\u0001\u0000\u0000\u0000\u0a56"+
		"\u0b17\u0001\u0000\u0000\u0000\u0a57\u0a59\u00051\u0000\u0000\u0a58\u0a5a"+
		"\u0005\u001b\u0000\u0000\u0a59\u0a58\u0001\u0000\u0000\u0000\u0a59\u0a5a"+
		"\u0001\u0000\u0000\u0000\u0a5a\u0a5c\u0001\u0000\u0000\u0000\u0a5b\u0a5d"+
		"\u0003\u025c\u012e\u0000\u0a5c\u0a5b\u0001\u0000\u0000\u0000\u0a5c\u0a5d"+
		"\u0001\u0000\u0000\u0000\u0a5d\u0a5e\u0001\u0000\u0000\u0000\u0a5e\u0a60"+
		"\u0003\u0226\u0113\u0000\u0a5f\u0a61\u0005\u008d\u0000\u0000\u0a60\u0a5f"+
		"\u0001\u0000\u0000\u0000\u0a60\u0a61\u0001\u0000\u0000\u0000\u0a61\u0b17"+
		"\u0001\u0000\u0000\u0000\u0a62\u0a63\u00051\u0000\u0000\u0a63\u0a65\u0007"+
		"!\u0000\u0000\u0a64\u0a66\u0003\u025c\u012e\u0000\u0a65\u0a64\u0001\u0000"+
		"\u0000\u0000\u0a65\u0a66\u0001\u0000\u0000\u0000\u0a66\u0a67\u0001\u0000"+
		"\u0000\u0000\u0a67\u0b17\u0003\u0226\u0113\u0000\u0a68\u0a69\u00051\u0000"+
		"\u0000\u0a69\u0a6a\u0005\u007f\u0000\u0000\u0a6a\u0b17\u0005[\u0000\u0000"+
		"\u0a6b\u0a6c\u0005\u0088\u0000\u0000\u0a6c\u0a6d\u0007\u0014\u0000\u0000"+
		"\u0a6d\u0a6e\u0003\u0226\u0113\u0000\u0a6e\u0a6f\u0005\u00a9\u0000\u0000"+
		"\u0a6f\u0a70\u0003\u0226\u0113\u0000\u0a70\u0b17\u0001\u0000\u0000\u0000"+
		"\u0a71\u0a72\u0005\u0007\u0000\u0000\u0a72\u0a73\u0005Q\u0000\u0000\u0a73"+
		"\u0a74\u0003\u0226\u0113\u0000\u0a74\u0a75\u0007\u000e\u0000\u0000\u0a75"+
		"\u0b17\u0001\u0000\u0000\u0000\u0a76\u0a77\u00051\u0000\u0000\u0a77\u0a79"+
		"\u0007\u0014\u0000\u0000\u0a78\u0a7a\u0003\u025c\u012e\u0000\u0a79\u0a78"+
		"\u0001\u0000\u0000\u0000\u0a79\u0a7a\u0001\u0000\u0000\u0000\u0a7a\u0a7b"+
		"\u0001\u0000\u0000\u0000\u0a7b\u0b17\u0003\u0226\u0113\u0000\u0a7c\u0a7d"+
		"\u00051\u0000\u0000\u0a7d\u0a7e\u0005C\u0000\u0000\u0a7e\u0a80\u0005["+
		"\u0000\u0000\u0a7f\u0a81\u0003\u025c\u012e\u0000\u0a80\u0a7f\u0001\u0000"+
		"\u0000\u0000\u0a80\u0a81\u0001\u0000\u0000\u0000\u0a81\u0a82\u0001\u0000"+
		"\u0000\u0000\u0a82\u0b17\u0003\u0226\u0113\u0000\u0a83\u0a84\u0005\u0182"+
		"\u0000\u0000\u0a84\u0b17\u0005\\\u0000\u0000\u0a85\u0a86\u0005\u0189\u0000"+
		"\u0000\u0a86\u0b17\u0005\\\u0000\u0000\u0a87\u0a89\u0005\u0088\u0000\u0000"+
		"\u0a88\u0a8a\u0007\"\u0000\u0000\u0a89\u0a88\u0001\u0000\u0000\u0000\u0a89"+
		"\u0a8a\u0001\u0000\u0000\u0000\u0a8a\u0a8d\u0001\u0000\u0000\u0000\u0a8b"+
		"\u0a8e\u0003\u0226\u0113\u0000\u0a8c\u0a8e\u0003\u020a\u0105\u0000\u0a8d"+
		"\u0a8b\u0001\u0000\u0000\u0000\u0a8d\u0a8c\u0001\u0000\u0000\u0000\u0a8e"+
		"\u0b17\u0001\u0000\u0000\u0000\u0a8f\u0a90\u0005y\u0000\u0000\u0a90\u0a91"+
		"\u0005\u0012\u0000\u0000\u0a91\u0b17\u0003\u0246\u0123\u0000\u0a92\u0a93"+
		"\u0005\u001f\u0000\u0000\u0a93\u0a94\u0005\u00a9\u0000\u0000\u0a94\u0a95"+
		"\u0005\u0018\u0000\u0000\u0a95\u0a96\u0005\u0096\u0000\u0000\u0a96\u0a99"+
		"\u0003\u0218\u010c\u0000\u0a97\u0a98\u0005\u001a\u0000\u0000\u0a98\u0a9a"+
		"\u0003\u021a\u010d\u0000\u0a99\u0a97\u0001\u0000\u0000\u0000\u0a99\u0a9a"+
		"\u0001\u0000\u0000\u0000\u0a9a\u0b17\u0001\u0000\u0000\u0000\u0a9b\u0a9d"+
		"\u0005(\u0000\u0000\u0a9c\u0a9b\u0001\u0000\u0000\u0000\u0a9c\u0a9d\u0001"+
		"\u0000\u0000\u0000\u0a9d\u0a9e\u0001\u0000\u0000\u0000\u0a9e\u0a9f\u0005"+
		"\u0018\u0000\u0000\u0a9f\u0aa0\u0005\u0096\u0000\u0000\u0aa0\u0aa1\u0005"+
		"\u044e\u0000\u0000\u0aa1\u0aa5\u0003\u0218\u010c\u0000\u0aa2\u0aa3\u0005"+
		"\u001a\u0000\u0000\u0aa3\u0aa4\u0005\u044e\u0000\u0000\u0aa4\u0aa6\u0003"+
		"\u021a\u010d\u0000\u0aa5\u0aa2\u0001\u0000\u0000\u0000\u0aa5\u0aa6\u0001"+
		"\u0000\u0000\u0000\u0aa6\u0b17\u0001\u0000\u0000\u0000\u0aa7\u0aa8\u0005"+
		"\u0183\u0000\u0000\u0aa8\u0b17\u0005\u026e\u0000\u0000\u0aa9\u0aaa\u0005"+
		"\u01b4\u0000\u0000\u0aaa\u0b17\u0005\u026e\u0000\u0000\u0aab\u0b17\u0005"+
		"B\u0000\u0000\u0aac\u0aad\u0007#\u0000\u0000\u0aad\u0b17\u0005\u0283\u0000"+
		"\u0000\u0aae\u0aaf\u0005\u0005\u0000\u0000\u0aaf\u0ab1\u0005~\u0000\u0000"+
		"\u0ab0\u0ab2\u0003\u025e\u012f\u0000\u0ab1\u0ab0\u0001\u0000\u0000\u0000"+
		"\u0ab1\u0ab2\u0001\u0000\u0000\u0000\u0ab2\u0ab3\u0001\u0000\u0000\u0000"+
		"\u0ab3\u0ab4\u0005\u0457\u0000\u0000\u0ab4\u0ab9\u0003t:\u0000\u0ab5\u0ab6"+
		"\u0005\u0459\u0000\u0000\u0ab6\u0ab8\u0003t:\u0000\u0ab7\u0ab5\u0001\u0000"+
		"\u0000\u0000\u0ab8\u0abb\u0001\u0000\u0000\u0000\u0ab9\u0ab7\u0001\u0000"+
		"\u0000\u0000\u0ab9\u0aba\u0001\u0000\u0000\u0000\u0aba\u0abc\u0001\u0000"+
		"\u0000\u0000\u0abb\u0ab9\u0001\u0000\u0000\u0000\u0abc\u0abd\u0005\u0458"+
		"\u0000\u0000\u0abd\u0b17\u0001\u0000\u0000\u0000\u0abe\u0abf\u00051\u0000"+
		"\u0000\u0abf\u0ac1\u0005~\u0000\u0000\u0ac0\u0ac2\u0003\u025c\u012e\u0000"+
		"\u0ac1\u0ac0\u0001\u0000\u0000\u0000\u0ac1\u0ac2\u0001\u0000\u0000\u0000"+
		"\u0ac2\u0ac3\u0001\u0000\u0000\u0000\u0ac3\u0b17\u0003\u0246\u0123\u0000"+
		"\u0ac4\u0ac5\u0005\u0183\u0000\u0000\u0ac5\u0ac8\u0005~\u0000\u0000\u0ac6"+
		"\u0ac9\u0003\u0246\u0123\u0000\u0ac7\u0ac9\u0005\u0006\u0000\u0000\u0ac8"+
		"\u0ac6\u0001\u0000\u0000\u0000\u0ac8\u0ac7\u0001\u0000\u0000\u0000\u0ac9"+
		"\u0aca\u0001\u0000\u0000\u0000\u0aca\u0b17\u0005\u026e\u0000\u0000\u0acb"+
		"\u0acc\u0005\u01b4\u0000\u0000\u0acc\u0acf\u0005~\u0000\u0000\u0acd\u0ad0"+
		"\u0003\u0246\u0123\u0000\u0ace\u0ad0\u0005\u0006\u0000\u0000\u0acf\u0acd"+
		"\u0001\u0000\u0000\u0000\u0acf\u0ace\u0001\u0000\u0000\u0000\u0ad0\u0ad1"+
		"\u0001\u0000\u0000\u0000\u0ad1\u0b17\u0005\u026e\u0000\u0000\u0ad2\u0ad3"+
		"\u0005\u0277\u0000\u0000\u0ad3\u0ad6\u0005~\u0000\u0000\u0ad4\u0ad7\u0003"+
		"\u0246\u0123\u0000\u0ad5\u0ad7\u0005\u0006\u0000\u0000\u0ad6\u0ad4\u0001"+
		"\u0000\u0000\u0000\u0ad6\u0ad5\u0001\u0000\u0000\u0000\u0ad7\u0b17\u0001"+
		"\u0000\u0000\u0000\u0ad8\u0ad9\u0005\u0162\u0000\u0000\u0ad9\u0ada\u0005"+
		"~\u0000\u0000\u0ada\u0b17\u0003\u022c\u0116\u0000\u0adb\u0adc\u0005\u022d"+
		"\u0000\u0000\u0adc\u0add\u0005~\u0000\u0000\u0add\u0ade\u0003\u0246\u0123"+
		"\u0000\u0ade\u0adf\u0005W\u0000\u0000\u0adf\u0ae0\u0005\u0457\u0000\u0000"+
		"\u0ae0\u0ae5\u0003t:\u0000\u0ae1\u0ae2\u0005\u0459\u0000\u0000\u0ae2\u0ae4"+
		"\u0003t:\u0000\u0ae3\u0ae1\u0001\u0000\u0000\u0000\u0ae4\u0ae7\u0001\u0000"+
		"\u0000\u0000\u0ae5\u0ae3\u0001\u0000\u0000\u0000\u0ae5\u0ae6\u0001\u0000"+
		"\u0000\u0000\u0ae6\u0ae8\u0001\u0000\u0000\u0000\u0ae7\u0ae5\u0001\u0000"+
		"\u0000\u0000\u0ae8\u0ae9\u0005\u0458\u0000\u0000\u0ae9\u0b17\u0001\u0000"+
		"\u0000\u0000\u0aea\u0aeb\u0005\u0196\u0000\u0000\u0aeb\u0aec\u0005~\u0000"+
		"\u0000\u0aec\u0aed\u0003\u0226\u0113\u0000\u0aed\u0aee\u0005\u00ba\u0000"+
		"\u0000\u0aee\u0aef\u0005\u00a6\u0000\u0000\u0aef\u0af2\u0003\u020c\u0106"+
		"\u0000\u0af0\u0af1\u0007#\u0000\u0000\u0af1\u0af3\u0005\u0283\u0000\u0000"+
		"\u0af2\u0af0\u0001\u0000\u0000\u0000\u0af2\u0af3\u0001\u0000\u0000\u0000"+
		"\u0af3\u0b17\u0001\u0000\u0000\u0000\u0af4\u0af5\u0005\t\u0000\u0000\u0af5"+
		"\u0af8\u0005~\u0000\u0000\u0af6\u0af9\u0003\u0246\u0123\u0000\u0af7\u0af9"+
		"\u0005\u0006\u0000\u0000\u0af8\u0af6\u0001\u0000\u0000\u0000\u0af8\u0af7"+
		"\u0001\u0000\u0000\u0000\u0af9\u0b17\u0001\u0000\u0000\u0000\u0afa\u0afb"+
		"\u0005\u0019\u0000\u0000\u0afb\u0afe\u0005~\u0000\u0000\u0afc\u0aff\u0003"+
		"\u0246\u0123\u0000\u0afd\u0aff\u0005\u0006\u0000\u0000\u0afe\u0afc\u0001"+
		"\u0000\u0000\u0000\u0afe\u0afd\u0001\u0000\u0000\u0000\u0aff\u0b17\u0001"+
		"\u0000\u0000\u0000\u0b00\u0b01\u0005t\u0000\u0000\u0b01\u0b04\u0005~\u0000"+
		"\u0000\u0b02\u0b05\u0003\u0246\u0123\u0000\u0b03\u0b05\u0005\u0006\u0000"+
		"\u0000\u0b04\u0b02\u0001\u0000\u0000\u0000\u0b04\u0b03\u0001\u0000\u0000"+
		"\u0000\u0b05\u0b17\u0001\u0000\u0000\u0000\u0b06\u0b07\u0005\u0223\u0000"+
		"\u0000\u0b07\u0b0a\u0005~\u0000\u0000\u0b08\u0b0b\u0003\u0246\u0123\u0000"+
		"\u0b09\u0b0b\u0005\u0006\u0000\u0000\u0b0a\u0b08\u0001\u0000\u0000\u0000"+
		"\u0b0a\u0b09\u0001\u0000\u0000\u0000\u0b0b\u0b17\u0001\u0000\u0000\u0000"+
		"\u0b0c\u0b0d\u0005\u022e\u0000\u0000\u0b0d\u0b10\u0005~\u0000\u0000\u0b0e"+
		"\u0b11\u0003\u0246\u0123\u0000\u0b0f\u0b11\u0005\u0006\u0000\u0000\u0b10"+
		"\u0b0e\u0001\u0000\u0000\u0000\u0b10\u0b0f\u0001\u0000\u0000\u0000\u0b11"+
		"\u0b17\u0001\u0000\u0000\u0000\u0b12\u0b13\u0005\u022c\u0000\u0000\u0b13"+
		"\u0b17\u0005\u0210\u0000\u0000\u0b14\u0b15\u0005\u027f\u0000\u0000\u0b15"+
		"\u0b17\u0005\u0210\u0000\u0000\u0b16\u0984\u0001\u0000\u0000\u0000\u0b16"+
		"\u098e\u0001\u0000\u0000\u0000\u0b16\u099c\u0001\u0000\u0000\u0000\u0b16"+
		"\u09b1\u0001\u0000\u0000\u0000\u0b16\u09c3\u0001\u0000\u0000\u0000\u0b16"+
		"\u09d9\u0001\u0000\u0000\u0000\u0b16\u09f1\u0001\u0000\u0000\u0000\u0b16"+
		"\u0a00\u0001\u0000\u0000\u0000\u0b16\u0a12\u0001\u0000\u0000\u0000\u0b16"+
		"\u0a1e\u0001\u0000\u0000\u0000\u0b16\u0a23\u0001\u0000\u0000\u0000\u0b16"+
		"\u0a2f\u0001\u0000\u0000\u0000\u0b16\u0a3e\u0001\u0000\u0000\u0000\u0b16"+
		"\u0a44\u0001\u0000\u0000\u0000\u0b16\u0a49\u0001\u0000\u0000\u0000\u0b16"+
		"\u0a57\u0001\u0000\u0000\u0000\u0b16\u0a62\u0001\u0000\u0000\u0000\u0b16"+
		"\u0a68\u0001\u0000\u0000\u0000\u0b16\u0a6b\u0001\u0000\u0000\u0000\u0b16"+
		"\u0a71\u0001\u0000\u0000\u0000\u0b16\u0a76\u0001\u0000\u0000\u0000\u0b16"+
		"\u0a7c\u0001\u0000\u0000\u0000\u0b16\u0a83\u0001\u0000\u0000\u0000\u0b16"+
		"\u0a85\u0001\u0000\u0000\u0000\u0b16\u0a87\u0001\u0000\u0000\u0000\u0b16"+
		"\u0a8f\u0001\u0000\u0000\u0000\u0b16\u0a92\u0001\u0000\u0000\u0000\u0b16"+
		"\u0a9c\u0001\u0000\u0000\u0000\u0b16\u0aa7\u0001\u0000\u0000\u0000\u0b16"+
		"\u0aa9\u0001\u0000\u0000\u0000\u0b16\u0aab\u0001\u0000\u0000\u0000\u0b16"+
		"\u0aac\u0001\u0000\u0000\u0000\u0b16\u0aae\u0001\u0000\u0000\u0000\u0b16"+
		"\u0abe\u0001\u0000\u0000\u0000\u0b16\u0ac4\u0001\u0000\u0000\u0000\u0b16"+
		"\u0acb\u0001\u0000\u0000\u0000\u0b16\u0ad2\u0001\u0000\u0000\u0000\u0b16"+
		"\u0ad8\u0001\u0000\u0000\u0000\u0b16\u0adb\u0001\u0000\u0000\u0000\u0b16"+
		"\u0aea\u0001\u0000\u0000\u0000\u0b16\u0af4\u0001\u0000\u0000\u0000\u0b16"+
		"\u0afa\u0001\u0000\u0000\u0000\u0b16\u0b00\u0001\u0000\u0000\u0000\u0b16"+
		"\u0b06\u0001\u0000\u0000\u0000\u0b16\u0b0c\u0001\u0000\u0000\u0000\u0b16"+
		"\u0b12\u0001\u0000\u0000\u0000\u0b16\u0b14\u0001\u0000\u0000\u0000\u0b17"+
		"\u0093\u0001\u0000\u0000\u0000\u0b18\u0b19\u00051\u0000\u0000\u0b19\u0b1b"+
		"\u0007\u0000\u0000\u0000\u0b1a\u0b1c\u0003\u025c\u012e\u0000\u0b1b\u0b1a"+
		"\u0001\u0000\u0000\u0000\u0b1b\u0b1c\u0001\u0000\u0000\u0000\u0b1c\u0b1d"+
		"\u0001\u0000\u0000\u0000\u0b1d\u0b1e\u0003\u0226\u0113\u0000\u0b1e\u0095"+
		"\u0001\u0000\u0000\u0000\u0b1f\u0b20\u00051\u0000\u0000\u0b20\u0b22\u0005"+
		"\u0193\u0000\u0000\u0b21\u0b23\u0003\u025c\u012e\u0000\u0b22\u0b21\u0001"+
		"\u0000\u0000\u0000\u0b22\u0b23\u0001\u0000\u0000\u0000\u0b23\u0b24\u0001"+
		"\u0000\u0000\u0000\u0b24\u0b25\u0003\u020a\u0105\u0000\u0b25\u0097\u0001"+
		"\u0000\u0000\u0000\u0b26\u0b27\u00051\u0000\u0000\u0b27\u0b29\u0005Q\u0000"+
		"\u0000\u0b28\u0b2a\u0007\u0001\u0000\u0000\u0b29\u0b28\u0001\u0000\u0000"+
		"\u0000\u0b29\u0b2a\u0001\u0000\u0000\u0000\u0b2a\u0b2b\u0001\u0000\u0000"+
		"\u0000\u0b2b\u0b2c\u0003\u0226\u0113\u0000\u0b2c\u0b2d\u0005s\u0000\u0000"+
		"\u0b2d\u0b3a\u0003\u020c\u0106\u0000\u0b2e\u0b30\u0005\u0147\u0000\u0000"+
		"\u0b2f\u0b31\u0005\u044e\u0000\u0000\u0b30\u0b2f\u0001\u0000\u0000\u0000"+
		"\u0b30\u0b31\u0001\u0000\u0000\u0000\u0b31\u0b32\u0001\u0000\u0000\u0000"+
		"\u0b32\u0b39\u0007$\u0000\u0000\u0b33\u0b35\u0005f\u0000\u0000\u0b34\u0b36"+
		"\u0005\u044e\u0000\u0000\u0b35\u0b34\u0001\u0000\u0000\u0000\u0b35\u0b36"+
		"\u0001\u0000\u0000\u0000\u0b36\u0b37\u0001\u0000\u0000\u0000\u0b37\u0b39"+
		"\u0007\u0004\u0000\u0000\u0b38\u0b2e\u0001\u0000\u0000\u0000\u0b38\u0b33"+
		"\u0001\u0000\u0000\u0000\u0b39\u0b3c\u0001\u0000\u0000\u0000\u0b3a\u0b38"+
		"\u0001\u0000\u0000\u0000\u0b3a\u0b3b\u0001\u0000\u0000\u0000\u0b3b\u0099"+
		"\u0001\u0000\u0000\u0000\u0b3c\u0b3a\u0001\u0000\u0000\u0000\u0b3d\u0b3e"+
		"\u00051\u0000\u0000\u0b3e\u0b3f\u0005\u01cc\u0000\u0000\u0b3f\u0b40\u0005"+
		"I\u0000\u0000\u0b40\u0b41\u0003\u0226\u0113\u0000\u0b41\u0b42\u0005\u018d"+
		"\u0000\u0000\u0b42\u0b43\u0005\u044e\u0000\u0000\u0b43\u0b44\u0003\u021c"+
		"\u010e\u0000\u0b44\u009b\u0001\u0000\u0000\u0000\u0b45\u0b46\u00051\u0000"+
		"\u0000\u0b46\u0b48\u0005\u0080\u0000\u0000\u0b47\u0b49\u0003\u025c\u012e"+
		"\u0000\u0b48\u0b47\u0001\u0000\u0000\u0000\u0b48\u0b49\u0001\u0000\u0000"+
		"\u0000\u0b49\u0b4a\u0001\u0000\u0000\u0000\u0b4a\u0b4b\u0003\u020a\u0105"+
		"\u0000\u0b4b\u009d\u0001\u0000\u0000\u0000\u0b4c\u0b4d\u00051\u0000\u0000"+
		"\u0b4d\u0b4f\u0005\u01a8\u0000\u0000\u0b4e\u0b50\u0003\u025c\u012e\u0000"+
		"\u0b4f\u0b4e\u0001\u0000\u0000\u0000\u0b4f\u0b50\u0001\u0000\u0000\u0000"+
		"\u0b50\u0b51\u0001\u0000\u0000\u0000\u0b51\u0b52\u0003\u020a\u0105\u0000"+
		"\u0b52\u009f\u0001\u0000\u0000\u0000\u0b53\u0b54\u00051\u0000\u0000\u0b54"+
		"\u0b56\u0005\u0247\u0000\u0000\u0b55\u0b57\u0003\u025c\u012e\u0000\u0b56"+
		"\u0b55\u0001\u0000\u0000\u0000\u0b56\u0b57\u0001\u0000\u0000\u0000\u0b57"+
		"\u0b58\u0001\u0000\u0000\u0000\u0b58\u0b59\u0003\u0226\u0113\u0000\u0b59"+
		"\u00a1\u0001\u0000\u0000\u0000\u0b5a\u0b5c\u00051\u0000\u0000\u0b5b\u0b5d"+
		"\u0005\u0270\u0000\u0000\u0b5c\u0b5b\u0001\u0000\u0000\u0000\u0b5c\u0b5d"+
		"\u0001\u0000\u0000\u0000\u0b5d\u0b5e\u0001\u0000\u0000\u0000\u0b5e\u0b60"+
		"\u0005\u00a6\u0000\u0000\u0b5f\u0b61\u0003\u025c\u012e\u0000\u0b60\u0b5f"+
		"\u0001\u0000\u0000\u0000\u0b60\u0b61\u0001\u0000\u0000\u0000\u0b61\u0b62"+
		"\u0001\u0000\u0000\u0000\u0b62\u0b64\u0003\u0248\u0124\u0000\u0b63\u0b65"+
		"\u0007%\u0000\u0000\u0b64\u0b63\u0001\u0000\u0000\u0000\u0b64\u0b65\u0001"+
		"\u0000\u0000\u0000\u0b65\u00a3\u0001\u0000\u0000\u0000\u0b66\u0b67\u0005"+
		"1\u0000\u0000\u0b67\u0b68\u0005\u026e\u0000\u0000\u0b68\u0b6e\u0003\u0226"+
		"\u0113\u0000\u0b69\u0b6b\u0005\u018d\u0000\u0000\u0b6a\u0b6c\u0005\u044e"+
		"\u0000\u0000\u0b6b\u0b6a\u0001\u0000\u0000\u0000\u0b6b\u0b6c\u0001\u0000"+
		"\u0000\u0000\u0b6c\u0b6d\u0001\u0000\u0000\u0000\u0b6d\u0b6f\u0003\u021c"+
		"\u010e\u0000\u0b6e\u0b69\u0001\u0000\u0000\u0000\u0b6e\u0b6f\u0001\u0000"+
		"\u0000\u0000\u0b6f\u00a5\u0001\u0000\u0000\u0000\u0b70\u0b71\u00051\u0000"+
		"\u0000\u0b71\u0b73\u0005\u00ab\u0000\u0000\u0b72\u0b74\u0003\u025c\u012e"+
		"\u0000\u0b73\u0b72\u0001\u0000\u0000\u0000\u0b73\u0b74\u0001\u0000\u0000"+
		"\u0000\u0b74\u0b75\u0001\u0000\u0000\u0000\u0b75\u0b76\u0003\u020a\u0105"+
		"\u0000\u0b76\u00a7\u0001\u0000\u0000\u0000\u0b77\u0b78\u00051\u0000\u0000"+
		"\u0b78\u0b7a\u0005\u0286\u0000\u0000\u0b79\u0b7b\u0003\u025c\u012e\u0000"+
		"\u0b7a\u0b79\u0001\u0000\u0000\u0000\u0b7a\u0b7b\u0001\u0000\u0000\u0000"+
		"\u0b7b\u0b7c\u0001\u0000\u0000\u0000\u0b7c\u0b81\u0003\u020a\u0105\u0000"+
		"\u0b7d\u0b7e\u0005\u0459\u0000\u0000\u0b7e\u0b80\u0003\u020a\u0105\u0000"+
		"\u0b7f\u0b7d\u0001\u0000\u0000\u0000\u0b80\u0b83\u0001\u0000\u0000\u0000"+
		"\u0b81\u0b7f\u0001\u0000\u0000\u0000\u0b81\u0b82\u0001\u0000\u0000\u0000"+
		"\u0b82\u0b85\u0001\u0000\u0000\u0000\u0b83\u0b81\u0001\u0000\u0000\u0000"+
		"\u0b84\u0b86\u0007%\u0000\u0000\u0b85\u0b84\u0001\u0000\u0000\u0000\u0b85"+
		"\u0b86\u0001\u0000\u0000\u0000\u0b86\u00a9\u0001\u0000\u0000\u0000\u0b87"+
		"\u0b88\u00051\u0000\u0000\u0b88\u0b8a\u0005\u023c\u0000\u0000\u0b89\u0b8b"+
		"\u0003\u025c\u012e\u0000\u0b8a\u0b89\u0001\u0000\u0000\u0000\u0b8a\u0b8b"+
		"\u0001\u0000\u0000\u0000\u0b8b\u0b8c\u0001\u0000\u0000\u0000\u0b8c\u0b91"+
		"\u0003\u020e\u0107\u0000\u0b8d\u0b8e\u0005\u0459\u0000\u0000\u0b8e\u0b90"+
		"\u0003\u020e\u0107\u0000\u0b8f\u0b8d\u0001\u0000\u0000\u0000\u0b90\u0b93"+
		"\u0001\u0000\u0000\u0000\u0b91\u0b8f\u0001\u0000\u0000\u0000\u0b91\u0b92"+
		"\u0001\u0000\u0000\u0000\u0b92\u00ab\u0001\u0000\u0000\u0000\u0b93\u0b91"+
		"\u0001\u0000\u0000\u0000\u0b94\u0b95\u0005\u0096\u0000\u0000\u0b95\u0b96"+
		"\u0005(\u0000\u0000\u0b96\u0ba1\u0005\u023c\u0000\u0000\u0b97\u0ba2\u0005"+
		"\u01fe\u0000\u0000\u0b98\u0ba2\u0005\u0006\u0000\u0000\u0b99\u0b9e\u0003"+
		"\u020e\u0107\u0000\u0b9a\u0b9b\u0005\u0459\u0000\u0000\u0b9b\u0b9d\u0003"+
		"\u020e\u0107\u0000\u0b9c\u0b9a\u0001\u0000\u0000\u0000\u0b9d\u0ba0\u0001"+
		"\u0000\u0000\u0000\u0b9e\u0b9c\u0001\u0000\u0000\u0000\u0b9e\u0b9f\u0001"+
		"\u0000\u0000\u0000\u0b9f\u0ba2\u0001\u0000\u0000\u0000\u0ba0\u0b9e\u0001"+
		"\u0000\u0000\u0000\u0ba1\u0b97\u0001\u0000\u0000\u0000\u0ba1\u0b98\u0001"+
		"\u0000\u0000\u0000\u0ba1\u0b99\u0001\u0000\u0000\u0000\u0ba2\u0ba3\u0001"+
		"\u0000\u0000\u0000\u0ba3\u0ba6\u0005\u00a9\u0000\u0000\u0ba4\u0ba7\u0003"+
		"\u0214\u010a\u0000\u0ba5\u0ba7\u0003\u0226\u0113\u0000\u0ba6\u0ba4\u0001"+
		"\u0000\u0000\u0000\u0ba6\u0ba5\u0001\u0000\u0000\u0000\u0ba7\u0baf\u0001"+
		"\u0000\u0000\u0000\u0ba8\u0bab\u0005\u0459\u0000\u0000\u0ba9\u0bac\u0003"+
		"\u0214\u010a\u0000\u0baa\u0bac\u0003\u0226\u0113\u0000\u0bab\u0ba9\u0001"+
		"\u0000\u0000\u0000\u0bab\u0baa\u0001\u0000\u0000\u0000\u0bac\u0bae\u0001"+
		"\u0000\u0000\u0000\u0bad\u0ba8\u0001\u0000\u0000\u0000\u0bae\u0bb1\u0001"+
		"\u0000\u0000\u0000\u0baf\u0bad\u0001\u0000\u0000\u0000\u0baf\u0bb0\u0001"+
		"\u0000\u0000\u0000\u0bb0\u0bb6\u0001\u0000\u0000\u0000\u0bb1\u0baf\u0001"+
		"\u0000\u0000\u0000\u0bb2\u0bb3\u0005\u0096\u0000\u0000\u0bb3\u0bb4\u0005"+
		"\u023c\u0000\u0000\u0bb4\u0bb6\u0003\u019e\u00cf\u0000\u0bb5\u0b94\u0001"+
		"\u0000\u0000\u0000\u0bb5\u0bb2\u0001\u0000\u0000\u0000\u0bb6\u00ad\u0001"+
		"\u0000\u0000\u0000\u0bb7\u0bb8\u0005\u0088\u0000\u0000\u0bb8\u0bb9\u0005"+
		"\u00a6\u0000\u0000\u0bb9\u0bbe\u0003\u00b0X\u0000\u0bba\u0bbb\u0005\u0459"+
		"\u0000\u0000\u0bbb\u0bbd\u0003\u00b0X\u0000\u0bbc\u0bba\u0001\u0000\u0000"+
		"\u0000\u0bbd\u0bc0\u0001\u0000\u0000\u0000\u0bbe\u0bbc\u0001\u0000\u0000"+
		"\u0000\u0bbe\u0bbf\u0001\u0000\u0000\u0000\u0bbf\u00af\u0001\u0000\u0000"+
		"\u0000\u0bc0\u0bbe\u0001\u0000\u0000\u0000\u0bc1\u0bc2\u0003\u020c\u0106"+
		"\u0000\u0bc2\u0bc3\u0005\u00a9\u0000\u0000\u0bc3\u0bc4\u0003\u020c\u0106"+
		"\u0000\u0bc4\u00b1\u0001\u0000\u0000\u0000\u0bc5\u0bc7\u0005\u0277\u0000"+
		"\u0000\u0bc6\u0bc8\u0005\u00a6\u0000\u0000\u0bc7\u0bc6\u0001\u0000\u0000"+
		"\u0000\u0bc7\u0bc8\u0001\u0000\u0000\u0000\u0bc8\u0bc9\u0001\u0000\u0000"+
		"\u0000\u0bc9\u0bca\u0003\u020c\u0106\u0000\u0bca\u00b3\u0001\u0000\u0000"+
		"\u0000\u0bcb\u0bcc\u0005\u0013\u0000\u0000\u0bcc\u0bd3\u0003\u020a\u0105"+
		"\u0000\u0bcd\u0bd0\u0005\u0457\u0000\u0000\u0bce\u0bd1\u0003\u0250\u0128"+
		"\u0000\u0bcf\u0bd1\u0003\u024c\u0126\u0000\u0bd0\u0bce\u0001\u0000\u0000"+
		"\u0000\u0bd0\u0bcf\u0001\u0000\u0000\u0000\u0bd0\u0bd1\u0001\u0000\u0000"+
		"\u0000\u0bd1\u0bd2\u0001\u0000\u0000\u0000\u0bd2\u0bd4\u0005\u0458\u0000"+
		"\u0000\u0bd3\u0bcd\u0001\u0000\u0000\u0000\u0bd3\u0bd4\u0001\u0000\u0000"+
		"\u0000\u0bd4\u00b5\u0001\u0000\u0000\u0000\u0bd5\u0bd8\u0003\u00d0h\u0000"+
		"\u0bd6\u0bd8\u0003\u00d2i\u0000\u0bd7\u0bd5\u0001\u0000\u0000\u0000\u0bd7"+
		"\u0bd6\u0001\u0000\u0000\u0000\u0bd8\u00b7\u0001\u0000\u0000\u0000\u0bd9"+
		"\u0bda\u0005\u0185\u0000\u0000\u0bda\u0bdb\u0003\u024c\u0126\u0000\u0bdb"+
		"\u00b9\u0001\u0000\u0000\u0000\u0bdc\u0be1\u0003\u00d4j\u0000\u0bdd\u0be1"+
		"\u0003\u00d6k\u0000\u0bde\u0be1\u0003\u00d8l\u0000\u0bdf\u0be1\u0003\u00da"+
		"m\u0000\u0be0\u0bdc\u0001\u0000\u0000\u0000\u0be0\u0bdd\u0001\u0000\u0000"+
		"\u0000\u0be0\u0bde\u0001\u0000\u0000\u0000\u0be0\u0bdf\u0001\u0000\u0000"+
		"\u0000\u0be1\u00bb\u0001\u0000\u0000\u0000\u0be2\u0be4\u0005U\u0000\u0000"+
		"\u0be3\u0be5\u0007&\u0000\u0000\u0be4\u0be3\u0001\u0000\u0000\u0000\u0be4"+
		"\u0be5\u0001\u0000\u0000\u0000\u0be5\u0be7\u0001\u0000\u0000\u0000\u0be6"+
		"\u0be8\u0005N\u0000\u0000\u0be7\u0be6\u0001\u0000\u0000\u0000\u0be7\u0be8"+
		"\u0001\u0000\u0000\u0000\u0be8\u0bea\u0001\u0000\u0000\u0000\u0be9\u0beb"+
		"\u0005W\u0000\u0000\u0bea\u0be9\u0001\u0000\u0000\u0000\u0bea\u0beb\u0001"+
		"\u0000\u0000\u0000\u0beb\u0bec\u0001\u0000\u0000\u0000\u0bec\u0bf3\u0003"+
		"\u020c\u0106\u0000\u0bed\u0bee\u0005~\u0000\u0000\u0bee\u0bf0\u0005\u0457"+
		"\u0000\u0000\u0bef\u0bf1\u0003\u0246\u0123\u0000\u0bf0\u0bef\u0001\u0000"+
		"\u0000\u0000\u0bf0\u0bf1\u0001\u0000\u0000\u0000\u0bf1\u0bf2\u0001\u0000"+
		"\u0000\u0000\u0bf2\u0bf4\u0005\u0458\u0000\u0000\u0bf3\u0bed\u0001\u0000"+
		"\u0000\u0000\u0bf3\u0bf4\u0001\u0000\u0000\u0000\u0bf4\u0c05\u0001\u0000"+
		"\u0000\u0000\u0bf5\u0bf6\u0005\u0457\u0000\u0000\u0bf6\u0bf7\u0003\u0246"+
		"\u0123\u0000\u0bf7\u0bf8\u0005\u0458\u0000\u0000\u0bf8\u0bfa\u0001\u0000"+
		"\u0000\u0000\u0bf9\u0bf5\u0001\u0000\u0000\u0000\u0bf9\u0bfa\u0001\u0000"+
		"\u0000\u0000\u0bfa\u0bfb\u0001\u0000\u0000\u0000\u0bfb\u0c06\u0003\u00c8"+
		"d\u0000\u0bfc\u0bfd\u0005\u0096\u0000\u0000\u0bfd\u0c02\u0003\u00cae\u0000"+
		"\u0bfe\u0bff\u0005\u0459\u0000\u0000\u0bff\u0c01\u0003\u00cae\u0000\u0c00"+
		"\u0bfe\u0001\u0000\u0000\u0000\u0c01\u0c04\u0001\u0000\u0000\u0000\u0c02"+
		"\u0c00\u0001\u0000\u0000\u0000\u0c02\u0c03\u0001\u0000\u0000\u0000\u0c03"+
		"\u0c06\u0001\u0000\u0000\u0000\u0c04\u0c02\u0001\u0000\u0000\u0000\u0c05"+
		"\u0bf9\u0001\u0000\u0000\u0000\u0c05\u0bfc\u0001\u0000\u0000\u0000\u0c06"+
		"\u0c13\u0001\u0000\u0000\u0000\u0c07\u0c08\u0005s\u0000\u0000\u0c08\u0c09"+
		"\u0005\u0187\u0000\u0000\u0c09\u0c0a\u0005[\u0000\u0000\u0c0a\u0c0b\u0005"+
		"\u00b2\u0000\u0000\u0c0b\u0c10\u0003\u00cae\u0000\u0c0c\u0c0d\u0005\u0459"+
		"\u0000\u0000\u0c0d\u0c0f\u0003\u00cae\u0000\u0c0e\u0c0c\u0001\u0000\u0000"+
		"\u0000\u0c0f\u0c12\u0001\u0000\u0000\u0000\u0c10\u0c0e\u0001\u0000\u0000"+
		"\u0000\u0c10\u0c11\u0001\u0000\u0000\u0000\u0c11\u0c14\u0001\u0000\u0000"+
		"\u0000\u0c12\u0c10\u0001\u0000\u0000\u0000\u0c13\u0c07\u0001\u0000\u0000"+
		"\u0000\u0c13\u0c14\u0001\u0000\u0000\u0000\u0c14\u00bd\u0001\u0000\u0000"+
		"\u0000\u0c15\u0c16\u0005e\u0000\u0000\u0c16\u0c18\u0005\u017a\u0000\u0000"+
		"\u0c17\u0c19\u0007\'\u0000\u0000\u0c18\u0c17\u0001\u0000\u0000\u0000\u0c18"+
		"\u0c19\u0001\u0000\u0000\u0000\u0c19\u0c1b\u0001\u0000\u0000\u0000\u0c1a"+
		"\u0c1c\u0005\u01cb\u0000\u0000\u0c1b\u0c1a\u0001\u0000\u0000\u0000\u0c1b"+
		"\u0c1c\u0001\u0000\u0000\u0000\u0c1c\u0c1d\u0001\u0000\u0000\u0000\u0c1d"+
		"\u0c1e\u0005R\u0000\u0000\u0c1e\u0c20\u0005\u0466\u0000\u0000\u0c1f\u0c21"+
		"\u0007\u0006\u0000\u0000\u0c20\u0c1f\u0001\u0000\u0000\u0000\u0c20\u0c21"+
		"\u0001\u0000\u0000\u0000\u0c21\u0c22\u0001\u0000\u0000\u0000\u0c22\u0c23"+
		"\u0005W\u0000\u0000\u0c23\u0c24\u0005\u00a6\u0000\u0000\u0c24\u0c2a\u0003"+
		"\u020c\u0106\u0000\u0c25\u0c26\u0005~\u0000\u0000\u0c26\u0c27\u0005\u0457"+
		"\u0000\u0000\u0c27\u0c28\u0003\u0246\u0123\u0000\u0c28\u0c29\u0005\u0458"+
		"\u0000\u0000\u0c29\u0c2b\u0001\u0000\u0000\u0000\u0c2a\u0c25\u0001\u0000"+
		"\u0000\u0000\u0c2a\u0c2b\u0001\u0000\u0000\u0000\u0c2b\u0c2f\u0001\u0000"+
		"\u0000\u0000\u0c2c\u0c2d\u0005\u0018\u0000\u0000\u0c2d\u0c2e\u0005\u0096"+
		"\u0000\u0000\u0c2e\u0c30\u0003\u0218\u010c\u0000\u0c2f\u0c2c\u0001\u0000"+
		"\u0000\u0000\u0c2f\u0c30\u0001\u0000\u0000\u0000\u0c30\u0c37\u0001\u0000"+
		"\u0000\u0000\u0c31\u0c33\u0007(\u0000\u0000\u0c32\u0c34\u0003\u0104\u0082"+
		"\u0000\u0c33\u0c32\u0001\u0000\u0000\u0000\u0c34\u0c35\u0001\u0000\u0000"+
		"\u0000\u0c35\u0c33\u0001\u0000\u0000\u0000\u0c35\u0c36\u0001\u0000\u0000"+
		"\u0000\u0c36\u0c38\u0001\u0000\u0000\u0000\u0c37\u0c31\u0001\u0000\u0000"+
		"\u0000\u0c37\u0c38\u0001\u0000\u0000\u0000\u0c38\u0c3f\u0001\u0000\u0000"+
		"\u0000\u0c39\u0c3b\u0005d\u0000\u0000\u0c3a\u0c3c\u0003\u0106\u0083\u0000"+
		"\u0c3b\u0c3a\u0001\u0000\u0000\u0000\u0c3c\u0c3d\u0001\u0000\u0000\u0000"+
		"\u0c3d\u0c3b\u0001\u0000\u0000\u0000\u0c3d\u0c3e\u0001\u0000\u0000\u0000"+
		"\u0c3e\u0c40\u0001\u0000\u0000\u0000\u0c3f\u0c39\u0001\u0000\u0000\u0000"+
		"\u0c3f\u0c40\u0001\u0000\u0000\u0000\u0c40\u0c45\u0001\u0000\u0000\u0000"+
		"\u0c41\u0c42\u0005N\u0000\u0000\u0c42\u0c43\u0003\u022c\u0116\u0000\u0c43"+
		"\u0c44\u0007)\u0000\u0000\u0c44\u0c46\u0001\u0000\u0000\u0000\u0c45\u0c41"+
		"\u0001\u0000\u0000\u0000\u0c45\u0c46\u0001\u0000\u0000\u0000\u0c46\u0c52"+
		"\u0001\u0000\u0000\u0000\u0c47\u0c48\u0005\u0457\u0000\u0000\u0c48\u0c4d"+
		"\u0003\u00ccf\u0000\u0c49\u0c4a\u0005\u0459\u0000\u0000\u0c4a\u0c4c\u0003"+
		"\u00ccf\u0000\u0c4b\u0c49\u0001\u0000\u0000\u0000\u0c4c\u0c4f\u0001\u0000"+
		"\u0000\u0000\u0c4d\u0c4b\u0001\u0000\u0000\u0000\u0c4d\u0c4e\u0001\u0000"+
		"\u0000\u0000\u0c4e\u0c50\u0001\u0000\u0000\u0000\u0c4f\u0c4d\u0001\u0000"+
		"\u0000\u0000\u0c50\u0c51\u0005\u0458\u0000\u0000\u0c51\u0c53\u0001\u0000"+
		"\u0000\u0000\u0c52\u0c47\u0001\u0000\u0000\u0000\u0c52\u0c53\u0001\u0000"+
		"\u0000\u0000\u0c53\u0c5d\u0001\u0000\u0000\u0000\u0c54\u0c55\u0005\u0096"+
		"\u0000\u0000\u0c55\u0c5a\u0003\u00cae\u0000\u0c56\u0c57\u0005\u0459\u0000"+
		"\u0000\u0c57\u0c59\u0003\u00cae\u0000\u0c58\u0c56\u0001\u0000\u0000\u0000"+
		"\u0c59\u0c5c\u0001\u0000\u0000\u0000\u0c5a\u0c58\u0001\u0000\u0000\u0000"+
		"\u0c5a\u0c5b\u0001\u0000\u0000\u0000\u0c5b\u0c5e\u0001\u0000\u0000\u0000"+
		"\u0c5c\u0c5a\u0001\u0000\u0000\u0000\u0c5d\u0c54\u0001\u0000\u0000\u0000"+
		"\u0c5d\u0c5e\u0001\u0000\u0000\u0000\u0c5e\u00bf\u0001\u0000\u0000\u0000"+
		"\u0c5f\u0c60\u0005e\u0000\u0000\u0c60\u0c62\u0005\u0291\u0000\u0000\u0c61"+
		"\u0c63\u0007\'\u0000\u0000\u0c62\u0c61\u0001\u0000\u0000\u0000\u0c62\u0c63"+
		"\u0001\u0000\u0000\u0000\u0c63\u0c65\u0001\u0000\u0000\u0000\u0c64\u0c66"+
		"\u0005\u01cb\u0000\u0000\u0c65\u0c64\u0001\u0000\u0000\u0000\u0c65\u0c66"+
		"\u0001\u0000\u0000\u0000\u0c66\u0c67\u0001\u0000\u0000\u0000\u0c67\u0c68"+
		"\u0005R\u0000\u0000\u0c68\u0c6a\u0005\u0466\u0000\u0000\u0c69\u0c6b\u0007"+
		"\u0006\u0000\u0000\u0c6a\u0c69\u0001\u0000\u0000\u0000\u0c6a\u0c6b\u0001"+
		"\u0000\u0000\u0000\u0c6b\u0c6c\u0001\u0000\u0000\u0000\u0c6c\u0c6d\u0005"+
		"W\u0000\u0000\u0c6d\u0c6e\u0005\u00a6\u0000\u0000\u0c6e\u0c72\u0003\u020c"+
		"\u0106\u0000\u0c6f\u0c70\u0005\u0018\u0000\u0000\u0c70\u0c71\u0005\u0096"+
		"\u0000\u0000\u0c71\u0c73\u0003\u0218\u010c\u0000\u0c72\u0c6f\u0001\u0000"+
		"\u0000\u0000\u0c72\u0c73\u0001\u0000\u0000\u0000\u0c73\u0c7a\u0001\u0000"+
		"\u0000\u0000\u0c74\u0c75\u0005\u0241\u0000\u0000\u0c75\u0c76\u0005\u01b2"+
		"\u0000\u0000\u0c76\u0c77\u0005\u0012\u0000\u0000\u0c77\u0c78\u0005\u0450"+
		"\u0000\u0000\u0c78\u0c79\u0005\u0466\u0000\u0000\u0c79\u0c7b\u0005\u044f"+
		"\u0000\u0000\u0c7a\u0c74\u0001\u0000\u0000\u0000\u0c7a\u0c7b\u0001\u0000"+
		"\u0000\u0000\u0c7b\u0c80\u0001\u0000\u0000\u0000\u0c7c\u0c7d\u0005N\u0000"+
		"\u0000\u0c7d\u0c7e\u0003\u022c\u0116\u0000\u0c7e\u0c7f\u0007)\u0000\u0000"+
		"\u0c7f\u0c81\u0001\u0000\u0000\u0000\u0c80\u0c7c\u0001\u0000\u0000\u0000"+
		"\u0c80\u0c81\u0001\u0000\u0000\u0000\u0c81\u0c8d\u0001\u0000\u0000\u0000"+
		"\u0c82\u0c83\u0005\u0457\u0000\u0000\u0c83\u0c88\u0003\u00ccf\u0000\u0c84"+
		"\u0c85\u0005\u0459\u0000\u0000\u0c85\u0c87\u0003\u00ccf\u0000\u0c86\u0c84"+
		"\u0001\u0000\u0000\u0000\u0c87\u0c8a\u0001\u0000\u0000\u0000\u0c88\u0c86"+
		"\u0001\u0000\u0000\u0000\u0c88\u0c89\u0001\u0000\u0000\u0000\u0c89\u0c8b"+
		"\u0001\u0000\u0000\u0000\u0c8a\u0c88\u0001\u0000\u0000\u0000\u0c8b\u0c8c"+
		"\u0005\u0458\u0000\u0000\u0c8c\u0c8e\u0001\u0000\u0000\u0000\u0c8d\u0c82"+
		"\u0001\u0000\u0000\u0000\u0c8d\u0c8e\u0001\u0000\u0000\u0000\u0c8e\u0c98"+
		"\u0001\u0000\u0000\u0000\u0c8f\u0c90\u0005\u0096\u0000\u0000\u0c90\u0c95"+
		"\u0003\u00cae\u0000\u0c91\u0c92\u0005\u0459\u0000\u0000\u0c92\u0c94\u0003"+
		"\u00cae\u0000\u0c93\u0c91\u0001\u0000\u0000\u0000\u0c94\u0c97\u0001\u0000"+
		"\u0000\u0000\u0c95\u0c93\u0001\u0000\u0000\u0000\u0c95\u0c96\u0001\u0000"+
		"\u0000\u0000\u0c96\u0c99\u0001\u0000\u0000\u0000\u0c97\u0c95\u0001\u0000"+
		"\u0000\u0000\u0c98\u0c8f\u0001\u0000\u0000\u0000\u0c98\u0c99\u0001\u0000"+
		"\u0000\u0000\u0c99\u00c1\u0001\u0000\u0000\u0000\u0c9a\u0c9c\u0005\u008a"+
		"\u0000\u0000\u0c9b\u0c9d\u0007*\u0000\u0000\u0c9c\u0c9b\u0001\u0000\u0000"+
		"\u0000\u0c9c\u0c9d\u0001\u0000\u0000\u0000\u0c9d\u0c9f\u0001\u0000\u0000"+
		"\u0000\u0c9e\u0ca0\u0005W\u0000\u0000\u0c9f\u0c9e\u0001\u0000\u0000\u0000"+
		"\u0c9f\u0ca0\u0001\u0000\u0000\u0000\u0ca0\u0ca1\u0001\u0000\u0000\u0000"+
		"\u0ca1\u0ca7\u0003\u020c\u0106\u0000\u0ca2\u0ca3\u0005~\u0000\u0000\u0ca3"+
		"\u0ca4\u0005\u0457\u0000\u0000\u0ca4\u0ca5\u0003\u0246\u0123\u0000\u0ca5"+
		"\u0ca6\u0005\u0458\u0000\u0000\u0ca6\u0ca8\u0001\u0000\u0000\u0000\u0ca7"+
		"\u0ca2\u0001\u0000\u0000\u0000\u0ca7\u0ca8\u0001\u0000\u0000\u0000\u0ca8"+
		"\u0cb9\u0001\u0000\u0000\u0000\u0ca9\u0caa\u0005\u0457\u0000\u0000\u0caa"+
		"\u0cab\u0003\u0246\u0123\u0000\u0cab\u0cac\u0005\u0458\u0000\u0000\u0cac"+
		"\u0cae\u0001\u0000\u0000\u0000\u0cad\u0ca9\u0001\u0000\u0000\u0000\u0cad"+
		"\u0cae\u0001\u0000\u0000\u0000\u0cae\u0caf\u0001\u0000\u0000\u0000\u0caf"+
		"\u0cba\u0003\u00c8d\u0000\u0cb0\u0cb1\u0005\u0096\u0000\u0000\u0cb1\u0cb6"+
		"\u0003\u00cae\u0000\u0cb2\u0cb3\u0005\u0459\u0000\u0000\u0cb3\u0cb5\u0003"+
		"\u00cae\u0000\u0cb4\u0cb2\u0001\u0000\u0000\u0000\u0cb5\u0cb8\u0001\u0000"+
		"\u0000\u0000\u0cb6\u0cb4\u0001\u0000\u0000\u0000\u0cb6\u0cb7\u0001\u0000"+
		"\u0000\u0000\u0cb7\u0cba\u0001\u0000\u0000\u0000\u0cb8\u0cb6\u0001\u0000"+
		"\u0000\u0000\u0cb9\u0cad\u0001\u0000\u0000\u0000\u0cb9\u0cb0\u0001\u0000"+
		"\u0000\u0000\u0cba\u00c3\u0001\u0000\u0000\u0000\u0cbb\u0cbd\u0003\u00f4"+
		"z\u0000\u0cbc\u0cbe\u0003\u00ceg\u0000\u0cbd\u0cbc\u0001\u0000\u0000\u0000"+
		"\u0cbd\u0cbe\u0001\u0000\u0000\u0000\u0cbe\u0cf3\u0001\u0000\u0000\u0000"+
		"\u0cbf\u0cc1\u0003\u00f0x\u0000\u0cc0\u0cc2\u0003\u00ceg\u0000\u0cc1\u0cc0"+
		"\u0001\u0000\u0000\u0000\u0cc1\u0cc2\u0001\u0000\u0000\u0000\u0cc2\u0cf3"+
		"\u0001\u0000\u0000\u0000\u0cc3\u0cc5\u0003\u00f6{\u0000\u0cc4\u0cc6\u0003"+
		"\u00fa}\u0000\u0cc5\u0cc4\u0001\u0000\u0000\u0000\u0cc6\u0cc7\u0001\u0000"+
		"\u0000\u0000\u0cc7\u0cc5\u0001\u0000\u0000\u0000\u0cc7\u0cc8\u0001\u0000"+
		"\u0000\u0000\u0cc8\u0cd1\u0001\u0000\u0000\u0000\u0cc9\u0ccb\u0005\u00ae"+
		"\u0000\u0000\u0cca\u0ccc\u0007+\u0000\u0000\u0ccb\u0cca\u0001\u0000\u0000"+
		"\u0000\u0ccb\u0ccc\u0001\u0000\u0000\u0000\u0ccc\u0ccf\u0001\u0000\u0000"+
		"\u0000\u0ccd\u0cd0\u0003\u00f4z\u0000\u0cce\u0cd0\u0003\u00f0x\u0000\u0ccf"+
		"\u0ccd\u0001\u0000\u0000\u0000\u0ccf\u0cce\u0001\u0000\u0000\u0000\u0cd0"+
		"\u0cd2\u0001\u0000\u0000\u0000\u0cd1\u0cc9\u0001\u0000\u0000\u0000\u0cd1"+
		"\u0cd2\u0001\u0000\u0000\u0000\u0cd2\u0cd4\u0001\u0000\u0000\u0000\u0cd3"+
		"\u0cd5\u0003\u00e0p\u0000\u0cd4\u0cd3\u0001\u0000\u0000\u0000\u0cd4\u0cd5"+
		"\u0001\u0000\u0000\u0000\u0cd5\u0cd7\u0001\u0000\u0000\u0000\u0cd6\u0cd8"+
		"\u0003\u0112\u0089\u0000\u0cd7\u0cd6\u0001\u0000\u0000\u0000\u0cd7\u0cd8"+
		"\u0001\u0000\u0000\u0000\u0cd8\u0cda\u0001\u0000\u0000\u0000\u0cd9\u0cdb"+
		"\u0003\u00ceg\u0000\u0cda\u0cd9\u0001\u0000\u0000\u0000\u0cda\u0cdb\u0001"+
		"\u0000\u0000\u0000\u0cdb\u0cf3\u0001\u0000\u0000\u0000\u0cdc\u0cde\u0003"+
		"\u00f2y\u0000\u0cdd\u0cdf\u0003\u00f8|\u0000\u0cde\u0cdd\u0001\u0000\u0000"+
		"\u0000\u0cdf\u0ce0\u0001\u0000\u0000\u0000\u0ce0\u0cde\u0001\u0000\u0000"+
		"\u0000\u0ce0\u0ce1\u0001\u0000\u0000\u0000\u0ce1\u0ce7\u0001\u0000\u0000"+
		"\u0000\u0ce2\u0ce4\u0005\u00ae\u0000\u0000\u0ce3\u0ce5\u0007+\u0000\u0000"+
		"\u0ce4\u0ce3\u0001\u0000\u0000\u0000\u0ce4\u0ce5\u0001\u0000\u0000\u0000"+
		"\u0ce5\u0ce6\u0001\u0000\u0000\u0000\u0ce6\u0ce8\u0003\u00f0x\u0000\u0ce7"+
		"\u0ce2\u0001\u0000\u0000\u0000\u0ce7\u0ce8\u0001\u0000\u0000\u0000\u0ce8"+
		"\u0cea\u0001\u0000\u0000\u0000\u0ce9\u0ceb\u0003\u00e0p\u0000\u0cea\u0ce9"+
		"\u0001\u0000\u0000\u0000\u0cea\u0ceb\u0001\u0000\u0000\u0000\u0ceb\u0ced"+
		"\u0001\u0000\u0000\u0000\u0cec\u0cee\u0003\u0112\u0089\u0000\u0ced\u0cec"+
		"\u0001\u0000\u0000\u0000\u0ced\u0cee\u0001\u0000\u0000\u0000\u0cee\u0cf0"+
		"\u0001\u0000\u0000\u0000\u0cef\u0cf1\u0003\u00ceg\u0000\u0cf0\u0cef\u0001"+
		"\u0000\u0000\u0000\u0cf0\u0cf1\u0001\u0000\u0000\u0000\u0cf1\u0cf3\u0001"+
		"\u0000\u0000\u0000\u0cf2\u0cbb\u0001\u0000\u0000\u0000\u0cf2\u0cbf\u0001"+
		"\u0000\u0000\u0000\u0cf2\u0cc3\u0001\u0000\u0000\u0000\u0cf2\u0cdc\u0001"+
		"\u0000\u0000\u0000\u0cf3\u00c5\u0001\u0000\u0000\u0000\u0cf4\u0cf7\u0003"+
		"\u00dcn\u0000\u0cf5\u0cf7\u0003\u00deo\u0000\u0cf6\u0cf4\u0001\u0000\u0000"+
		"\u0000\u0cf6\u0cf5\u0001\u0000\u0000\u0000\u0cf7\u00c7\u0001\u0000\u0000"+
		"\u0000\u0cf8\u0d0b\u0003\u00c4b\u0000\u0cf9\u0cfa\u0007,\u0000\u0000\u0cfa"+
		"\u0cfc\u0005\u0457\u0000\u0000\u0cfb\u0cfd\u0003\u024e\u0127\u0000\u0cfc"+
		"\u0cfb\u0001\u0000\u0000\u0000\u0cfc\u0cfd\u0001\u0000\u0000\u0000\u0cfd"+
		"\u0cfe\u0001\u0000\u0000\u0000\u0cfe\u0d07\u0005\u0458\u0000\u0000\u0cff"+
		"\u0d00\u0005\u0459\u0000\u0000\u0d00\u0d02\u0005\u0457\u0000\u0000\u0d01"+
		"\u0d03\u0003\u024e\u0127\u0000\u0d02\u0d01\u0001\u0000\u0000\u0000\u0d02"+
		"\u0d03\u0001\u0000\u0000\u0000\u0d03\u0d04\u0001\u0000\u0000\u0000\u0d04"+
		"\u0d06\u0005\u0458\u0000\u0000\u0d05\u0cff\u0001\u0000\u0000\u0000\u0d06"+
		"\u0d09\u0001\u0000\u0000\u0000\u0d07\u0d05\u0001\u0000\u0000\u0000\u0d07"+
		"\u0d08\u0001\u0000\u0000\u0000\u0d08\u0d0b\u0001\u0000\u0000\u0000\u0d09"+
		"\u0d07\u0001\u0000\u0000\u0000\u0d0a\u0cf8\u0001\u0000\u0000\u0000\u0d0a"+
		"\u0cf9\u0001\u0000\u0000\u0000\u0d0b\u00c9\u0001\u0000\u0000\u0000\u0d0c"+
		"\u0d0d\u0003\u0210\u0108\u0000\u0d0d\u0d10\u0005\u044e\u0000\u0000\u0d0e"+
		"\u0d11\u0003\u0288\u0144\u0000\u0d0f\u0d11\u0005(\u0000\u0000\u0d10\u0d0e"+
		"\u0001\u0000\u0000\u0000\u0d10\u0d0f\u0001\u0000\u0000\u0000\u0d11\u00cb"+
		"\u0001\u0000\u0000\u0000\u0d12\u0d15\u0003\u0226\u0113\u0000\u0d13\u0d15"+
		"\u0005\u0473\u0000\u0000\u0d14\u0d12\u0001\u0000\u0000\u0000\u0d14\u0d13"+
		"\u0001\u0000\u0000\u0000\u0d15\u00cd\u0001\u0000\u0000\u0000\u0d16\u0d17"+
		"\u0005A\u0000\u0000\u0d17\u0d1d\u0005\u00b2\u0000\u0000\u0d18\u0d19\u0005"+
		"f\u0000\u0000\u0d19\u0d1a\u0005P\u0000\u0000\u0d1a\u0d1b\u0005\u0249\u0000"+
		"\u0000\u0d1b\u0d1d\u0005\u01f0\u0000\u0000\u0d1c\u0d16\u0001\u0000\u0000"+
		"\u0000\u0d1c\u0d18\u0001\u0000\u0000\u0000\u0d1d\u00cf\u0001\u0000\u0000"+
		"\u0000\u0d1e\u0d20\u0005*\u0000\u0000\u0d1f\u0d21\u0005h\u0000\u0000\u0d20"+
		"\u0d1f\u0001\u0000\u0000\u0000\u0d20\u0d21\u0001\u0000\u0000\u0000\u0d21"+
		"\u0d23\u0001\u0000\u0000\u0000\u0d22\u0d24\u0005\u0222\u0000\u0000\u0d23"+
		"\u0d22\u0001\u0000\u0000\u0000\u0d23\u0d24\u0001\u0000\u0000\u0000\u0d24"+
		"\u0d26\u0001\u0000\u0000\u0000\u0d25\u0d27\u0005N\u0000\u0000\u0d26\u0d25"+
		"\u0001\u0000\u0000\u0000\u0d26\u0d27\u0001\u0000\u0000\u0000\u0d27\u0d28"+
		"\u0001\u0000\u0000\u0000\u0d28\u0d29\u0005D\u0000\u0000\u0d29\u0d2f\u0003"+
		"\u020c\u0106\u0000\u0d2a\u0d2b\u0005~\u0000\u0000\u0d2b\u0d2c\u0005\u0457"+
		"\u0000\u0000\u0d2c\u0d2d\u0003\u0246\u0123\u0000\u0d2d\u0d2e\u0005\u0458"+
		"\u0000\u0000\u0d2e\u0d30\u0001\u0000\u0000\u0000\u0d2f\u0d2a\u0001\u0000"+
		"\u0000\u0000\u0d2f\u0d30\u0001\u0000\u0000\u0000\u0d30\u0d33\u0001\u0000"+
		"\u0000\u0000\u0d31\u0d32\u0005\u00b8\u0000\u0000\u0d32\u0d34\u0003\u0288"+
		"\u0144\u0000\u0d33\u0d31\u0001\u0000\u0000\u0000\u0d33\u0d34\u0001\u0000"+
		"\u0000\u0000\u0d34\u0d36\u0001\u0000\u0000\u0000\u0d35\u0d37\u0003\u00e0"+
		"p\u0000\u0d36\u0d35\u0001\u0000\u0000\u0000\u0d36\u0d37\u0001\u0000\u0000"+
		"\u0000\u0d37\u0d3a\u0001\u0000\u0000\u0000\u0d38\u0d39\u0005b\u0000\u0000"+
		"\u0d39\u0d3b\u0003\u0114\u008a\u0000\u0d3a\u0d38\u0001\u0000\u0000\u0000"+
		"\u0d3a\u0d3b\u0001\u0000\u0000\u0000\u0d3b\u00d1\u0001\u0000\u0000\u0000"+
		"\u0d3c\u0d3e\u0005*\u0000\u0000\u0d3d\u0d3f\u0005h\u0000\u0000\u0d3e\u0d3d"+
		"\u0001\u0000\u0000\u0000\u0d3e\u0d3f\u0001\u0000\u0000\u0000\u0d3f\u0d41"+
		"\u0001\u0000\u0000\u0000\u0d40\u0d42\u0005\u0222\u0000\u0000\u0d41\u0d40"+
		"\u0001\u0000\u0000\u0000\u0d41\u0d42\u0001\u0000\u0000\u0000\u0d42\u0d44"+
		"\u0001\u0000\u0000\u0000\u0d43\u0d45\u0005N\u0000\u0000\u0d44\u0d43\u0001"+
		"\u0000\u0000\u0000\u0d44\u0d45\u0001\u0000\u0000\u0000\u0d45\u0d6d\u0001"+
		"\u0000\u0000\u0000\u0d46\u0d49\u0003\u020c\u0106\u0000\u0d47\u0d48\u0005"+
		"\u0456\u0000\u0000\u0d48\u0d4a\u0005\u0447\u0000\u0000\u0d49\u0d47\u0001"+
		"\u0000\u0000\u0000\u0d49\u0d4a\u0001\u0000\u0000\u0000\u0d4a\u0d53\u0001"+
		"\u0000\u0000\u0000\u0d4b\u0d4c\u0005\u0459\u0000\u0000\u0d4c\u0d4f\u0003"+
		"\u020c\u0106\u0000\u0d4d\u0d4e\u0005\u0456\u0000\u0000\u0d4e\u0d50\u0005"+
		"\u0447\u0000\u0000\u0d4f\u0d4d\u0001\u0000\u0000\u0000\u0d4f\u0d50\u0001"+
		"\u0000\u0000\u0000\u0d50\u0d52\u0001\u0000\u0000\u0000\u0d51\u0d4b\u0001"+
		"\u0000\u0000\u0000\u0d52\u0d55\u0001\u0000\u0000\u0000\u0d53\u0d51\u0001"+
		"\u0000\u0000\u0000\u0d53\u0d54\u0001\u0000\u0000\u0000\u0d54\u0d56\u0001"+
		"\u0000\u0000\u0000\u0d55\u0d53\u0001\u0000\u0000\u0000\u0d56\u0d57\u0005"+
		"D\u0000\u0000\u0d57\u0d58\u0003\u00e4r\u0000\u0d58\u0d6e\u0001\u0000\u0000"+
		"\u0000\u0d59\u0d5a\u0005D\u0000\u0000\u0d5a\u0d5d\u0003\u020c\u0106\u0000"+
		"\u0d5b\u0d5c\u0005\u0456\u0000\u0000\u0d5c\u0d5e\u0005\u0447\u0000\u0000"+
		"\u0d5d\u0d5b\u0001\u0000\u0000\u0000\u0d5d\u0d5e\u0001\u0000\u0000\u0000"+
		"\u0d5e\u0d67\u0001\u0000\u0000\u0000\u0d5f\u0d60\u0005\u0459\u0000\u0000"+
		"\u0d60\u0d63\u0003\u020c\u0106\u0000\u0d61\u0d62\u0005\u0456\u0000\u0000"+
		"\u0d62\u0d64\u0005\u0447\u0000\u0000\u0d63\u0d61\u0001\u0000\u0000\u0000"+
		"\u0d63\u0d64\u0001\u0000\u0000\u0000\u0d64\u0d66\u0001\u0000\u0000\u0000"+
		"\u0d65\u0d5f\u0001\u0000\u0000\u0000\u0d66\u0d69\u0001\u0000\u0000\u0000"+
		"\u0d67\u0d65\u0001\u0000\u0000\u0000\u0d67\u0d68\u0001\u0000\u0000\u0000"+
		"\u0d68\u0d6a\u0001\u0000\u0000\u0000\u0d69\u0d67\u0001\u0000\u0000\u0000"+
		"\u0d6a\u0d6b\u0005\u00b5\u0000\u0000\u0d6b\u0d6c\u0003\u00e4r\u0000\u0d6c"+
		"\u0d6e\u0001\u0000\u0000\u0000\u0d6d\u0d46\u0001\u0000\u0000\u0000\u0d6d"+
		"\u0d59\u0001\u0000\u0000\u0000\u0d6e\u0d71\u0001\u0000\u0000\u0000\u0d6f"+
		"\u0d70\u0005\u00b8\u0000\u0000\u0d70\u0d72\u0003\u0288\u0144\u0000\u0d71"+
		"\u0d6f\u0001\u0000\u0000\u0000\u0d71\u0d72\u0001\u0000\u0000\u0000\u0d72"+
		"\u00d3\u0001\u0000\u0000\u0000\u0d73\u0d74\u0005\u01ad\u0000\u0000\u0d74"+
		"\u0d75\u0003\u020c\u0106\u0000\u0d75\u0d7a\u0005\u0208\u0000\u0000\u0d76"+
		"\u0d78\u0005\f\u0000\u0000\u0d77\u0d76\u0001\u0000\u0000\u0000\u0d77\u0d78"+
		"\u0001\u0000\u0000\u0000\u0d78\u0d79\u0001\u0000\u0000\u0000\u0d79\u0d7b"+
		"\u0003\u0226\u0113\u0000\u0d7a\u0d77\u0001\u0000\u0000\u0000\u0d7a\u0d7b"+
		"\u0001\u0000\u0000\u0000\u0d7b\u00d5\u0001\u0000\u0000\u0000\u0d7c\u0d7d"+
		"\u0005\u01ad\u0000\u0000\u0d7d\u0d7e\u0003\u020c\u0106\u0000\u0d7e\u0d7f"+
		"\u0005\u0083\u0000\u0000\u0d7f\u0d86\u0003\u0226\u0113\u0000\u0d80\u0d81"+
		"\u0003\u0292\u0149\u0000\u0d81\u0d82\u0005\u0457\u0000\u0000\u0d82\u0d83"+
		"\u0003\u0250\u0128\u0000\u0d83\u0d84\u0005\u0458\u0000\u0000\u0d84\u0d87"+
		"\u0001\u0000\u0000\u0000\u0d85\u0d87\u0007-\u0000\u0000\u0d86\u0d80\u0001"+
		"\u0000\u0000\u0000\u0d86\u0d85\u0001\u0000\u0000\u0000\u0d87\u0d8a\u0001"+
		"\u0000\u0000\u0000\u0d88\u0d89\u0005\u00b8\u0000\u0000\u0d89\u0d8b\u0003"+
		"\u0288\u0144\u0000\u0d8a\u0d88\u0001\u0000\u0000\u0000\u0d8a\u0d8b\u0001"+
		"\u0000\u0000\u0000\u0d8b\u0d8e\u0001\u0000\u0000\u0000\u0d8c\u0d8d\u0005"+
		"b\u0000\u0000\u0d8d\u0d8f\u0003\u0114\u008a\u0000\u0d8e\u0d8c\u0001\u0000"+
		"\u0000\u0000\u0d8e\u0d8f\u0001\u0000\u0000\u0000\u0d8f\u00d7\u0001\u0000"+
		"\u0000\u0000\u0d90\u0d91\u0005\u01ad\u0000\u0000\u0d91\u0d92\u0003\u020c"+
		"\u0106\u0000\u0d92\u0d93\u0005\u0083\u0000\u0000\u0d93\u0d96\u0007.\u0000"+
		"\u0000\u0d94\u0d95\u0005\u00b8\u0000\u0000\u0d95\u0d97\u0003\u0288\u0144"+
		"\u0000\u0d96\u0d94\u0001\u0000\u0000\u0000\u0d96\u0d97\u0001\u0000\u0000"+
		"\u0000\u0d97\u0d9a\u0001\u0000\u0000\u0000\u0d98\u0d99\u0005b\u0000\u0000"+
		"\u0d99\u0d9b\u0003\u0114\u008a\u0000\u0d9a\u0d98\u0001\u0000\u0000\u0000"+
		"\u0d9a\u0d9b\u0001\u0000\u0000\u0000\u0d9b\u00d9\u0001\u0000\u0000\u0000"+
		"\u0d9c\u0d9d\u0005\u01ad\u0000\u0000\u0d9d\u0d9e\u0003\u020c\u0106\u0000"+
		"\u0d9e\u0d9f\u0005\u0160\u0000\u0000\u0d9f\u00db\u0001\u0000\u0000\u0000"+
		"\u0da0\u0da2\u0005\u00b2\u0000\u0000\u0da1\u0da3\u0005h\u0000\u0000\u0da2"+
		"\u0da1\u0001\u0000\u0000\u0000\u0da2\u0da3\u0001\u0000\u0000\u0000\u0da3"+
		"\u0da5\u0001\u0000\u0000\u0000\u0da4\u0da6\u0005N\u0000\u0000\u0da5\u0da4"+
		"\u0001\u0000\u0000\u0000\u0da5\u0da6\u0001\u0000\u0000\u0000\u0da6\u0da7"+
		"\u0001\u0000\u0000\u0000\u0da7\u0dac\u0003\u020c\u0106\u0000\u0da8\u0daa"+
		"\u0005\f\u0000\u0000\u0da9\u0da8\u0001\u0000\u0000\u0000\u0da9\u0daa\u0001"+
		"\u0000\u0000\u0000\u0daa\u0dab\u0001\u0000\u0000\u0000\u0dab\u0dad\u0003"+
		"\u0226\u0113\u0000\u0dac\u0da9\u0001\u0000\u0000\u0000\u0dac\u0dad\u0001"+
		"\u0000\u0000\u0000\u0dad\u0dae\u0001\u0000\u0000\u0000\u0dae\u0daf\u0005"+
		"\u0096\u0000\u0000\u0daf\u0db4\u0003\u00cae\u0000\u0db0\u0db1\u0005\u0459"+
		"\u0000\u0000\u0db1\u0db3\u0003\u00cae\u0000\u0db2\u0db0\u0001\u0000\u0000"+
		"\u0000\u0db3\u0db6\u0001\u0000\u0000\u0000\u0db4\u0db2\u0001\u0000\u0000"+
		"\u0000\u0db4\u0db5\u0001\u0000\u0000\u0000\u0db5\u0db9\u0001\u0000\u0000"+
		"\u0000\u0db6\u0db4\u0001\u0000\u0000\u0000\u0db7\u0db8\u0005\u00b8\u0000"+
		"\u0000\u0db8\u0dba\u0003\u0288\u0144\u0000\u0db9\u0db7\u0001\u0000\u0000"+
		"\u0000\u0db9\u0dba\u0001\u0000\u0000\u0000\u0dba\u0dbc\u0001\u0000\u0000"+
		"\u0000\u0dbb\u0dbd\u0003\u00e0p\u0000\u0dbc\u0dbb\u0001\u0000\u0000\u0000"+
		"\u0dbc\u0dbd\u0001\u0000\u0000\u0000\u0dbd\u0dbf\u0001\u0000\u0000\u0000"+
		"\u0dbe\u0dc0\u0003\u0112\u0089\u0000\u0dbf\u0dbe\u0001\u0000\u0000\u0000"+
		"\u0dbf\u0dc0\u0001\u0000\u0000\u0000\u0dc0\u00dd\u0001\u0000\u0000\u0000"+
		"\u0dc1\u0dc3\u0005\u00b2\u0000\u0000\u0dc2\u0dc4\u0005h\u0000\u0000\u0dc3"+
		"\u0dc2\u0001\u0000\u0000\u0000\u0dc3\u0dc4\u0001\u0000\u0000\u0000\u0dc4"+
		"\u0dc6\u0001\u0000\u0000\u0000\u0dc5\u0dc7\u0005N\u0000\u0000\u0dc6\u0dc5"+
		"\u0001\u0000\u0000\u0000\u0dc6\u0dc7\u0001\u0000\u0000\u0000\u0dc7\u0dc8"+
		"\u0001\u0000\u0000\u0000\u0dc8\u0dc9\u0003\u00e4r\u0000\u0dc9\u0dca\u0005"+
		"\u0096\u0000\u0000\u0dca\u0dcf\u0003\u00cae\u0000\u0dcb\u0dcc\u0005\u0459"+
		"\u0000\u0000\u0dcc\u0dce\u0003\u00cae\u0000\u0dcd\u0dcb\u0001\u0000\u0000"+
		"\u0000\u0dce\u0dd1\u0001\u0000\u0000\u0000\u0dcf\u0dcd\u0001\u0000\u0000"+
		"\u0000\u0dcf\u0dd0\u0001\u0000\u0000\u0000\u0dd0\u0dd4\u0001\u0000\u0000"+
		"\u0000\u0dd1\u0dcf\u0001\u0000\u0000\u0000\u0dd2\u0dd3\u0005\u00b8\u0000"+
		"\u0000\u0dd3\u0dd5\u0003\u0288\u0144\u0000\u0dd4\u0dd2\u0001\u0000\u0000"+
		"\u0000\u0dd4\u0dd5\u0001\u0000\u0000\u0000\u0dd5\u00df\u0001\u0000\u0000"+
		"\u0000\u0dd6\u0dd7\u0005y\u0000\u0000\u0dd7\u0dd8\u0005\u0012\u0000\u0000"+
		"\u0dd8\u0ddd\u0003\u00e2q\u0000\u0dd9\u0dda\u0005\u0459\u0000\u0000\u0dda"+
		"\u0ddc\u0003\u00e2q\u0000\u0ddb\u0dd9\u0001\u0000\u0000\u0000\u0ddc\u0ddf"+
		"\u0001\u0000\u0000\u0000\u0ddd\u0ddb\u0001\u0000\u0000\u0000\u0ddd\u0dde"+
		"\u0001\u0000\u0000\u0000\u0dde\u00e1\u0001\u0000\u0000\u0000\u0ddf\u0ddd"+
		"\u0001\u0000\u0000\u0000\u0de0\u0de2\u0003\u0288\u0144\u0000\u0de1\u0de3"+
		"\u0007/\u0000\u0000\u0de2\u0de1\u0001\u0000\u0000\u0000\u0de2\u0de3\u0001"+
		"\u0000\u0000\u0000\u0de3\u00e3\u0001\u0000\u0000\u0000\u0de4\u0de9\u0003"+
		"\u00e6s\u0000\u0de5\u0de6\u0005\u0459\u0000\u0000\u0de6\u0de8\u0003\u00e6"+
		"s\u0000\u0de7\u0de5\u0001\u0000\u0000\u0000\u0de8\u0deb\u0001\u0000\u0000"+
		"\u0000\u0de9\u0de7\u0001\u0000\u0000\u0000\u0de9\u0dea\u0001\u0000\u0000"+
		"\u0000\u0dea\u00e5\u0001\u0000\u0000\u0000\u0deb\u0de9\u0001\u0000\u0000"+
		"\u0000\u0dec\u0df0\u0003\u00e8t\u0000\u0ded\u0def\u0003\u00eew\u0000\u0dee"+
		"\u0ded\u0001\u0000\u0000\u0000\u0def\u0df2\u0001\u0000\u0000\u0000\u0df0"+
		"\u0dee\u0001\u0000\u0000\u0000\u0df0\u0df1\u0001\u0000\u0000\u0000\u0df1"+
		"\u0dfe\u0001\u0000\u0000\u0000\u0df2\u0df0\u0001\u0000\u0000\u0000\u0df3"+
		"\u0df4\u0005\u0457\u0000\u0000\u0df4\u0df8\u0003\u00e8t\u0000\u0df5\u0df7"+
		"\u0003\u00eew\u0000\u0df6\u0df5\u0001\u0000\u0000\u0000\u0df7\u0dfa\u0001"+
		"\u0000\u0000\u0000\u0df8\u0df6\u0001\u0000\u0000\u0000\u0df8\u0df9\u0001"+
		"\u0000\u0000\u0000\u0df9\u0dfb\u0001\u0000\u0000\u0000\u0dfa\u0df8\u0001"+
		"\u0000\u0000\u0000\u0dfb\u0dfc\u0005\u0458\u0000\u0000\u0dfc\u0dfe\u0001"+
		"\u0000\u0000\u0000\u0dfd\u0dec\u0001\u0000\u0000\u0000\u0dfd\u0df3\u0001"+
		"\u0000\u0000\u0000\u0dfe\u00e7\u0001\u0000\u0000\u0000\u0dff\u0e05\u0003"+
		"\u020c\u0106\u0000\u0e00\u0e01\u0005~\u0000\u0000\u0e01\u0e02\u0005\u0457"+
		"\u0000\u0000\u0e02\u0e03\u0003\u0246\u0123\u0000\u0e03\u0e04\u0005\u0458"+
		"\u0000\u0000\u0e04\u0e06\u0001\u0000\u0000\u0000\u0e05\u0e00\u0001\u0000"+
		"\u0000\u0000\u0e05\u0e06\u0001\u0000\u0000\u0000\u0e06\u0e0b\u0001\u0000"+
		"\u0000\u0000\u0e07\u0e09\u0005\f\u0000\u0000\u0e08\u0e07\u0001\u0000\u0000"+
		"\u0000\u0e08\u0e09\u0001\u0000\u0000\u0000\u0e09\u0e0a\u0001\u0000\u0000"+
		"\u0000\u0e0a\u0e0c\u0003\u0226\u0113\u0000\u0e0b\u0e08\u0001\u0000\u0000"+
		"\u0000\u0e0b\u0e0c\u0001\u0000\u0000\u0000\u0e0c\u0e15\u0001\u0000\u0000"+
		"\u0000\u0e0d\u0e12\u0003\u00eau\u0000\u0e0e\u0e0f\u0005\u0459\u0000\u0000"+
		"\u0e0f\u0e11\u0003\u00eau\u0000\u0e10\u0e0e\u0001\u0000\u0000\u0000\u0e11"+
		"\u0e14\u0001\u0000\u0000\u0000\u0e12\u0e10\u0001\u0000\u0000\u0000\u0e12"+
		"\u0e13\u0001\u0000\u0000\u0000\u0e13\u0e16\u0001\u0000\u0000\u0000\u0e14"+
		"\u0e12\u0001\u0000\u0000\u0000\u0e15\u0e0d\u0001\u0000\u0000\u0000\u0e15"+
		"\u0e16\u0001\u0000\u0000\u0000\u0e16\u0e28\u0001\u0000\u0000\u0000\u0e17"+
		"\u0e1d\u0003\u00c4b\u0000\u0e18\u0e19\u0005\u0457\u0000\u0000\u0e19\u0e1a"+
		"\u0003\u00c4b\u0000\u0e1a\u0e1b\u0005\u0458\u0000\u0000\u0e1b\u0e1d\u0001"+
		"\u0000\u0000\u0000\u0e1c\u0e17\u0001\u0000\u0000\u0000\u0e1c\u0e18\u0001"+
		"\u0000\u0000\u0000\u0e1d\u0e1f\u0001\u0000\u0000\u0000\u0e1e\u0e20\u0005"+
		"\f\u0000\u0000\u0e1f\u0e1e\u0001\u0000\u0000\u0000\u0e1f\u0e20\u0001\u0000"+
		"\u0000\u0000\u0e20\u0e21\u0001\u0000\u0000\u0000\u0e21\u0e22\u0003\u0226"+
		"\u0113\u0000\u0e22\u0e28\u0001\u0000\u0000\u0000\u0e23\u0e24\u0005\u0457"+
		"\u0000\u0000\u0e24\u0e25\u0003\u00e4r\u0000\u0e25\u0e26\u0005\u0458\u0000"+
		"\u0000\u0e26\u0e28\u0001\u0000\u0000\u0000\u0e27\u0dff\u0001\u0000\u0000"+
		"\u0000\u0e27\u0e1c\u0001\u0000\u0000\u0000\u0e27\u0e23\u0001\u0000\u0000"+
		"\u0000\u0e28\u00e9\u0001\u0000\u0000\u0000\u0e29\u0e2a\u00070\u0000\u0000"+
		"\u0e2a\u0e2d\u0007\u0014\u0000\u0000\u0e2b\u0e2c\u0005A\u0000\u0000\u0e2c"+
		"\u0e2e\u0003\u00ecv\u0000\u0e2d\u0e2b\u0001\u0000\u0000\u0000\u0e2d\u0e2e"+
		"\u0001\u0000\u0000\u0000\u0e2e\u0e2f\u0001\u0000\u0000\u0000\u0e2f\u0e30"+
		"\u0005\u0457\u0000\u0000\u0e30\u0e31\u0003\u0246\u0123\u0000\u0e31\u0e32"+
		"\u0005\u0458\u0000\u0000\u0e32\u00eb\u0001\u0000\u0000\u0000\u0e33\u0e39"+
		"\u0005Z\u0000\u0000\u0e34\u0e35\u0005y\u0000\u0000\u0e35\u0e39\u0005\u0012"+
		"\u0000\u0000\u0e36\u0e37\u0005I\u0000\u0000\u0e37\u0e39\u0005\u0012\u0000"+
		"\u0000\u0e38\u0e33\u0001\u0000\u0000\u0000\u0e38\u0e34\u0001\u0000\u0000"+
		"\u0000\u0e38\u0e36\u0001\u0000\u0000\u0000\u0e39\u00ed\u0001\u0000\u0000"+
		"\u0000\u0e3a\u0e3c\u00071\u0000\u0000\u0e3b\u0e3a\u0001\u0000\u0000\u0000"+
		"\u0e3b\u0e3c\u0001\u0000\u0000\u0000\u0e3c\u0e3d\u0001\u0000\u0000\u0000"+
		"\u0e3d\u0e3e\u0005Z\u0000\u0000\u0e3e\u0e46\u0003\u00e8t\u0000\u0e3f\u0e40"+
		"\u0005s\u0000\u0000\u0e40\u0e47\u0003\u0288\u0144\u0000\u0e41\u0e42\u0005"+
		"\u00b5\u0000\u0000\u0e42\u0e43\u0005\u0457\u0000\u0000\u0e43\u0e44\u0003"+
		"\u0246\u0123\u0000\u0e44\u0e45\u0005\u0458\u0000\u0000\u0e45\u0e47\u0001"+
		"\u0000\u0000\u0000\u0e46\u0e3f\u0001\u0000\u0000\u0000\u0e46\u0e41\u0001"+
		"\u0000\u0000\u0000\u0e46\u0e47\u0001\u0000\u0000\u0000\u0e47\u0e67\u0001"+
		"\u0000\u0000\u0000\u0e48\u0e49\u0005\u00a5\u0000\u0000\u0e49\u0e4c\u0003"+
		"\u00e8t\u0000\u0e4a\u0e4b\u0005s\u0000\u0000\u0e4b\u0e4d\u0003\u0288\u0144"+
		"\u0000\u0e4c\u0e4a\u0001\u0000\u0000\u0000\u0e4c\u0e4d\u0001\u0000\u0000"+
		"\u0000\u0e4d\u0e67\u0001\u0000\u0000\u0000\u0e4e\u0e50\u00072\u0000\u0000"+
		"\u0e4f\u0e51\u0005|\u0000\u0000\u0e50\u0e4f\u0001\u0000\u0000\u0000\u0e50"+
		"\u0e51\u0001\u0000\u0000\u0000\u0e51\u0e52\u0001\u0000\u0000\u0000\u0e52"+
		"\u0e53\u0005Z\u0000\u0000\u0e53\u0e5b\u0003\u00e8t\u0000\u0e54\u0e55\u0005"+
		"s\u0000\u0000\u0e55\u0e5c\u0003\u0288\u0144\u0000\u0e56\u0e57\u0005\u00b5"+
		"\u0000\u0000\u0e57\u0e58\u0005\u0457\u0000\u0000\u0e58\u0e59\u0003\u0246"+
		"\u0123\u0000\u0e59\u0e5a\u0005\u0458\u0000\u0000\u0e5a\u0e5c\u0001\u0000"+
		"\u0000\u0000\u0e5b\u0e54\u0001\u0000\u0000\u0000\u0e5b\u0e56\u0001\u0000"+
		"\u0000\u0000\u0e5c\u0e67\u0001\u0000\u0000\u0000\u0e5d\u0e62\u0005n\u0000"+
		"\u0000\u0e5e\u0e60\u00072\u0000\u0000\u0e5f\u0e61\u0005|\u0000\u0000\u0e60"+
		"\u0e5f\u0001\u0000\u0000\u0000\u0e60\u0e61\u0001\u0000\u0000\u0000\u0e61"+
		"\u0e63\u0001\u0000\u0000\u0000\u0e62\u0e5e\u0001\u0000\u0000\u0000\u0e62"+
		"\u0e63\u0001\u0000\u0000\u0000\u0e63\u0e64\u0001\u0000\u0000\u0000\u0e64"+
		"\u0e65\u0005Z\u0000\u0000\u0e65\u0e67\u0003\u00e8t\u0000\u0e66\u0e3b\u0001"+
		"\u0000\u0000\u0000\u0e66\u0e48\u0001\u0000\u0000\u0000\u0e66\u0e4e\u0001"+
		"\u0000\u0000\u0000\u0e66\u0e5d\u0001\u0000\u0000\u0000\u0e67\u00ef\u0001"+
		"\u0000\u0000\u0000\u0e68\u0e69\u0005\u0457\u0000\u0000\u0e69\u0e6a\u0003"+
		"\u00f4z\u0000\u0e6a\u0e6b\u0005\u0458\u0000\u0000\u0e6b\u0e71\u0001\u0000"+
		"\u0000\u0000\u0e6c\u0e6d\u0005\u0457\u0000\u0000\u0e6d\u0e6e\u0003\u00f0"+
		"x\u0000\u0e6e\u0e6f\u0005\u0458\u0000\u0000\u0e6f\u0e71\u0001\u0000\u0000"+
		"\u0000\u0e70\u0e68\u0001\u0000\u0000\u0000\u0e70\u0e6c\u0001\u0000\u0000"+
		"\u0000\u0e71\u00f1\u0001\u0000\u0000\u0000\u0e72\u0e73\u0005\u0457\u0000"+
		"\u0000\u0e73\u0e74\u0003\u00f6{\u0000\u0e74\u0e75\u0005\u0458\u0000\u0000"+
		"\u0e75\u0e7b\u0001\u0000\u0000\u0000\u0e76\u0e77\u0005\u0457\u0000\u0000"+
		"\u0e77\u0e78\u0003\u00f2y\u0000\u0e78\u0e79\u0005\u0458\u0000\u0000\u0e79"+
		"\u0e7b\u0001\u0000\u0000\u0000\u0e7a\u0e72\u0001\u0000\u0000\u0000\u0e7a"+
		"\u0e76\u0001\u0000\u0000\u0000\u0e7b\u00f3\u0001\u0000\u0000\u0000\u0e7c"+
		"\u0e80\u0005\u0095\u0000\u0000\u0e7d\u0e7f\u0003\u00fc~\u0000\u0e7e\u0e7d"+
		"\u0001\u0000\u0000\u0000\u0e7f\u0e82\u0001\u0000\u0000\u0000\u0e80\u0e7e"+
		"\u0001\u0000\u0000\u0000\u0e80\u0e81\u0001\u0000\u0000\u0000\u0e81\u0e83"+
		"\u0001\u0000\u0000\u0000\u0e82\u0e80\u0001\u0000\u0000\u0000\u0e83\u0e85"+
		"\u0003\u00fe\u007f\u0000\u0e84\u0e86\u0003\u0102\u0081\u0000\u0e85\u0e84"+
		"\u0001\u0000\u0000\u0000\u0e85\u0e86\u0001\u0000\u0000\u0000\u0e86\u0e88"+
		"\u0001\u0000\u0000\u0000\u0e87\u0e89\u0003\u0108\u0084\u0000\u0e88\u0e87"+
		"\u0001\u0000\u0000\u0000\u0e88\u0e89\u0001\u0000\u0000\u0000\u0e89\u0e8b"+
		"\u0001\u0000\u0000\u0000\u0e8a\u0e8c\u0003\u010a\u0085\u0000\u0e8b\u0e8a"+
		"\u0001\u0000\u0000\u0000\u0e8b\u0e8c\u0001\u0000\u0000\u0000\u0e8c\u0e8e"+
		"\u0001\u0000\u0000\u0000\u0e8d\u0e8f\u0003\u010c\u0086\u0000\u0e8e\u0e8d"+
		"\u0001\u0000\u0000\u0000\u0e8e\u0e8f\u0001\u0000\u0000\u0000\u0e8f\u0e91"+
		"\u0001\u0000\u0000\u0000\u0e90\u0e92\u0003\u010e\u0087\u0000\u0e91\u0e90"+
		"\u0001\u0000\u0000\u0000\u0e91\u0e92\u0001\u0000\u0000\u0000\u0e92\u0e94"+
		"\u0001\u0000\u0000\u0000\u0e93\u0e95\u0003\u00e0p\u0000\u0e94\u0e93\u0001"+
		"\u0000\u0000\u0000\u0e94\u0e95\u0001\u0000\u0000\u0000\u0e95\u0e97\u0001"+
		"\u0000\u0000\u0000\u0e96\u0e98\u0003\u0112\u0089\u0000\u0e97\u0e96\u0001"+
		"\u0000\u0000\u0000\u0e97\u0e98\u0001\u0000\u0000\u0000\u0e98\u0eb7\u0001"+
		"\u0000\u0000\u0000\u0e99\u0e9d\u0005\u0095\u0000\u0000\u0e9a\u0e9c\u0003"+
		"\u00fc~\u0000\u0e9b\u0e9a\u0001\u0000\u0000\u0000\u0e9c\u0e9f\u0001\u0000"+
		"\u0000\u0000\u0e9d\u0e9b\u0001\u0000\u0000\u0000\u0e9d\u0e9e\u0001\u0000"+
		"\u0000\u0000\u0e9e\u0ea0\u0001\u0000\u0000\u0000\u0e9f\u0e9d\u0001\u0000"+
		"\u0000\u0000\u0ea0\u0ea2\u0003\u00fe\u007f\u0000\u0ea1\u0ea3\u0003\u0108"+
		"\u0084\u0000\u0ea2\u0ea1\u0001\u0000\u0000\u0000\u0ea2\u0ea3\u0001\u0000"+
		"\u0000\u0000\u0ea3\u0ea5\u0001\u0000\u0000\u0000\u0ea4\u0ea6\u0003\u010a"+
		"\u0085\u0000\u0ea5\u0ea4\u0001\u0000\u0000\u0000\u0ea5\u0ea6\u0001\u0000"+
		"\u0000\u0000\u0ea6\u0ea8\u0001\u0000\u0000\u0000\u0ea7\u0ea9\u0003\u010c"+
		"\u0086\u0000\u0ea8\u0ea7\u0001\u0000\u0000\u0000\u0ea8\u0ea9\u0001\u0000"+
		"\u0000\u0000\u0ea9\u0eab\u0001\u0000\u0000\u0000\u0eaa\u0eac\u0003\u010e"+
		"\u0087\u0000\u0eab\u0eaa\u0001\u0000\u0000\u0000\u0eab\u0eac\u0001\u0000"+
		"\u0000\u0000\u0eac\u0eae\u0001\u0000\u0000\u0000\u0ead\u0eaf\u0003\u00e0"+
		"p\u0000\u0eae\u0ead\u0001\u0000\u0000\u0000\u0eae\u0eaf\u0001\u0000\u0000"+
		"\u0000\u0eaf\u0eb1\u0001\u0000\u0000\u0000\u0eb0\u0eb2\u0003\u0112\u0089"+
		"\u0000\u0eb1\u0eb0\u0001\u0000\u0000\u0000\u0eb1\u0eb2\u0001\u0000\u0000"+
		"\u0000\u0eb2\u0eb4\u0001\u0000\u0000\u0000\u0eb3\u0eb5\u0003\u0102\u0081"+
		"\u0000\u0eb4\u0eb3\u0001\u0000\u0000\u0000\u0eb4\u0eb5\u0001\u0000\u0000"+
		"\u0000\u0eb5\u0eb7\u0001\u0000\u0000\u0000\u0eb6\u0e7c\u0001\u0000\u0000"+
		"\u0000\u0eb6\u0e99\u0001\u0000\u0000\u0000\u0eb7\u00f5\u0001\u0000\u0000"+
		"\u0000\u0eb8\u0ebc\u0005\u0095\u0000\u0000\u0eb9\u0ebb\u0003\u00fc~\u0000"+
		"\u0eba\u0eb9\u0001\u0000\u0000\u0000\u0ebb\u0ebe\u0001\u0000\u0000\u0000"+
		"\u0ebc\u0eba\u0001\u0000\u0000\u0000\u0ebc\u0ebd\u0001\u0000\u0000\u0000"+
		"\u0ebd\u0ebf\u0001\u0000\u0000\u0000\u0ebe\u0ebc\u0001\u0000\u0000\u0000"+
		"\u0ebf\u0ec1\u0003\u00fe\u007f\u0000\u0ec0\u0ec2\u0003\u0108\u0084\u0000"+
		"\u0ec1\u0ec0\u0001\u0000\u0000\u0000\u0ec1\u0ec2\u0001\u0000\u0000\u0000"+
		"\u0ec2\u0ec4\u0001\u0000\u0000\u0000\u0ec3\u0ec5\u0003\u010a\u0085\u0000"+
		"\u0ec4\u0ec3\u0001\u0000\u0000\u0000\u0ec4\u0ec5\u0001\u0000\u0000\u0000"+
		"\u0ec5\u0ec7\u0001\u0000\u0000\u0000\u0ec6\u0ec8\u0003\u010c\u0086\u0000"+
		"\u0ec7\u0ec6\u0001\u0000\u0000\u0000\u0ec7\u0ec8\u0001\u0000\u0000\u0000"+
		"\u0ec8\u0eca\u0001\u0000\u0000\u0000\u0ec9\u0ecb\u0003\u010e\u0087\u0000"+
		"\u0eca\u0ec9\u0001\u0000\u0000\u0000\u0eca\u0ecb\u0001\u0000\u0000\u0000"+
		"\u0ecb\u0ecd\u0001\u0000\u0000\u0000\u0ecc\u0ece\u0003\u00e0p\u0000\u0ecd"+
		"\u0ecc\u0001\u0000\u0000\u0000\u0ecd\u0ece\u0001\u0000\u0000\u0000\u0ece"+
		"\u0ed0\u0001\u0000\u0000\u0000\u0ecf\u0ed1\u0003\u0112\u0089\u0000\u0ed0"+
		"\u0ecf\u0001\u0000\u0000\u0000\u0ed0\u0ed1\u0001\u0000\u0000\u0000\u0ed1"+
		"\u00f7\u0001\u0000\u0000\u0000\u0ed2\u0ed4\u0005\u00ae\u0000\u0000\u0ed3"+
		"\u0ed5\u0007+\u0000\u0000\u0ed4\u0ed3\u0001\u0000\u0000\u0000\u0ed4\u0ed5"+
		"\u0001\u0000\u0000\u0000\u0ed5\u0ed6\u0001\u0000\u0000\u0000\u0ed6\u0ed7"+
		"\u0003\u00f2y\u0000\u0ed7\u00f9\u0001\u0000\u0000\u0000\u0ed8\u0eda\u0005"+
		"\u00ae\u0000\u0000\u0ed9\u0edb\u0007+\u0000\u0000\u0eda\u0ed9\u0001\u0000"+
		"\u0000\u0000\u0eda\u0edb\u0001\u0000\u0000\u0000\u0edb\u0ede\u0001\u0000"+
		"\u0000\u0000\u0edc\u0edf\u0003\u00f6{\u0000\u0edd\u0edf\u0003\u00f2y\u0000"+
		"\u0ede\u0edc\u0001\u0000\u0000\u0000\u0ede\u0edd\u0001\u0000\u0000\u0000"+
		"\u0edf\u00fb\u0001\u0000\u0000\u0000\u0ee0\u0ee9\u00073\u0000\u0000\u0ee1"+
		"\u0ee9\u0005K\u0000\u0000\u0ee2\u0ee9\u0005\u00a5\u0000\u0000\u0ee3\u0ee9"+
		"\u0005\u00a1\u0000\u0000\u0ee4\u0ee9\u0005\u009f\u0000\u0000\u0ee5\u0ee9"+
		"\u0005\u0258\u0000\u0000\u0ee6\u0ee9\u00074\u0000\u0000\u0ee7\u0ee9\u0005"+
		"\u00a0\u0000\u0000\u0ee8\u0ee0\u0001\u0000\u0000\u0000\u0ee8\u0ee1\u0001"+
		"\u0000\u0000\u0000\u0ee8\u0ee2\u0001\u0000\u0000\u0000\u0ee8\u0ee3\u0001"+
		"\u0000\u0000\u0000\u0ee8\u0ee4\u0001\u0000\u0000\u0000\u0ee8\u0ee5\u0001"+
		"\u0000\u0000\u0000\u0ee8\u0ee6\u0001\u0000\u0000\u0000\u0ee8\u0ee7\u0001"+
		"\u0000\u0000\u0000\u0ee9\u00fd\u0001\u0000\u0000\u0000\u0eea\u0eed\u0005"+
		"\u0447\u0000\u0000\u0eeb\u0eed\u0003\u0100\u0080\u0000\u0eec\u0eea\u0001"+
		"\u0000\u0000\u0000\u0eec\u0eeb\u0001\u0000\u0000\u0000\u0eed\u0ef2\u0001"+
		"\u0000\u0000\u0000\u0eee\u0eef\u0005\u0459\u0000\u0000\u0eef\u0ef1\u0003"+
		"\u0100\u0080\u0000\u0ef0\u0eee\u0001\u0000\u0000\u0000\u0ef1\u0ef4\u0001"+
		"\u0000\u0000\u0000\u0ef2\u0ef0\u0001\u0000\u0000\u0000\u0ef2\u0ef3\u0001"+
		"\u0000\u0000\u0000\u0ef3\u00ff\u0001\u0000\u0000\u0000\u0ef4\u0ef2\u0001"+
		"\u0000\u0000\u0000\u0ef5\u0ef6\u0003\u020a\u0105\u0000\u0ef6\u0ef7\u0005"+
		"\u0456\u0000\u0000\u0ef7\u0ef8\u0005\u0447\u0000\u0000\u0ef8\u0f13\u0001"+
		"\u0000\u0000\u0000\u0ef9\u0efe\u0003\u0210\u0108\u0000\u0efa\u0efc\u0005"+
		"\f\u0000\u0000\u0efb\u0efa\u0001\u0000\u0000\u0000\u0efb\u0efc\u0001\u0000"+
		"\u0000\u0000\u0efc\u0efd\u0001\u0000\u0000\u0000\u0efd\u0eff\u0003\u0226"+
		"\u0113\u0000\u0efe\u0efb\u0001\u0000\u0000\u0000\u0efe\u0eff\u0001\u0000"+
		"\u0000\u0000\u0eff\u0f13\u0001\u0000\u0000\u0000\u0f00\u0f05\u0003\u0260"+
		"\u0130\u0000\u0f01\u0f03\u0005\f\u0000\u0000\u0f02\u0f01\u0001\u0000\u0000"+
		"\u0000\u0f02\u0f03\u0001\u0000\u0000\u0000\u0f03\u0f04\u0001\u0000\u0000"+
		"\u0000\u0f04\u0f06\u0003\u0226\u0113\u0000\u0f05\u0f02\u0001\u0000\u0000"+
		"\u0000\u0f05\u0f06\u0001\u0000\u0000\u0000\u0f06\u0f13\u0001\u0000\u0000"+
		"\u0000\u0f07\u0f08\u0005\u0473\u0000\u0000\u0f08\u0f0a\u0005\u043e\u0000"+
		"\u0000\u0f09\u0f07\u0001\u0000\u0000\u0000\u0f09\u0f0a\u0001\u0000\u0000"+
		"\u0000\u0f0a\u0f0b\u0001\u0000\u0000\u0000\u0f0b\u0f10\u0003\u0288\u0144"+
		"\u0000\u0f0c\u0f0e\u0005\f\u0000\u0000\u0f0d\u0f0c\u0001\u0000\u0000\u0000"+
		"\u0f0d\u0f0e\u0001\u0000\u0000\u0000\u0f0e\u0f0f\u0001\u0000\u0000\u0000"+
		"\u0f0f\u0f11\u0003\u0226\u0113\u0000\u0f10\u0f0d\u0001\u0000\u0000\u0000"+
		"\u0f10\u0f11\u0001\u0000\u0000\u0000\u0f11\u0f13\u0001\u0000\u0000\u0000"+
		"\u0f12\u0ef5\u0001\u0000\u0000\u0000\u0f12\u0ef9\u0001\u0000\u0000\u0000"+
		"\u0f12\u0f00\u0001\u0000\u0000\u0000\u0f12\u0f09\u0001\u0000\u0000\u0000"+
		"\u0f13\u0101\u0001\u0000\u0000\u0000\u0f14\u0f15\u0005W\u0000\u0000\u0f15"+
		"\u0f1a\u0003\u00ccf\u0000\u0f16\u0f17\u0005\u0459\u0000\u0000\u0f17\u0f19"+
		"\u0003\u00ccf\u0000\u0f18\u0f16\u0001\u0000\u0000\u0000\u0f19\u0f1c\u0001"+
		"\u0000\u0000\u0000\u0f1a\u0f18\u0001\u0000\u0000\u0000\u0f1a\u0f1b\u0001"+
		"\u0000\u0000\u0000\u0f1b\u0f39\u0001\u0000\u0000\u0000\u0f1c\u0f1a\u0001"+
		"\u0000\u0000\u0000\u0f1d\u0f1e\u0005W\u0000\u0000\u0f1e\u0f1f\u0005\u0186"+
		"\u0000\u0000\u0f1f\u0f39\u0005\u0466\u0000\u0000\u0f20\u0f21\u0005W\u0000"+
		"\u0000\u0f21\u0f22\u0005}\u0000\u0000\u0f22\u0f26\u0005\u0466\u0000\u0000"+
		"\u0f23\u0f24\u0005\u0018\u0000\u0000\u0f24\u0f25\u0005\u0096\u0000\u0000"+
		"\u0f25\u0f27\u0003\u0218\u010c\u0000\u0f26\u0f23\u0001\u0000\u0000\u0000"+
		"\u0f26\u0f27\u0001\u0000\u0000\u0000\u0f27\u0f2e\u0001\u0000\u0000\u0000"+
		"\u0f28\u0f2a\u0007(\u0000\u0000\u0f29\u0f2b\u0003\u0104\u0082\u0000\u0f2a"+
		"\u0f29\u0001\u0000\u0000\u0000\u0f2b\u0f2c\u0001\u0000\u0000\u0000\u0f2c"+
		"\u0f2a\u0001\u0000\u0000\u0000\u0f2c\u0f2d\u0001\u0000\u0000\u0000\u0f2d"+
		"\u0f2f\u0001\u0000\u0000\u0000\u0f2e\u0f28\u0001\u0000\u0000\u0000\u0f2e"+
		"\u0f2f\u0001\u0000\u0000\u0000\u0f2f\u0f36\u0001\u0000\u0000\u0000\u0f30"+
		"\u0f32\u0005d\u0000\u0000\u0f31\u0f33\u0003\u0106\u0083\u0000\u0f32\u0f31"+
		"\u0001\u0000\u0000\u0000\u0f33\u0f34\u0001\u0000\u0000\u0000\u0f34\u0f32"+
		"\u0001\u0000\u0000\u0000\u0f34\u0f35\u0001\u0000\u0000\u0000\u0f35\u0f37"+
		"\u0001\u0000\u0000\u0000\u0f36\u0f30\u0001\u0000\u0000\u0000\u0f36\u0f37"+
		"\u0001\u0000\u0000\u0000\u0f37\u0f39\u0001\u0000\u0000\u0000\u0f38\u0f14"+
		"\u0001\u0000\u0000\u0000\u0f38\u0f1d\u0001\u0000\u0000\u0000\u0f38\u0f20"+
		"\u0001\u0000\u0000\u0000\u0f39\u0103\u0001\u0000\u0000\u0000\u0f3a\u0f3b"+
		"\u0005\u00a7\u0000\u0000\u0f3b\u0f3c\u0005\u0012\u0000\u0000\u0f3c\u0f47"+
		"\u0005\u0466\u0000\u0000\u0f3d\u0f3f\u0005w\u0000\u0000\u0f3e\u0f3d\u0001"+
		"\u0000\u0000\u0000\u0f3e\u0f3f\u0001\u0000\u0000\u0000\u0f3f\u0f40\u0001"+
		"\u0000\u0000\u0000\u0f40\u0f41\u00056\u0000\u0000\u0f41\u0f42\u0005\u0012"+
		"\u0000\u0000\u0f42\u0f47\u0005\u0466\u0000\u0000\u0f43\u0f44\u00057\u0000"+
		"\u0000\u0f44\u0f45\u0005\u0012\u0000\u0000\u0f45\u0f47\u0005\u0466\u0000"+
		"\u0000\u0f46\u0f3a\u0001\u0000\u0000\u0000\u0f46\u0f3e\u0001\u0000\u0000"+
		"\u0000\u0f46\u0f43\u0001\u0000\u0000\u0000\u0f47\u0105\u0001\u0000\u0000"+
		"\u0000\u0f48\u0f49\u0005\u00a4\u0000\u0000\u0f49\u0f4a\u0005\u0012\u0000"+
		"\u0000\u0f4a\u0f4f\u0005\u0466\u0000\u0000\u0f4b\u0f4c\u0005\u00a7\u0000"+
		"\u0000\u0f4c\u0f4d\u0005\u0012\u0000\u0000\u0f4d\u0f4f\u0005\u0466\u0000"+
		"\u0000\u0f4e\u0f48\u0001\u0000\u0000\u0000\u0f4e\u0f4b\u0001\u0000\u0000"+
		"\u0000\u0f4f\u0107\u0001\u0000\u0000\u0000\u0f50\u0f51\u0005D\u0000\u0000"+
		"\u0f51\u0f53\u0003\u00e4r\u0000\u0f52\u0f50\u0001\u0000\u0000\u0000\u0f52"+
		"\u0f53\u0001\u0000\u0000\u0000\u0f53\u0f56\u0001\u0000\u0000\u0000\u0f54"+
		"\u0f55\u0005\u00b8\u0000\u0000\u0f55\u0f57\u0003\u0288\u0144\u0000\u0f56"+
		"\u0f54\u0001\u0000\u0000\u0000\u0f56\u0f57\u0001\u0000\u0000\u0000\u0f57"+
		"\u0109\u0001\u0000\u0000\u0000\u0f58\u0f59\u0005I\u0000\u0000\u0f59\u0f5a"+
		"\u0005\u0012\u0000\u0000\u0f5a\u0f5f\u0003\u0110\u0088\u0000\u0f5b\u0f5c"+
		"\u0005\u0459\u0000\u0000\u0f5c\u0f5e\u0003\u0110\u0088\u0000\u0f5d\u0f5b"+
		"\u0001\u0000\u0000\u0000\u0f5e\u0f61\u0001\u0000\u0000\u0000\u0f5f\u0f5d"+
		"\u0001\u0000\u0000\u0000\u0f5f\u0f60\u0001\u0000\u0000\u0000\u0f60\u0f64"+
		"\u0001\u0000\u0000\u0000\u0f61\u0f5f\u0001\u0000\u0000\u0000\u0f62\u0f63"+
		"\u0005\u00ba\u0000\u0000\u0f63\u0f65\u0005\u023e\u0000\u0000\u0f64\u0f62"+
		"\u0001\u0000\u0000\u0000\u0f64\u0f65\u0001\u0000\u0000\u0000\u0f65\u010b"+
		"\u0001\u0000\u0000\u0000\u0f66\u0f67\u0005J\u0000\u0000\u0f67\u0f68\u0003"+
		"\u0288\u0144\u0000\u0f68\u010d\u0001\u0000\u0000\u0000\u0f69\u0f6a\u0005"+
		"\u028b\u0000\u0000\u0f6a\u0f6b\u0003\u0272\u0139\u0000\u0f6b\u0f6c\u0005"+
		"\f\u0000\u0000\u0f6c\u0f6d\u0005\u0457\u0000\u0000\u0f6d\u0f6e\u0003\u0270"+
		"\u0138\u0000\u0f6e\u0f78\u0005\u0458\u0000\u0000\u0f6f\u0f70\u0005\u0459"+
		"\u0000\u0000\u0f70\u0f71\u0003\u0272\u0139\u0000\u0f71\u0f72\u0005\f\u0000"+
		"\u0000\u0f72\u0f73\u0005\u0457\u0000\u0000\u0f73\u0f74\u0003\u0270\u0138"+
		"\u0000\u0f74\u0f75\u0005\u0458\u0000\u0000\u0f75\u0f77\u0001\u0000\u0000"+
		"\u0000\u0f76\u0f6f\u0001\u0000\u0000\u0000\u0f77\u0f7a\u0001\u0000\u0000"+
		"\u0000\u0f78\u0f76\u0001\u0000\u0000\u0000\u0f78\u0f79\u0001\u0000\u0000"+
		"\u0000\u0f79\u010f\u0001\u0000\u0000\u0000\u0f7a\u0f78\u0001\u0000\u0000"+
		"\u0000\u0f7b\u0f7d\u0003\u0288\u0144\u0000\u0f7c\u0f7e\u0007/\u0000\u0000"+
		"\u0f7d\u0f7c\u0001\u0000\u0000\u0000\u0f7d\u0f7e\u0001\u0000\u0000\u0000"+
		"\u0f7e\u0111\u0001\u0000\u0000\u0000\u0f7f\u0f8a\u0005b\u0000\u0000\u0f80"+
		"\u0f81\u0003\u0114\u008a\u0000\u0f81\u0f82\u0005\u0459\u0000\u0000\u0f82"+
		"\u0f84\u0001\u0000\u0000\u0000\u0f83\u0f80\u0001\u0000\u0000\u0000\u0f83"+
		"\u0f84\u0001\u0000\u0000\u0000\u0f84\u0f85\u0001\u0000\u0000\u0000\u0f85"+
		"\u0f8b\u0003\u0114\u008a\u0000\u0f86\u0f87\u0003\u0114\u008a\u0000\u0f87"+
		"\u0f88\u0005\u0201\u0000\u0000\u0f88\u0f89\u0003\u0114\u008a\u0000\u0f89"+
		"\u0f8b\u0001\u0000\u0000\u0000\u0f8a\u0f83\u0001\u0000\u0000\u0000\u0f8a"+
		"\u0f86\u0001\u0000\u0000\u0000\u0f8b\u0113\u0001\u0000\u0000\u0000\u0f8c"+
		"\u0f90\u0003\u022c\u0116\u0000\u0f8d\u0f90\u0003\u0216\u010b\u0000\u0f8e"+
		"\u0f90\u0003\u0228\u0114\u0000\u0f8f\u0f8c\u0001\u0000\u0000\u0000\u0f8f"+
		"\u0f8d\u0001\u0000\u0000\u0000\u0f8f\u0f8e\u0001\u0000\u0000\u0000\u0f90"+
		"\u0115";
	private static final String _serializedATNSegment2 =
		"\u0001\u0000\u0000\u0000\u0f91\u0f92\u0005\u025c\u0000\u0000\u0f92\u0f9b"+
		"\u0005\u0274\u0000\u0000\u0f93\u0f98\u0003\u012c\u0096\u0000\u0f94\u0f95"+
		"\u0005\u0459\u0000\u0000\u0f95\u0f97\u0003\u012c\u0096\u0000\u0f96\u0f94"+
		"\u0001\u0000\u0000\u0000\u0f97\u0f9a\u0001\u0000\u0000\u0000\u0f98\u0f96"+
		"\u0001\u0000\u0000\u0000\u0f98\u0f99\u0001\u0000\u0000\u0000\u0f99\u0f9c"+
		"\u0001\u0000\u0000\u0000\u0f9a\u0f98\u0001\u0000\u0000\u0000\u0f9b\u0f93"+
		"\u0001\u0000\u0000\u0000\u0f9b\u0f9c\u0001\u0000\u0000\u0000\u0f9c\u0117"+
		"\u0001\u0000\u0000\u0000\u0f9d\u0f9f\u0005\u014f\u0000\u0000\u0f9e\u0fa0"+
		"\u0005\u028d\u0000\u0000\u0f9f\u0f9e\u0001\u0000\u0000\u0000\u0f9f\u0fa0"+
		"\u0001\u0000\u0000\u0000\u0fa0\u0119\u0001\u0000\u0000\u0000\u0fa1\u0fa3"+
		"\u0005\u0168\u0000\u0000\u0fa2\u0fa4\u0005\u028d\u0000\u0000\u0fa3\u0fa2"+
		"\u0001\u0000\u0000\u0000\u0fa3\u0fa4\u0001\u0000\u0000\u0000\u0fa4\u0faa"+
		"\u0001\u0000\u0000\u0000\u0fa5\u0fa7\u0005\n\u0000\u0000\u0fa6\u0fa8\u0005"+
		"\u01fa\u0000\u0000\u0fa7\u0fa6\u0001\u0000\u0000\u0000\u0fa7\u0fa8\u0001"+
		"\u0000\u0000\u0000\u0fa8\u0fa9\u0001\u0000\u0000\u0000\u0fa9\u0fab\u0005"+
		"\u0158\u0000\u0000\u0faa\u0fa5\u0001\u0000\u0000\u0000\u0faa\u0fab\u0001"+
		"\u0000\u0000\u0000\u0fab\u0fb0\u0001\u0000\u0000\u0000\u0fac\u0fae\u0005"+
		"\u01fa\u0000\u0000\u0fad\u0fac\u0001\u0000\u0000\u0000\u0fad\u0fae\u0001"+
		"\u0000\u0000\u0000\u0fae\u0faf\u0001\u0000\u0000\u0000\u0faf\u0fb1\u0005"+
		"\u0087\u0000\u0000\u0fb0\u0fad\u0001\u0000\u0000\u0000\u0fb0\u0fb1\u0001"+
		"\u0000\u0000\u0000\u0fb1\u011b\u0001\u0000\u0000\u0000\u0fb2\u0fb4\u0005"+
		"\u023d\u0000\u0000\u0fb3\u0fb5\u0005\u028d\u0000\u0000\u0fb4\u0fb3\u0001"+
		"\u0000\u0000\u0000\u0fb4\u0fb5\u0001\u0000\u0000\u0000\u0fb5\u0fbb\u0001"+
		"\u0000\u0000\u0000\u0fb6\u0fb8\u0005\n\u0000\u0000\u0fb7\u0fb9\u0005\u01fa"+
		"\u0000\u0000\u0fb8\u0fb7\u0001\u0000\u0000\u0000\u0fb8\u0fb9\u0001\u0000"+
		"\u0000\u0000\u0fb9\u0fba\u0001\u0000\u0000\u0000\u0fba\u0fbc\u0005\u0158"+
		"\u0000\u0000\u0fbb\u0fb6\u0001\u0000\u0000\u0000\u0fbb\u0fbc\u0001\u0000"+
		"\u0000\u0000\u0fbc\u0fc1\u0001\u0000\u0000\u0000\u0fbd\u0fbf\u0005\u01fa"+
		"\u0000\u0000\u0fbe\u0fbd\u0001\u0000\u0000\u0000\u0fbe\u0fbf\u0001\u0000"+
		"\u0000\u0000\u0fbf\u0fc0\u0001\u0000\u0000\u0000\u0fc0\u0fc2\u0005\u0087"+
		"\u0000\u0000\u0fc1\u0fbe\u0001\u0000\u0000\u0000\u0fc1\u0fc2\u0001\u0000"+
		"\u0000\u0000\u0fc2\u011d\u0001\u0000\u0000\u0000\u0fc3\u0fc4\u0005\u0244"+
		"\u0000\u0000\u0fc4\u0fc5\u0003\u0226\u0113\u0000\u0fc5\u011f\u0001\u0000"+
		"\u0000\u0000\u0fc6\u0fc8\u0005\u023d\u0000\u0000\u0fc7\u0fc9\u0005\u028d"+
		"\u0000\u0000\u0fc8\u0fc7\u0001\u0000\u0000\u0000\u0fc8\u0fc9\u0001\u0000"+
		"\u0000\u0000\u0fc9\u0fca\u0001\u0000\u0000\u0000\u0fca\u0fcc\u0005\u00a9"+
		"\u0000\u0000\u0fcb\u0fcd\u0005\u0244\u0000\u0000\u0fcc\u0fcb\u0001\u0000"+
		"\u0000\u0000\u0fcc\u0fcd\u0001\u0000\u0000\u0000\u0fcd\u0fce\u0001\u0000"+
		"\u0000\u0000\u0fce\u0fcf\u0003\u0226\u0113\u0000\u0fcf\u0121\u0001\u0000"+
		"\u0000\u0000\u0fd0\u0fd1\u0005\u0087\u0000\u0000\u0fd1\u0fd2\u0005\u0244"+
		"\u0000\u0000\u0fd2\u0fd3\u0003\u0226\u0113\u0000\u0fd3\u0123\u0001\u0000"+
		"\u0000\u0000\u0fd4\u0fd5\u0005f\u0000\u0000\u0fd5\u0fd6\u0005\u02a0\u0000"+
		"\u0000\u0fd6\u0fdb\u0003\u012e\u0097\u0000\u0fd7\u0fd8\u0005\u0459\u0000"+
		"\u0000\u0fd8\u0fda\u0003\u012e\u0097\u0000\u0fd9\u0fd7\u0001\u0000\u0000"+
		"\u0000\u0fda\u0fdd\u0001\u0000\u0000\u0000\u0fdb\u0fd9\u0001\u0000\u0000"+
		"\u0000\u0fdb\u0fdc\u0001\u0000\u0000\u0000\u0fdc\u0125\u0001\u0000\u0000"+
		"\u0000\u0fdd\u0fdb\u0001\u0000\u0000\u0000\u0fde\u0fdf\u0005\u00b0\u0000"+
		"\u0000\u0fdf\u0fe0\u0005\u02a0\u0000\u0000\u0fe0\u0127\u0001\u0000\u0000"+
		"\u0000\u0fe1\u0fe2\u0005\u0096\u0000\u0000\u0fe2\u0fe3\u0005\u014b\u0000"+
		"\u0000\u0fe3\u0fe4\u0005\u044e\u0000\u0000\u0fe4\u0fe5\u0007\u0018\u0000"+
		"\u0000\u0fe5\u0129\u0001\u0000\u0000\u0000\u0fe6\u0fe8\u0005\u0096\u0000"+
		"\u0000\u0fe7\u0fe9\u00075\u0000\u0000\u0fe8\u0fe7\u0001\u0000\u0000\u0000"+
		"\u0fe8\u0fe9\u0001\u0000\u0000\u0000\u0fe9\u0fea\u0001\u0000\u0000\u0000"+
		"\u0fea\u0feb\u0005\u0274\u0000\u0000\u0feb\u0ff0\u0003\u0132\u0099\u0000"+
		"\u0fec\u0fed\u0005\u0459\u0000\u0000\u0fed\u0fef\u0003\u0132\u0099\u0000"+
		"\u0fee\u0fec\u0001\u0000\u0000\u0000\u0fef\u0ff2\u0001\u0000\u0000\u0000"+
		"\u0ff0\u0fee\u0001\u0000\u0000\u0000\u0ff0\u0ff1\u0001\u0000\u0000\u0000"+
		"\u0ff1\u012b\u0001\u0000\u0000\u0000\u0ff2\u0ff0\u0001\u0000\u0000\u0000"+
		"\u0ff3\u0ff4\u0005\u00ba\u0000\u0000\u0ff4\u0ff5\u0005\u0170\u0000\u0000"+
		"\u0ff5\u0ffb\u0005\u024f\u0000\u0000\u0ff6\u0ff7\u0005\u0083\u0000\u0000"+
		"\u0ff7\u0ffb\u0005\u00bb\u0000\u0000\u0ff8\u0ff9\u0005\u0083\u0000\u0000"+
		"\u0ff9\u0ffb\u0005\u0207\u0000\u0000\u0ffa\u0ff3\u0001\u0000\u0000\u0000"+
		"\u0ffa\u0ff6\u0001\u0000\u0000\u0000\u0ffa\u0ff8\u0001\u0000\u0000\u0000"+
		"\u0ffb\u012d\u0001\u0000\u0000\u0000\u0ffc\u1001\u0003\u020c\u0106\u0000"+
		"\u0ffd\u0fff\u0005\f\u0000\u0000\u0ffe\u0ffd\u0001\u0000\u0000\u0000\u0ffe"+
		"\u0fff\u0001\u0000\u0000\u0000\u0fff\u1000\u0001\u0000\u0000\u0000\u1000"+
		"\u1002\u0003\u0226\u0113\u0000\u1001\u0ffe\u0001\u0000\u0000\u0000\u1001"+
		"\u1002\u0001\u0000\u0000\u0000\u1002\u1003\u0001\u0000\u0000\u0000\u1003"+
		"\u1004\u0003\u0130\u0098\u0000\u1004\u012f\u0001\u0000\u0000\u0000\u1005"+
		"\u1007\u0005\u0083\u0000\u0000\u1006\u1008\u0005\u01cb\u0000\u0000\u1007"+
		"\u1006\u0001\u0000\u0000\u0000\u1007\u1008\u0001\u0000\u0000\u0000\u1008"+
		"\u100e\u0001\u0000\u0000\u0000\u1009\u100b\u0005h\u0000\u0000\u100a\u1009"+
		"\u0001\u0000\u0000\u0000\u100a\u100b\u0001\u0000\u0000\u0000\u100b\u100c"+
		"\u0001\u0000\u0000\u0000\u100c\u100e\u0005\u00bb\u0000\u0000\u100d\u1005"+
		"\u0001\u0000\u0000\u0000\u100d\u100a\u0001\u0000\u0000\u0000\u100e\u0131"+
		"\u0001\u0000\u0000\u0000\u100f\u1010\u0005\u01c1\u0000\u0000\u1010\u1011"+
		"\u0005\u01c9\u0000\u0000\u1011\u1017\u0003\u0134\u009a\u0000\u1012\u1013"+
		"\u0005\u0083\u0000\u0000\u1013\u1017\u0005\u00bb\u0000\u0000\u1014\u1015"+
		"\u0005\u0083\u0000\u0000\u1015\u1017\u0005\u0207\u0000\u0000\u1016\u100f"+
		"\u0001\u0000\u0000\u0000\u1016\u1012\u0001\u0000\u0000\u0000\u1016\u1014"+
		"\u0001\u0000\u0000\u0000\u1017\u0133\u0001\u0000\u0000\u0000\u1018\u1019"+
		"\u0005\u02ff\u0000\u0000\u1019\u1020\u0005\u0083\u0000\u0000\u101a\u101b"+
		"\u0005\u0083\u0000\u0000\u101b\u1020\u0005\u0300\u0000\u0000\u101c\u101d"+
		"\u0005\u0083\u0000\u0000\u101d\u1020\u0005\u0301\u0000\u0000\u101e\u1020"+
		"\u0005\u0302\u0000\u0000\u101f\u1018\u0001\u0000\u0000\u0000\u101f\u101a"+
		"\u0001\u0000\u0000\u0000\u101f\u101c\u0001\u0000\u0000\u0000\u101f\u101e"+
		"\u0001\u0000\u0000\u0000\u1020\u0135\u0001\u0000\u0000\u0000\u1021\u1022"+
		"\u0005\u0017\u0000\u0000\u1022\u1023\u0005\u01ce\u0000\u0000\u1023\u1024"+
		"\u0005\u00a9\u0000\u0000\u1024\u1029\u0003\u0148\u00a4\u0000\u1025\u1026"+
		"\u0005\u0459\u0000\u0000\u1026\u1028\u0003\u0148\u00a4\u0000\u1027\u1025"+
		"\u0001\u0000\u0000\u0000\u1028\u102b\u0001\u0000\u0000\u0000\u1029\u1027"+
		"\u0001\u0000\u0000\u0000\u1029\u102a\u0001\u0000\u0000\u0000\u102a\u102d"+
		"\u0001\u0000\u0000\u0000\u102b\u1029\u0001\u0000\u0000\u0000\u102c\u102e"+
		"\u0003\u0150\u00a8\u0000\u102d\u102c\u0001\u0000\u0000\u0000\u102d\u102e"+
		"\u0001\u0000\u0000\u0000\u102e\u0137\u0001\u0000\u0000\u0000\u102f\u1030"+
		"\u0005\u0017\u0000\u0000\u1030\u1031\u0005\u0236\u0000\u0000\u1031\u1032"+
		"\u0005\u01a0\u0000\u0000\u1032\u1037\u0003\u0152\u00a9\u0000\u1033\u1034"+
		"\u0005\u0459\u0000\u0000\u1034\u1036\u0003\u0152\u00a9\u0000\u1035\u1033"+
		"\u0001\u0000\u0000\u0000\u1036\u1039\u0001\u0000\u0000\u0000\u1037\u1035"+
		"\u0001\u0000\u0000\u0000\u1037\u1038\u0001\u0000\u0000\u0000\u1038\u0139"+
		"\u0001\u0000\u0000\u0000\u1039\u1037\u0001\u0000\u0000\u0000\u103a\u103b"+
		"\u0005\u0081\u0000\u0000\u103b\u103c\u00076\u0000\u0000\u103c\u1041\u0005"+
		"\u01cd\u0000\u0000\u103d\u103e\u0005\u00a9\u0000\u0000\u103e\u1042\u0005"+
		"\u0466\u0000\u0000\u103f\u1040\u0005\u000e\u0000\u0000\u1040\u1042\u0005"+
		"\u0466\u0000\u0000\u1041\u103d\u0001\u0000\u0000\u0000\u1041\u103f\u0001"+
		"\u0000\u0000\u0000\u1042\u013b\u0001\u0000\u0000\u0000\u1043\u1044\u0005"+
		"\u0237\u0000\u0000\u1044\u1045\u0005\u01ce\u0000\u0000\u1045\u013d\u0001"+
		"\u0000\u0000\u0000\u1046\u1047\u0005\u0237\u0000\u0000\u1047\u1049\u0005"+
		"\u024d\u0000\u0000\u1048\u104a\u0005\u0006\u0000\u0000\u1049\u1048\u0001"+
		"\u0000\u0000\u0000\u1049\u104a\u0001\u0000\u0000\u0000\u104a\u104c\u0001"+
		"\u0000\u0000\u0000\u104b\u104d\u0003\u0150\u00a8\u0000\u104c\u104b\u0001"+
		"\u0000\u0000\u0000\u104c\u104d\u0001\u0000\u0000\u0000\u104d\u013f\u0001"+
		"\u0000\u0000\u0000\u104e\u104f\u0005\u025c\u0000\u0000\u104f\u1058\u0005"+
		"\u024d\u0000\u0000\u1050\u1055\u0003\u0156\u00ab\u0000\u1051\u1052\u0005"+
		"\u0459\u0000\u0000\u1052\u1054\u0003\u0156\u00ab\u0000\u1053\u1051\u0001"+
		"\u0000\u0000\u0000\u1054\u1057\u0001\u0000\u0000\u0000\u1055\u1053\u0001"+
		"\u0000\u0000\u0000\u1055\u1056\u0001\u0000\u0000\u0000\u1056\u1059\u0001"+
		"\u0000\u0000\u0000\u1057\u1055\u0001\u0000\u0000\u0000\u1058\u1050\u0001"+
		"\u0000\u0000\u0000\u1058\u1059\u0001\u0000\u0000\u0000\u1059\u105c\u0001"+
		"\u0000\u0000\u0000\u105a\u105b\u0005\u027e\u0000\u0000\u105b\u105d\u0003"+
		"\u0158\u00ac\u0000\u105c\u105a\u0001\u0000\u0000\u0000\u105c\u105d\u0001"+
		"\u0000\u0000\u0000\u105d\u1061\u0001\u0000\u0000\u0000\u105e\u1060\u0003"+
		"\u015a\u00ad\u0000\u105f\u105e\u0001\u0000\u0000\u0000\u1060\u1063\u0001"+
		"\u0000\u0000\u0000\u1061\u105f\u0001\u0000\u0000\u0000\u1061\u1062\u0001"+
		"\u0000\u0000\u0000\u1062\u1065\u0001\u0000\u0000\u0000\u1063\u1061\u0001"+
		"\u0000\u0000\u0000\u1064\u1066\u0003\u0150\u00a8\u0000\u1065\u1064\u0001"+
		"\u0000\u0000\u0000\u1065\u1066\u0001\u0000\u0000\u0000\u1066\u0141\u0001"+
		"\u0000\u0000\u0000\u1067\u1068\u0005\u0262\u0000\u0000\u1068\u1071\u0005"+
		"\u024d\u0000\u0000\u1069\u106e\u0003\u0156\u00ab\u0000\u106a\u106b\u0005"+
		"\u0459\u0000\u0000\u106b\u106d\u0003\u0156\u00ab\u0000\u106c\u106a\u0001"+
		"\u0000\u0000\u0000\u106d\u1070\u0001\u0000\u0000\u0000\u106e\u106c\u0001"+
		"\u0000\u0000\u0000\u106e\u106f\u0001\u0000\u0000\u0000\u106f\u1072\u0001"+
		"\u0000\u0000\u0000\u1070\u106e\u0001\u0000\u0000\u0000\u1071\u1069\u0001"+
		"\u0000\u0000\u0000\u1071\u1072\u0001\u0000\u0000\u0000\u1072\u0143\u0001"+
		"\u0000\u0000\u0000\u1073\u1074\u0005\u025c\u0000\u0000\u1074\u1075\u0005"+
		"\u01ac\u0000\u0000\u1075\u0145\u0001\u0000\u0000\u0000\u1076\u1077\u0005"+
		"\u0262\u0000\u0000\u1077\u1078\u0005\u01ac\u0000\u0000\u1078\u0147\u0001"+
		"\u0000\u0000\u0000\u1079\u107a\u0003\u014a\u00a5\u0000\u107a\u107b\u0005"+
		"\u044e\u0000\u0000\u107b\u107c\u0005\u0466\u0000\u0000\u107c\u1097\u0001"+
		"\u0000\u0000\u0000\u107d\u107e\u0003\u014c\u00a6\u0000\u107e\u107f\u0005"+
		"\u044e\u0000\u0000\u107f\u1080\u0003\u022c\u0116\u0000\u1080\u1097\u0001"+
		"\u0000\u0000\u0000\u1081\u1082\u0003\u014e\u00a7\u0000\u1082\u1083\u0005"+
		"\u044e\u0000\u0000\u1083\u1084\u0007\u0018\u0000\u0000\u1084\u1097\u0001"+
		"\u0000\u0000\u0000\u1085\u1086\u0005\u01d2\u0000\u0000\u1086\u1087\u0005"+
		"\u044e\u0000\u0000\u1087\u1097\u0005\u0469\u0000\u0000\u1088\u1089\u0005"+
		"\u01b3\u0000\u0000\u1089\u108a\u0005\u044e\u0000\u0000\u108a\u1093\u0005"+
		"\u0457\u0000\u0000\u108b\u1090\u0003\u0226\u0113\u0000\u108c\u108d\u0005"+
		"\u0459\u0000\u0000\u108d\u108f\u0003\u0226\u0113\u0000\u108e\u108c\u0001"+
		"\u0000\u0000\u0000\u108f\u1092\u0001\u0000\u0000\u0000\u1090\u108e\u0001"+
		"\u0000\u0000\u0000\u1090\u1091\u0001\u0000\u0000\u0000\u1091\u1094\u0001"+
		"\u0000\u0000\u0000\u1092\u1090\u0001\u0000\u0000\u0000\u1093\u108b\u0001"+
		"\u0000\u0000\u0000\u1093\u1094\u0001\u0000\u0000\u0000\u1094\u1095\u0001"+
		"\u0000\u0000\u0000\u1095\u1097\u0005\u0458\u0000\u0000\u1096\u1079\u0001"+
		"\u0000\u0000\u0000\u1096\u107d\u0001\u0000\u0000\u0000\u1096\u1081\u0001"+
		"\u0000\u0000\u0000\u1096\u1085\u0001\u0000\u0000\u0000\u1096\u1088\u0001"+
		"\u0000\u0000\u0000\u1097\u0149\u0001\u0000\u0000\u0000\u1098\u1099\u0007"+
		"7\u0000\u0000\u1099\u014b\u0001\u0000\u0000\u0000\u109a\u109b\u00078\u0000"+
		"\u0000\u109b\u014d\u0001\u0000\u0000\u0000\u109c\u109d\u00079\u0000\u0000"+
		"\u109d\u014f\u0001\u0000\u0000\u0000\u109e\u109f\u0005A\u0000\u0000\u109f"+
		"\u10a0\u0005\u015a\u0000\u0000\u10a0\u10a1\u0005\u0466\u0000\u0000\u10a1"+
		"\u0151\u0001\u0000\u0000\u0000\u10a2\u10a3\u0005\u022f\u0000\u0000\u10a3"+
		"\u10a4\u0005\u044e\u0000\u0000\u10a4\u10a5\u0005\u0457\u0000\u0000\u10a5"+
		"\u10a6\u0003\u0246\u0123\u0000\u10a6\u10a7\u0005\u0458\u0000\u0000\u10a7"+
		"\u10d4\u0001\u0000\u0000\u0000\u10a8\u10a9\u0005\u0231\u0000\u0000\u10a9"+
		"\u10aa\u0005\u044e\u0000\u0000\u10aa\u10ab\u0005\u0457\u0000\u0000\u10ab"+
		"\u10ac\u0003\u0246\u0123\u0000\u10ac\u10ad\u0005\u0458\u0000\u0000\u10ad"+
		"\u10d4\u0001\u0000\u0000\u0000\u10ae\u10af\u0005\u0230\u0000\u0000\u10af"+
		"\u10b0\u0005\u044e\u0000\u0000\u10b0\u10b1\u0005\u0457\u0000\u0000\u10b1"+
		"\u10b2\u0003\u0248\u0124\u0000\u10b2\u10b3\u0005\u0458\u0000\u0000\u10b3"+
		"\u10d4\u0001\u0000\u0000\u0000\u10b4\u10b5\u0005\u0232\u0000\u0000\u10b5"+
		"\u10b6\u0005\u044e\u0000\u0000\u10b6\u10b7\u0005\u0457\u0000\u0000\u10b7"+
		"\u10b8\u0003\u0248\u0124\u0000\u10b8\u10b9\u0005\u0458\u0000\u0000\u10b9"+
		"\u10d4\u0001\u0000\u0000\u0000\u10ba\u10bb\u0005\u0234\u0000\u0000\u10bb"+
		"\u10bc\u0005\u044e\u0000\u0000\u10bc\u10bd\u0005\u0457\u0000\u0000\u10bd"+
		"\u10be\u0003\u0252\u0129\u0000\u10be\u10bf\u0005\u0458\u0000\u0000\u10bf"+
		"\u10d4\u0001\u0000\u0000\u0000\u10c0\u10c1\u0005\u0235\u0000\u0000\u10c1"+
		"\u10c2\u0005\u044e\u0000\u0000\u10c2\u10c3\u0005\u0457\u0000\u0000\u10c3"+
		"\u10c4\u0003\u0252\u0129\u0000\u10c4\u10c5\u0005\u0458\u0000\u0000\u10c5"+
		"\u10d4\u0001\u0000\u0000\u0000\u10c6\u10c7\u0005\u0233\u0000\u0000\u10c7"+
		"\u10c8\u0005\u044e\u0000\u0000\u10c8\u10c9\u0005\u0457\u0000\u0000\u10c9"+
		"\u10ce\u0003\u0154\u00aa\u0000\u10ca\u10cb\u0005\u0459\u0000\u0000\u10cb"+
		"\u10cd\u0003\u0154\u00aa\u0000\u10cc\u10ca\u0001\u0000\u0000\u0000\u10cd"+
		"\u10d0\u0001\u0000\u0000\u0000\u10ce\u10cc\u0001\u0000\u0000\u0000\u10ce"+
		"\u10cf\u0001\u0000\u0000\u0000\u10cf\u10d1\u0001\u0000\u0000\u0000\u10d0"+
		"\u10ce\u0001\u0000\u0000\u0000\u10d1\u10d2\u0005\u0458\u0000\u0000\u10d2"+
		"\u10d4\u0001\u0000\u0000\u0000\u10d3\u10a2\u0001\u0000\u0000\u0000\u10d3"+
		"\u10a8\u0001\u0000\u0000\u0000\u10d3\u10ae\u0001\u0000\u0000\u0000\u10d3"+
		"\u10b4\u0001\u0000\u0000\u0000\u10d3\u10ba\u0001\u0000\u0000\u0000\u10d3"+
		"\u10c0\u0001\u0000\u0000\u0000\u10d3\u10c6\u0001\u0000\u0000\u0000\u10d4"+
		"\u0153\u0001\u0000\u0000\u0000\u10d5\u10d6\u0005\u0457\u0000\u0000\u10d6"+
		"\u10d7\u0003\u020c\u0106\u0000\u10d7\u10d8\u0005\u0459\u0000\u0000\u10d8"+
		"\u10d9\u0003\u020c\u0106\u0000\u10d9\u10da\u0005\u0458\u0000\u0000\u10da"+
		"\u0155\u0001\u0000\u0000\u0000\u10db\u10dc\u0007:\u0000\u0000\u10dc\u0157"+
		"\u0001\u0000\u0000\u0000\u10dd\u10de\u0007;\u0000\u0000\u10de\u10df\u0005"+
		"\u044e\u0000\u0000\u10df\u10f0\u0003\u015c\u00ae\u0000\u10e0\u10e1\u0005"+
		"\u01d4\u0000\u0000\u10e1\u10e2\u0005\u044e\u0000\u0000\u10e2\u10e3\u0005"+
		"\u0466\u0000\u0000\u10e3\u10e4\u0005\u0459\u0000\u0000\u10e4\u10e5\u0005"+
		"\u01d5\u0000\u0000\u10e5\u10e6\u0005\u044e\u0000\u0000\u10e6\u10f0\u0003"+
		"\u022c\u0116\u0000\u10e7\u10e8\u0005\u0229\u0000\u0000\u10e8\u10e9\u0005"+
		"\u044e\u0000\u0000\u10e9\u10ea\u0005\u0466\u0000\u0000\u10ea\u10eb\u0005"+
		"\u0459\u0000\u0000\u10eb\u10ec\u0005\u022a\u0000\u0000\u10ec\u10ed\u0005"+
		"\u044e\u0000\u0000\u10ed\u10f0\u0003\u022c\u0116\u0000\u10ee\u10f0\u0005"+
		"\u0256\u0000\u0000\u10ef\u10dd\u0001\u0000\u0000\u0000\u10ef\u10e0\u0001"+
		"\u0000\u0000\u0000\u10ef\u10e7\u0001\u0000\u0000\u0000\u10ef\u10ee\u0001"+
		"\u0000\u0000\u0000\u10f0\u0159\u0001\u0000\u0000\u0000\u10f1\u10f2\u0005"+
		"\u0280\u0000\u0000\u10f2\u10f3\u0005\u044e\u0000\u0000\u10f3\u10fe\u0005"+
		"\u0466\u0000\u0000\u10f4\u10f5\u0005\u0212\u0000\u0000\u10f5\u10f6\u0005"+
		"\u044e\u0000\u0000\u10f6\u10fe\u0005\u0466\u0000\u0000\u10f7\u10f8\u0005"+
		"\u017d\u0000\u0000\u10f8\u10f9\u0005\u044e\u0000\u0000\u10f9\u10fe\u0005"+
		"\u0466\u0000\u0000\u10fa\u10fb\u0005\u0215\u0000\u0000\u10fb\u10fc\u0005"+
		"\u044e\u0000\u0000\u10fc\u10fe\u0005\u0466\u0000\u0000\u10fd\u10f1\u0001"+
		"\u0000\u0000\u0000\u10fd\u10f4\u0001\u0000\u0000\u0000\u10fd\u10f7\u0001"+
		"\u0000\u0000\u0000\u10fd\u10fa\u0001\u0000\u0000\u0000\u10fe\u015b\u0001"+
		"\u0000\u0000\u0000\u10ff\u1104\u0003\u021e\u010f\u0000\u1100\u1101\u0005"+
		"\u0459\u0000\u0000\u1101\u1103\u0003\u021e\u010f\u0000\u1102\u1100\u0001"+
		"\u0000\u0000\u0000\u1103\u1106\u0001\u0000\u0000\u0000\u1104\u1102\u0001"+
		"\u0000\u0000\u0000\u1104\u1105\u0001\u0000\u0000\u0000\u1105\u1109\u0001"+
		"\u0000\u0000\u0000\u1106\u1104\u0001\u0000\u0000\u0000\u1107\u1109\u0005"+
		"\u0466\u0000\u0000\u1108\u10ff\u0001\u0000\u0000\u0000\u1108\u1107\u0001"+
		"\u0000\u0000\u0000\u1109\u015d\u0001\u0000\u0000\u0000\u110a\u110b\u0005"+
		"\u0290\u0000\u0000\u110b\u110c\u0007<\u0000\u0000\u110c\u110e\u0003\u0220"+
		"\u0110\u0000\u110d\u110f\u0007=\u0000\u0000\u110e\u110d\u0001\u0000\u0000"+
		"\u0000\u110e\u110f\u0001\u0000\u0000\u0000\u110f\u015f\u0001\u0000\u0000"+
		"\u0000\u1110\u1111\u0005\u0290\u0000\u0000\u1111\u1112\u0005\u018b\u0000"+
		"\u0000\u1112\u1118\u0003\u0220\u0110\u0000\u1113\u1116\u0005\u026a\u0000"+
		"\u0000\u1114\u1115\u0005A\u0000\u0000\u1115\u1117\u0005\u01ee\u0000\u0000"+
		"\u1116\u1114\u0001\u0000\u0000\u0000\u1116\u1117\u0001\u0000\u0000\u0000"+
		"\u1117\u1119\u0001\u0000\u0000\u0000\u1118\u1113\u0001\u0000\u0000\u0000"+
		"\u1118\u1119\u0001\u0000\u0000\u0000\u1119\u0161\u0001\u0000\u0000\u0000"+
		"\u111a\u111b\u0005\u0290\u0000\u0000\u111b\u111c\u0005\u021a\u0000\u0000"+
		"\u111c\u111d\u0003\u0220\u0110\u0000\u111d\u0163\u0001\u0000\u0000\u0000"+
		"\u111e\u111f\u0005\u0290\u0000\u0000\u111f\u1120\u0005\u0168\u0000\u0000"+
		"\u1120\u1123\u0003\u0220\u0110\u0000\u1121\u1122\u0005\u0205\u0000\u0000"+
		"\u1122\u1124\u0005\u0213\u0000\u0000\u1123\u1121\u0001\u0000\u0000\u0000"+
		"\u1123\u1124\u0001\u0000\u0000\u0000\u1124\u0165\u0001\u0000\u0000\u0000"+
		"\u1125\u1126\u0005\u0290\u0000\u0000\u1126\u1127\u0005\u023d\u0000\u0000"+
		"\u1127\u1128\u0003\u0220\u0110\u0000\u1128\u0167\u0001\u0000\u0000\u0000"+
		"\u1129\u112a\u0005\u0290\u0000\u0000\u112a\u112d\u0005\u0224\u0000\u0000"+
		"\u112b\u112c\u0005\u001f\u0000\u0000\u112c\u112e\u0003\u0220\u0110\u0000"+
		"\u112d\u112b\u0001\u0000\u0000\u0000\u112d\u112e\u0001\u0000\u0000\u0000"+
		"\u112e\u0169\u0001\u0000\u0000\u0000\u112f\u1130\u0005\u021a\u0000\u0000"+
		"\u1130\u1131\u0003\u0226\u0113\u0000\u1131\u1134\u0005D\u0000\u0000\u1132"+
		"\u1135\u0005\u0466\u0000\u0000\u1133\u1135\u0005\u0473\u0000\u0000\u1134"+
		"\u1132\u0001\u0000\u0000\u0000\u1134\u1133\u0001\u0000\u0000\u0000\u1135"+
		"\u016b\u0001\u0000\u0000\u0000\u1136\u1137\u0005\u02a2\u0000\u0000\u1137"+
		"\u113a\u0003\u0226\u0113\u0000\u1138\u1139\u0005\u00b5\u0000\u0000\u1139"+
		"\u113b\u0003\u0254\u012a\u0000\u113a\u1138\u0001\u0000\u0000\u0000\u113a"+
		"\u113b\u0001\u0000\u0000\u0000\u113b\u016d\u0001\u0000\u0000\u0000\u113c"+
		"\u113d\u0007>\u0000\u0000\u113d\u113e\u0005\u021a\u0000\u0000\u113e\u113f"+
		"\u0003\u0226\u0113\u0000\u113f\u016f\u0001\u0000\u0000\u0000\u1140\u1143"+
		"\u0003\u0172\u00b9\u0000\u1141\u1143\u0003\u0004\u0002\u0000\u1142\u1140"+
		"\u0001\u0000\u0000\u0000\u1142\u1141\u0001\u0000\u0000\u0000\u1143\u0171"+
		"\u0001\u0000\u0000\u0000\u1144\u1145\u0003\u0226\u0113\u0000\u1145\u1146"+
		"\u0005\u0462\u0000\u0000\u1146\u1148\u0001\u0000\u0000\u0000\u1147\u1144"+
		"\u0001\u0000\u0000\u0000\u1147\u1148\u0001\u0000\u0000\u0000\u1148\u1149"+
		"\u0001\u0000\u0000\u0000\u1149\u1170\u0005\u014f\u0000\u0000\u114a\u114b"+
		"\u0003\u0186\u00c3\u0000\u114b\u114c\u0005\u045a\u0000\u0000\u114c\u114e"+
		"\u0001\u0000\u0000\u0000\u114d\u114a\u0001\u0000\u0000\u0000\u114e\u1151"+
		"\u0001\u0000\u0000\u0000\u114f\u114d\u0001\u0000\u0000\u0000\u114f\u1150"+
		"\u0001\u0000\u0000\u0000\u1150\u1157\u0001\u0000\u0000\u0000\u1151\u114f"+
		"\u0001\u0000\u0000\u0000\u1152\u1153\u0003\u0188\u00c4\u0000\u1153\u1154"+
		"\u0005\u045a\u0000\u0000\u1154\u1156\u0001\u0000\u0000\u0000\u1155\u1152"+
		"\u0001\u0000\u0000\u0000\u1156\u1159\u0001\u0000\u0000\u0000\u1157\u1155"+
		"\u0001\u0000\u0000\u0000\u1157\u1158\u0001\u0000\u0000\u0000\u1158\u115f"+
		"\u0001\u0000\u0000\u0000\u1159\u1157\u0001\u0000\u0000\u0000\u115a\u115b"+
		"\u0003\u018a\u00c5\u0000\u115b\u115c\u0005\u045a\u0000\u0000\u115c\u115e"+
		"\u0001\u0000\u0000\u0000\u115d\u115a\u0001\u0000\u0000\u0000\u115e\u1161"+
		"\u0001\u0000\u0000\u0000\u115f\u115d\u0001\u0000\u0000\u0000\u115f\u1160"+
		"\u0001\u0000\u0000\u0000\u1160\u1167\u0001\u0000\u0000\u0000\u1161\u115f"+
		"\u0001\u0000\u0000\u0000\u1162\u1163\u0003\u018c\u00c6\u0000\u1163\u1164"+
		"\u0005\u045a\u0000\u0000\u1164\u1166\u0001\u0000\u0000\u0000\u1165\u1162"+
		"\u0001\u0000\u0000\u0000\u1166\u1169\u0001\u0000\u0000\u0000\u1167\u1165"+
		"\u0001\u0000\u0000\u0000\u1167\u1168\u0001\u0000\u0000\u0000\u1168\u116d"+
		"\u0001\u0000\u0000\u0000\u1169\u1167\u0001\u0000\u0000\u0000\u116a\u116c"+
		"\u0003\u0190\u00c8\u0000\u116b\u116a\u0001\u0000\u0000\u0000\u116c\u116f"+
		"\u0001\u0000\u0000\u0000\u116d\u116b\u0001\u0000\u0000\u0000\u116d\u116e"+
		"\u0001\u0000\u0000\u0000\u116e\u1171\u0001\u0000\u0000\u0000\u116f\u116d"+
		"\u0001\u0000\u0000\u0000\u1170\u114f\u0001\u0000\u0000\u0000\u1170\u1171"+
		"\u0001\u0000\u0000\u0000\u1171\u1172\u0001\u0000\u0000\u0000\u1172\u1174"+
		"\u0005\u018b\u0000\u0000\u1173\u1175\u0003\u0226\u0113\u0000\u1174\u1173"+
		"\u0001\u0000\u0000\u0000\u1174\u1175\u0001\u0000\u0000\u0000\u1175\u0173"+
		"\u0001\u0000\u0000\u0000\u1176\u1179\u0005\u0015\u0000\u0000\u1177\u117a"+
		"\u0003\u0226\u0113\u0000\u1178\u117a\u0003\u0288\u0144\u0000\u1179\u1177"+
		"\u0001\u0000\u0000\u0000\u1179\u1178\u0001\u0000\u0000\u0000\u1179\u117a"+
		"\u0001\u0000\u0000\u0000\u117a\u117c\u0001\u0000\u0000\u0000\u117b\u117d"+
		"\u0003\u0192\u00c9\u0000\u117c\u117b\u0001\u0000\u0000\u0000\u117d\u117e"+
		"\u0001\u0000\u0000\u0000\u117e\u117c\u0001\u0000\u0000\u0000\u117e\u117f"+
		"\u0001\u0000\u0000\u0000\u117f\u1186\u0001\u0000\u0000\u0000\u1180\u1182"+
		"\u00053\u0000\u0000\u1181\u1183\u0003\u0190\u00c8\u0000\u1182\u1181\u0001"+
		"\u0000\u0000\u0000\u1183\u1184\u0001\u0000\u0000\u0000\u1184\u1182\u0001"+
		"\u0000\u0000\u0000\u1184\u1185\u0001\u0000\u0000\u0000\u1185\u1187\u0001"+
		"\u0000\u0000\u0000\u1186\u1180\u0001\u0000\u0000\u0000\u1186\u1187\u0001"+
		"\u0000\u0000\u0000\u1187\u1188\u0001\u0000\u0000\u0000\u1188\u1189\u0005"+
		"\u018b\u0000\u0000\u1189\u118a\u0005\u0015\u0000\u0000\u118a\u0175\u0001"+
		"\u0000\u0000\u0000\u118b\u118c\u0005M\u0000\u0000\u118c\u118d\u0003\u0288"+
		"\u0144\u0000\u118d\u118f\u0005\u00a8\u0000\u0000\u118e\u1190\u0003\u0190"+
		"\u00c8\u0000\u118f\u118e\u0001\u0000\u0000\u0000\u1190\u1191\u0001\u0000"+
		"\u0000\u0000\u1191\u118f\u0001\u0000\u0000\u0000\u1191\u1192\u0001\u0000"+
		"\u0000\u0000\u1192\u1196\u0001\u0000\u0000\u0000\u1193\u1195\u0003\u0194"+
		"\u00ca\u0000\u1194\u1193\u0001\u0000\u0000\u0000\u1195\u1198\u0001\u0000"+
		"\u0000\u0000\u1196\u1194\u0001\u0000\u0000\u0000\u1196\u1197\u0001\u0000"+
		"\u0000\u0000\u1197\u119f\u0001\u0000\u0000\u0000\u1198\u1196\u0001\u0000"+
		"\u0000\u0000\u1199\u119b\u00053\u0000\u0000\u119a\u119c\u0003\u0190\u00c8"+
		"\u0000\u119b\u119a\u0001\u0000\u0000\u0000\u119c\u119d\u0001\u0000\u0000"+
		"\u0000\u119d\u119b\u0001\u0000\u0000\u0000\u119d\u119e\u0001\u0000\u0000"+
		"\u0000\u119e\u11a0\u0001\u0000\u0000\u0000\u119f\u1199\u0001\u0000\u0000"+
		"\u0000\u119f\u11a0\u0001\u0000\u0000\u0000\u11a0\u11a1\u0001\u0000\u0000"+
		"\u0000\u11a1\u11a2\u0005\u018b\u0000\u0000\u11a2\u11a3\u0005M\u0000\u0000"+
		"\u11a3\u0177\u0001\u0000\u0000\u0000\u11a4\u11a5\u0005Y\u0000\u0000\u11a5"+
		"\u11a6\u0003\u0226\u0113\u0000\u11a6\u0179\u0001\u0000\u0000\u0000\u11a7"+
		"\u11a8\u0005_\u0000\u0000\u11a8\u11a9\u0003\u0226\u0113\u0000\u11a9\u017b"+
		"\u0001\u0000\u0000\u0000\u11aa\u11ab\u0003\u0226\u0113\u0000\u11ab\u11ac"+
		"\u0005\u0462\u0000\u0000\u11ac\u11ae\u0001\u0000\u0000\u0000\u11ad\u11aa"+
		"\u0001\u0000\u0000\u0000\u11ad\u11ae\u0001\u0000\u0000\u0000\u11ae\u11af"+
		"\u0001\u0000\u0000\u0000\u11af\u11b1\u0005g\u0000\u0000\u11b0\u11b2\u0003"+
		"\u0190\u00c8\u0000\u11b1\u11b0\u0001\u0000\u0000\u0000\u11b2\u11b3\u0001"+
		"\u0000\u0000\u0000\u11b3\u11b1\u0001\u0000\u0000\u0000\u11b3\u11b4\u0001"+
		"\u0000\u0000\u0000\u11b4\u11b5\u0001\u0000\u0000\u0000\u11b5\u11b6\u0005"+
		"\u018b\u0000\u0000\u11b6\u11b8\u0005g\u0000\u0000\u11b7\u11b9\u0003\u0226"+
		"\u0113\u0000\u11b8\u11b7\u0001\u0000\u0000\u0000\u11b8\u11b9\u0001\u0000"+
		"\u0000\u0000\u11b9\u017d\u0001\u0000\u0000\u0000\u11ba\u11bb\u0003\u0226"+
		"\u0113\u0000\u11bb\u11bc\u0005\u0462\u0000\u0000\u11bc\u11be\u0001\u0000"+
		"\u0000\u0000\u11bd\u11ba\u0001\u0000\u0000\u0000\u11bd\u11be\u0001\u0000"+
		"\u0000\u0000\u11be\u11bf\u0001\u0000\u0000\u0000\u11bf\u11c1\u0005\u0089"+
		"\u0000\u0000\u11c0\u11c2\u0003\u0190\u00c8\u0000\u11c1\u11c0\u0001\u0000"+
		"\u0000\u0000\u11c2\u11c3\u0001\u0000\u0000\u0000\u11c3\u11c1\u0001\u0000"+
		"\u0000\u0000\u11c3\u11c4\u0001\u0000\u0000\u0000\u11c4\u11c5\u0001\u0000"+
		"\u0000\u0000\u11c5\u11c6\u0005\u027e\u0000\u0000\u11c6\u11c7\u0003\u0288"+
		"\u0144\u0000\u11c7\u11c8\u0005\u018b\u0000\u0000\u11c8\u11ca\u0005\u0089"+
		"\u0000\u0000\u11c9\u11cb\u0003\u0226\u0113\u0000\u11ca\u11c9\u0001\u0000"+
		"\u0000\u0000\u11ca\u11cb\u0001\u0000\u0000\u0000\u11cb\u017f\u0001\u0000"+
		"\u0000\u0000\u11cc\u11cd\u0005\u008f\u0000\u0000\u11cd\u11ce\u0003\u0288"+
		"\u0144\u0000\u11ce\u0181\u0001\u0000\u0000\u0000\u11cf\u11d0\u0003\u0226"+
		"\u0113\u0000\u11d0\u11d1\u0005\u0462\u0000\u0000\u11d1\u11d3\u0001\u0000"+
		"\u0000\u0000\u11d2\u11cf\u0001\u0000\u0000\u0000\u11d2\u11d3\u0001\u0000"+
		"\u0000\u0000\u11d3\u11d4\u0001\u0000\u0000\u0000\u11d4\u11d5\u0005\u00b9"+
		"\u0000\u0000\u11d5\u11d6\u0003\u0288\u0144\u0000\u11d6\u11d8\u0005\u0185"+
		"\u0000\u0000\u11d7\u11d9\u0003\u0190\u00c8\u0000\u11d8\u11d7\u0001\u0000"+
		"\u0000\u0000\u11d9\u11da\u0001\u0000\u0000\u0000\u11da\u11d8\u0001\u0000"+
		"\u0000\u0000\u11da\u11db\u0001\u0000\u0000\u0000\u11db\u11dc\u0001\u0000"+
		"\u0000\u0000\u11dc\u11dd\u0005\u018b\u0000\u0000\u11dd\u11df\u0005\u00b9"+
		"\u0000\u0000\u11de\u11e0\u0003\u0226\u0113\u0000\u11df\u11de\u0001\u0000"+
		"\u0000\u0000\u11df\u11e0\u0001\u0000\u0000\u0000\u11e0\u0183\u0001\u0000"+
		"\u0000\u0000\u11e1\u11e2\u0005\u0160\u0000\u0000\u11e2\u11f1\u0003\u0226"+
		"\u0113\u0000\u11e3\u11e8\u0005@\u0000\u0000\u11e4\u11e6\u0005\u01f9\u0000"+
		"\u0000\u11e5\u11e4\u0001\u0000\u0000\u0000\u11e5\u11e6\u0001\u0000\u0000"+
		"\u0000\u11e6\u11e7\u0001\u0000\u0000\u0000\u11e7\u11e9\u0005D\u0000\u0000"+
		"\u11e8\u11e5\u0001\u0000\u0000\u0000\u11e8\u11e9\u0001\u0000\u0000\u0000"+
		"\u11e9\u11ea\u0001\u0000\u0000\u0000\u11ea\u11eb\u0003\u0226\u0113\u0000"+
		"\u11eb\u11ec\u0005W\u0000\u0000\u11ec\u11ed\u0003\u0246\u0123\u0000\u11ed"+
		"\u11f1\u0001\u0000\u0000\u0000\u11ee\u11ef\u0005\u0208\u0000\u0000\u11ef"+
		"\u11f1\u0003\u0226\u0113\u0000\u11f0\u11e1\u0001\u0000\u0000\u0000\u11f0"+
		"\u11e3\u0001\u0000\u0000\u0000\u11f0\u11ee\u0001\u0000\u0000\u0000\u11f1"+
		"\u0185\u0001\u0000\u0000\u0000\u11f2\u11f3\u0005\'\u0000\u0000\u11f3\u11f4"+
		"\u0003\u0246\u0123\u0000\u11f4\u11f7\u0003\u023a\u011d\u0000\u11f5\u11f6"+
		"\u0005(\u0000\u0000\u11f6\u11f8\u0003\u0288\u0144\u0000\u11f7\u11f5\u0001"+
		"\u0000\u0000\u0000\u11f7\u11f8\u0001\u0000\u0000\u0000\u11f8\u0187\u0001"+
		"\u0000\u0000\u0000\u11f9\u11fa\u0005\'\u0000\u0000\u11fa\u11fb\u0003\u0226"+
		"\u0113\u0000\u11fb\u11fc\u0005\u001c\u0000\u0000\u11fc\u1203\u0005A\u0000"+
		"\u0000\u11fd\u1204\u0003\u022c\u0116\u0000\u11fe\u1200\u0005\u009d\u0000"+
		"\u0000\u11ff\u1201\u0005\u0284\u0000\u0000\u1200\u11ff\u0001\u0000\u0000"+
		"\u0000\u1200\u1201\u0001\u0000\u0000\u0000\u1201\u1202\u0001\u0000\u0000"+
		"\u0000\u1202\u1204\u0005\u0466\u0000\u0000\u1203\u11fd\u0001\u0000\u0000"+
		"\u0000\u1203\u11fe\u0001\u0000\u0000\u0000\u1204\u0189\u0001\u0000\u0000"+
		"\u0000\u1205\u1206\u0005\'\u0000\u0000\u1206\u1207\u0003\u0226\u0113\u0000"+
		"\u1207\u1208\u0005$\u0000\u0000\u1208\u1209\u0005A\u0000\u0000\u1209\u120a"+
		"\u0003\u00c4b\u0000\u120a\u018b\u0001\u0000\u0000\u0000\u120b\u120c\u0005"+
		"\'\u0000\u0000\u120c\u120d\u0007?\u0000\u0000\u120d\u120e\u0005\u01ad"+
		"\u0000\u0000\u120e\u120f\u0005A\u0000\u0000\u120f\u1214\u0003\u018e\u00c7"+
		"\u0000\u1210\u1211\u0005\u0459\u0000\u0000\u1211\u1213\u0003\u018e\u00c7"+
		"\u0000\u1212\u1210\u0001\u0000\u0000\u0000\u1213\u1216\u0001\u0000\u0000"+
		"\u0000\u1214\u1212\u0001\u0000\u0000\u0000\u1214\u1215\u0001\u0000\u0000"+
		"\u0000\u1215\u1217\u0001\u0000\u0000\u0000\u1216\u1214\u0001\u0000\u0000"+
		"\u0000\u1217\u1218\u0003\u0170\u00b8\u0000\u1218\u018d\u0001\u0000\u0000"+
		"\u0000\u1219\u1225\u0003\u022c\u0116\u0000\u121a\u121c\u0005\u009d\u0000"+
		"\u0000\u121b\u121d\u0005\u0284\u0000\u0000\u121c\u121b\u0001\u0000\u0000"+
		"\u0000\u121c\u121d\u0001\u0000\u0000\u0000\u121d\u121e\u0001\u0000\u0000"+
		"\u0000\u121e\u1225\u0005\u0466\u0000\u0000\u121f\u1225\u0003\u0226\u0113"+
		"\u0000\u1220\u1225\u0005\u009e\u0000\u0000\u1221\u1222\u0005o\u0000\u0000"+
		"\u1222\u1225\u0005\u01a6\u0000\u0000\u1223\u1225\u0005\u009c\u0000\u0000"+
		"\u1224\u1219\u0001\u0000\u0000\u0000\u1224\u121a\u0001\u0000\u0000\u0000"+
		"\u1224\u121f\u0001\u0000\u0000\u0000\u1224\u1220\u0001\u0000\u0000\u0000"+
		"\u1224\u1221\u0001\u0000\u0000\u0000\u1224\u1223\u0001\u0000\u0000\u0000"+
		"\u1225\u018f\u0001\u0000\u0000\u0000\u1226\u1229\u0003\u0012\t\u0000\u1227"+
		"\u1229\u0003\u0004\u0002\u0000\u1228\u1226\u0001\u0000\u0000\u0000\u1228"+
		"\u1227\u0001\u0000\u0000\u0000\u1229\u122a\u0001\u0000\u0000\u0000\u122a"+
		"\u122b\u0005\u045a\u0000\u0000\u122b\u0191\u0001\u0000\u0000\u0000\u122c"+
		"\u122f\u0005\u00b7\u0000\u0000\u122d\u1230\u0003\u0238\u011c\u0000\u122e"+
		"\u1230\u0003\u0288\u0144\u0000\u122f\u122d\u0001\u0000\u0000\u0000\u122f"+
		"\u122e\u0001\u0000\u0000\u0000\u1230\u1231\u0001\u0000\u0000\u0000\u1231"+
		"\u1233\u0005\u00a8\u0000\u0000\u1232\u1234\u0003\u0190\u00c8\u0000\u1233"+
		"\u1232\u0001\u0000\u0000\u0000\u1234\u1235\u0001\u0000\u0000\u0000\u1235"+
		"\u1233\u0001\u0000\u0000\u0000\u1235\u1236\u0001\u0000\u0000\u0000\u1236"+
		"\u0193\u0001\u0000\u0000\u0000\u1237\u1238\u00054\u0000\u0000\u1238\u1239"+
		"\u0003\u0288\u0144\u0000\u1239\u123b\u0005\u00a8\u0000\u0000\u123a\u123c"+
		"\u0003\u0190\u00c8\u0000\u123b\u123a\u0001\u0000\u0000\u0000\u123c\u123d"+
		"\u0001\u0000\u0000\u0000\u123d\u123b\u0001\u0000\u0000\u0000\u123d\u123e"+
		"\u0001\u0000\u0000\u0000\u123e\u0195\u0001\u0000\u0000\u0000\u123f\u1240"+
		"\u0005\u0007\u0000\u0000\u1240\u1241\u0005\u0280\u0000\u0000\u1241\u1246"+
		"\u0003\u01aa\u00d5\u0000\u1242\u1243\u0005\u0459\u0000\u0000\u1243\u1245"+
		"\u0003\u01aa\u00d5\u0000\u1244\u1242\u0001\u0000\u0000\u0000\u1245\u1248"+
		"\u0001\u0000\u0000\u0000\u1246\u1244\u0001\u0000\u0000\u0000\u1246\u1247"+
		"\u0001\u0000\u0000\u0000\u1247\u1276\u0001\u0000\u0000\u0000\u1248\u1246"+
		"\u0001\u0000\u0000\u0000\u1249\u124a\u0005\u0007\u0000\u0000\u124a\u124c"+
		"\u0005\u0280\u0000\u0000\u124b\u124d\u0003\u025c\u012e\u0000\u124c\u124b"+
		"\u0001\u0000\u0000\u0000\u124c\u124d\u0001\u0000\u0000\u0000\u124d\u124e"+
		"\u0001\u0000\u0000\u0000\u124e\u1253\u0003\u01ac\u00d6\u0000\u124f\u1250"+
		"\u0005\u0459\u0000\u0000\u1250\u1252\u0003\u01ac\u00d6\u0000\u1251\u124f"+
		"\u0001\u0000\u0000\u0000\u1252\u1255\u0001\u0000\u0000\u0000\u1253\u1251"+
		"\u0001\u0000\u0000\u0000\u1253\u1254\u0001\u0000\u0000\u0000\u1254\u1264"+
		"\u0001\u0000\u0000\u0000\u1255\u1253\u0001\u0000\u0000\u0000\u1256\u1262"+
		"\u0005\u008b\u0000\u0000\u1257\u1263\u0005\u01fe\u0000\u0000\u1258\u125f"+
		"\u0003\u01ae\u00d7\u0000\u1259\u125b\u0005\n\u0000\u0000\u125a\u1259\u0001"+
		"\u0000\u0000\u0000\u125a\u125b\u0001\u0000\u0000\u0000\u125b\u125c\u0001"+
		"\u0000\u0000\u0000\u125c\u125e\u0003\u01ae\u00d7\u0000\u125d\u125a\u0001"+
		"\u0000\u0000\u0000\u125e\u1261\u0001\u0000\u0000\u0000\u125f\u125d\u0001"+
		"\u0000\u0000\u0000\u125f\u1260\u0001\u0000\u0000\u0000\u1260\u1263\u0001"+
		"\u0000\u0000\u0000\u1261\u125f\u0001\u0000\u0000\u0000\u1262\u1257\u0001"+
		"\u0000\u0000\u0000\u1262\u1258\u0001\u0000\u0000\u0000\u1263\u1265\u0001"+
		"\u0000\u0000\u0000\u1264\u1256\u0001\u0000\u0000\u0000\u1264\u1265\u0001"+
		"\u0000\u0000\u0000\u1265\u126c\u0001\u0000\u0000\u0000\u1266\u1268\u0005"+
		"\u00ba\u0000\u0000\u1267\u1269\u0003\u01b0\u00d8\u0000\u1268\u1267\u0001"+
		"\u0000\u0000\u0000\u1269\u126a\u0001\u0000\u0000\u0000\u126a\u1268\u0001"+
		"\u0000\u0000\u0000\u126a\u126b\u0001\u0000\u0000\u0000\u126b\u126d\u0001"+
		"\u0000\u0000\u0000\u126c\u1266\u0001\u0000\u0000\u0000\u126c\u126d\u0001"+
		"\u0000\u0000\u0000\u126d\u1272\u0001\u0000\u0000\u0000\u126e\u1271\u0003"+
		"\u01b2\u00d9\u0000\u126f\u1271\u0003\u01b4\u00da\u0000\u1270\u126e\u0001"+
		"\u0000\u0000\u0000\u1270\u126f\u0001\u0000\u0000\u0000\u1271\u1274\u0001"+
		"\u0000\u0000\u0000\u1272\u1270\u0001\u0000\u0000\u0000\u1272\u1273\u0001"+
		"\u0000\u0000\u0000\u1273\u1276\u0001\u0000\u0000\u0000\u1274\u1272\u0001"+
		"\u0000\u0000\u0000\u1275\u123f\u0001\u0000\u0000\u0000\u1275\u1249\u0001"+
		"\u0000\u0000\u0000\u1276\u0197\u0001\u0000\u0000\u0000\u1277\u1278\u0005"+
		" \u0000\u0000\u1278\u1279\u0005\u0280\u0000\u0000\u1279\u127e\u0003\u01ac"+
		"\u00d6\u0000\u127a\u127b\u0005\u0459\u0000\u0000\u127b\u127d\u0003\u01ac"+
		"\u00d6\u0000\u127c\u127a\u0001\u0000\u0000\u0000\u127d\u1280\u0001\u0000"+
		"\u0000\u0000\u127e\u127c\u0001\u0000\u0000\u0000\u127e\u127f\u0001\u0000"+
		"\u0000\u0000\u127f\u12ae\u0001\u0000\u0000\u0000\u1280\u127e\u0001\u0000"+
		"\u0000\u0000\u1281\u1282\u0005 \u0000\u0000\u1282\u1284\u0005\u0280\u0000"+
		"\u0000\u1283\u1285\u0003\u025e\u012f\u0000\u1284\u1283\u0001\u0000\u0000"+
		"\u0000\u1284\u1285\u0001\u0000\u0000\u0000\u1285\u1286\u0001\u0000\u0000"+
		"\u0000\u1286\u128b\u0003\u01ac\u00d6\u0000\u1287\u1288\u0005\u0459\u0000"+
		"\u0000\u1288\u128a\u0003\u01ac\u00d6\u0000\u1289\u1287\u0001\u0000\u0000"+
		"\u0000\u128a\u128d\u0001\u0000\u0000\u0000\u128b\u1289\u0001\u0000\u0000"+
		"\u0000\u128b\u128c\u0001\u0000\u0000\u0000\u128c\u129c\u0001\u0000\u0000"+
		"\u0000\u128d\u128b\u0001\u0000\u0000\u0000\u128e\u129a\u0005\u008b\u0000"+
		"\u0000\u128f\u129b\u0005\u01fe\u0000\u0000\u1290\u1297\u0003\u01ae\u00d7"+
		"\u0000\u1291\u1293\u0005\n\u0000\u0000\u1292\u1291\u0001\u0000\u0000\u0000"+
		"\u1292\u1293\u0001\u0000\u0000\u0000\u1293\u1294\u0001\u0000\u0000\u0000"+
		"\u1294\u1296\u0003\u01ae\u00d7\u0000\u1295\u1292\u0001\u0000\u0000\u0000"+
		"\u1296\u1299\u0001\u0000\u0000\u0000\u1297\u1295\u0001\u0000\u0000\u0000"+
		"\u1297\u1298\u0001\u0000\u0000\u0000\u1298\u129b\u0001\u0000\u0000\u0000"+
		"\u1299\u1297\u0001\u0000\u0000\u0000\u129a\u128f\u0001\u0000\u0000\u0000"+
		"\u129a\u1290\u0001\u0000\u0000\u0000\u129b\u129d\u0001\u0000\u0000\u0000"+
		"\u129c\u128e\u0001\u0000\u0000\u0000\u129c\u129d\u0001\u0000\u0000\u0000"+
		"\u129d\u12a4\u0001\u0000\u0000\u0000\u129e\u12a0\u0005\u00ba\u0000\u0000"+
		"\u129f\u12a1\u0003\u01b0\u00d8\u0000\u12a0\u129f\u0001\u0000\u0000\u0000"+
		"\u12a1\u12a2\u0001\u0000\u0000\u0000\u12a2\u12a0\u0001\u0000\u0000\u0000"+
		"\u12a2\u12a3\u0001\u0000\u0000\u0000\u12a3\u12a5\u0001\u0000\u0000\u0000"+
		"\u12a4\u129e\u0001\u0000\u0000\u0000\u12a4\u12a5\u0001\u0000\u0000\u0000"+
		"\u12a5\u12aa\u0001\u0000\u0000\u0000\u12a6\u12a9\u0003\u01b2\u00d9\u0000"+
		"\u12a7\u12a9\u0003\u01b4\u00da\u0000\u12a8\u12a6\u0001\u0000\u0000\u0000"+
		"\u12a8\u12a7\u0001\u0000\u0000\u0000\u12a9\u12ac\u0001\u0000\u0000\u0000"+
		"\u12aa\u12a8\u0001\u0000\u0000\u0000\u12aa\u12ab\u0001\u0000\u0000\u0000"+
		"\u12ab\u12ae\u0001\u0000\u0000\u0000\u12ac\u12aa\u0001\u0000\u0000\u0000"+
		"\u12ad\u1277\u0001\u0000\u0000\u0000\u12ad\u1281\u0001\u0000\u0000\u0000"+
		"\u12ae\u0199\u0001\u0000\u0000\u0000\u12af\u12b0\u00051\u0000\u0000\u12b0"+
		"\u12b2\u0005\u0280\u0000\u0000\u12b1\u12b3\u0003\u025c\u012e\u0000\u12b2"+
		"\u12b1\u0001\u0000\u0000\u0000\u12b2\u12b3\u0001\u0000\u0000\u0000\u12b3"+
		"\u12b4\u0001\u0000\u0000\u0000\u12b4\u12b9\u0003\u0214\u010a\u0000\u12b5"+
		"\u12b6\u0005\u0459\u0000\u0000\u12b6\u12b8\u0003\u0214\u010a\u0000\u12b7"+
		"\u12b5\u0001\u0000\u0000\u0000\u12b8\u12bb\u0001\u0000\u0000\u0000\u12b9"+
		"\u12b7\u0001\u0000\u0000\u0000\u12b9\u12ba\u0001\u0000\u0000\u0000\u12ba"+
		"\u019b\u0001\u0000\u0000\u0000\u12bb\u12b9\u0001\u0000\u0000\u0000\u12bc"+
		"\u12bd\u0005H\u0000\u0000\u12bd\u12c2\u0003\u01b6\u00db\u0000\u12be\u12bf"+
		"\u0005\u0459\u0000\u0000\u12bf\u12c1\u0003\u01b6\u00db\u0000\u12c0\u12be"+
		"\u0001\u0000\u0000\u0000\u12c1\u12c4\u0001\u0000\u0000\u0000\u12c2\u12c0"+
		"\u0001\u0000\u0000\u0000\u12c2\u12c3\u0001\u0000\u0000\u0000\u12c3\u12c5"+
		"\u0001\u0000\u0000\u0000\u12c4\u12c2\u0001\u0000\u0000\u0000\u12c5\u12c7"+
		"\u0005s\u0000\u0000\u12c6\u12c8\u0007@\u0000\u0000\u12c7\u12c6\u0001\u0000"+
		"\u0000\u0000\u12c7\u12c8\u0001\u0000\u0000\u0000\u12c8\u12c9\u0001\u0000"+
		"\u0000\u0000\u12c9\u12ca\u0003\u01ba\u00dd\u0000\u12ca\u12cb\u0005\u00a9"+
		"\u0000\u0000\u12cb\u12d0\u0003\u01ac\u00d6\u0000\u12cc\u12cd\u0005\u0459"+
		"\u0000\u0000\u12cd\u12cf\u0003\u01ac\u00d6\u0000\u12ce\u12cc\u0001\u0000"+
		"\u0000\u0000\u12cf\u12d2\u0001\u0000\u0000\u0000\u12d0\u12ce\u0001\u0000"+
		"\u0000\u0000\u12d0\u12d1\u0001\u0000\u0000\u0000\u12d1\u12e1\u0001\u0000"+
		"\u0000\u0000\u12d2\u12d0\u0001\u0000\u0000\u0000\u12d3\u12df\u0005\u008b"+
		"\u0000\u0000\u12d4\u12e0\u0005\u01fe\u0000\u0000\u12d5\u12dc\u0003\u01ae"+
		"\u00d7\u0000\u12d6\u12d8\u0005\n\u0000\u0000\u12d7\u12d6\u0001\u0000\u0000"+
		"\u0000\u12d7\u12d8\u0001\u0000\u0000\u0000\u12d8\u12d9\u0001\u0000\u0000"+
		"\u0000\u12d9\u12db\u0003\u01ae\u00d7\u0000\u12da\u12d7\u0001\u0000\u0000"+
		"\u0000\u12db\u12de\u0001\u0000\u0000\u0000\u12dc\u12da\u0001\u0000\u0000"+
		"\u0000\u12dc\u12dd\u0001\u0000\u0000\u0000\u12dd\u12e0\u0001\u0000\u0000"+
		"\u0000\u12de\u12dc\u0001\u0000\u0000\u0000\u12df\u12d4\u0001\u0000\u0000"+
		"\u0000\u12df\u12d5\u0001\u0000\u0000\u0000\u12e0\u12e2\u0001\u0000\u0000"+
		"\u0000\u12e1\u12d3\u0001\u0000\u0000\u0000\u12e1\u12e2\u0001\u0000\u0000"+
		"\u0000\u12e2\u12ec\u0001\u0000\u0000\u0000\u12e3\u12e9\u0005\u00ba\u0000"+
		"\u0000\u12e4\u12e5\u0005H\u0000\u0000\u12e5\u12e8\u0005u\u0000\u0000\u12e6"+
		"\u12e8\u0003\u01b0\u00d8\u0000\u12e7\u12e4\u0001\u0000\u0000\u0000\u12e7"+
		"\u12e6\u0001\u0000\u0000\u0000\u12e8\u12eb\u0001\u0000\u0000\u0000\u12e9"+
		"\u12e7\u0001\u0000\u0000\u0000\u12e9\u12ea\u0001\u0000\u0000\u0000\u12ea"+
		"\u12ed\u0001\u0000\u0000\u0000\u12eb\u12e9\u0001\u0000\u0000\u0000\u12ec"+
		"\u12e3\u0001\u0000\u0000\u0000\u12ec\u12ed\u0001\u0000\u0000\u0000\u12ed"+
		"\u12f4\u0001\u0000\u0000\u0000\u12ee\u12ef\u0005\f\u0000\u0000\u12ef\u12f0"+
		"\u0003\u0214\u010a\u0000\u12f0\u12f1\u0005\u00ba\u0000\u0000\u12f1\u12f2"+
		"\u0005\u023c\u0000\u0000\u12f2\u12f3\u0003\u019e\u00cf\u0000\u12f3\u12f5"+
		"\u0001\u0000\u0000\u0000\u12f4\u12ee\u0001\u0000\u0000\u0000\u12f4\u12f5"+
		"\u0001\u0000\u0000\u0000\u12f5\u131a\u0001\u0000\u0000\u0000\u12f6\u12f9"+
		"\u0005H\u0000\u0000\u12f7\u12fa\u0003\u0214\u010a\u0000\u12f8\u12fa\u0003"+
		"\u0226\u0113\u0000\u12f9\u12f7\u0001\u0000\u0000\u0000\u12f9\u12f8\u0001"+
		"\u0000\u0000\u0000\u12fa\u1302\u0001\u0000\u0000\u0000\u12fb\u12fe\u0005"+
		"\u0459\u0000\u0000\u12fc\u12ff\u0003\u0214\u010a\u0000\u12fd\u12ff\u0003"+
		"\u0226\u0113\u0000\u12fe\u12fc\u0001\u0000\u0000\u0000\u12fe\u12fd\u0001"+
		"\u0000\u0000\u0000\u12ff\u1301\u0001\u0000\u0000\u0000\u1300\u12fb\u0001"+
		"\u0000\u0000\u0000\u1301\u1304\u0001\u0000\u0000\u0000\u1302\u1300\u0001"+
		"\u0000\u0000\u0000\u1302\u1303\u0001\u0000\u0000\u0000\u1303\u1305\u0001"+
		"\u0000\u0000\u0000\u1304\u1302\u0001\u0000\u0000\u0000\u1305\u1308\u0005"+
		"\u00a9\u0000\u0000\u1306\u1309\u0003\u0214\u010a\u0000\u1307\u1309\u0003"+
		"\u0226\u0113\u0000\u1308\u1306\u0001\u0000\u0000\u0000\u1308\u1307\u0001"+
		"\u0000\u0000\u0000\u1309\u1311\u0001\u0000\u0000\u0000\u130a\u130d\u0005"+
		"\u0459\u0000\u0000\u130b\u130e\u0003\u0214\u010a\u0000\u130c\u130e\u0003"+
		"\u0226\u0113\u0000\u130d\u130b\u0001\u0000\u0000\u0000\u130d\u130c\u0001"+
		"\u0000\u0000\u0000\u130e\u1310\u0001\u0000\u0000\u0000\u130f\u130a\u0001"+
		"\u0000\u0000\u0000\u1310\u1313\u0001\u0000\u0000\u0000\u1311\u130f\u0001"+
		"\u0000\u0000\u0000\u1311\u1312\u0001\u0000\u0000\u0000\u1312\u1317\u0001"+
		"\u0000\u0000\u0000\u1313\u1311\u0001\u0000\u0000\u0000\u1314\u1315\u0005"+
		"\u00ba\u0000\u0000\u1315\u1316\u0005\u02b7\u0000\u0000\u1316\u1318\u0005"+
		"u\u0000\u0000\u1317\u1314\u0001\u0000\u0000\u0000\u1317\u1318\u0001\u0000"+
		"\u0000\u0000\u1318\u131a\u0001\u0000\u0000\u0000\u1319\u12bc\u0001\u0000"+
		"\u0000\u0000\u1319\u12f6\u0001\u0000\u0000\u0000\u131a\u019d\u0001\u0000"+
		"\u0000\u0000\u131b\u1332\u0005(\u0000\u0000\u131c\u1332\u0005\u01fe\u0000"+
		"\u0000\u131d\u1327\u0005\u0006\u0000\u0000\u131e\u131f\u00058\u0000\u0000"+
		"\u131f\u1324\u0003\u0214\u010a\u0000\u1320\u1321\u0005\u0459\u0000\u0000"+
		"\u1321\u1323\u0003\u0214\u010a\u0000\u1322\u1320\u0001\u0000\u0000\u0000"+
		"\u1323\u1326\u0001\u0000\u0000\u0000\u1324\u1322\u0001\u0000\u0000\u0000"+
		"\u1324\u1325\u0001\u0000\u0000\u0000\u1325\u1328\u0001\u0000\u0000\u0000"+
		"\u1326\u1324\u0001\u0000\u0000\u0000\u1327\u131e\u0001\u0000\u0000\u0000"+
		"\u1327\u1328\u0001\u0000\u0000\u0000\u1328\u1332\u0001\u0000\u0000\u0000"+
		"\u1329\u132e\u0003\u0214\u010a\u0000\u132a\u132b\u0005\u0459\u0000\u0000"+
		"\u132b\u132d\u0003\u0214\u010a\u0000\u132c\u132a\u0001\u0000\u0000\u0000"+
		"\u132d\u1330\u0001\u0000\u0000\u0000\u132e\u132c\u0001\u0000\u0000\u0000"+
		"\u132e\u132f\u0001\u0000\u0000\u0000\u132f\u1332\u0001\u0000\u0000\u0000"+
		"\u1330\u132e\u0001\u0000\u0000\u0000\u1331\u131b\u0001\u0000\u0000\u0000"+
		"\u1331\u131c\u0001\u0000\u0000\u0000\u1331\u131d\u0001\u0000\u0000\u0000"+
		"\u1331\u1329\u0001\u0000\u0000\u0000\u1332\u019f\u0001\u0000\u0000\u0000"+
		"\u1333\u1334\u0005H\u0000\u0000\u1334\u1335\u0005\u0220\u0000\u0000\u1335"+
		"\u1336\u0005s\u0000\u0000\u1336\u1337\u0003\u0214\u010a\u0000\u1337\u1338"+
		"\u0005\u00a9\u0000\u0000\u1338\u133d\u0003\u0214\u010a\u0000\u1339\u133a"+
		"\u0005\u0459\u0000\u0000\u133a\u133c\u0003\u0214\u010a\u0000\u133b\u1339"+
		"\u0001\u0000\u0000\u0000\u133c\u133f\u0001\u0000\u0000\u0000\u133d\u133b"+
		"\u0001\u0000\u0000\u0000\u133d\u133e\u0001\u0000\u0000\u0000\u133e\u1343"+
		"\u0001\u0000\u0000\u0000\u133f\u133d\u0001\u0000\u0000\u0000\u1340\u1341"+
		"\u0005\u00ba\u0000\u0000\u1341\u1342\u0005H\u0000\u0000\u1342\u1344\u0005"+
		"u\u0000\u0000\u1343\u1340\u0001\u0000\u0000\u0000\u1343\u1344\u0001\u0000"+
		"\u0000\u0000\u1344\u01a1\u0001\u0000\u0000\u0000\u1345\u1346\u0005\u0088"+
		"\u0000\u0000\u1346\u1347\u0005\u0280\u0000\u0000\u1347\u134c\u0003\u01bc"+
		"\u00de\u0000\u1348\u1349\u0005\u0459\u0000\u0000\u1349\u134b\u0003\u01bc"+
		"\u00de\u0000\u134a\u1348\u0001\u0000\u0000\u0000\u134b\u134e\u0001\u0000"+
		"\u0000\u0000\u134c\u134a\u0001\u0000\u0000\u0000\u134c\u134d\u0001\u0000"+
		"\u0000\u0000\u134d\u01a3\u0001\u0000\u0000\u0000\u134e\u134c\u0001\u0000"+
		"\u0000\u0000\u134f\u1350\u0005\u0090\u0000\u0000\u1350\u1355\u0003\u01b6"+
		"\u00db\u0000\u1351\u1352\u0005\u0459\u0000\u0000\u1352\u1354\u0003\u01b6"+
		"\u00db\u0000\u1353\u1351\u0001\u0000\u0000\u0000\u1354\u1357\u0001\u0000"+
		"\u0000\u0000\u1355\u1353\u0001\u0000\u0000\u0000\u1355\u1356\u0001\u0000"+
		"\u0000\u0000\u1356\u1358\u0001\u0000\u0000\u0000\u1357\u1355\u0001\u0000"+
		"\u0000\u0000\u1358\u135a\u0005s\u0000\u0000\u1359\u135b\u0007@\u0000\u0000"+
		"\u135a\u1359\u0001\u0000\u0000\u0000\u135a\u135b\u0001\u0000\u0000\u0000"+
		"\u135b\u135c\u0001\u0000\u0000\u0000\u135c\u135d\u0003\u01ba\u00dd\u0000"+
		"\u135d\u135e\u0005D\u0000\u0000\u135e\u1363\u0003\u0214\u010a\u0000\u135f"+
		"\u1360\u0005\u0459\u0000\u0000\u1360\u1362\u0003\u0214\u010a\u0000\u1361"+
		"\u135f\u0001\u0000\u0000\u0000\u1362\u1365\u0001\u0000\u0000\u0000\u1363"+
		"\u1361\u0001\u0000\u0000\u0000\u1363\u1364\u0001\u0000\u0000\u0000\u1364"+
		"\u1390\u0001\u0000\u0000\u0000\u1365\u1363\u0001\u0000\u0000\u0000\u1366"+
		"\u1367\u0005\u0090\u0000\u0000\u1367\u1369\u0005\u0006\u0000\u0000\u1368"+
		"\u136a\u0005\u02a8\u0000\u0000\u1369\u1368\u0001\u0000\u0000\u0000\u1369"+
		"\u136a\u0001\u0000\u0000\u0000\u136a\u136b\u0001\u0000\u0000\u0000\u136b"+
		"\u136c\u0005\u0459\u0000\u0000\u136c\u136d\u0005H\u0000\u0000\u136d\u136e"+
		"\u0005u\u0000\u0000\u136e\u136f\u0005D\u0000\u0000\u136f\u1374\u0003\u0214"+
		"\u010a\u0000\u1370\u1371\u0005\u0459\u0000\u0000\u1371\u1373\u0003\u0214"+
		"\u010a\u0000\u1372\u1370\u0001\u0000\u0000\u0000\u1373\u1376\u0001\u0000"+
		"\u0000\u0000\u1374\u1372\u0001\u0000\u0000\u0000\u1374\u1375\u0001\u0000"+
		"\u0000\u0000\u1375\u1390\u0001\u0000\u0000\u0000\u1376\u1374\u0001\u0000"+
		"\u0000\u0000\u1377\u1378\u0005\u0090\u0000\u0000\u1378\u137d\u0003\u0226"+
		"\u0113\u0000\u1379\u137a\u0005\u0459\u0000\u0000\u137a\u137c\u0003\u0226"+
		"\u0113\u0000\u137b\u1379\u0001\u0000\u0000\u0000\u137c\u137f\u0001\u0000"+
		"\u0000\u0000\u137d\u137b\u0001\u0000\u0000\u0000\u137d\u137e\u0001\u0000"+
		"\u0000\u0000\u137e\u1380\u0001\u0000\u0000\u0000\u137f\u137d\u0001\u0000"+
		"\u0000\u0000\u1380\u1383\u0005D\u0000\u0000\u1381\u1384\u0003\u0214\u010a"+
		"\u0000\u1382\u1384\u0003\u0226\u0113\u0000\u1383\u1381\u0001\u0000\u0000"+
		"\u0000\u1383\u1382\u0001\u0000\u0000\u0000\u1384\u138c\u0001\u0000\u0000"+
		"\u0000\u1385\u1388\u0005\u0459\u0000\u0000\u1386\u1389\u0003\u0214\u010a"+
		"\u0000\u1387\u1389\u0003\u0226\u0113\u0000\u1388\u1386\u0001\u0000\u0000"+
		"\u0000\u1388\u1387\u0001\u0000\u0000\u0000\u1389\u138b\u0001\u0000\u0000"+
		"\u0000\u138a\u1385\u0001\u0000\u0000\u0000\u138b\u138e\u0001\u0000\u0000"+
		"\u0000\u138c\u138a\u0001\u0000\u0000\u0000\u138c\u138d\u0001\u0000\u0000"+
		"\u0000\u138d\u1390\u0001\u0000\u0000\u0000\u138e\u138c\u0001\u0000\u0000"+
		"\u0000\u138f\u134f\u0001\u0000\u0000\u0000\u138f\u1366\u0001\u0000\u0000"+
		"\u0000\u138f\u1377\u0001\u0000\u0000\u0000\u1390\u01a5\u0001\u0000\u0000"+
		"\u0000\u1391\u1392\u0005\u0090\u0000\u0000\u1392\u1393\u0005\u0220\u0000"+
		"\u0000\u1393\u1394\u0005s\u0000\u0000\u1394\u1395\u0003\u0214\u010a\u0000"+
		"\u1395\u1396\u0005D\u0000\u0000\u1396\u139b\u0003\u0214\u010a\u0000\u1397"+
		"\u1398\u0005\u0459\u0000\u0000\u1398\u139a\u0003\u0214\u010a\u0000\u1399"+
		"\u1397\u0001\u0000\u0000\u0000\u139a\u139d\u0001\u0000\u0000\u0000\u139b"+
		"\u1399\u0001\u0000\u0000\u0000\u139b\u139c\u0001\u0000\u0000\u0000\u139c"+
		"\u01a7\u0001\u0000\u0000\u0000\u139d\u139b\u0001\u0000\u0000\u0000\u139e"+
		"\u139f\u0005\u0096\u0000\u0000\u139f\u13a2\u0005\u0212\u0000\u0000\u13a0"+
		"\u13a1\u0005A\u0000\u0000\u13a1\u13a3\u0003\u0214\u010a\u0000\u13a2\u13a0"+
		"\u0001\u0000\u0000\u0000\u13a2\u13a3\u0001\u0000\u0000\u0000\u13a3\u13a4"+
		"\u0001\u0000\u0000\u0000\u13a4\u13a7\u0005\u044e\u0000\u0000\u13a5\u13a8"+
		"\u0003\u0282\u0141\u0000\u13a6\u13a8\u0005\u0466\u0000\u0000\u13a7\u13a5"+
		"\u0001\u0000\u0000\u0000\u13a7\u13a6\u0001\u0000\u0000\u0000\u13a8\u01a9"+
		"\u0001\u0000\u0000\u0000\u13a9\u13aa\u0003\u0214\u010a\u0000\u13aa\u13ab"+
		"\u0003\u01b2\u00d9\u0000\u13ab\u01ab\u0001\u0000\u0000\u0000\u13ac\u13ad"+
		"\u0003\u0214\u010a\u0000\u13ad\u13ae\u0005\u01b2\u0000\u0000\u13ae\u13af"+
		"\u0005\u0012\u0000\u0000\u13af\u13b0\u0005\u0212\u0000\u0000\u13b0\u13b1"+
		"\u0005\u0466\u0000\u0000\u13b1\u13c9\u0001\u0000\u0000\u0000\u13b2\u13b3"+
		"\u0003\u0214\u010a\u0000\u13b3\u13b6\u0005\u01b2\u0000\u0000\u13b4\u13b5"+
		"\u0005\u00ba\u0000\u0000\u13b5\u13b7\u0003\u0224\u0112\u0000\u13b6\u13b4"+
		"\u0001\u0000\u0000\u0000\u13b6\u13b7\u0001\u0000\u0000\u0000\u13b7\u13b8"+
		"\u0001\u0000\u0000\u0000\u13b8\u13b9\u0005\u0012\u0000\u0000\u13b9\u13bd"+
		"\u0005\u0466\u0000\u0000\u13ba\u13bb\u0005\u008e\u0000\u0000\u13bb\u13bc"+
		"\u0005\"\u0000\u0000\u13bc\u13be\u0005\u0212\u0000\u0000\u13bd\u13ba\u0001"+
		"\u0000\u0000\u0000\u13bd\u13be\u0001\u0000\u0000\u0000\u13be\u13c9\u0001"+
		"\u0000\u0000\u0000\u13bf\u13c0\u0003\u0214\u010a\u0000\u13c0\u13c1\u0005"+
		"\u01b2\u0000\u0000\u13c1\u13c2\u0005\u00ba\u0000\u0000\u13c2\u13c5\u0003"+
		"\u0224\u0112\u0000\u13c3\u13c4\u0005\f\u0000\u0000\u13c4\u13c6\u0005\u0466"+
		"\u0000\u0000\u13c5\u13c3\u0001\u0000\u0000\u0000\u13c5\u13c6\u0001\u0000"+
		"\u0000\u0000\u13c6\u13c9\u0001\u0000\u0000\u0000\u13c7\u13c9\u0003\u0214"+
		"\u010a\u0000\u13c8\u13ac\u0001\u0000\u0000\u0000\u13c8\u13b2\u0001\u0000"+
		"\u0000\u0000\u13c8\u13bf\u0001\u0000\u0000\u0000\u13c8\u13c7\u0001\u0000"+
		"\u0000\u0000\u13c9\u01ad\u0001\u0000\u0000\u0000\u13ca\u13d3\u0005\u00a2"+
		"\u0000\u0000\u13cb\u13d3\u0005\u028f\u0000\u0000\u13cc\u13cd\u0005\u015d"+
		"\u0000\u0000\u13cd\u13d3\u0005\u0466\u0000\u0000\u13ce\u13cf\u0005\u01c2"+
		"\u0000\u0000\u13cf\u13d3\u0005\u0466\u0000\u0000\u13d0\u13d1\u0005\u0267"+
		"\u0000\u0000\u13d1\u13d3\u0005\u0466\u0000\u0000\u13d2\u13ca\u0001\u0000"+
		"\u0000\u0000\u13d2\u13cb\u0001\u0000\u0000\u0000\u13d2\u13cc\u0001\u0000"+
		"\u0000\u0000\u13d2\u13ce\u0001\u0000\u0000\u0000\u13d2\u13d0\u0001\u0000"+
		"\u0000\u0000\u13d3\u01af\u0001\u0000\u0000\u0000\u13d4\u13d5\u0005\u01e4"+
		"\u0000\u0000\u13d5\u13dd\u0003\u022c\u0116\u0000\u13d6\u13d7\u0005\u01e7"+
		"\u0000\u0000\u13d7\u13dd\u0003\u022c\u0116\u0000\u13d8\u13d9\u0005\u01e3"+
		"\u0000\u0000\u13d9\u13dd\u0003\u022c\u0116\u0000\u13da\u13db\u0005\u01e8"+
		"\u0000\u0000\u13db\u13dd\u0003\u022c\u0116\u0000\u13dc\u13d4\u0001\u0000"+
		"\u0000\u0000\u13dc\u13d6\u0001\u0000\u0000\u0000\u13dc\u13d8\u0001\u0000"+
		"\u0000\u0000\u13dc\u13da\u0001\u0000\u0000\u0000\u13dd\u01b1\u0001\u0000"+
		"\u0000\u0000\u13de\u13df\u0005\u0212\u0000\u0000\u13df\u13e6\u0005\u0198"+
		"\u0000\u0000\u13e0\u13e7\u0005(\u0000\u0000\u13e1\u13e7\u0005\u01f8\u0000"+
		"\u0000\u13e2\u13e3\u0005V\u0000\u0000\u13e3\u13e4\u0003\u022c\u0116\u0000"+
		"\u13e4\u13e5\u0005\u029a\u0000\u0000\u13e5\u13e7\u0001\u0000\u0000\u0000"+
		"\u13e6\u13e0\u0001\u0000\u0000\u0000\u13e6\u13e1\u0001\u0000\u0000\u0000"+
		"\u13e6\u13e2\u0001\u0000\u0000\u0000\u13e6\u13e7\u0001\u0000\u0000\u0000"+
		"\u13e7\u01b3\u0001\u0000\u0000\u0000\u13e8\u13e9\u0005\u0143\u0000\u0000"+
		"\u13e9\u13ea\u0007A\u0000\u0000\u13ea\u01b5\u0001\u0000\u0000\u0000\u13eb"+
		"\u13f0\u0003\u01b8\u00dc\u0000\u13ec\u13ed\u0005\u0457\u0000\u0000\u13ed"+
		"\u13ee\u0003\u0246\u0123\u0000\u13ee\u13ef\u0005\u0458\u0000\u0000\u13ef"+
		"\u13f1\u0001\u0000\u0000\u0000\u13f0\u13ec\u0001\u0000\u0000\u0000\u13f0"+
		"\u13f1\u0001\u0000\u0000\u0000\u13f1\u01b7\u0001\u0000\u0000\u0000\u13f2"+
		"\u13f4\u0005\u0006\u0000\u0000\u13f3\u13f5\u0005\u02a8\u0000\u0000\u13f4"+
		"\u13f3\u0001\u0000\u0000\u0000\u13f4\u13f5\u0001\u0000\u0000\u0000\u13f5"+
		"\u1447\u0001\u0000\u0000\u0000\u13f6\u13f8\u0005\u0007\u0000\u0000\u13f7"+
		"\u13f9\u0005\u02a1\u0000\u0000\u13f8\u13f7\u0001\u0000\u0000\u0000\u13f8"+
		"\u13f9\u0001\u0000\u0000\u0000\u13f9\u1447\u0001\u0000\u0000\u0000\u13fa"+
		"\u1402\u0005 \u0000\u0000\u13fb\u13fc\u0005\u0270\u0000\u0000\u13fc\u1403"+
		"\u0005\u02a0\u0000\u0000\u13fd\u1403\u0005\u02a1\u0000\u0000\u13fe\u1403"+
		"\u0005\u0286\u0000\u0000\u13ff\u1403\u0005\u0280\u0000\u0000\u1400\u1403"+
		"\u0005\u026e\u0000\u0000\u1401\u1403\u0005\u023c\u0000\u0000\u1402\u13fb"+
		"\u0001\u0000\u0000\u0000\u1402\u13fd\u0001\u0000\u0000\u0000\u1402\u13fe"+
		"\u0001\u0000\u0000\u0000\u1402\u13ff\u0001\u0000\u0000\u0000\u1402\u1400"+
		"\u0001\u0000\u0000\u0000\u1402\u1401\u0001\u0000\u0000\u0000\u1402\u1403"+
		"\u0001\u0000\u0000\u0000\u1403\u1447\u0001\u0000\u0000\u0000\u1404\u1447"+
		"\u0005*\u0000\u0000\u1405\u1407\u00051\u0000\u0000\u1406\u1408\u0005\u023c"+
		"\u0000\u0000\u1407\u1406\u0001\u0000\u0000\u0000\u1407\u1408\u0001\u0000"+
		"\u0000\u0000\u1408\u1447\u0001\u0000\u0000\u0000\u1409\u1447\u0005\u0193"+
		"\u0000\u0000\u140a\u1447\u0005\u02a2\u0000\u0000\u140b\u1447\u0005\u02a3"+
		"\u0000\u0000\u140c\u140d\u0005H\u0000\u0000\u140d\u1447\u0005u\u0000\u0000"+
		"\u140e\u1447\u0005Q\u0000\u0000\u140f\u1447\u0005U\u0000\u0000\u1410\u1411"+
		"\u0005f\u0000\u0000\u1411\u1447\u0005\u02a0\u0000\u0000\u1412\u1447\u0005"+
		"\u02a4\u0000\u0000\u1413\u1447\u0005\u0220\u0000\u0000\u1414\u1447\u0005"+
		"\u0085\u0000\u0000\u1415\u1447\u0005\u02a5\u0000\u0000\u1416\u1417\u0005"+
		"\u0236\u0000\u0000\u1417\u1447\u0007B\u0000\u0000\u1418\u1447\u0005\u0095"+
		"\u0000\u0000\u1419\u141a\u0005\u0098\u0000\u0000\u141a\u1447\u0007C\u0000"+
		"\u0000\u141b\u1447\u0005\u02a6\u0000\u0000\u141c\u1447\u0005\u02a7\u0000"+
		"\u0000\u141d\u1447\u0005\u00ab\u0000\u0000\u141e\u1447\u0005\u00b2\u0000"+
		"\u0000\u141f\u1447\u0005\u00b3\u0000\u0000\u1420\u1447\u0005\u02a9\u0000"+
		"\u0000\u1421\u1447\u0005\u02aa\u0000\u0000\u1422\u1447\u0005\u02ab\u0000"+
		"\u0000\u1423\u1447\u0005\u02ac\u0000\u0000\u1424\u1447\u0005\u02ad\u0000"+
		"\u0000\u1425\u1447\u0005\u02ae\u0000\u0000\u1426\u1447\u0005\u02af\u0000"+
		"\u0000\u1427\u1447\u0005\u02b0\u0000\u0000\u1428\u1447\u0005\u02b1\u0000"+
		"\u0000\u1429\u1447\u0005\u02b2\u0000\u0000\u142a\u1447\u0005\u02b3\u0000"+
		"\u0000\u142b\u1447\u0005\u02b4\u0000\u0000\u142c\u1447\u0005\u02b5\u0000"+
		"\u0000\u142d\u1447\u0005\u02b6\u0000\u0000\u142e\u1447\u0005\u02b8\u0000"+
		"\u0000\u142f\u1447\u0005\u02b9\u0000\u0000\u1430\u1447\u0005\u02ba\u0000"+
		"\u0000\u1431\u1447\u0005\u02bb\u0000\u0000\u1432\u1447\u0005\u02bc\u0000"+
		"\u0000\u1433\u1447\u0005\u02bd\u0000\u0000\u1434\u1447\u0005\u02be\u0000"+
		"\u0000\u1435\u1447\u0005\u02bf\u0000\u0000\u1436\u1447\u0005\u02c0\u0000"+
		"\u0000\u1437\u1447\u0005\u02c1\u0000\u0000\u1438\u1447\u0005\u02c2\u0000"+
		"\u0000\u1439\u1447\u0005\u02c3\u0000\u0000\u143a\u1447\u0005\u02c4\u0000"+
		"\u0000\u143b\u1447\u0005\u02c5\u0000\u0000\u143c\u1447\u0005\u0414\u0000"+
		"\u0000\u143d\u1447\u0005\u02c6\u0000\u0000\u143e\u1447\u0005\u02c7\u0000"+
		"\u0000\u143f\u1447\u0005\u02c8\u0000\u0000\u1440\u1447\u0005\u02c9\u0000"+
		"\u0000\u1441\u1447\u0005\u0438\u0000\u0000\u1442\u1447\u0005\u0439\u0000"+
		"\u0000\u1443\u1447\u0005\u043a\u0000\u0000\u1444\u1447\u0005\u043b\u0000"+
		"\u0000\u1445\u1447\u0005\u043d\u0000\u0000\u1446\u13f2\u0001\u0000\u0000"+
		"\u0000\u1446\u13f6\u0001\u0000\u0000\u0000\u1446\u13fa\u0001\u0000\u0000"+
		"\u0000\u1446\u1404\u0001\u0000\u0000\u0000\u1446\u1405\u0001\u0000\u0000"+
		"\u0000\u1446\u1409\u0001\u0000\u0000\u0000\u1446\u140a\u0001\u0000\u0000"+
		"\u0000\u1446\u140b\u0001\u0000\u0000\u0000\u1446\u140c\u0001\u0000\u0000"+
		"\u0000\u1446\u140e\u0001\u0000\u0000\u0000\u1446\u140f\u0001\u0000\u0000"+
		"\u0000\u1446\u1410\u0001\u0000\u0000\u0000\u1446\u1412\u0001\u0000\u0000"+
		"\u0000\u1446\u1413\u0001\u0000\u0000\u0000\u1446\u1414\u0001\u0000\u0000"+
		"\u0000\u1446\u1415\u0001\u0000\u0000\u0000\u1446\u1416\u0001\u0000\u0000"+
		"\u0000\u1446\u1418\u0001\u0000\u0000\u0000\u1446\u1419\u0001\u0000\u0000"+
		"\u0000\u1446\u141b\u0001\u0000\u0000\u0000\u1446\u141c\u0001\u0000\u0000"+
		"\u0000\u1446\u141d\u0001\u0000\u0000\u0000\u1446\u141e\u0001\u0000\u0000"+
		"\u0000\u1446\u141f\u0001\u0000\u0000\u0000\u1446\u1420\u0001\u0000\u0000"+
		"\u0000\u1446\u1421\u0001\u0000\u0000\u0000\u1446\u1422\u0001\u0000\u0000"+
		"\u0000\u1446\u1423\u0001\u0000\u0000\u0000\u1446\u1424\u0001\u0000\u0000"+
		"\u0000\u1446\u1425\u0001\u0000\u0000\u0000\u1446\u1426\u0001\u0000\u0000"+
		"\u0000\u1446\u1427\u0001\u0000\u0000\u0000\u1446\u1428\u0001\u0000\u0000"+
		"\u0000\u1446\u1429\u0001\u0000\u0000\u0000\u1446\u142a\u0001\u0000\u0000"+
		"\u0000\u1446\u142b\u0001\u0000\u0000\u0000\u1446\u142c\u0001\u0000\u0000"+
		"\u0000\u1446\u142d\u0001\u0000\u0000\u0000\u1446\u142e\u0001\u0000\u0000"+
		"\u0000\u1446\u142f\u0001\u0000\u0000\u0000\u1446\u1430\u0001\u0000\u0000"+
		"\u0000\u1446\u1431\u0001\u0000\u0000\u0000\u1446\u1432\u0001\u0000\u0000"+
		"\u0000\u1446\u1433\u0001\u0000\u0000\u0000\u1446\u1434\u0001\u0000\u0000"+
		"\u0000\u1446\u1435\u0001\u0000\u0000\u0000\u1446\u1436\u0001\u0000\u0000"+
		"\u0000\u1446\u1437\u0001\u0000\u0000\u0000\u1446\u1438\u0001\u0000\u0000"+
		"\u0000\u1446\u1439\u0001\u0000\u0000\u0000\u1446\u143a\u0001\u0000\u0000"+
		"\u0000\u1446\u143b\u0001\u0000\u0000\u0000\u1446\u143c\u0001\u0000\u0000"+
		"\u0000\u1446\u143d\u0001\u0000\u0000\u0000\u1446\u143e\u0001\u0000\u0000"+
		"\u0000\u1446\u143f\u0001\u0000\u0000\u0000\u1446\u1440\u0001\u0000\u0000"+
		"\u0000\u1446\u1441\u0001\u0000\u0000\u0000\u1446\u1442\u0001\u0000\u0000"+
		"\u0000\u1446\u1443\u0001\u0000\u0000\u0000\u1446\u1444\u0001\u0000\u0000"+
		"\u0000\u1446\u1445\u0001\u0000\u0000\u0000\u1447\u01b9\u0001\u0000\u0000"+
		"\u0000\u1448\u1459\u0005\u0447\u0000\u0000\u1449\u144a\u0005\u0447\u0000"+
		"\u0000\u144a\u144b\u0005\u0456\u0000\u0000\u144b\u1459\u0005\u0447\u0000"+
		"\u0000\u144c\u144d\u0003\u0226\u0113\u0000\u144d\u144e\u0005\u0456\u0000"+
		"\u0000\u144e\u144f\u0005\u0447\u0000\u0000\u144f\u1459\u0001\u0000\u0000"+
		"\u0000\u1450\u1451\u0003\u0226\u0113\u0000\u1451\u1452\u0005\u0456\u0000"+
		"\u0000\u1452\u1453\u0003\u0226\u0113\u0000\u1453\u1459\u0001\u0000\u0000"+
		"\u0000\u1454\u1455\u0003\u0226\u0113\u0000\u1455\u1456\u0003\u022a\u0115"+
		"\u0000\u1456\u1459\u0001\u0000\u0000\u0000\u1457\u1459\u0003\u0226\u0113"+
		"\u0000\u1458\u1448\u0001\u0000\u0000\u0000\u1458\u1449\u0001\u0000\u0000"+
		"\u0000\u1458\u144c\u0001\u0000\u0000\u0000\u1458\u1450\u0001\u0000\u0000"+
		"\u0000\u1458\u1454\u0001\u0000\u0000\u0000\u1458\u1457\u0001\u0000\u0000"+
		"\u0000\u1459\u01bb\u0001\u0000\u0000\u0000\u145a\u145b\u0003\u0214\u010a"+
		"\u0000\u145b\u145c\u0005\u00a9\u0000\u0000\u145c\u145d\u0003\u0214\u010a"+
		"\u0000\u145d\u01bd\u0001\u0000\u0000\u0000\u145e\u1460\u0005\t\u0000\u0000"+
		"\u145f\u1461\u0007D\u0000\u0000\u1460\u145f\u0001\u0000\u0000\u0000\u1460"+
		"\u1461\u0001\u0000\u0000\u0000\u1461\u1462\u0001\u0000\u0000\u0000\u1462"+
		"\u1463\u0007E\u0000\u0000\u1463\u1475\u0003\u0248\u0124\u0000\u1464\u1465"+
		"\u0005\u00b2\u0000\u0000\u1465\u1466\u0005L\u0000\u0000\u1466\u1467\u0005"+
		"s\u0000\u0000\u1467\u146c\u0003\u0210\u0108\u0000\u1468\u1469\u0005\u0459"+
		"\u0000\u0000\u1469\u146b\u0003\u0210\u0108\u0000\u146a\u1468\u0001\u0000"+
		"\u0000\u0000\u146b\u146e\u0001\u0000\u0000\u0000\u146c\u146a\u0001\u0000"+
		"\u0000\u0000\u146c\u146d\u0001\u0000\u0000\u0000\u146d\u1473\u0001\u0000"+
		"\u0000\u0000\u146e\u146c\u0001\u0000\u0000\u0000\u146f\u1470\u0005\u00ba"+
		"\u0000\u0000\u1470\u1471\u0003\u022c\u0116\u0000\u1471\u1472\u0005\u0011"+
		"\u0000\u0000\u1472\u1474\u0001\u0000\u0000\u0000\u1473\u146f\u0001\u0000"+
		"\u0000\u0000\u1473\u1474\u0001\u0000\u0000\u0000\u1474\u1476\u0001\u0000"+
		"\u0000\u0000\u1475\u1464\u0001\u0000\u0000\u0000\u1475\u1476\u0001\u0000"+
		"\u0000\u0000\u1476\u1482\u0001\u0000\u0000\u0000\u1477\u1478\u00051\u0000"+
		"\u0000\u1478\u1479\u0005L\u0000\u0000\u1479\u147a\u0005s\u0000\u0000\u147a"+
		"\u147f\u0003\u0210\u0108\u0000\u147b\u147c\u0005\u0459\u0000\u0000\u147c"+
		"\u147e\u0003\u0210\u0108\u0000\u147d\u147b\u0001\u0000\u0000\u0000\u147e"+
		"\u1481\u0001\u0000\u0000\u0000\u147f\u147d\u0001\u0000\u0000\u0000\u147f"+
		"\u1480\u0001\u0000\u0000\u0000\u1480\u1483\u0001\u0000\u0000\u0000\u1481"+
		"\u147f\u0001\u0000\u0000\u0000\u1482\u1477\u0001\u0000\u0000\u0000\u1482"+
		"\u1483\u0001\u0000\u0000\u0000\u1483\u01bf\u0001\u0000\u0000\u0000\u1484"+
		"\u1485\u0005\u0019\u0000\u0000\u1485\u1486\u0005\u00a6\u0000\u0000\u1486"+
		"\u148a\u0003\u0248\u0124\u0000\u1487\u1489\u0003\u01c8\u00e4\u0000\u1488"+
		"\u1487\u0001\u0000\u0000\u0000\u1489\u148c\u0001\u0000\u0000\u0000\u148a"+
		"\u1488\u0001\u0000\u0000\u0000\u148a\u148b\u0001\u0000\u0000\u0000\u148b"+
		"\u01c1\u0001\u0000\u0000\u0000\u148c\u148a\u0001\u0000\u0000\u0000\u148d"+
		"\u148e\u0005\u015b\u0000\u0000\u148e\u148f\u0005\u00a6\u0000\u0000\u148f"+
		"\u1491\u0003\u0248\u0124\u0000\u1490\u1492\u0007F\u0000\u0000\u1491\u1490"+
		"\u0001\u0000\u0000\u0000\u1491\u1492\u0001\u0000\u0000\u0000\u1492\u01c3"+
		"\u0001\u0000\u0000\u0000\u1493\u1495\u0005t\u0000\u0000\u1494\u1496\u0007"+
		"D\u0000\u0000\u1495\u1494\u0001\u0000\u0000\u0000\u1495\u1496\u0001\u0000"+
		"\u0000\u0000\u1496\u1497\u0001\u0000\u0000\u0000\u1497\u1498\u0007E\u0000"+
		"\u0000\u1498\u1499\u0003\u0248\u0124\u0000\u1499\u01c5\u0001\u0000\u0000"+
		"\u0000\u149a\u149c\u0005\u022e\u0000\u0000\u149b\u149d\u0007D\u0000\u0000"+
		"\u149c\u149b\u0001\u0000\u0000\u0000\u149c\u149d\u0001\u0000\u0000\u0000"+
		"\u149d\u149e\u0001\u0000\u0000\u0000\u149e\u149f\u0005\u00a6\u0000\u0000"+
		"\u149f\u14a1\u0003\u0248\u0124\u0000\u14a0\u14a2\u0005\u0222\u0000\u0000"+
		"\u14a1\u14a0\u0001\u0000\u0000\u0000\u14a1\u14a2\u0001\u0000\u0000\u0000"+
		"\u14a2\u14a4\u0001\u0000\u0000\u0000\u14a3\u14a5\u0005\u019a\u0000\u0000"+
		"\u14a4\u14a3\u0001\u0000\u0000\u0000\u14a4\u14a5\u0001\u0000\u0000\u0000"+
		"\u14a5\u14a7\u0001\u0000\u0000\u0000\u14a6\u14a8\u0005\u0281\u0000\u0000"+
		"\u14a7\u14a6\u0001\u0000\u0000\u0000\u14a7\u14a8\u0001\u0000\u0000\u0000"+
		"\u14a8\u01c7\u0001\u0000\u0000\u0000\u14a9\u14aa\u0005A\u0000\u0000\u14aa"+
		"\u14b1\u0005\u027f\u0000\u0000\u14ab\u14b1\u0005\u0222\u0000\u0000\u14ac"+
		"\u14b1\u0005\u019c\u0000\u0000\u14ad\u14b1\u0005\u01e9\u0000\u0000\u14ae"+
		"\u14b1\u0005\u019a\u0000\u0000\u14af\u14b1\u0005\u0159\u0000\u0000\u14b0"+
		"\u14a9\u0001\u0000\u0000\u0000\u14b0\u14ab\u0001\u0000\u0000\u0000\u14b0"+
		"\u14ac\u0001\u0000\u0000\u0000\u14b0\u14ad\u0001\u0000\u0000\u0000\u14b0"+
		"\u14ae\u0001\u0000\u0000\u0000\u14b0\u14af\u0001\u0000\u0000\u0000\u14b1"+
		"\u01c9\u0001\u0000\u0000\u0000\u14b2\u14b4\u0005 \u0000\u0000\u14b3\u14b5"+
		"\u0005\u0146\u0000\u0000\u14b4\u14b3\u0001\u0000\u0000\u0000\u14b4\u14b5"+
		"\u0001\u0000\u0000\u0000\u14b5\u14b6\u0001\u0000\u0000\u0000\u14b6\u14b7"+
		"\u0005\u01a8\u0000\u0000\u14b7\u14b8\u0003\u0226\u0113\u0000\u14b8\u14b9"+
		"\u0005\u023b\u0000\u0000\u14b9\u14ba\u0007G\u0000\u0000\u14ba\u14bb\u0005"+
		"\u0252\u0000\u0000\u14bb\u14bc\u0005\u0466\u0000\u0000\u14bc\u01cb\u0001"+
		"\u0000\u0000\u0000\u14bd\u14be\u0005\u01b9\u0000\u0000\u14be\u14bf\u0005"+
		"\u0214\u0000\u0000\u14bf\u14c0\u0003\u0226\u0113\u0000\u14c0\u14c1\u0005"+
		"\u0252\u0000\u0000\u14c1\u14c2\u0005\u0466\u0000\u0000\u14c2\u01cd\u0001"+
		"\u0000\u0000\u0000\u14c3\u14c4\u0005\u027c\u0000\u0000\u14c4\u14c5\u0005"+
		"\u0214\u0000\u0000\u14c5\u14c6\u0003\u0226\u0113\u0000\u14c6\u01cf\u0001"+
		"\u0000\u0000\u0000\u14c7\u14c8\u0005\u0096\u0000\u0000\u14c8\u14c9\u0003"+
		"\u01d4\u00ea\u0000\u14c9\u14cc\u0007H\u0000\u0000\u14ca\u14cd\u0003\u0288"+
		"\u0144\u0000\u14cb\u14cd\u0005s\u0000\u0000\u14cc\u14ca\u0001\u0000\u0000"+
		"\u0000\u14cc\u14cb\u0001\u0000\u0000\u0000\u14cd\u14d7\u0001\u0000\u0000"+
		"\u0000\u14ce\u14cf\u0005\u0459\u0000\u0000\u14cf\u14d0\u0003\u01d4\u00ea"+
		"\u0000\u14d0\u14d3\u0007H\u0000\u0000\u14d1\u14d4\u0003\u0288\u0144\u0000"+
		"\u14d2\u14d4\u0005s\u0000\u0000\u14d3\u14d1\u0001\u0000\u0000\u0000\u14d3"+
		"\u14d2\u0001\u0000\u0000\u0000\u14d4\u14d6\u0001\u0000\u0000\u0000\u14d5"+
		"\u14ce\u0001\u0000\u0000\u0000\u14d6\u14d9\u0001\u0000\u0000\u0000\u14d7"+
		"\u14d5\u0001\u0000\u0000\u0000\u14d7\u14d8\u0001\u0000\u0000\u0000\u14d8"+
		"\u14fc\u0001\u0000\u0000\u0000\u14d9\u14d7\u0001\u0000\u0000\u0000\u14da"+
		"\u14db\u0005\u0096\u0000\u0000\u14db\u14de\u0003<\u001e\u0000\u14dc\u14df"+
		"\u0003\u0218\u010c\u0000\u14dd\u14df\u0005(\u0000\u0000\u14de\u14dc\u0001"+
		"\u0000\u0000\u0000\u14de\u14dd\u0001\u0000\u0000\u0000\u14df\u14fc\u0001"+
		"\u0000\u0000\u0000\u14e0\u14e1\u0005\u0096\u0000\u0000\u14e1\u14e8\u0005"+
		"\u01f6\u0000\u0000\u14e2\u14e5\u0003\u0218\u010c\u0000\u14e3\u14e4\u0005"+
		"\u001a\u0000\u0000\u14e4\u14e6\u0003\u021a\u010d\u0000\u14e5\u14e3\u0001"+
		"\u0000\u0000\u0000\u14e5\u14e6\u0001\u0000\u0000\u0000\u14e6\u14e9\u0001"+
		"\u0000\u0000\u0000\u14e7\u14e9\u0005(\u0000\u0000\u14e8\u14e2\u0001\u0000"+
		"\u0000\u0000\u14e8\u14e7\u0001\u0000\u0000\u0000\u14e9\u14fc\u0001\u0000"+
		"\u0000\u0000\u14ea\u14fc\u0003\u01a8\u00d4\u0000\u14eb\u14fc\u0003\u012a"+
		"\u0095\u0000\u14ec\u14fc\u0003\u0128\u0094\u0000\u14ed\u14ee\u0005\u0096"+
		"\u0000\u0000\u14ee\u14ef\u0003\u020a\u0105\u0000\u14ef\u14f0\u0007H\u0000"+
		"\u0000\u14f0\u14f8\u0003\u0288\u0144\u0000\u14f1\u14f2\u0005\u0459\u0000"+
		"\u0000\u14f2\u14f3\u0003\u020a\u0105\u0000\u14f3\u14f4\u0007H\u0000\u0000"+
		"\u14f4\u14f5\u0003\u0288\u0144\u0000\u14f5\u14f7\u0001\u0000\u0000\u0000"+
		"\u14f6\u14f1\u0001\u0000\u0000\u0000\u14f7\u14fa\u0001\u0000\u0000\u0000"+
		"\u14f8\u14f6\u0001\u0000\u0000\u0000\u14f8\u14f9\u0001\u0000\u0000\u0000"+
		"\u14f9\u14fc\u0001\u0000\u0000\u0000\u14fa\u14f8\u0001\u0000\u0000\u0000"+
		"\u14fb\u14c7\u0001\u0000\u0000\u0000\u14fb\u14da\u0001\u0000\u0000\u0000"+
		"\u14fb\u14e0\u0001\u0000\u0000\u0000\u14fb\u14ea\u0001\u0000\u0000\u0000"+
		"\u14fb\u14eb\u0001\u0000\u0000\u0000\u14fb\u14ec\u0001\u0000\u0000\u0000"+
		"\u14fb\u14ed\u0001\u0000\u0000\u0000\u14fc\u01d1\u0001\u0000\u0000\u0000"+
		"\u14fd\u14fe\u0005\u0098\u0000\u0000\u14fe\u14ff\u00076\u0000\u0000\u14ff"+
		"\u1597\u0005\u01cd\u0000\u0000\u1500\u1501\u0005\u0098\u0000\u0000\u1501"+
		"\u1502\u0007I\u0000\u0000\u1502\u1505\u0005\u0194\u0000\u0000\u1503\u1504"+
		"\u0005P\u0000\u0000\u1504\u1506\u0005\u0466\u0000\u0000\u1505\u1503\u0001"+
		"\u0000\u0000\u0000\u1505\u1506\u0001\u0000\u0000\u0000\u1506\u1509\u0001"+
		"\u0000\u0000\u0000\u1507\u1508\u0005D\u0000\u0000\u1508\u150a\u0003\u022c"+
		"\u0116\u0000\u1509\u1507\u0001\u0000\u0000\u0000\u1509\u150a\u0001\u0000"+
		"\u0000\u0000\u150a\u1512\u0001\u0000\u0000\u0000\u150b\u150f\u0005b\u0000"+
		"\u0000\u150c\u150d\u0003\u022c\u0116\u0000\u150d\u150e\u0005\u0459\u0000"+
		"\u0000\u150e\u1510\u0001\u0000\u0000\u0000\u150f\u150c\u0001\u0000\u0000"+
		"\u0000\u150f\u1510\u0001\u0000\u0000\u0000\u1510\u1511\u0001\u0000\u0000"+
		"\u0000\u1511\u1513\u0003\u022c\u0116\u0000\u1512\u150b\u0001\u0000\u0000"+
		"\u0000\u1512\u1513\u0001\u0000\u0000\u0000\u1513\u1597\u0001\u0000\u0000"+
		"\u0000\u1514\u1515\u0005\u0098\u0000\u0000\u1515\u1517\u0003\u01d6\u00eb"+
		"\u0000\u1516\u1518\u0003\u01d8\u00ec\u0000\u1517\u1516\u0001\u0000\u0000"+
		"\u0000\u1517\u1518\u0001\u0000\u0000\u0000\u1518\u1597\u0001\u0000\u0000"+
		"\u0000\u1519\u151b\u0005\u0098\u0000\u0000\u151a\u151c\u0005\u01a7\u0000"+
		"\u0000\u151b\u151a\u0001\u0000\u0000\u0000\u151b\u151c\u0001\u0000\u0000"+
		"\u0000\u151c\u151d\u0001\u0000\u0000\u0000\u151d\u151e\u0007(\u0000\u0000"+
		"\u151e\u151f\u0007J\u0000\u0000\u151f\u1522\u0003\u020c\u0106\u0000\u1520"+
		"\u1521\u0007J\u0000\u0000\u1521\u1523\u0003\u0226\u0113\u0000\u1522\u1520"+
		"\u0001\u0000\u0000\u0000\u1522\u1523\u0001\u0000\u0000\u0000\u1523\u1525"+
		"\u0001\u0000\u0000\u0000\u1524\u1526\u0003\u01d8\u00ec\u0000\u1525\u1524"+
		"\u0001\u0000\u0000\u0000\u1525\u1526\u0001\u0000\u0000\u0000\u1526\u1597"+
		"\u0001\u0000\u0000\u0000\u1527\u1528\u0005\u0098\u0000\u0000\u1528\u1529"+
		"\u0005 \u0000\u0000\u1529\u152b\u0007\u0000\u0000\u0000\u152a\u152c\u0003"+
		"\u025e\u012f\u0000\u152b\u152a\u0001\u0000\u0000\u0000\u152b\u152c\u0001"+
		"\u0000\u0000\u0000\u152c\u152d\u0001\u0000\u0000\u0000\u152d\u1597\u0003"+
		"\u0226\u0113\u0000\u152e\u152f\u0005\u0098\u0000\u0000\u152f\u1530\u0005"+
		" \u0000\u0000\u1530\u1531\u0007K\u0000\u0000\u1531\u1597\u0003\u020a\u0105"+
		"\u0000\u1532\u1533\u0005\u0098\u0000\u0000\u1533\u1534\u0005 \u0000\u0000"+
		"\u1534\u1535\u0005\u0280\u0000\u0000\u1535\u1597\u0003\u0214\u010a\u0000"+
		"\u1536\u1537\u0005\u0098\u0000\u0000\u1537\u1538\u0005\u018d\u0000\u0000"+
		"\u1538\u1539\u0003\u021c\u010e\u0000\u1539\u153a\u0007L\u0000\u0000\u153a"+
		"\u1597\u0001\u0000\u0000\u0000\u153b\u153c\u0005\u0098\u0000\u0000\u153c"+
		"\u1597\u0003\u01da\u00ed\u0000\u153d\u153e\u0005\u0098\u0000\u0000\u153e"+
		"\u1546\u0007M\u0000\u0000\u153f\u1543\u0005b\u0000\u0000\u1540\u1541\u0003"+
		"\u022c\u0116\u0000\u1541\u1542\u0005\u0459\u0000\u0000\u1542\u1544\u0001"+
		"\u0000\u0000\u0000\u1543\u1540\u0001\u0000\u0000\u0000\u1543\u1544\u0001"+
		"\u0000\u0000\u0000\u1544\u1545\u0001\u0000\u0000\u0000\u1545\u1547\u0003"+
		"\u022c\u0116\u0000\u1546\u153f\u0001\u0000\u0000\u0000\u1546\u1547\u0001"+
		"\u0000\u0000\u0000\u1547\u1597\u0001\u0000\u0000\u0000\u1548\u1549\u0005"+
		"\u0098\u0000\u0000\u1549\u154a\u0005\u0119\u0000\u0000\u154a\u154b\u0005"+
		"\u0457\u0000\u0000\u154b\u154c\u0005\u0447\u0000\u0000\u154c\u154d\u0005"+
		"\u0458\u0000\u0000\u154d\u1597\u0007M\u0000\u0000\u154e\u154f\u0005\u0098"+
		"\u0000\u0000\u154f\u1552\u0003\u01dc\u00ee\u0000\u1550\u1551\u0007J\u0000"+
		"\u0000\u1551\u1553\u0003\u0226\u0113\u0000\u1552\u1550\u0001\u0000\u0000"+
		"\u0000\u1552\u1553\u0001\u0000\u0000\u0000\u1553\u1555\u0001\u0000\u0000"+
		"\u0000\u1554\u1556\u0003\u01d8\u00ec\u0000\u1555\u1554\u0001\u0000\u0000"+
		"\u0000\u1555\u1556\u0001\u0000\u0000\u0000\u1556\u1597\u0001\u0000\u0000"+
		"\u0000\u1557\u1558\u0005\u0098\u0000\u0000\u1558\u1559\u0007N\u0000\u0000"+
		"\u1559\u155a\u0005\u0163\u0000\u0000\u155a\u1597\u0003\u020a\u0105\u0000"+
		"\u155b\u155c\u0005\u0098\u0000\u0000\u155c\u155f\u0005\u01ab\u0000\u0000"+
		"\u155d\u155e\u0005A\u0000\u0000\u155e\u1560\u0003\u0214\u010a\u0000\u155f"+
		"\u155d\u0001\u0000\u0000\u0000\u155f\u1560\u0001\u0000\u0000\u0000\u1560"+
		"\u1597\u0001\u0000\u0000\u0000\u1561\u1562\u0005\u0098\u0000\u0000\u1562"+
		"\u1563\u0007O\u0000\u0000\u1563\u1564\u0007J\u0000\u0000\u1564\u1567\u0003"+
		"\u020c\u0106\u0000\u1565\u1566\u0007J\u0000\u0000\u1566\u1568\u0003\u0226"+
		"\u0113\u0000\u1567\u1565\u0001\u0000\u0000\u0000\u1567\u1568\u0001\u0000"+
		"\u0000\u0000\u1568\u156b\u0001\u0000\u0000\u0000\u1569\u156a\u0005\u00b8"+
		"\u0000\u0000\u156a\u156c\u0003\u0288\u0144\u0000\u156b\u1569\u0001\u0000"+
		"\u0000\u0000\u156b\u156c\u0001\u0000\u0000\u0000\u156c\u1597\u0001\u0000"+
		"\u0000\u0000\u156d\u156e\u0005\u0098\u0000\u0000\u156e\u156f\u0005\u0208"+
		"\u0000\u0000\u156f\u1572\u0005\u02a0\u0000\u0000\u1570\u1571\u0007J\u0000"+
		"\u0000\u1571\u1573\u0003\u0226\u0113\u0000\u1572\u1570\u0001\u0000\u0000"+
		"\u0000\u1572\u1573\u0001\u0000\u0000\u0000\u1573\u1575\u0001\u0000\u0000"+
		"\u0000\u1574\u1576\u0003\u01d8\u00ec\u0000\u1575\u1574\u0001\u0000\u0000"+
		"\u0000\u1575\u1576\u0001\u0000\u0000\u0000\u1576\u1597\u0001\u0000\u0000"+
		"\u0000\u1577\u1578\u0005\u0098\u0000\u0000\u1578\u1579\u0005\u021e\u0000"+
		"\u0000\u1579\u157e\u0003\u01de\u00ef\u0000\u157a\u157b\u0005\u0459\u0000"+
		"\u0000\u157b\u157d\u0003\u01de\u00ef\u0000\u157c\u157a\u0001\u0000\u0000"+
		"\u0000\u157d\u1580\u0001\u0000\u0000\u0000\u157e\u157c\u0001\u0000\u0000"+
		"\u0000\u157e\u157f\u0001\u0000\u0000\u0000\u157f\u1584\u0001\u0000\u0000"+
		"\u0000\u1580\u157e\u0001\u0000\u0000\u0000\u1581\u1582\u0005A\u0000\u0000"+
		"\u1582\u1583\u0005\u0221\u0000\u0000\u1583\u1585\u0003\u022c\u0116\u0000"+
		"\u1584\u1581\u0001\u0000\u0000\u0000\u1584\u1585\u0001\u0000\u0000\u0000"+
		"\u1585\u1586\u0001\u0000\u0000\u0000\u1586\u158a\u0005b\u0000\u0000\u1587"+
		"\u1588\u0003\u022c\u0116\u0000\u1588\u1589\u0005\u0459\u0000\u0000\u1589"+
		"\u158b\u0001\u0000\u0000\u0000\u158a\u1587\u0001\u0000\u0000\u0000\u158a"+
		"\u158b\u0001\u0000\u0000\u0000\u158b\u158c\u0001\u0000\u0000\u0000\u158c"+
		"\u158d\u0003\u022c\u0116\u0000\u158d\u1597\u0001\u0000\u0000\u0000\u158e"+
		"\u158f\u0005\u0098\u0000\u0000\u158f\u1590\u0005\u024d\u0000\u0000\u1590"+
		"\u1594\u0005\u0261\u0000\u0000\u1591\u1592\u0005A\u0000\u0000\u1592\u1593"+
		"\u0005\u015a\u0000\u0000\u1593\u1595\u0005\u0466\u0000\u0000\u1594\u1591"+
		"\u0001\u0000\u0000\u0000\u1594\u1595\u0001\u0000\u0000\u0000\u1595\u1597"+
		"\u0001\u0000\u0000\u0000\u1596\u14fd\u0001\u0000\u0000\u0000\u1596\u1500"+
		"\u0001\u0000\u0000\u0000\u1596\u1514\u0001\u0000\u0000\u0000\u1596\u1519"+
		"\u0001\u0000\u0000\u0000\u1596\u1527\u0001\u0000\u0000\u0000\u1596\u152e"+
		"\u0001\u0000\u0000\u0000\u1596\u1532\u0001\u0000\u0000\u0000\u1596\u1536"+
		"\u0001\u0000\u0000\u0000\u1596\u153b\u0001\u0000\u0000\u0000\u1596\u153d"+
		"\u0001\u0000\u0000\u0000\u1596\u1548\u0001\u0000\u0000\u0000\u1596\u154e"+
		"\u0001\u0000\u0000\u0000\u1596\u1557\u0001\u0000\u0000\u0000\u1596\u155b"+
		"\u0001\u0000\u0000\u0000\u1596\u1561\u0001\u0000\u0000\u0000\u1596\u156d"+
		"\u0001\u0000\u0000\u0000\u1596\u1577\u0001\u0000\u0000\u0000\u1596\u158e"+
		"\u0001\u0000\u0000\u0000\u1597\u01d3\u0001\u0000\u0000\u0000\u1598\u15a3"+
		"\u0005\u0473\u0000\u0000\u1599\u15a3\u0005\u0474\u0000\u0000\u159a\u159b"+
		"\u0005\u045b\u0000\u0000\u159b\u159d\u0005\u045b\u0000\u0000\u159c\u159a"+
		"\u0001\u0000\u0000\u0000\u159c\u159d\u0001\u0000\u0000\u0000\u159d\u159e"+
		"\u0001\u0000\u0000\u0000\u159e\u15a0\u0007P\u0000\u0000\u159f\u159c\u0001"+
		"\u0000\u0000\u0000\u159f\u15a0\u0001\u0000\u0000\u0000\u15a0\u15a1\u0001"+
		"\u0000\u0000\u0000\u15a1\u15a3\u0003\u0226\u0113\u0000\u15a2\u1598\u0001"+
		"\u0000\u0000\u0000\u15a2\u1599\u0001\u0000\u0000\u0000\u15a2\u159f\u0001"+
		"\u0000\u0000\u0000\u15a3\u01d5\u0001\u0000\u0000\u0000\u15a4\u15a5\u0005"+
		"\u0018\u0000\u0000\u15a5\u15b2\u0005\u0096\u0000\u0000\u15a6\u15b2\u0005"+
		"\u032c\u0000\u0000\u15a7\u15b2\u0005&\u0000\u0000\u15a8\u15b2\u0005\u0094"+
		"\u0000\u0000\u15a9\u15aa\u0005\u01a8\u0000\u0000\u15aa\u15b2\u0005\u0261"+
		"\u0000\u0000\u15ab\u15ac\u0005\u0080\u0000\u0000\u15ac\u15b2\u0005\u0261"+
		"\u0000\u0000\u15ad\u15af\u00075\u0000\u0000\u15ae\u15ad\u0001\u0000\u0000"+
		"\u0000\u15ae\u15af\u0001\u0000\u0000\u0000\u15af\u15b0\u0001\u0000\u0000"+
		"\u0000\u15b0\u15b2\u0007Q\u0000\u0000\u15b1\u15a4\u0001\u0000\u0000\u0000"+
		"\u15b1\u15a6\u0001\u0000\u0000\u0000\u15b1\u15a7\u0001\u0000\u0000\u0000"+
		"\u15b1\u15a8\u0001\u0000\u0000\u0000\u15b1\u15a9\u0001\u0000\u0000\u0000"+
		"\u15b1\u15ab\u0001\u0000\u0000\u0000\u15b1\u15ae\u0001\u0000\u0000\u0000"+
		"\u15b2\u01d7\u0001\u0000\u0000\u0000\u15b3\u15b4\u0005a\u0000\u0000\u15b4"+
		"\u15b8\u0005\u0466\u0000\u0000\u15b5\u15b6\u0005\u00b8\u0000\u0000\u15b6"+
		"\u15b8\u0003\u0288\u0144\u0000\u15b7\u15b3\u0001\u0000\u0000\u0000\u15b7"+
		"\u15b5\u0001\u0000\u0000\u0000\u15b8\u01d9\u0001\u0000\u0000\u0000\u15b9"+
		"\u15bb\u0005\u0263\u0000\u0000\u15ba\u15b9\u0001\u0000\u0000\u0000\u15ba"+
		"\u15bb\u0001\u0000\u0000\u0000\u15bb\u15bc\u0001\u0000\u0000\u0000\u15bc"+
		"\u15cb\u0005\u018e\u0000\u0000\u15bd\u15be\u0005\u01ce\u0000\u0000\u15be"+
		"\u15cb\u0005\u0261\u0000\u0000\u15bf\u15cb\u0005\u0216\u0000\u0000\u15c0"+
		"\u15cb\u0005\u02a8\u0000\u0000\u15c1\u15c3\u0005\u01a7\u0000\u0000\u15c2"+
		"\u15c1\u0001\u0000\u0000\u0000\u15c2\u15c3\u0001\u0000\u0000\u0000\u15c3"+
		"\u15c4\u0001\u0000\u0000\u0000\u15c4\u15cb\u0005\u021d\u0000\u0000\u15c5"+
		"\u15cb\u0005\u021f\u0000\u0000\u15c6\u15c7\u0005\u024d\u0000\u0000\u15c7"+
		"\u15cb\u0005\u01b1\u0000\u0000\u15c8\u15cb\u0005\u014a\u0000\u0000\u15c9"+
		"\u15cb\u0005\u0176\u0000\u0000\u15ca\u15ba\u0001\u0000\u0000\u0000\u15ca"+
		"\u15bd\u0001\u0000\u0000\u0000\u15ca\u15bf\u0001\u0000\u0000\u0000\u15ca"+
		"\u15c0\u0001\u0000\u0000\u0000\u15ca\u15c2\u0001\u0000\u0000\u0000\u15ca"+
		"\u15c5\u0001\u0000\u0000\u0000\u15ca\u15c6\u0001\u0000\u0000\u0000\u15ca"+
		"\u15c8\u0001\u0000\u0000\u0000\u15ca\u15c9\u0001\u0000\u0000\u0000\u15cb"+
		"\u01db\u0001\u0000\u0000\u0000\u15cc\u15d5\u0005\u0194\u0000\u0000\u15cd"+
		"\u15ce\u0005\u00a6\u0000\u0000\u15ce\u15d5\u0005\u0261\u0000\u0000\u15cf"+
		"\u15d1\u0005\u01a7\u0000\u0000\u15d0\u15cf\u0001\u0000\u0000\u0000\u15d0"+
		"\u15d1\u0001\u0000\u0000\u0000\u15d1\u15d2\u0001\u0000\u0000\u0000\u15d2"+
		"\u15d5\u0005\u02a0\u0000\u0000\u15d3\u15d5\u0005\u0276\u0000\u0000\u15d4"+
		"\u15cc\u0001\u0000\u0000\u0000\u15d4\u15cd\u0001\u0000\u0000\u0000\u15d4"+
		"\u15d0\u0001\u0000\u0000\u0000\u15d4\u15d3\u0001\u0000\u0000\u0000\u15d5"+
		"\u01dd\u0001\u0000\u0000\u0000\u15d6\u15e3\u0005\u0006\u0000\u0000\u15d7"+
		"\u15d8\u0005\u0152\u0000\u0000\u15d8\u15e3\u0005\u01be\u0000\u0000\u15d9"+
		"\u15da\u0005\u0175\u0000\u0000\u15da\u15e3\u0005\u026c\u0000\u0000\u15db"+
		"\u15e3\u0005\u0178\u0000\u0000\u15dc\u15e3\u0005\u01c0\u0000\u0000\u15dd"+
		"\u15e3\u0005\u02f8\u0000\u0000\u15de\u15df\u0005\u020d\u0000\u0000\u15df"+
		"\u15e3\u0005\u019d\u0000\u0000\u15e0\u15e3\u0005\u0254\u0000\u0000\u15e1"+
		"\u15e3\u0005\u026b\u0000\u0000\u15e2\u15d6\u0001\u0000\u0000\u0000\u15e2"+
		"\u15d7\u0001\u0000\u0000\u0000\u15e2\u15d9\u0001\u0000\u0000\u0000\u15e2"+
		"\u15db\u0001\u0000\u0000\u0000\u15e2\u15dc\u0001\u0000\u0000\u0000\u15e2"+
		"\u15dd\u0001\u0000\u0000\u0000\u15e2\u15de\u0001\u0000\u0000\u0000\u15e2"+
		"\u15e0\u0001\u0000\u0000\u0000\u15e2\u15e1\u0001\u0000\u0000\u0000\u15e3"+
		"\u01df\u0001\u0000\u0000\u0000\u15e4\u15e5\u0005\u0150\u0000\u0000\u15e5"+
		"\u15e6\u0005\u0466\u0000\u0000\u15e6\u01e1\u0001\u0000\u0000\u0000\u15e7"+
		"\u15e8\u0005\u0156\u0000\u0000\u15e8\u15e9\u0005Q\u0000\u0000\u15e9\u15ee"+
		"\u0003\u01ee\u00f7\u0000\u15ea\u15eb\u0005\u0459\u0000\u0000\u15eb\u15ed"+
		"\u0003\u01ee\u00f7\u0000\u15ec\u15ea\u0001\u0000\u0000\u0000\u15ed\u15f0"+
		"\u0001\u0000\u0000\u0000\u15ee\u15ec\u0001\u0000\u0000\u0000\u15ee\u15ef"+
		"\u0001\u0000\u0000\u0000\u15ef\u15f8\u0001\u0000\u0000\u0000\u15f0\u15ee"+
		"\u0001\u0000\u0000\u0000\u15f1\u15f2\u0005~\u0000\u0000\u15f2\u15f5\u0005"+
		"\u0457\u0000\u0000\u15f3\u15f6\u0003\u0246\u0123\u0000\u15f4\u15f6\u0005"+
		"\u0006\u0000\u0000\u15f5\u15f3\u0001\u0000\u0000\u0000\u15f5\u15f4\u0001"+
		"\u0000\u0000\u0000\u15f6\u15f7\u0001\u0000\u0000\u0000\u15f7\u15f9\u0005"+
		"\u0458\u0000\u0000\u15f8\u15f1\u0001\u0000\u0000\u0000\u15f8\u15f9\u0001"+
		"\u0000\u0000\u0000\u15f9\u15fa\u0001\u0000\u0000\u0000\u15fa\u15fb\u0005"+
		"P\u0000\u0000\u15fb\u15fc\u0003\u0226\u0113\u0000\u15fc\u01e3\u0001\u0000"+
		"\u0000\u0000\u15fd\u15ff\u0005\u01a3\u0000\u0000\u15fe\u1600\u0007D\u0000"+
		"\u0000\u15ff\u15fe\u0001\u0000\u0000\u0000\u15ff\u1600\u0001\u0000\u0000"+
		"\u0000\u1600\u1601\u0001\u0000\u0000\u0000\u1601\u1606\u0003\u01f0\u00f8"+
		"\u0000\u1602\u1603\u0005\u0459\u0000\u0000\u1603\u1605\u0003\u01f0\u00f8"+
		"\u0000\u1604\u1602\u0001\u0000\u0000\u0000\u1605\u1608\u0001\u0000\u0000"+
		"\u0000\u1606\u1604\u0001\u0000\u0000\u0000\u1606\u1607\u0001\u0000\u0000"+
		"\u0000\u1607\u01e5\u0001\u0000\u0000\u0000\u1608\u1606\u0001\u0000\u0000"+
		"\u0000\u1609\u160b\u0005]\u0000\u0000\u160a\u160c\u0007R\u0000\u0000\u160b"+
		"\u160a\u0001\u0000\u0000\u0000\u160b\u160c\u0001\u0000\u0000\u0000\u160c"+
		"\u1613\u0001\u0000\u0000\u0000\u160d\u160f\u0003\u022c\u0116\u0000\u160e"+
		"\u160d\u0001\u0000\u0000\u0000\u160f\u1610\u0001\u0000\u0000\u0000\u1610"+
		"\u160e\u0001\u0000\u0000\u0000\u1610\u1611\u0001\u0000\u0000\u0000\u1611"+
		"\u1614\u0001\u0000\u0000\u0000\u1612\u1614\u0003\u0216\u010b\u0000\u1613"+
		"\u160e\u0001\u0000\u0000\u0000\u1613\u1612\u0001\u0000\u0000\u0000\u1614"+
		"\u01e7\u0001\u0000\u0000\u0000\u1615\u1616\u0005e\u0000\u0000\u1616\u1617"+
		"\u0005Q\u0000\u0000\u1617\u1618\u0005W\u0000\u0000\u1618\u1619\u0005\u0156"+
		"\u0000\u0000\u1619\u161e\u0003\u01f4\u00fa\u0000\u161a\u161b\u0005\u0459"+
		"\u0000\u0000\u161b\u161d\u0003\u01f4\u00fa\u0000\u161c\u161a\u0001\u0000"+
		"\u0000\u0000\u161d\u1620\u0001\u0000\u0000\u0000\u161e\u161c\u0001\u0000"+
		"\u0000\u0000\u161e\u161f\u0001\u0000\u0000\u0000\u161f\u01e9\u0001\u0000"+
		"\u0000\u0000\u1620\u161e\u0001\u0000\u0000\u0000\u1621\u1622\u0005\u0237"+
		"\u0000\u0000\u1622\u1623\u0005\u0221\u0000\u0000\u1623\u1624\u0005\u0156"+
		"\u0000\u0000\u1624\u01eb\u0001\u0000\u0000\u0000\u1625\u1626\u0005\u02a6"+
		"\u0000\u0000\u1626\u01ed\u0001\u0000\u0000\u0000\u1627\u162f\u0003\u020c"+
		"\u0106\u0000\u1628\u162a\u0007\u0014\u0000\u0000\u1629\u1628\u0001\u0000"+
		"\u0000\u0000\u1629\u162a\u0001\u0000\u0000\u0000\u162a\u162b\u0001\u0000"+
		"\u0000\u0000\u162b\u162c\u0005\u0457\u0000\u0000\u162c\u162d\u0003\u0246"+
		"\u0123\u0000\u162d\u162e\u0005\u0458\u0000\u0000\u162e\u1630\u0001\u0000"+
		"\u0000\u0000\u162f\u1629\u0001\u0000\u0000\u0000\u162f\u1630\u0001\u0000"+
		"\u0000\u0000\u1630\u01ef\u0001\u0000\u0000\u0000\u1631\u1644\u0005\u0180"+
		"\u0000\u0000\u1632\u1644\u0005\u01b1\u0000\u0000\u1633\u1635\u0007S\u0000"+
		"\u0000\u1634\u1633\u0001\u0000\u0000\u0000\u1634\u1635\u0001\u0000\u0000"+
		"\u0000\u1635\u1636\u0001\u0000\u0000\u0000\u1636\u1644\u0005\u01cd\u0000"+
		"\u0000\u1637\u1644\u0005\u0209\u0000\u0000\u1638\u1644\u0005\u02a8\u0000"+
		"\u0000\u1639\u163a\u0005\u0221\u0000\u0000\u163a\u1644\u0005\u0156\u0000"+
		"\u0000\u163b\u1644\u0005\u0261\u0000\u0000\u163c\u1644\u0005\u0282\u0000"+
		"\u0000\u163d\u1641\u0005\u02a0\u0000\u0000\u163e\u163f\u0005\u00ba\u0000"+
		"\u0000\u163f\u1640\u0005\u0083\u0000\u0000\u1640\u1642\u0005f\u0000\u0000"+
		"\u1641\u163e\u0001\u0000\u0000\u0000\u1641\u1642\u0001\u0000\u0000\u0000"+
		"\u1642\u1644\u0001\u0000\u0000\u0000\u1643\u1631\u0001\u0000\u0000\u0000"+
		"\u1643\u1632\u0001\u0000\u0000\u0000\u1643\u1634\u0001\u0000\u0000\u0000"+
		"\u1643\u1637\u0001\u0000\u0000\u0000\u1643\u1638\u0001\u0000\u0000\u0000"+
		"\u1643\u1639\u0001\u0000\u0000\u0000\u1643\u163b\u0001\u0000\u0000\u0000"+
		"\u1643\u163c\u0001\u0000\u0000\u0000\u1643\u163d\u0001\u0000\u0000\u0000"+
		"\u1644\u1652\u0001\u0000\u0000\u0000\u1645\u1646\u0005\u0228\u0000\u0000"+
		"\u1646\u1648\u0005\u01cd\u0000\u0000\u1647\u1649\u0003\u0150\u00a8\u0000"+
		"\u1648\u1647\u0001\u0000\u0000\u0000\u1648\u1649\u0001\u0000\u0000\u0000"+
		"\u1649\u1652\u0001\u0000\u0000\u0000\u164a\u164c\u0007E\u0000\u0000\u164b"+
		"\u164d\u0003\u0248\u0124\u0000\u164c\u164b\u0001\u0000\u0000\u0000\u164c"+
		"\u164d\u0001\u0000\u0000\u0000\u164d\u164f\u0001\u0000\u0000\u0000\u164e"+
		"\u1650\u0003\u01f2\u00f9\u0000\u164f\u164e\u0001\u0000\u0000\u0000\u164f"+
		"\u1650\u0001\u0000\u0000\u0000\u1650\u1652\u0001\u0000\u0000\u0000\u1651"+
		"\u1643\u0001\u0000\u0000\u0000\u1651\u1645\u0001\u0000\u0000\u0000\u1651"+
		"\u164a\u0001\u0000\u0000\u0000\u1652\u01f1\u0001\u0000\u0000\u0000\u1653"+
		"\u1654\u0005\u00ba\u0000\u0000\u1654\u1655\u0005\u0083\u0000\u0000\u1655"+
		"\u1659\u0005f\u0000\u0000\u1656\u1657\u0005A\u0000\u0000\u1657\u1659\u0005"+
		"\u0199\u0000\u0000\u1658\u1653\u0001\u0000\u0000\u0000\u1658\u1656\u0001"+
		"\u0000\u0000\u0000\u1659\u01f3\u0001\u0000\u0000\u0000\u165a\u1662\u0003"+
		"\u020c\u0106\u0000\u165b\u165c\u0005~\u0000\u0000\u165c\u165f\u0005\u0457"+
		"\u0000\u0000\u165d\u1660\u0003\u0246\u0123\u0000\u165e\u1660\u0005\u0006"+
		"\u0000\u0000\u165f\u165d\u0001\u0000\u0000\u0000\u165f\u165e\u0001\u0000"+
		"\u0000\u0000\u1660\u1661\u0001\u0000\u0000\u0000\u1661\u1663\u0005\u0458"+
		"\u0000\u0000\u1662\u165b\u0001\u0000\u0000\u0000\u1662\u1663\u0001\u0000"+
		"\u0000\u0000\u1663\u166b\u0001\u0000\u0000\u0000\u1664\u1666\u0007\u0014"+
		"\u0000\u0000\u1665\u1664\u0001\u0000\u0000\u0000\u1665\u1666\u0001\u0000"+
		"\u0000\u0000\u1666\u1667\u0001\u0000\u0000\u0000\u1667\u1668\u0005\u0457"+
		"\u0000\u0000\u1668\u1669\u0003\u0246\u0123\u0000\u1669\u166a\u0005\u0458"+
		"\u0000\u0000\u166a\u166c\u0001\u0000\u0000\u0000\u166b\u1665\u0001\u0000"+
		"\u0000\u0000\u166b\u166c\u0001\u0000\u0000\u0000\u166c\u166f\u0001\u0000"+
		"\u0000\u0000\u166d\u166e\u0005N\u0000\u0000\u166e\u1670\u0005\u01c7\u0000"+
		"\u0000\u166f\u166d\u0001\u0000\u0000\u0000\u166f\u1670\u0001\u0000\u0000"+
		"\u0000\u1670\u01f5\u0001\u0000\u0000\u0000\u1671\u1672\u0007T\u0000\u0000"+
		"\u1672\u1675\u0003\u020c\u0106\u0000\u1673\u1676\u0003\u0226\u0113\u0000"+
		"\u1674\u1676\u0005\u0466\u0000\u0000\u1675\u1673\u0001\u0000\u0000\u0000"+
		"\u1675\u1674\u0001\u0000\u0000\u0000\u1675\u1676\u0001\u0000\u0000\u0000"+
		"\u1676\u01f7\u0001\u0000\u0000\u0000\u1677\u167b\u0007T\u0000\u0000\u1678"+
		"\u1679\u0007U\u0000\u0000\u1679\u167a\u0005\u044e\u0000\u0000\u167a\u167c"+
		"\u0007V\u0000\u0000\u167b\u1678\u0001\u0000\u0000\u0000\u167b\u167c\u0001"+
		"\u0000\u0000\u0000\u167c\u167d\u0001\u0000\u0000\u0000\u167d\u167e\u0003"+
		"\u0208\u0104\u0000\u167e\u01f9\u0001\u0000\u0000\u0000\u167f\u1680\u0005"+
		"\u01af\u0000\u0000\u1680\u1681\u0005\u0466\u0000\u0000\u1681\u01fb\u0001"+
		"\u0000\u0000\u0000\u1682\u1683\u0005\u00b4\u0000\u0000\u1683\u1684\u0003"+
		"\u0226\u0113\u0000\u1684\u01fd\u0001\u0000\u0000\u0000\u1685\u168d\u0005"+
		"\u0099\u0000\u0000\u1686\u1688\u0005\u009d\u0000\u0000\u1687\u1689\u0005"+
		"\u0284\u0000\u0000\u1688\u1687\u0001\u0000\u0000\u0000\u1688\u1689\u0001"+
		"\u0000\u0000\u0000\u1689\u168a\u0001\u0000\u0000\u0000\u168a\u168e\u0003"+
		"\u0230\u0118\u0000\u168b\u168e\u0005\u046e\u0000\u0000\u168c\u168e\u0005"+
		"\u046f\u0000\u0000\u168d\u1686\u0001\u0000\u0000\u0000\u168d\u168b\u0001"+
		"\u0000\u0000\u0000\u168d\u168c\u0001\u0000\u0000\u0000\u168e\u1698\u0001"+
		"\u0000\u0000\u0000\u168f\u1690\u0005\u0096\u0000\u0000\u1690\u1695\u0003"+
		"\u0202\u0101\u0000\u1691\u1692\u0005\u0459\u0000\u0000\u1692\u1694\u0003"+
		"\u0202\u0101\u0000\u1693\u1691\u0001\u0000\u0000\u0000\u1694\u1697\u0001"+
		"\u0000\u0000\u0000\u1695\u1693\u0001\u0000\u0000\u0000\u1695\u1696\u0001"+
		"\u0000\u0000\u0000\u1696\u1699\u0001\u0000\u0000\u0000\u1697\u1695\u0001"+
		"\u0000\u0000\u0000\u1698\u168f\u0001\u0000\u0000\u0000\u1698\u1699\u0001"+
		"\u0000\u0000\u0000\u1699\u01ff\u0001\u0000\u0000\u0000\u169a\u16a2\u0005"+
		"\u008c\u0000\u0000\u169b\u169d\u0005\u009d\u0000\u0000\u169c\u169e\u0005"+
		"\u0284\u0000\u0000\u169d\u169c\u0001\u0000\u0000\u0000\u169d\u169e\u0001"+
		"\u0000\u0000\u0000\u169e\u169f\u0001\u0000\u0000\u0000\u169f\u16a3\u0003"+
		"\u0230\u0118\u0000\u16a0\u16a3\u0005\u046e\u0000\u0000\u16a1\u16a3\u0005"+
		"\u046f\u0000\u0000\u16a2\u169b\u0001\u0000\u0000\u0000\u16a2\u16a0\u0001"+
		"\u0000\u0000\u0000\u16a2\u16a1\u0001\u0000\u0000\u0000\u16a2\u16a3\u0001"+
		"\u0000\u0000\u0000\u16a3\u16ad\u0001\u0000\u0000\u0000\u16a4\u16a5\u0005"+
		"\u0096\u0000\u0000\u16a5\u16aa\u0003\u0202\u0101\u0000\u16a6\u16a7\u0005"+
		"\u0459\u0000\u0000\u16a7\u16a9\u0003\u0202\u0101\u0000\u16a8\u16a6\u0001"+
		"\u0000\u0000\u0000\u16a9\u16ac\u0001\u0000\u0000\u0000\u16aa\u16a8\u0001"+
		"\u0000\u0000\u0000\u16aa\u16ab\u0001\u0000\u0000\u0000\u16ab\u16ae\u0001"+
		"\u0000\u0000\u0000\u16ac\u16aa\u0001\u0000\u0000\u0000\u16ad\u16a4\u0001"+
		"\u0000\u0000\u0000\u16ad\u16ae\u0001\u0000\u0000\u0000\u16ae\u0201\u0001"+
		"\u0000\u0000\u0000\u16af\u16b0\u0007W\u0000\u0000\u16b0\u16b5\u0005\u044e"+
		"\u0000\u0000\u16b1\u16b6\u0003\u0230\u0118\u0000\u16b2\u16b6\u0005\u0467"+
		"\u0000\u0000\u16b3\u16b6\u0003\u0216\u010b\u0000\u16b4\u16b6\u0003\u0228"+
		"\u0114\u0000\u16b5\u16b1\u0001\u0000\u0000\u0000\u16b5\u16b2\u0001\u0000"+
		"\u0000\u0000\u16b5\u16b3\u0001\u0000\u0000\u0000\u16b5\u16b4\u0001\u0000"+
		"\u0000\u0000\u16b6\u0203\u0001\u0000\u0000\u0000\u16b7\u16b9\u0005G\u0000"+
		"\u0000\u16b8\u16ba\u0007X\u0000\u0000\u16b9\u16b8\u0001\u0000\u0000\u0000"+
		"\u16b9\u16ba\u0001\u0000\u0000\u0000\u16ba\u16bb\u0001\u0000\u0000\u0000"+
		"\u16bb\u16db\u0005.\u0000\u0000\u16bc\u16bd\u0003\u01d4\u00ea\u0000\u16bd"+
		"\u16be\u0005\u044e\u0000\u0000\u16be\u16c6\u0007Y\u0000\u0000\u16bf\u16c0"+
		"\u0005\u0459\u0000\u0000\u16c0\u16c1\u0003\u01d4\u00ea\u0000\u16c1\u16c2"+
		"\u0005\u044e\u0000\u0000\u16c2\u16c3\u0007Y\u0000\u0000\u16c3\u16c5\u0001"+
		"\u0000\u0000\u0000\u16c4\u16bf\u0001\u0000\u0000\u0000\u16c5\u16c8\u0001"+
		"\u0000\u0000\u0000\u16c6\u16c4\u0001\u0000\u0000\u0000\u16c6\u16c7\u0001"+
		"\u0000\u0000\u0000\u16c7\u16dc\u0001\u0000\u0000\u0000\u16c8\u16c6\u0001"+
		"\u0000\u0000\u0000\u16c9\u16cc\u0005\u001c\u0000\u0000\u16ca\u16cd\u0003"+
		"\u022c\u0116\u0000\u16cb\u16cd\u0003\u01d4\u00ea\u0000\u16cc\u16ca\u0001"+
		"\u0000\u0000\u0000\u16cc\u16cb\u0001\u0000\u0000\u0000\u16cd\u16ce\u0001"+
		"\u0000\u0000\u0000\u16ce\u16cf\u0003\u01d4\u00ea\u0000\u16cf\u16d0\u0005"+
		"\u044e\u0000\u0000\u16d0\u16d8\u0003\u0206\u0103\u0000\u16d1\u16d2\u0005"+
		"\u0459\u0000\u0000\u16d2\u16d3\u0003\u01d4\u00ea\u0000\u16d3\u16d4\u0005"+
		"\u044e\u0000\u0000\u16d4\u16d5\u0003\u0206\u0103\u0000\u16d5\u16d7\u0001"+
		"\u0000\u0000\u0000\u16d6\u16d1\u0001\u0000\u0000\u0000\u16d7\u16da\u0001"+
		"\u0000\u0000\u0000\u16d8\u16d6\u0001\u0000\u0000\u0000\u16d8\u16d9\u0001"+
		"\u0000\u0000\u0000\u16d9\u16dc\u0001\u0000\u0000\u0000\u16da\u16d8\u0001"+
		"\u0000\u0000\u0000\u16db\u16bc\u0001\u0000\u0000\u0000\u16db\u16c9\u0001"+
		"\u0000\u0000\u0000\u16dc\u0205\u0001\u0000\u0000\u0000\u16dd\u16de\u0007"+
		"Z\u0000\u0000\u16de\u0207\u0001\u0000\u0000\u0000\u16df\u16e5\u0003\u00c4"+
		"b\u0000\u16e0\u16e5\u0003\u00b6[\u0000\u16e1\u16e5\u0003\u00bc^\u0000"+
		"\u16e2\u16e5\u0003\u00c2a\u0000\u16e3\u16e5\u0003\u00c6c\u0000\u16e4\u16df"+
		"\u0001\u0000\u0000\u0000\u16e4\u16e0\u0001\u0000\u0000\u0000\u16e4\u16e1"+
		"\u0001\u0000\u0000\u0000\u16e4\u16e2\u0001\u0000\u0000\u0000\u16e4\u16e3"+
		"\u0001\u0000\u0000\u0000\u16e5\u16ea\u0001\u0000\u0000\u0000\u16e6\u16e7"+
		"\u0005A\u0000\u0000\u16e7\u16e8\u0005\u016f\u0000\u0000\u16e8\u16ea\u0003"+
		"\u0226\u0113\u0000\u16e9\u16e4\u0001\u0000\u0000\u0000\u16e9\u16e6\u0001"+
		"\u0000\u0000\u0000\u16ea\u0209\u0001\u0000\u0000\u0000\u16eb\u16ef\u0003"+
		"\u0226\u0113\u0000\u16ec\u16f0\u0005\u046d\u0000\u0000\u16ed\u16ee\u0005"+
		"\u0456\u0000\u0000\u16ee\u16f0\u0003\u0226\u0113\u0000\u16ef\u16ec\u0001"+
		"\u0000\u0000\u0000\u16ef\u16ed\u0001\u0000\u0000\u0000\u16ef\u16f0\u0001"+
		"\u0000\u0000\u0000\u16f0\u020b\u0001\u0000\u0000\u0000\u16f1\u16f2\u0003"+
		"\u020a\u0105\u0000\u16f2\u020d\u0001\u0000\u0000\u0000\u16f3\u16f6\u0003"+
		"\u0214\u010a\u0000\u16f4\u16f6\u0003\u0226\u0113\u0000\u16f5\u16f3\u0001"+
		"\u0000\u0000\u0000\u16f5\u16f4\u0001\u0000\u0000\u0000\u16f6\u020f\u0001"+
		"\u0000\u0000\u0000\u16f7\u16fc\u0003\u0226\u0113\u0000\u16f8\u16fa\u0003"+
		"\u022a\u0115\u0000\u16f9\u16fb\u0003\u022a\u0115\u0000\u16fa\u16f9\u0001"+
		"\u0000\u0000\u0000\u16fa\u16fb\u0001\u0000\u0000\u0000\u16fb\u16fd\u0001"+
		"\u0000\u0000\u0000\u16fc\u16f8\u0001\u0000\u0000\u0000\u16fc\u16fd\u0001"+
		"\u0000\u0000\u0000\u16fd\u1704\u0001\u0000\u0000\u0000\u16fe\u16ff\t\u0000"+
		"\u0000\u0000\u16ff\u1701\u0003\u022a\u0115\u0000\u1700\u1702\u0003\u022a"+
		"\u0115\u0000\u1701\u1700\u0001\u0000\u0000\u0000\u1701\u1702\u0001\u0000"+
		"\u0000\u0000\u1702\u1704\u0001\u0000\u0000\u0000\u1703\u16f7\u0001\u0000"+
		"\u0000\u0000\u1703\u16fe\u0001\u0000\u0000\u0000\u1704\u0211\u0001\u0000"+
		"\u0000\u0000\u1705\u1708\u0003\u0226\u0113\u0000\u1706\u1708\u0005\u0466"+
		"\u0000\u0000\u1707\u1705\u0001\u0000\u0000\u0000\u1707\u1706\u0001\u0000"+
		"\u0000\u0000\u1708\u170d\u0001\u0000\u0000\u0000\u1709\u170a\u0005\u0457"+
		"\u0000\u0000\u170a\u170b\u0003\u022c\u0116\u0000\u170b\u170c\u0005\u0458"+
		"\u0000\u0000\u170c\u170e\u0001\u0000\u0000\u0000\u170d\u1709\u0001\u0000"+
		"\u0000\u0000\u170d\u170e\u0001\u0000\u0000\u0000\u170e\u1711\u0001\u0000"+
		"\u0000\u0000\u170f\u1711\u0003\u0288\u0144\u0000\u1710\u1707\u0001\u0000"+
		"\u0000\u0000\u1710\u170f\u0001\u0000\u0000\u0000\u1711\u1713\u0001\u0000"+
		"\u0000\u0000\u1712\u1714\u0007/\u0000\u0000\u1713\u1712\u0001\u0000\u0000"+
		"\u0000\u1713\u1714\u0001\u0000\u0000\u0000\u1714\u0213\u0001\u0000\u0000"+
		"\u0000\u1715\u171c\u0005\u0470\u0000\u0000\u1716\u171c\u0005\u0472\u0000"+
		"\u0000\u1717\u171c\u0005\u046e\u0000\u0000\u1718\u171c\u0005\u0466\u0000"+
		"\u0000\u1719\u171c\u0005\u02b7\u0000\u0000\u171a\u171c\u0003\u02a6\u0153"+
		"\u0000\u171b\u1715\u0001\u0000\u0000\u0000\u171b\u1716\u0001\u0000\u0000"+
		"\u0000\u171b\u1717\u0001\u0000\u0000\u0000\u171b\u1718\u0001\u0000\u0000"+
		"\u0000\u171b\u1719\u0001\u0000\u0000\u0000\u171b\u171a\u0001\u0000\u0000"+
		"\u0000\u171c\u0215\u0001\u0000\u0000\u0000\u171d\u171e\u0007[\u0000\u0000"+
		"\u171e\u0217\u0001\u0000\u0000\u0000\u171f\u1724\u0005\u00dc\u0000\u0000"+
		"\u1720\u1724\u0003\u029c\u014e\u0000\u1721\u1724\u0005\u0466\u0000\u0000"+
		"\u1722\u1724\u0005\u0463\u0000\u0000\u1723\u171f\u0001\u0000\u0000\u0000"+
		"\u1723\u1720\u0001\u0000\u0000\u0000\u1723\u1721\u0001\u0000\u0000\u0000"+
		"\u1723\u1722\u0001\u0000\u0000\u0000\u1724\u0219\u0001\u0000\u0000\u0000"+
		"\u1725\u1728\u0003\u0226\u0113\u0000\u1726\u1728\u0005\u0466\u0000\u0000"+
		"\u1727\u1725\u0001\u0000\u0000\u0000\u1727\u1726\u0001\u0000\u0000\u0000"+
		"\u1728\u021b\u0001\u0000\u0000\u0000\u1729\u172a\u0007\\\u0000\u0000\u172a"+
		"\u021d\u0001\u0000\u0000\u0000\u172b\u172c\u0003\u022c\u0116\u0000\u172c"+
		"\u172d\u0005\u044b\u0000\u0000\u172d\u172e\u0003\u022c\u0116\u0000\u172e"+
		"\u172f\u0005\u044b\u0000\u0000\u172f\u1730\u0003\u022c\u0116\u0000\u1730"+
		"\u1731\u0005\u044b\u0000\u0000\u1731\u1732\u0003\u022c\u0116\u0000\u1732"+
		"\u1733\u0005\u044b\u0000\u0000\u1733\u1739\u0003\u022c\u0116\u0000\u1734"+
		"\u1735\u0005\u0462\u0000\u0000\u1735\u1736\u0003\u022c\u0116\u0000\u1736"+
		"\u1737\u0005\u044b\u0000\u0000\u1737\u1738\u0003\u022c\u0116\u0000\u1738"+
		"\u173a\u0001\u0000\u0000\u0000\u1739\u1734\u0001\u0000\u0000\u0000\u173a"+
		"\u173b\u0001\u0000\u0000\u0000\u173b\u1739\u0001\u0000\u0000\u0000\u173b"+
		"\u173c\u0001\u0000\u0000\u0000\u173c\u021f\u0001\u0000\u0000\u0000\u173d"+
		"\u1744\u0003\u0222\u0111\u0000\u173e\u173f\u0005\u0459\u0000\u0000\u173f"+
		"\u1742\u0003\u0222\u0111\u0000\u1740\u1741\u0005\u0459\u0000\u0000\u1741"+
		"\u1743\u0003\u022c\u0116\u0000\u1742\u1740\u0001\u0000\u0000\u0000\u1742"+
		"\u1743\u0001\u0000\u0000\u0000\u1743\u1745\u0001\u0000\u0000\u0000\u1744"+
		"\u173e\u0001\u0000\u0000\u0000\u1744\u1745\u0001\u0000\u0000\u0000\u1745"+
		"\u0221\u0001\u0000\u0000\u0000\u1746\u174e\u0005\u0466\u0000\u0000\u1747"+
		"\u174e\u0005\u046b\u0000\u0000\u1748\u174a\u0005\u0468\u0000\u0000\u1749"+
		"\u1748\u0001\u0000\u0000\u0000\u174a\u174b\u0001\u0000\u0000\u0000\u174b"+
		"\u1749\u0001\u0000\u0000\u0000\u174b\u174c\u0001\u0000\u0000\u0000\u174c"+
		"\u174e\u0001\u0000\u0000\u0000\u174d\u1746\u0001\u0000\u0000\u0000\u174d"+
		"\u1747\u0001\u0000\u0000\u0000\u174d\u1749\u0001\u0000\u0000\u0000\u174e"+
		"\u0223\u0001\u0000\u0000\u0000\u174f\u1752\u0003\u0226\u0113\u0000\u1750"+
		"\u1752\u0005\u0466\u0000\u0000\u1751\u174f\u0001\u0000\u0000\u0000\u1751"+
		"\u1750\u0001\u0000\u0000\u0000\u1752\u0225\u0001\u0000\u0000\u0000\u1753"+
		"\u1757\u0003\u0228\u0114\u0000\u1754\u1757\u0005\u046f\u0000\u0000\u1755"+
		"\u1757\u0005\u0463\u0000\u0000\u1756\u1753\u0001\u0000\u0000\u0000\u1756"+
		"\u1754\u0001\u0000\u0000\u0000\u1756\u1755\u0001\u0000\u0000\u0000\u1757"+
		"\u0227\u0001\u0000\u0000\u0000\u1758\u1762\u0005\u046e\u0000\u0000\u1759"+
		"\u1762\u0003\u029c\u014e\u0000\u175a\u1762\u0003\u029e\u014f\u0000\u175b"+
		"\u1762\u0003\u021c\u010e\u0000\u175c\u1762\u0003\u02a0\u0150\u0000\u175d"+
		"\u1762\u0003\u02a2\u0151\u0000\u175e\u1762\u0003\u02a4\u0152\u0000\u175f"+
		"\u1762\u0003\u02a6\u0153\u0000\u1760\u1762\u0003\u02a8\u0154\u0000\u1761"+
		"\u1758\u0001\u0000\u0000\u0000\u1761\u1759\u0001\u0000\u0000\u0000\u1761"+
		"\u175a\u0001\u0000\u0000\u0000\u1761\u175b\u0001\u0000\u0000\u0000\u1761"+
		"\u175c\u0001\u0000\u0000\u0000\u1761\u175d\u0001\u0000\u0000\u0000\u1761"+
		"\u175e\u0001\u0000\u0000\u0000\u1761\u175f\u0001\u0000\u0000\u0000\u1761"+
		"\u1760\u0001\u0000\u0000\u0000\u1762\u0229\u0001\u0000\u0000\u0000\u1763"+
		"\u1767\u0005\u046d\u0000\u0000\u1764\u1765\u0005\u0456\u0000\u0000\u1765"+
		"\u1767\u0003\u0226\u0113\u0000\u1766\u1763\u0001\u0000\u0000\u0000\u1766"+
		"\u1764\u0001\u0000\u0000\u0000\u1767\u022b\u0001\u0000\u0000\u0000\u1768"+
		"\u1769\u0007]\u0000\u0000\u1769\u022d\u0001\u0000\u0000\u0000\u176a\u176d"+
		"\u0005\u0464\u0000\u0000\u176b\u176d\u0003\u022c\u0116\u0000\u176c\u176a"+
		"\u0001\u0000\u0000\u0000\u176c\u176b\u0001\u0000\u0000\u0000\u176d\u022f"+
		"\u0001\u0000\u0000\u0000\u176e\u1770\u0005\u046c\u0000\u0000\u176f\u176e"+
		"\u0001\u0000\u0000\u0000\u176f\u1770\u0001\u0000\u0000\u0000\u1770\u1771"+
		"\u0001\u0000\u0000\u0000\u1771\u1774\u0005\u0466\u0000\u0000\u1772\u1774"+
		"\u0005\u0465\u0000\u0000\u1773\u176f\u0001\u0000\u0000\u0000\u1773\u1772"+
		"\u0001\u0000\u0000\u0000\u1774\u1776\u0001\u0000\u0000\u0000\u1775\u1777"+
		"\u0005\u0466\u0000\u0000\u1776\u1775\u0001\u0000\u0000\u0000\u1777\u1778"+
		"\u0001\u0000\u0000\u0000\u1778\u1776\u0001\u0000\u0000\u0000\u1778\u1779"+
		"\u0001\u0000\u0000\u0000\u1779\u1786\u0001\u0000\u0000\u0000\u177a\u177c"+
		"\u0005\u046c\u0000\u0000\u177b\u177a\u0001\u0000\u0000\u0000\u177b\u177c"+
		"\u0001\u0000\u0000\u0000\u177c\u177d\u0001\u0000\u0000\u0000\u177d\u1780"+
		"\u0005\u0466\u0000\u0000\u177e\u1780\u0005\u0465\u0000\u0000\u177f\u177b"+
		"\u0001\u0000\u0000\u0000\u177f\u177e\u0001\u0000\u0000\u0000\u1780\u1783"+
		"\u0001\u0000\u0000\u0000\u1781\u1782\u0005\u001a\u0000\u0000\u1782\u1784"+
		"\u0003\u021a\u010d\u0000\u1783\u1781\u0001\u0000\u0000\u0000\u1783\u1784"+
		"\u0001\u0000\u0000\u0000\u1784\u1786\u0001\u0000\u0000\u0000\u1785\u1773"+
		"\u0001\u0000\u0000\u0000\u1785\u177f\u0001\u0000\u0000\u0000\u1786\u0231"+
		"\u0001\u0000\u0000\u0000\u1787\u1788\u0007^\u0000\u0000\u1788\u0233\u0001"+
		"\u0000\u0000\u0000\u1789\u178b\u0005\u046c\u0000\u0000\u178a\u1789\u0001"+
		"\u0000\u0000\u0000\u178a\u178b\u0001\u0000\u0000\u0000\u178b\u178c\u0001"+
		"\u0000\u0000\u0000\u178c\u178d\u0005\u0468\u0000\u0000\u178d\u0235\u0001"+
		"\u0000\u0000\u0000\u178e\u1790\u0005o\u0000\u0000\u178f\u178e\u0001\u0000"+
		"\u0000\u0000\u178f\u1790\u0001\u0000\u0000\u0000\u1790\u1791\u0001\u0000"+
		"\u0000\u0000\u1791\u1792\u0007_\u0000\u0000\u1792\u0237\u0001\u0000\u0000"+
		"\u0000\u1793\u17a0\u0003\u0230\u0118\u0000\u1794\u17a0\u0003\u022c\u0116"+
		"\u0000\u1795\u1796\u0005\u044b\u0000\u0000\u1796\u17a0\u0003\u022c\u0116"+
		"\u0000\u1797\u17a0\u0003\u0234\u011a\u0000\u1798\u17a0\u0003\u0232\u0119"+
		"\u0000\u1799\u17a0\u0005\u0469\u0000\u0000\u179a\u17a0\u0005\u046b\u0000"+
		"\u0000\u179b\u179d\u0005o\u0000\u0000\u179c\u179b\u0001\u0000\u0000\u0000"+
		"\u179c\u179d\u0001\u0000\u0000\u0000\u179d\u179e\u0001\u0000\u0000\u0000"+
		"\u179e\u17a0\u0007_\u0000\u0000\u179f\u1793\u0001\u0000\u0000\u0000\u179f"+
		"\u1794\u0001\u0000\u0000\u0000\u179f\u1795\u0001\u0000\u0000\u0000\u179f"+
		"\u1797\u0001\u0000\u0000\u0000\u179f\u1798\u0001\u0000\u0000\u0000\u179f"+
		"\u1799\u0001\u0000\u0000\u0000\u179f\u179a\u0001\u0000\u0000\u0000\u179f"+
		"\u179c\u0001\u0000\u0000\u0000\u17a0\u0239\u0001\u0000\u0000\u0000\u17a1"+
		"\u17a3\u0007`\u0000\u0000\u17a2\u17a4\u0005\u00e8\u0000\u0000\u17a3\u17a2"+
		"\u0001\u0000\u0000\u0000\u17a3\u17a4\u0001\u0000\u0000\u0000\u17a4\u17a6"+
		"\u0001\u0000\u0000\u0000\u17a5\u17a7\u0003\u0240\u0120\u0000\u17a6\u17a5"+
		"\u0001\u0000\u0000\u0000\u17a6\u17a7\u0001\u0000\u0000\u0000\u17a7\u17a9"+
		"\u0001\u0000\u0000\u0000\u17a8\u17aa\u0005\u00dc\u0000\u0000\u17a9\u17a8"+
		"\u0001\u0000\u0000\u0000\u17a9\u17aa\u0001\u0000\u0000\u0000\u17aa\u17ae"+
		"\u0001\u0000\u0000\u0000\u17ab\u17ac\u0003<\u001e\u0000\u17ac\u17ad\u0003"+
		"\u0218\u010c\u0000\u17ad\u17af\u0001\u0000\u0000\u0000\u17ae\u17ab\u0001"+
		"\u0000\u0000\u0000\u17ae\u17af\u0001\u0000\u0000\u0000\u17af\u17b3\u0001"+
		"\u0000\u0000\u0000\u17b0\u17b1\u0005\u001a\u0000\u0000\u17b1\u17b4\u0003"+
		"\u021a\u010d\u0000\u17b2\u17b4\u0005\u00dc\u0000\u0000\u17b3\u17b0\u0001"+
		"\u0000\u0000\u0000\u17b3\u17b2\u0001\u0000\u0000\u0000\u17b3\u17b4\u0001"+
		"\u0000\u0000\u0000\u17b4\u181c\u0001\u0000\u0000\u0000\u17b5\u17b6\u0005"+
		"\u00db\u0000\u0000\u17b6\u17b8\u0007a\u0000\u0000\u17b7\u17b9\u0003\u0240"+
		"\u0120\u0000\u17b8\u17b7\u0001\u0000\u0000\u0000\u17b8\u17b9\u0001\u0000"+
		"\u0000\u0000\u17b9\u17bb\u0001\u0000\u0000\u0000\u17ba\u17bc\u0005\u00dc"+
		"\u0000\u0000\u17bb\u17ba\u0001\u0000\u0000\u0000\u17bb\u17bc\u0001\u0000"+
		"\u0000\u0000\u17bc\u181c\u0001\u0000\u0000\u0000\u17bd\u17be\u0005\u01f7"+
		"\u0000\u0000\u17be\u17c0\u0005\u00d9\u0000\u0000\u17bf\u17c1\u0003\u0240"+
		"\u0120\u0000\u17c0\u17bf\u0001\u0000\u0000\u0000\u17c0\u17c1\u0001\u0000"+
		"\u0000\u0000\u17c1\u17c3\u0001\u0000\u0000\u0000\u17c2\u17c4\u0005\u00dc"+
		"\u0000\u0000\u17c3\u17c2\u0001\u0000\u0000\u0000\u17c3\u17c4\u0001\u0000"+
		"\u0000\u0000\u17c4\u181c\u0001\u0000\u0000\u0000\u17c5\u17c6\u0005\u00db"+
		"\u0000\u0000\u17c6\u17c7\u0007b\u0000\u0000\u17c7\u17c9\u0005\u00e8\u0000"+
		"\u0000\u17c8\u17ca\u0003\u0240\u0120\u0000\u17c9\u17c8\u0001\u0000\u0000"+
		"\u0000\u17c9\u17ca\u0001\u0000\u0000\u0000\u17ca\u17cc\u0001\u0000\u0000"+
		"\u0000\u17cb\u17cd\u0005\u00dc\u0000\u0000\u17cc\u17cb\u0001\u0000\u0000"+
		"\u0000\u17cc\u17cd\u0001\u0000\u0000\u0000\u17cd\u181c\u0001\u0000\u0000"+
		"\u0000\u17ce\u17d0\u0007c\u0000\u0000\u17cf\u17d1\u0003\u0240\u0120\u0000"+
		"\u17d0\u17cf\u0001\u0000\u0000\u0000\u17d0\u17d1\u0001\u0000\u0000\u0000"+
		"\u17d1\u17d5\u0001\u0000\u0000\u0000\u17d2\u17d4\u0007d\u0000\u0000\u17d3"+
		"\u17d2\u0001\u0000\u0000\u0000\u17d4\u17d7\u0001\u0000\u0000\u0000\u17d5"+
		"\u17d3\u0001\u0000\u0000\u0000\u17d5\u17d6\u0001\u0000\u0000\u0000\u17d6"+
		"\u181c\u0001\u0000\u0000\u0000\u17d7\u17d5\u0001\u0000\u0000\u0000\u17d8"+
		"\u17da\u0005\u00ca\u0000\u0000\u17d9\u17db\u0003\u0242\u0121\u0000\u17da"+
		"\u17d9\u0001\u0000\u0000\u0000\u17da\u17db\u0001\u0000\u0000\u0000\u17db"+
		"\u17df\u0001\u0000\u0000\u0000\u17dc\u17de\u0007d\u0000\u0000\u17dd\u17dc"+
		"\u0001\u0000\u0000\u0000\u17de\u17e1\u0001\u0000\u0000\u0000\u17df\u17dd"+
		"\u0001\u0000\u0000\u0000\u17df\u17e0\u0001\u0000\u0000\u0000\u17e0\u181c"+
		"\u0001\u0000\u0000\u0000\u17e1\u17df\u0001\u0000\u0000\u0000\u17e2\u17e4"+
		"\u0005\u00cb\u0000\u0000\u17e3\u17e5\u0005\u00cc\u0000\u0000\u17e4\u17e3"+
		"\u0001\u0000\u0000\u0000\u17e4\u17e5\u0001\u0000\u0000\u0000\u17e5\u17e7"+
		"\u0001\u0000\u0000\u0000\u17e6\u17e8\u0003\u0242\u0121\u0000\u17e7\u17e6"+
		"\u0001\u0000\u0000\u0000\u17e7\u17e8\u0001\u0000\u0000\u0000\u17e8\u17ec"+
		"\u0001\u0000\u0000\u0000\u17e9\u17eb\u0007d\u0000\u0000\u17ea\u17e9\u0001"+
		"\u0000\u0000\u0000\u17eb\u17ee\u0001\u0000\u0000\u0000\u17ec\u17ea\u0001"+
		"\u0000\u0000\u0000\u17ec\u17ed\u0001\u0000\u0000\u0000\u17ed\u181c\u0001"+
		"\u0000\u0000\u0000\u17ee\u17ec\u0001\u0000\u0000\u0000\u17ef\u17f1\u0007"+
		"e\u0000\u0000\u17f0\u17f2\u0003\u0244\u0122\u0000\u17f1\u17f0\u0001\u0000"+
		"\u0000\u0000\u17f1\u17f2\u0001\u0000\u0000\u0000\u17f2\u17f6\u0001\u0000"+
		"\u0000\u0000\u17f3\u17f5\u0007d\u0000\u0000\u17f4\u17f3\u0001\u0000\u0000"+
		"\u0000\u17f5\u17f8\u0001\u0000\u0000\u0000\u17f6\u17f4\u0001\u0000\u0000"+
		"\u0000\u17f6\u17f7\u0001\u0000\u0000\u0000\u17f7\u181c\u0001\u0000\u0000"+
		"\u0000\u17f8\u17f6\u0001\u0000\u0000\u0000\u17f9\u181c\u0007f\u0000\u0000"+
		"\u17fa\u17fc\u0007g\u0000\u0000\u17fb\u17fd\u0003\u0240\u0120\u0000\u17fc"+
		"\u17fb\u0001\u0000\u0000\u0000\u17fc\u17fd\u0001\u0000\u0000\u0000\u17fd"+
		"\u181c\u0001\u0000\u0000\u0000\u17fe\u17ff\u0007h\u0000\u0000\u17ff\u1801"+
		"\u0003\u023c\u011e\u0000\u1800\u1802\u0005\u00dc\u0000\u0000\u1801\u1800"+
		"\u0001\u0000\u0000\u0000\u1801\u1802\u0001\u0000\u0000\u0000\u1802\u1806"+
		"\u0001\u0000\u0000\u0000\u1803\u1804\u0003<\u001e\u0000\u1804\u1805\u0003"+
		"\u0218\u010c\u0000\u1805\u1807\u0001\u0000\u0000\u0000\u1806\u1803\u0001"+
		"\u0000\u0000\u0000\u1806\u1807\u0001\u0000\u0000\u0000\u1807\u181c\u0001"+
		"\u0000\u0000\u0000\u1808\u181c\u0007i\u0000\u0000\u1809\u180b\u0005\u00e1"+
		"\u0000\u0000\u180a\u180c\u0005\u00d9\u0000\u0000\u180b\u180a\u0001\u0000"+
		"\u0000\u0000\u180b\u180c\u0001\u0000\u0000\u0000\u180c\u180e\u0001\u0000"+
		"\u0000\u0000\u180d\u180f\u0005\u00dc\u0000\u0000\u180e\u180d\u0001\u0000"+
		"\u0000\u0000\u180e\u180f\u0001\u0000\u0000\u0000\u180f\u1813\u0001\u0000"+
		"\u0000\u0000\u1810\u1811\u0003<\u001e\u0000\u1811\u1812\u0003\u0218\u010c"+
		"\u0000\u1812\u1814\u0001\u0000\u0000\u0000\u1813\u1810\u0001\u0000\u0000"+
		"\u0000\u1813\u1814\u0001\u0000\u0000\u0000\u1814\u1817\u0001\u0000\u0000"+
		"\u0000\u1815\u1816\u0005\u001a\u0000\u0000\u1816\u1818\u0003\u021a\u010d"+
		"\u0000\u1817\u1815\u0001\u0000\u0000\u0000\u1817\u1818\u0001\u0000\u0000"+
		"\u0000\u1818\u181c\u0001\u0000\u0000\u0000\u1819\u181a\u0005\u00e1\u0000"+
		"\u0000\u181a\u181c\u0005\u00dd\u0000\u0000\u181b\u17a1\u0001\u0000\u0000"+
		"\u0000\u181b\u17b5\u0001\u0000\u0000\u0000\u181b\u17bd\u0001\u0000\u0000"+
		"\u0000\u181b\u17c5\u0001\u0000\u0000\u0000\u181b\u17ce\u0001\u0000\u0000"+
		"\u0000\u181b\u17d8\u0001\u0000\u0000\u0000\u181b\u17e2\u0001\u0000\u0000"+
		"\u0000\u181b\u17ef\u0001\u0000\u0000\u0000\u181b\u17f9\u0001\u0000\u0000"+
		"\u0000\u181b\u17fa\u0001\u0000\u0000\u0000\u181b\u17fe\u0001\u0000\u0000"+
		"\u0000\u181b\u1808\u0001\u0000\u0000\u0000\u181b\u1809\u0001\u0000\u0000"+
		"\u0000\u181b\u1819\u0001\u0000\u0000\u0000\u181c\u023b\u0001\u0000\u0000"+
		"\u0000\u181d\u181e\u0005\u0457\u0000\u0000\u181e\u1823\u0005\u0466\u0000"+
		"\u0000\u181f\u1820\u0005\u0459\u0000\u0000\u1820\u1822\u0005\u0466\u0000"+
		"\u0000\u1821\u181f\u0001\u0000\u0000\u0000\u1822\u1825\u0001\u0000\u0000"+
		"\u0000\u1823\u1821\u0001\u0000\u0000\u0000\u1823\u1824\u0001\u0000\u0000"+
		"\u0000\u1824\u1826\u0001\u0000\u0000\u0000\u1825\u1823\u0001\u0000\u0000"+
		"\u0000\u1826\u1827\u0005\u0458\u0000\u0000\u1827\u023d\u0001\u0000\u0000"+
		"\u0000\u1828\u182a\u0007j\u0000\u0000\u1829\u182b\u0003\u0240\u0120\u0000"+
		"\u182a\u1829\u0001\u0000\u0000\u0000\u182a\u182b\u0001\u0000\u0000\u0000"+
		"\u182b\u183f\u0001\u0000\u0000\u0000\u182c\u182e\u0005\u00d8\u0000\u0000"+
		"\u182d\u182f\u0003\u0240\u0120\u0000\u182e\u182d\u0001\u0000\u0000\u0000"+
		"\u182e\u182f\u0001\u0000\u0000\u0000\u182f\u1833\u0001\u0000\u0000\u0000"+
		"\u1830\u1831\u0003<\u001e\u0000\u1831\u1832\u0003\u0218\u010c\u0000\u1832"+
		"\u1834\u0001\u0000\u0000\u0000\u1833\u1830\u0001\u0000\u0000\u0000\u1833"+
		"\u1834\u0001\u0000\u0000\u0000\u1834\u183f\u0001\u0000\u0000\u0000\u1835"+
		"\u183f\u0007k\u0000\u0000\u1836\u1838\u0005\u00d0\u0000\u0000\u1837\u1839"+
		"\u0003\u0244\u0122\u0000\u1838\u1837\u0001\u0000\u0000\u0000\u1838\u1839"+
		"\u0001\u0000\u0000\u0000\u1839\u183f\u0001\u0000\u0000\u0000\u183a\u183c"+
		"\u0007l\u0000\u0000\u183b\u183d\u0005\u00c8\u0000\u0000\u183c\u183b\u0001"+
		"\u0000\u0000\u0000\u183c\u183d\u0001\u0000\u0000\u0000\u183d\u183f\u0001"+
		"\u0000\u0000\u0000\u183e\u1828\u0001\u0000\u0000\u0000\u183e\u182c\u0001"+
		"\u0000\u0000\u0000\u183e\u1835\u0001\u0000\u0000\u0000\u183e\u1836\u0001"+
		"\u0000\u0000\u0000\u183e\u183a\u0001\u0000\u0000\u0000\u183f\u1841\u0001"+
		"\u0000\u0000\u0000\u1840\u1842\u0005\u000b\u0000\u0000\u1841\u1840\u0001"+
		"\u0000\u0000\u0000\u1841\u1842\u0001\u0000\u0000\u0000\u1842\u023f\u0001"+
		"\u0000\u0000\u0000\u1843\u1844\u0005\u0457\u0000\u0000\u1844\u1845\u0003"+
		"\u022c\u0116\u0000\u1845\u1846\u0005\u0458\u0000\u0000\u1846\u0241\u0001"+
		"\u0000\u0000\u0000\u1847\u1848\u0005\u0457\u0000\u0000\u1848\u1849\u0003"+
		"\u022c\u0116\u0000\u1849\u184a\u0005\u0459\u0000\u0000\u184a\u184b\u0003"+
		"\u022c\u0116\u0000\u184b\u184c\u0005\u0458\u0000\u0000\u184c\u0243\u0001"+
		"\u0000\u0000\u0000\u184d\u184e\u0005\u0457\u0000\u0000\u184e\u1851\u0003"+
		"\u022c\u0116\u0000\u184f\u1850\u0005\u0459\u0000\u0000\u1850\u1852\u0003"+
		"\u022c\u0116\u0000\u1851\u184f\u0001\u0000\u0000\u0000\u1851\u1852\u0001"+
		"\u0000\u0000\u0000\u1852\u1853\u0001\u0000\u0000\u0000\u1853\u1854\u0005"+
		"\u0458\u0000\u0000\u1854\u0245\u0001\u0000\u0000\u0000\u1855\u185a\u0003"+
		"\u0226\u0113\u0000\u1856\u1857\u0005\u0459\u0000\u0000\u1857\u1859\u0003"+
		"\u0226\u0113\u0000\u1858\u1856\u0001\u0000\u0000\u0000\u1859\u185c\u0001"+
		"\u0000\u0000\u0000\u185a\u1858\u0001\u0000\u0000\u0000\u185a\u185b\u0001"+
		"\u0000\u0000\u0000\u185b\u0247\u0001\u0000\u0000\u0000\u185c\u185a\u0001"+
		"\u0000\u0000\u0000\u185d\u1862\u0003\u020c\u0106\u0000\u185e\u185f\u0005"+
		"\u0459\u0000\u0000\u185f\u1861\u0003\u020c\u0106\u0000\u1860\u185e\u0001"+
		"\u0000\u0000\u0000\u1861\u1864\u0001\u0000\u0000\u0000\u1862\u1860\u0001"+
		"\u0000\u0000\u0000\u1862\u1863\u0001\u0000\u0000\u0000\u1863\u0249\u0001"+
		"\u0000\u0000\u0000\u1864\u1862\u0001\u0000\u0000\u0000\u1865\u1866\u0005"+
		"\u0457\u0000\u0000\u1866\u186b\u0003\u0212\u0109\u0000\u1867\u1868\u0005"+
		"\u0459\u0000\u0000\u1868\u186a\u0003\u0212\u0109\u0000\u1869\u1867\u0001"+
		"\u0000\u0000\u0000\u186a\u186d\u0001\u0000\u0000\u0000\u186b\u1869\u0001"+
		"\u0000\u0000\u0000\u186b\u186c\u0001\u0000\u0000\u0000\u186c\u186e\u0001"+
		"\u0000\u0000\u0000\u186d\u186b\u0001\u0000\u0000\u0000\u186e\u186f\u0005"+
		"\u0458\u0000\u0000\u186f\u024b\u0001\u0000\u0000\u0000\u1870\u1875\u0003"+
		"\u0288\u0144\u0000\u1871\u1872\u0005\u0459\u0000\u0000\u1872\u1874\u0003"+
		"\u0288\u0144\u0000\u1873\u1871\u0001\u0000\u0000\u0000\u1874\u1877\u0001"+
		"\u0000\u0000\u0000\u1875\u1873\u0001\u0000\u0000\u0000\u1875\u1876\u0001"+
		"\u0000\u0000\u0000\u1876\u024d\u0001\u0000\u0000\u0000\u1877\u1875\u0001"+
		"\u0000\u0000\u0000\u1878\u187d\u0003\u025a\u012d\u0000\u1879\u187a\u0005"+
		"\u0459\u0000\u0000\u187a\u187c\u0003\u025a\u012d\u0000\u187b\u1879\u0001"+
		"\u0000\u0000\u0000\u187c\u187f\u0001\u0000\u0000\u0000\u187d\u187b\u0001"+
		"\u0000\u0000\u0000\u187d\u187e\u0001\u0000\u0000\u0000\u187e\u024f\u0001"+
		"\u0000\u0000\u0000\u187f\u187d\u0001\u0000\u0000\u0000\u1880\u1885\u0003"+
		"\u0238\u011c\u0000\u1881\u1882\u0005\u0459\u0000\u0000\u1882\u1884\u0003"+
		"\u0238\u011c\u0000\u1883\u1881\u0001\u0000\u0000\u0000\u1884\u1887\u0001"+
		"\u0000\u0000\u0000\u1885\u1883\u0001\u0000\u0000\u0000\u1885\u1886\u0001"+
		"\u0000\u0000\u0000\u1886\u0251\u0001\u0000\u0000\u0000\u1887\u1885\u0001"+
		"\u0000\u0000\u0000\u1888\u188d\u0005\u0466\u0000\u0000\u1889\u188a\u0005"+
		"\u0459\u0000\u0000\u188a\u188c\u0005\u0466\u0000\u0000\u188b\u1889\u0001"+
		"\u0000\u0000\u0000\u188c\u188f\u0001\u0000\u0000\u0000\u188d\u188b\u0001"+
		"\u0000\u0000\u0000\u188d\u188e\u0001\u0000\u0000\u0000\u188e\u0253\u0001"+
		"\u0000\u0000\u0000\u188f\u188d\u0001\u0000\u0000\u0000\u1890\u1895\u0005"+
		"\u0473\u0000\u0000\u1891\u1892\u0005\u0459\u0000\u0000\u1892\u1894\u0005"+
		"\u0473\u0000\u0000\u1893\u1891\u0001\u0000\u0000\u0000\u1894\u1897\u0001"+
		"\u0000\u0000\u0000\u1895\u1893\u0001\u0000\u0000\u0000\u1895\u1896\u0001"+
		"\u0000\u0000\u0000\u1896\u0255\u0001\u0000\u0000\u0000\u1897\u1895\u0001"+
		"\u0000\u0000\u0000\u1898\u18bc\u0005q\u0000\u0000\u1899\u189a\u0005\u0016"+
		"\u0000\u0000\u189a\u189b\u0005\u0457\u0000\u0000\u189b\u189c\u0003\u0288"+
		"\u0144\u0000\u189c\u189d\u0005\f\u0000\u0000\u189d\u189e\u0003\u023e\u011f"+
		"\u0000\u189e\u189f\u0005\u0458\u0000\u0000\u189f\u18bc\u0001\u0000\u0000"+
		"\u0000\u18a0\u18a2\u0003\u0290\u0148\u0000\u18a1\u18a0\u0001\u0000\u0000"+
		"\u0000\u18a1\u18a2\u0001\u0000\u0000\u0000\u18a2\u18a3\u0001\u0000\u0000"+
		"\u0000\u18a3\u18bc\u0003\u0238\u011c\u0000\u18a4\u18a8\u0003\u0258\u012c"+
		"\u0000\u18a5\u18a6\u0005s\u0000\u0000\u18a6\u18a7\u0005\u00b2\u0000\u0000"+
		"\u18a7\u18a9\u0003\u0258\u012c\u0000\u18a8\u18a5\u0001\u0000\u0000\u0000"+
		"\u18a8\u18a9\u0001\u0000\u0000\u0000\u18a9\u18bc\u0001\u0000\u0000\u0000"+
		"\u18aa\u18ab\u0005\u0457\u0000\u0000\u18ab\u18ac\u0003\u0288\u0144\u0000"+
		"\u18ac\u18ad\u0005\u0458\u0000\u0000\u18ad\u18bc\u0001\u0000\u0000\u0000"+
		"\u18ae\u18af\u0007m\u0000\u0000\u18af\u18b0\u0005\u0457\u0000\u0000\u18b0"+
		"\u18b1\u0003\u020a\u0105\u0000\u18b1\u18b2\u0005\u0458\u0000\u0000\u18b2"+
		"\u18bc\u0001\u0000\u0000\u0000\u18b3\u18b4\u0005\u0457\u0000\u0000\u18b4"+
		"\u18b5\u0007n\u0000\u0000\u18b5\u18b6\u0005\u0284\u0000\u0000\u18b6\u18b7"+
		"\u0005A\u0000\u0000\u18b7\u18b8\u0003\u020a\u0105\u0000\u18b8\u18b9\u0005"+
		"\u0458\u0000\u0000\u18b9\u18bc\u0001\u0000\u0000\u0000\u18ba\u18bc\u0003"+
		"\u0288\u0144\u0000\u18bb\u1898\u0001\u0000\u0000\u0000\u18bb\u1899\u0001"+
		"\u0000\u0000\u0000\u18bb\u18a1\u0001\u0000\u0000\u0000\u18bb\u18a4\u0001"+
		"\u0000\u0000\u0000\u18bb\u18aa\u0001\u0000\u0000\u0000\u18bb\u18ae\u0001"+
		"\u0000\u0000\u0000\u18bb\u18b3\u0001\u0000\u0000\u0000\u18bb\u18ba\u0001"+
		"\u0000\u0000\u0000\u18bc\u0257\u0001\u0000\u0000\u0000\u18bd\u18c3\u0007"+
		"o\u0000\u0000\u18be\u18c0\u0005\u0457\u0000\u0000\u18bf\u18c1\u0003\u022c"+
		"\u0116\u0000\u18c0\u18bf\u0001\u0000\u0000\u0000\u18c0\u18c1\u0001\u0000"+
		"\u0000\u0000\u18c1\u18c2\u0001\u0000\u0000\u0000\u18c2\u18c4\u0005\u0458"+
		"\u0000\u0000\u18c3\u18be\u0001\u0000\u0000\u0000\u18c3\u18c4\u0001\u0000"+
		"\u0000\u0000\u18c4\u18cc\u0001\u0000\u0000\u0000\u18c5\u18c6\u0005\u013a"+
		"\u0000\u0000\u18c6\u18c8\u0005\u0457\u0000\u0000\u18c7\u18c9\u0003\u022c"+
		"\u0116\u0000\u18c8\u18c7\u0001\u0000\u0000\u0000\u18c8\u18c9\u0001\u0000"+
		"\u0000\u0000\u18c9\u18ca\u0001\u0000\u0000\u0000\u18ca\u18cc\u0005\u0458"+
		"\u0000\u0000\u18cb\u18bd\u0001\u0000\u0000\u0000\u18cb\u18c5\u0001\u0000"+
		"\u0000\u0000\u18cc\u0259\u0001\u0000\u0000\u0000\u18cd\u18d0\u0003\u0288"+
		"\u0144\u0000\u18ce\u18d0\u0005(\u0000\u0000\u18cf\u18cd\u0001\u0000\u0000"+
		"\u0000\u18cf\u18ce\u0001\u0000\u0000\u0000\u18d0\u025b\u0001\u0000\u0000"+
		"\u0000\u18d1\u18d2\u0005M\u0000\u0000\u18d2\u18d3\u00059\u0000\u0000\u18d3"+
		"\u025d\u0001\u0000\u0000\u0000\u18d4\u18d5\u0005M\u0000\u0000\u18d5\u18d6"+
		"\u0005o\u0000\u0000\u18d6\u18d7\u00059\u0000\u0000\u18d7\u025f\u0001\u0000"+
		"\u0000\u0000\u18d8\u18eb\u0003\u0262\u0131\u0000\u18d9\u18eb\u0003\u026a"+
		"\u0135\u0000\u18da\u18eb\u0003\u026c\u0136\u0000\u18db\u18dc\u0003\u0280"+
		"\u0140\u0000\u18dc\u18de\u0005\u0457\u0000\u0000\u18dd\u18df\u0003\u0284"+
		"\u0142\u0000\u18de\u18dd\u0001\u0000\u0000\u0000\u18de\u18df\u0001\u0000"+
		"\u0000\u0000\u18df\u18e0\u0001\u0000\u0000\u0000\u18e0\u18e1\u0005\u0458"+
		"\u0000\u0000\u18e1\u18eb\u0001\u0000\u0000\u0000\u18e2\u18e3\u0003\u020a"+
		"\u0105\u0000\u18e3\u18e5\u0005\u0457\u0000\u0000\u18e4\u18e6\u0003\u0284"+
		"\u0142\u0000\u18e5\u18e4\u0001\u0000\u0000\u0000\u18e5\u18e6\u0001\u0000"+
		"\u0000\u0000\u18e6\u18e7\u0001\u0000\u0000\u0000\u18e7\u18e8\u0005\u0458"+
		"\u0000\u0000\u18e8\u18eb\u0001\u0000\u0000\u0000\u18e9\u18eb\u0003\u0282"+
		"\u0141\u0000\u18ea\u18d8\u0001\u0000\u0000\u0000\u18ea\u18d9\u0001\u0000"+
		"\u0000\u0000\u18ea\u18da\u0001\u0000\u0000\u0000\u18ea\u18db\u0001\u0000"+
		"\u0000\u0000\u18ea\u18e2\u0001\u0000\u0000\u0000\u18ea\u18e9\u0001\u0000"+
		"\u0000\u0000\u18eb\u0261\u0001\u0000\u0000\u0000\u18ec\u18ef\u0007p\u0000"+
		"\u0000\u18ed\u18ee\u0005\u0457\u0000\u0000\u18ee\u18f0\u0005\u0458\u0000"+
		"\u0000\u18ef\u18ed\u0001\u0000\u0000\u0000\u18ef\u18f0\u0001\u0000\u0000"+
		"\u0000\u18f0\u19b4\u0001\u0000\u0000\u0000\u18f1\u18f2\u0005<\u0000\u0000"+
		"\u18f2\u18f3\u0005\u0457\u0000\u0000\u18f3\u18f4\u0003\u0210\u0108\u0000"+
		"\u18f4\u18f5\u0005\u0459\u0000\u0000\u18f5\u18f6\u0005\u0466\u0000\u0000"+
		"\u18f6\u18f7\u0005\u0458\u0000\u0000\u18f7\u19b4\u0001\u0000\u0000\u0000"+
		"\u18f8\u18f9\u0005\u001f\u0000\u0000\u18f9\u18fa\u0005\u0457\u0000\u0000"+
		"\u18fa\u18fb\u0003\u0288\u0144\u0000\u18fb\u18fc\u0005\u0459\u0000\u0000"+
		"\u18fc\u18fd\u0003\u023e\u011f\u0000\u18fd\u18fe\u0005\u0458\u0000\u0000"+
		"\u18fe\u19b4\u0001\u0000\u0000\u0000\u18ff\u1900\u0005\u001f\u0000\u0000"+
		"\u1900\u1901\u0005\u0457\u0000\u0000\u1901\u1902\u0003\u0288\u0144\u0000"+
		"\u1902\u1903\u0005\u00b5\u0000\u0000\u1903\u1904\u0003\u0218\u010c\u0000"+
		"\u1904\u1905\u0005\u0458\u0000\u0000\u1905\u19b4\u0001\u0000\u0000\u0000"+
		"\u1906\u1907\u0005\u0016\u0000\u0000\u1907\u1908\u0005\u0457\u0000\u0000"+
		"\u1908\u1909\u0003\u0288\u0144\u0000\u1909\u190a\u0005\f\u0000\u0000\u190a"+
		"\u190b\u0003\u023e\u011f\u0000\u190b\u190c\u0005\u0458\u0000\u0000\u190c"+
		"\u19b4\u0001\u0000\u0000\u0000\u190d\u190e\u0005\u00b6\u0000\u0000\u190e"+
		"\u190f\u0005\u0457\u0000\u0000\u190f\u1910\u0003\u0210\u0108\u0000\u1910"+
		"\u1911\u0005\u0458\u0000\u0000\u1911\u19b4\u0001\u0000\u0000\u0000\u1912"+
		"\u1913\u0005\u0015\u0000\u0000\u1913\u1915\u0003\u0288\u0144\u0000\u1914"+
		"\u1916\u0003\u0264\u0132\u0000\u1915\u1914\u0001\u0000\u0000\u0000\u1916"+
		"\u1917\u0001\u0000\u0000\u0000\u1917\u1915\u0001\u0000\u0000\u0000\u1917"+
		"\u1918\u0001\u0000\u0000\u0000\u1918\u191b\u0001\u0000\u0000\u0000\u1919"+
		"\u191a\u00053\u0000\u0000\u191a\u191c\u0003\u0286\u0143\u0000\u191b\u1919"+
		"\u0001\u0000\u0000\u0000\u191b\u191c\u0001\u0000\u0000\u0000\u191c\u191d"+
		"\u0001\u0000\u0000\u0000\u191d\u191e\u0005\u018b\u0000\u0000\u191e\u19b4"+
		"\u0001\u0000\u0000\u0000\u191f\u1921\u0005\u0015\u0000\u0000\u1920\u1922"+
		"\u0003\u0264\u0132\u0000\u1921\u1920\u0001\u0000\u0000\u0000\u1922\u1923"+
		"\u0001\u0000\u0000\u0000\u1923\u1921\u0001\u0000\u0000\u0000\u1923\u1924"+
		"\u0001\u0000\u0000\u0000\u1924\u1927\u0001\u0000\u0000\u0000\u1925\u1926"+
		"\u00053\u0000\u0000\u1926\u1928\u0003\u0286\u0143\u0000\u1927\u1925\u0001"+
		"\u0000\u0000\u0000\u1927\u1928\u0001\u0000\u0000\u0000\u1928\u1929\u0001"+
		"\u0000\u0000\u0000\u1929\u192a\u0005\u018b\u0000\u0000\u192a\u19b4\u0001"+
		"\u0000\u0000\u0000\u192b\u192c\u0005\u00d8\u0000\u0000\u192c\u192d\u0005"+
		"\u0457\u0000\u0000\u192d\u1930\u0003\u0284\u0142\u0000\u192e\u192f\u0005"+
		"\u00b5\u0000\u0000\u192f\u1931\u0003\u0218\u010c\u0000\u1930\u192e\u0001"+
		"\u0000\u0000\u0000\u1930\u1931\u0001\u0000\u0000\u0000\u1931\u1932\u0001"+
		"\u0000\u0000\u0000\u1932\u1933\u0005\u0458\u0000\u0000\u1933\u19b4\u0001"+
		"\u0000\u0000\u0000\u1934\u1935\u0005\u013b\u0000\u0000\u1935\u1938\u0005"+
		"\u0457\u0000\u0000\u1936\u1939\u0003\u0230\u0118\u0000\u1937\u1939\u0003"+
		"\u0288\u0144\u0000\u1938\u1936\u0001\u0000\u0000\u0000\u1938\u1937\u0001"+
		"\u0000\u0000\u0000\u1939\u193a\u0001\u0000\u0000\u0000\u193a\u193d\u0005"+
		"P\u0000\u0000\u193b\u193e\u0003\u0230\u0118\u0000\u193c\u193e\u0003\u0288"+
		"\u0144\u0000\u193d\u193b\u0001\u0000\u0000\u0000\u193d\u193c\u0001\u0000"+
		"\u0000\u0000\u193e\u193f\u0001\u0000\u0000\u0000\u193f\u1940\u0005\u0458"+
		"\u0000\u0000\u1940\u19b4\u0001\u0000\u0000\u0000\u1941\u1942\u0007q\u0000"+
		"\u0000\u1942\u1945\u0005\u0457\u0000\u0000\u1943\u1946\u0003\u0230\u0118"+
		"\u0000\u1944\u1946\u0003\u0288\u0144\u0000\u1945\u1943\u0001\u0000\u0000"+
		"\u0000\u1945\u1944\u0001\u0000\u0000\u0000\u1946\u1947\u0001\u0000\u0000"+
		"\u0000\u1947\u194a\u0005D\u0000\u0000\u1948\u194b\u0003\u022c\u0116\u0000"+
		"\u1949\u194b\u0003\u0288\u0144\u0000\u194a\u1948\u0001\u0000\u0000\u0000"+
		"\u194a\u1949\u0001\u0000\u0000\u0000\u194b\u1951\u0001\u0000\u0000\u0000"+
		"\u194c\u194f\u0005A\u0000\u0000\u194d\u1950\u0003\u022c\u0116\u0000\u194e"+
		"\u1950\u0003\u0288\u0144\u0000\u194f\u194d\u0001\u0000\u0000\u0000\u194f"+
		"\u194e\u0001\u0000\u0000\u0000\u1950\u1952\u0001\u0000\u0000\u0000\u1951"+
		"\u194c\u0001\u0000\u0000\u0000\u1951\u1952\u0001\u0000\u0000\u0000\u1952"+
		"\u1953\u0001\u0000\u0000\u0000\u1953\u1954\u0005\u0458\u0000\u0000\u1954"+
		"\u19b4\u0001\u0000\u0000\u0000\u1955\u1956\u0005\u013f\u0000\u0000\u1956"+
		"\u1957\u0005\u0457\u0000\u0000\u1957\u195a\u0007r\u0000\u0000\u1958\u195b"+
		"\u0003\u0230\u0118\u0000\u1959\u195b\u0003\u0288\u0144\u0000\u195a\u1958"+
		"\u0001\u0000\u0000\u0000\u195a\u1959\u0001\u0000\u0000\u0000\u195a\u195b"+
		"\u0001\u0000\u0000\u0000\u195b\u195c\u0001\u0000\u0000\u0000\u195c\u195f"+
		"\u0005D\u0000\u0000\u195d\u1960\u0003\u0230\u0118\u0000\u195e\u1960\u0003"+
		"\u0288\u0144\u0000\u195f\u195d\u0001\u0000\u0000\u0000\u195f\u195e\u0001"+
		"\u0000\u0000\u0000\u1960\u1961\u0001\u0000\u0000\u0000\u1961\u1962\u0005"+
		"\u0458\u0000\u0000\u1962\u19b4\u0001\u0000\u0000\u0000\u1963\u1964\u0005"+
		"\u013f\u0000\u0000\u1964\u1967\u0005\u0457\u0000\u0000\u1965\u1968\u0003"+
		"\u0230\u0118\u0000\u1966\u1968\u0003\u0288\u0144\u0000\u1967\u1965\u0001"+
		"\u0000\u0000\u0000\u1967\u1966\u0001\u0000\u0000\u0000\u1968\u1969\u0001"+
		"\u0000\u0000\u0000\u1969\u196c\u0005D\u0000\u0000\u196a\u196d\u0003\u0230"+
		"\u0118\u0000\u196b\u196d\u0003\u0288\u0144\u0000\u196c\u196a\u0001\u0000"+
		"\u0000\u0000\u196c\u196b\u0001\u0000\u0000\u0000\u196d\u196e\u0001\u0000"+
		"\u0000\u0000\u196e\u196f\u0005\u0458\u0000\u0000\u196f\u19b4\u0001\u0000"+
		"\u0000\u0000\u1970\u1971\u0005\u042d\u0000\u0000\u1971\u1974\u0005\u0457"+
		"\u0000\u0000\u1972\u1975\u0003\u0230\u0118\u0000\u1973\u1975\u0003\u0288"+
		"\u0144\u0000\u1974\u1972\u0001\u0000\u0000\u0000\u1974\u1973\u0001\u0000"+
		"\u0000\u0000\u1975\u197c\u0001\u0000\u0000\u0000\u1976\u1977\u0005\f\u0000"+
		"\u0000\u1977\u1978\u0007s\u0000\u0000\u1978\u1979\u0005\u0457\u0000\u0000"+
		"\u1979\u197a\u0003\u022c\u0116\u0000\u197a\u197b\u0005\u0458\u0000\u0000"+
		"\u197b\u197d\u0001\u0000\u0000\u0000\u197c\u1976\u0001\u0000\u0000\u0000"+
		"\u197c\u197d\u0001\u0000\u0000\u0000\u197d\u197f\u0001\u0000\u0000\u0000"+
		"\u197e\u1980\u0003\u0266\u0133\u0000\u197f\u197e\u0001\u0000\u0000\u0000"+
		"\u197f\u1980\u0001\u0000\u0000\u0000\u1980\u1981\u0001\u0000\u0000\u0000"+
		"\u1981\u1982\u0005\u0458\u0000\u0000\u1982\u19b4\u0001\u0000\u0000\u0000"+
		"\u1983\u1984\u0005\u0138\u0000\u0000\u1984\u1985\u0005\u0457\u0000\u0000"+
		"\u1985\u1986\u0003F#\u0000\u1986\u1989\u0005D\u0000\u0000\u1987\u198a"+
		"\u0003\u0230\u0118\u0000\u1988\u198a\u0003\u0288\u0144\u0000\u1989\u1987"+
		"\u0001\u0000\u0000\u0000\u1989\u1988\u0001\u0000\u0000\u0000\u198a\u198b"+
		"\u0001\u0000\u0000\u0000\u198b\u198c\u0005\u0458\u0000\u0000\u198c\u19b4"+
		"\u0001\u0000\u0000\u0000\u198d\u198e\u0005\u0364\u0000\u0000\u198e\u198f"+
		"\u0005\u0457\u0000\u0000\u198f\u1990\u0007t\u0000\u0000\u1990\u1991\u0005"+
		"\u0459\u0000\u0000\u1991\u1992\u0003\u0230\u0118\u0000\u1992\u1993\u0005"+
		"\u0458\u0000\u0000\u1993\u19b4\u0001\u0000\u0000\u0000\u1994\u1995\u0005"+
		"\u00fe\u0000\u0000\u1995\u1996\u0005\u0457\u0000\u0000\u1996\u1997\u0003"+
		"\u0288\u0144\u0000\u1997\u1998\u0005\u0459\u0000\u0000\u1998\u199b\u0003"+
		"\u0288\u0144\u0000\u1999\u199a\u0005\u023a\u0000\u0000\u199a\u199c\u0003"+
		"\u023e\u011f\u0000\u199b\u1999\u0001\u0000\u0000\u0000\u199b\u199c\u0001"+
		"\u0000\u0000\u0000\u199c\u19a5\u0001\u0000\u0000\u0000\u199d\u19a2\u0005"+
		"q\u0000\u0000\u199e\u19a2\u0005\u018f\u0000\u0000\u199f\u19a0\u0005(\u0000"+
		"\u0000\u19a0\u19a2\u0003\u0256\u012b\u0000\u19a1\u199d\u0001\u0000\u0000"+
		"\u0000\u19a1\u199e\u0001\u0000\u0000\u0000\u19a1\u199f\u0001\u0000\u0000"+
		"\u0000\u19a2\u19a3\u0001\u0000\u0000\u0000\u19a3\u19a4\u0005s\u0000\u0000"+
		"\u19a4\u19a6\u00055\u0000\u0000\u19a5\u19a1\u0001\u0000\u0000\u0000\u19a5"+
		"\u19a6\u0001\u0000\u0000\u0000\u19a6\u19af\u0001\u0000\u0000\u0000\u19a7"+
		"\u19ac\u0005q\u0000\u0000\u19a8\u19ac\u0005\u018f\u0000\u0000\u19a9\u19aa"+
		"\u0005(\u0000\u0000\u19aa\u19ac\u0003\u0256\u012b\u0000\u19ab\u19a7\u0001"+
		"\u0000\u0000\u0000\u19ab\u19a8\u0001\u0000\u0000\u0000\u19ab\u19a9\u0001"+
		"\u0000\u0000\u0000\u19ac\u19ad\u0001\u0000\u0000\u0000\u19ad\u19ae\u0005"+
		"s\u0000\u0000\u19ae\u19b0\u0005\u018f\u0000\u0000\u19af\u19ab\u0001\u0000"+
		"\u0000\u0000\u19af\u19b0\u0001\u0000\u0000\u0000\u19b0\u19b1\u0001\u0000"+
		"\u0000\u0000\u19b1\u19b2\u0005\u0458\u0000\u0000\u19b2\u19b4\u0001\u0000"+
		"\u0000\u0000\u19b3\u18ec\u0001\u0000\u0000\u0000\u19b3\u18f1\u0001\u0000"+
		"\u0000\u0000\u19b3\u18f8\u0001\u0000\u0000\u0000\u19b3\u18ff\u0001\u0000"+
		"\u0000\u0000\u19b3\u1906\u0001\u0000\u0000\u0000\u19b3\u190d\u0001\u0000"+
		"\u0000\u0000\u19b3\u1912\u0001\u0000\u0000\u0000\u19b3\u191f\u0001\u0000"+
		"\u0000\u0000\u19b3\u192b\u0001\u0000\u0000\u0000\u19b3\u1934\u0001\u0000"+
		"\u0000\u0000\u19b3\u1941\u0001\u0000\u0000\u0000\u19b3\u1955\u0001\u0000"+
		"\u0000\u0000\u19b3\u1963\u0001\u0000\u0000\u0000\u19b3\u1970\u0001\u0000"+
		"\u0000\u0000\u19b3\u1983\u0001\u0000\u0000\u0000\u19b3\u198d\u0001\u0000"+
		"\u0000\u0000\u19b3\u1994\u0001\u0000\u0000\u0000\u19b4\u0263\u0001\u0000"+
		"\u0000\u0000\u19b5\u19b6\u0005\u00b7\u0000\u0000\u19b6\u19b7\u0003\u0286"+
		"\u0143\u0000\u19b7\u19b8\u0005\u00a8\u0000\u0000\u19b8\u19b9\u0003\u0286"+
		"\u0143\u0000\u19b9\u0265\u0001\u0000\u0000\u0000\u19ba\u19bb\u0005\u01c9"+
		"\u0000\u0000\u19bb\u19c0\u0003\u0268\u0134\u0000\u19bc\u19bd\u0005\u0459"+
		"\u0000\u0000\u19bd\u19bf\u0003\u0268\u0134\u0000\u19be\u19bc\u0001\u0000"+
		"\u0000\u0000\u19bf\u19c2\u0001\u0000\u0000\u0000\u19c0\u19be\u0001\u0000"+
		"\u0000\u0000\u19c0\u19c1\u0001\u0000\u0000\u0000\u19c1\u19c9\u0001\u0000"+
		"\u0000\u0000\u19c2\u19c0\u0001\u0000\u0000\u0000\u19c3\u19c4\u0005\u01c9"+
		"\u0000\u0000\u19c4\u19c5\u0003\u022c\u0116\u0000\u19c5\u19c6\u0005\u044b"+
		"\u0000\u0000\u19c6\u19c7\u0003\u022c\u0116\u0000\u19c7\u19c9\u0001\u0000"+
		"\u0000\u0000\u19c8\u19ba\u0001\u0000\u0000\u0000\u19c8\u19c3\u0001\u0000"+
		"\u0000\u0000\u19c9\u0267\u0001\u0000\u0000\u0000\u19ca\u19cc\u0003\u022c"+
		"\u0116\u0000\u19cb\u19cd\u0007u\u0000\u0000\u19cc\u19cb\u0001\u0000\u0000"+
		"\u0000\u19cc\u19cd\u0001\u0000\u0000\u0000\u19cd\u0269\u0001\u0000\u0000"+
		"\u0000\u19ce\u19cf\u0007v\u0000\u0000\u19cf\u19d1\u0005\u0457\u0000\u0000"+
		"\u19d0\u19d2\u0007+\u0000\u0000\u19d1\u19d0\u0001\u0000\u0000\u0000\u19d1"+
		"\u19d2\u0001\u0000\u0000\u0000\u19d2\u19d3\u0001\u0000\u0000\u0000\u19d3"+
		"\u19d4\u0003\u0286\u0143\u0000\u19d4\u19d6\u0005\u0458\u0000\u0000\u19d5"+
		"\u19d7\u0003\u026e\u0137\u0000\u19d6\u19d5\u0001\u0000\u0000\u0000\u19d6"+
		"\u19d7\u0001\u0000\u0000\u0000\u19d7\u1a0a\u0001\u0000\u0000\u0000\u19d8"+
		"\u19d9\u0005\u0119\u0000\u0000\u19d9\u19e1\u0005\u0457\u0000\u0000\u19da"+
		"\u19e2\u0005\u0447\u0000\u0000\u19db\u19dd\u0005\u0006\u0000\u0000\u19dc"+
		"\u19db\u0001\u0000\u0000\u0000\u19dc\u19dd\u0001\u0000\u0000\u0000\u19dd"+
		"\u19de\u0001\u0000\u0000\u0000\u19de\u19e2\u0003\u0286\u0143\u0000\u19df"+
		"\u19e0\u0005/\u0000\u0000\u19e0\u19e2\u0003\u0284\u0142\u0000\u19e1\u19da"+
		"\u0001\u0000\u0000\u0000\u19e1\u19dc\u0001\u0000\u0000\u0000\u19e1\u19df"+
		"\u0001\u0000\u0000\u0000\u19e2\u19e3\u0001\u0000\u0000\u0000\u19e3\u19e5"+
		"\u0005\u0458\u0000\u0000\u19e4\u19e6\u0003\u026e\u0137\u0000\u19e5\u19e4"+
		"\u0001\u0000\u0000\u0000\u19e5\u19e6\u0001\u0000\u0000\u0000\u19e6\u1a0a"+
		"\u0001\u0000\u0000\u0000\u19e7\u19e8\u0007w\u0000\u0000\u19e8\u19ea\u0005"+
		"\u0457\u0000\u0000\u19e9\u19eb\u0005\u0006\u0000\u0000\u19ea\u19e9\u0001"+
		"\u0000\u0000\u0000\u19ea\u19eb\u0001\u0000\u0000\u0000\u19eb\u19ec\u0001"+
		"\u0000\u0000\u0000\u19ec\u19ed\u0003\u0286\u0143\u0000\u19ed\u19ef\u0005"+
		"\u0458\u0000\u0000\u19ee\u19f0\u0003\u026e\u0137\u0000\u19ef\u19ee\u0001"+
		"\u0000\u0000\u0000\u19ef\u19f0\u0001\u0000\u0000\u0000\u19f0\u1a0a\u0001"+
		"\u0000\u0000\u0000\u19f1\u19f2\u0005\u011d\u0000\u0000\u19f2\u19f4\u0005"+
		"\u0457\u0000\u0000\u19f3\u19f5\u0005/\u0000\u0000\u19f4\u19f3\u0001\u0000"+
		"\u0000\u0000\u19f4\u19f5\u0001\u0000\u0000\u0000\u19f5\u19f6\u0001\u0000"+
		"\u0000\u0000\u19f6\u1a01\u0003\u0284\u0142\u0000\u19f7\u19f8\u0005y\u0000"+
		"\u0000\u19f8\u19f9\u0005\u0012\u0000\u0000\u19f9\u19fe\u0003\u00e2q\u0000"+
		"\u19fa\u19fb\u0005\u0459\u0000\u0000\u19fb\u19fd\u0003\u00e2q\u0000\u19fc"+
		"\u19fa\u0001\u0000\u0000\u0000\u19fd\u1a00\u0001\u0000\u0000\u0000\u19fe"+
		"\u19fc\u0001\u0000\u0000\u0000\u19fe\u19ff\u0001\u0000\u0000\u0000\u19ff"+
		"\u1a02\u0001\u0000\u0000\u0000\u1a00\u19fe\u0001\u0000\u0000\u0000\u1a01"+
		"\u19f7\u0001\u0000\u0000\u0000\u1a01\u1a02\u0001\u0000\u0000\u0000\u1a02"+
		"\u1a05\u0001\u0000\u0000\u0000\u1a03\u1a04\u0005\u0097\u0000\u0000\u1a04"+
		"\u1a06\u0005\u0466\u0000\u0000\u1a05\u1a03\u0001\u0000\u0000\u0000\u1a05"+
		"\u1a06\u0001\u0000\u0000\u0000\u1a06\u1a07\u0001\u0000\u0000\u0000\u1a07"+
		"\u1a08\u0005\u0458\u0000\u0000\u1a08\u1a0a\u0001\u0000\u0000\u0000\u1a09"+
		"\u19ce\u0001\u0000\u0000\u0000\u1a09\u19d8\u0001\u0000\u0000\u0000\u1a09"+
		"\u19e7\u0001\u0000\u0000\u0000\u1a09\u19f1\u0001\u0000\u0000\u0000\u1a0a"+
		"\u026b\u0001\u0000\u0000\u0000\u1a0b\u1a0c\u0007x\u0000\u0000\u1a0c\u1a0d"+
		"\u0005\u0457\u0000\u0000\u1a0d\u1a10\u0003\u0288\u0144\u0000\u1a0e\u1a0f"+
		"\u0005\u0459\u0000\u0000\u1a0f\u1a11\u0003\u022c\u0116\u0000\u1a10\u1a0e"+
		"\u0001\u0000\u0000\u0000\u1a10\u1a11\u0001\u0000\u0000\u0000\u1a11\u1a14"+
		"\u0001\u0000\u0000\u0000\u1a12\u1a13\u0005\u0459\u0000\u0000\u1a13\u1a15"+
		"\u0003\u022c\u0116\u0000\u1a14\u1a12\u0001\u0000\u0000\u0000\u1a14\u1a15"+
		"\u0001\u0000\u0000\u0000\u1a15\u1a16\u0001\u0000\u0000\u0000\u1a16\u1a17"+
		"\u0005\u0458\u0000\u0000\u1a17\u1a18\u0003\u026e\u0137\u0000\u1a18\u1a32"+
		"\u0001\u0000\u0000\u0000\u1a19\u1a1a\u0007y\u0000\u0000\u1a1a\u1a1b\u0005"+
		"\u0457\u0000\u0000\u1a1b\u1a1c\u0003\u0288\u0144\u0000\u1a1c\u1a1d\u0005"+
		"\u0458\u0000\u0000\u1a1d\u1a1e\u0003\u026e\u0137\u0000\u1a1e\u1a32\u0001"+
		"\u0000\u0000\u0000\u1a1f\u1a20\u0007z\u0000\u0000\u1a20\u1a21\u0005\u0457"+
		"\u0000\u0000\u1a21\u1a22\u0005\u0458\u0000\u0000\u1a22\u1a32\u0003\u026e"+
		"\u0137\u0000\u1a23\u1a24\u0005\u0124\u0000\u0000\u1a24\u1a25\u0005\u0457"+
		"\u0000\u0000\u1a25\u1a26\u0003\u0288\u0144\u0000\u1a26\u1a27\u0005\u0459"+
		"\u0000\u0000\u1a27\u1a28\u0003\u022c\u0116\u0000\u1a28\u1a29\u0005\u0458"+
		"\u0000\u0000\u1a29\u1a2a\u0003\u026e\u0137\u0000\u1a2a\u1a32\u0001\u0000"+
		"\u0000\u0000\u1a2b\u1a2c\u0005\u0123\u0000\u0000\u1a2c\u1a2d\u0005\u0457"+
		"\u0000\u0000\u1a2d\u1a2e\u0003\u022c\u0116\u0000\u1a2e\u1a2f\u0005\u0458"+
		"\u0000\u0000\u1a2f\u1a30\u0003\u026e\u0137\u0000\u1a30\u1a32\u0001\u0000"+
		"\u0000\u0000\u1a31\u1a0b\u0001\u0000\u0000\u0000\u1a31\u1a19\u0001\u0000"+
		"\u0000\u0000\u1a31\u1a1f\u0001\u0000\u0000\u0000\u1a31\u1a23\u0001\u0000"+
		"\u0000\u0000\u1a31\u1a2b\u0001\u0000\u0000\u0000\u1a32\u026d\u0001\u0000"+
		"\u0000\u0000\u1a33\u1a3a\u0005{\u0000\u0000\u1a34\u1a36\u0005\u0457\u0000"+
		"\u0000\u1a35\u1a37\u0003\u0270\u0138\u0000\u1a36\u1a35\u0001\u0000\u0000"+
		"\u0000\u1a36\u1a37\u0001\u0000\u0000\u0000\u1a37\u1a38\u0001\u0000\u0000"+
		"\u0000\u1a38\u1a3b\u0005\u0458\u0000\u0000\u1a39\u1a3b\u0003\u0272\u0139"+
		"\u0000\u1a3a\u1a34\u0001\u0000\u0000\u0000\u1a3a\u1a39\u0001\u0000\u0000"+
		"\u0000\u1a3b\u026f\u0001\u0000\u0000\u0000\u1a3c\u1a3e\u0003\u0272\u0139"+
		"\u0000\u1a3d\u1a3c\u0001\u0000\u0000\u0000\u1a3d\u1a3e\u0001\u0000\u0000"+
		"\u0000\u1a3e\u1a40\u0001\u0000\u0000\u0000\u1a3f\u1a41\u0003\u027e\u013f"+
		"\u0000\u1a40\u1a3f\u0001\u0000\u0000\u0000\u1a40\u1a41\u0001\u0000\u0000"+
		"\u0000\u1a41\u1a43\u0001\u0000\u0000\u0000\u1a42\u1a44\u0003\u00e0p\u0000"+
		"\u1a43\u1a42\u0001\u0000\u0000\u0000\u1a43\u1a44\u0001\u0000\u0000\u0000"+
		"\u1a44\u1a46\u0001\u0000\u0000\u0000\u1a45\u1a47\u0003\u0274\u013a\u0000"+
		"\u1a46\u1a45\u0001\u0000\u0000\u0000\u1a46\u1a47\u0001\u0000\u0000\u0000"+
		"\u1a47\u0271\u0001\u0000\u0000\u0000\u1a48\u1a49\u0003\u0226\u0113\u0000"+
		"\u1a49\u0273\u0001\u0000\u0000\u0000\u1a4a\u1a4b\u0003\u0276\u013b\u0000"+
		"\u1a4b\u1a4c\u0003\u0278\u013c\u0000\u1a4c\u0275\u0001\u0000\u0000\u0000"+
		"\u1a4d\u1a4e\u0007{\u0000\u0000\u1a4e\u0277\u0001\u0000\u0000\u0000\u1a4f"+
		"\u1a52\u0003\u027c\u013e\u0000\u1a50\u1a52\u0003\u027a\u013d\u0000\u1a51"+
		"\u1a4f\u0001\u0000\u0000\u0000\u1a51\u1a50\u0001\u0000\u0000\u0000\u1a52"+
		"\u0279\u0001\u0000\u0000\u0000\u1a53\u1a54\u0005\u000f\u0000\u0000\u1a54"+
		"\u1a55\u0003\u027c\u013e\u0000\u1a55\u1a56\u0005\n\u0000\u0000\u1a56\u1a57"+
		"\u0003\u027c\u013e\u0000\u1a57\u027b\u0001\u0000\u0000\u0000\u1a58\u1a59"+
		"\u0005\"\u0000\u0000\u1a59\u1a60\u0005\u0240\u0000\u0000\u1a5a\u1a5b\u0005"+
		"\u0278\u0000\u0000\u1a5b\u1a60\u0007|\u0000\u0000\u1a5c\u1a5d\u0003\u0288"+
		"\u0144\u0000\u1a5d\u1a5e\u0007|\u0000\u0000\u1a5e\u1a60\u0001\u0000\u0000"+
		"\u0000\u1a5f\u1a58\u0001\u0000\u0000\u0000\u1a5f\u1a5a\u0001\u0000\u0000"+
		"\u0000\u1a5f\u1a5c\u0001\u0000\u0000\u0000\u1a60\u027d\u0001\u0000\u0000"+
		"\u0000\u1a61\u1a62\u0005~\u0000\u0000\u1a62\u1a63\u0005\u0012\u0000\u0000"+
		"\u1a63\u1a68\u0003\u0288\u0144\u0000\u1a64\u1a65\u0005\u0459\u0000\u0000"+
		"\u1a65\u1a67\u0003\u0288\u0144\u0000\u1a66\u1a64\u0001\u0000\u0000\u0000"+
		"\u1a67\u1a6a\u0001\u0000\u0000\u0000\u1a68\u1a66\u0001\u0000\u0000\u0000"+
		"\u1a68\u1a69\u0001\u0000\u0000\u0000\u1a69\u027f\u0001\u0000\u0000\u0000"+
		"\u1a6a\u1a68\u0001\u0000\u0000\u0000\u1a6b\u1a83\u0003\u02a8\u0154\u0000"+
		"\u1a6c\u1a83\u0005\u02cb\u0000\u0000\u1a6d\u1a83\u0005\u0134\u0000\u0000"+
		"\u1a6e\u1a83\u0005\u0130\u0000\u0000\u1a6f\u1a83\u0005\u0131\u0000\u0000"+
		"\u1a70\u1a83\u0005\u0132\u0000\u0000\u1a71\u1a83\u0005\u0135\u0000\u0000"+
		"\u1a72\u1a83\u0005\u0136\u0000\u0000\u1a73\u1a83\u0005\u0137\u0000\u0000"+
		"\u1a74\u1a83\u0005M\u0000\u0000\u1a75\u1a83\u0005U\u0000\u0000\u1a76\u1a83"+
		"\u0005\u0133\u0000\u0000\u1a77\u1a83\u0005\u0139\u0000\u0000\u1a78\u1a83"+
		"\u0005\u01ed\u0000\u0000\u1a79\u1a83\u0005\u013a\u0000\u0000\u1a7a\u1a83"+
		"\u0005\u008a\u0000\u0000\u1a7b\u1a83\u0005\u013c\u0000\u0000\u1a7c\u1a83"+
		"\u0005\u013d\u0000\u0000\u1a7d\u1a83\u0005\u013e\u0000\u0000\u1a7e\u1a83"+
		"\u0005\u013f\u0000\u0000\u1a7f\u1a83\u0005\u0140\u0000\u0000\u1a80\u1a83"+
		"\u0005\u0141\u0000\u0000\u1a81\u1a83\u0005\u0142\u0000\u0000\u1a82\u1a6b"+
		"\u0001\u0000\u0000\u0000\u1a82\u1a6c\u0001\u0000\u0000\u0000\u1a82\u1a6d"+
		"\u0001\u0000\u0000\u0000\u1a82\u1a6e\u0001\u0000\u0000\u0000\u1a82\u1a6f"+
		"\u0001\u0000\u0000\u0000\u1a82\u1a70\u0001\u0000\u0000\u0000\u1a82\u1a71"+
		"\u0001\u0000\u0000\u0000\u1a82\u1a72\u0001\u0000\u0000\u0000\u1a82\u1a73"+
		"\u0001\u0000\u0000\u0000\u1a82\u1a74\u0001\u0000\u0000\u0000\u1a82\u1a75"+
		"\u0001\u0000\u0000\u0000\u1a82\u1a76\u0001\u0000\u0000\u0000\u1a82\u1a77"+
		"\u0001\u0000\u0000\u0000\u1a82\u1a78\u0001\u0000\u0000\u0000\u1a82\u1a79"+
		"\u0001\u0000\u0000\u0000\u1a82\u1a7a\u0001\u0000\u0000\u0000\u1a82\u1a7b"+
		"\u0001\u0000\u0000\u0000\u1a82\u1a7c\u0001\u0000\u0000\u0000\u1a82\u1a7d"+
		"\u0001\u0000\u0000\u0000\u1a82\u1a7e\u0001\u0000\u0000\u0000\u1a82\u1a7f"+
		"\u0001\u0000\u0000\u0000\u1a82\u1a80\u0001\u0000\u0000\u0000\u1a82\u1a81"+
		"\u0001\u0000\u0000\u0000\u1a83\u0281\u0001\u0000\u0000\u0000\u1a84\u1a85"+
		"\u0007}\u0000\u0000\u1a85\u1a86\u0005\u0457\u0000\u0000\u1a86\u1a87\u0003"+
		"\u0286\u0143\u0000\u1a87\u1a88\u0005\u0458\u0000\u0000\u1a88\u0283\u0001"+
		"\u0000\u0000\u0000\u1a89\u1a8e\u0003\u0238\u011c\u0000\u1a8a\u1a8e\u0003"+
		"\u0210\u0108\u0000\u1a8b\u1a8e\u0003\u0260\u0130\u0000\u1a8c\u1a8e\u0003"+
		"\u0288\u0144\u0000\u1a8d\u1a89\u0001\u0000\u0000\u0000\u1a8d\u1a8a\u0001"+
		"\u0000\u0000\u0000\u1a8d\u1a8b\u0001\u0000\u0000\u0000\u1a8d\u1a8c\u0001"+
		"\u0000\u0000\u0000\u1a8e\u1a98\u0001\u0000\u0000\u0000\u1a8f\u1a94\u0005"+
		"\u0459\u0000\u0000\u1a90\u1a95\u0003\u0238\u011c\u0000\u1a91\u1a95\u0003"+
		"\u0210\u0108\u0000\u1a92\u1a95\u0003\u0260\u0130\u0000\u1a93\u1a95\u0003"+
		"\u0288\u0144\u0000\u1a94\u1a90\u0001\u0000\u0000\u0000\u1a94\u1a91\u0001"+
		"\u0000\u0000\u0000\u1a94\u1a92\u0001\u0000\u0000\u0000\u1a94\u1a93\u0001"+
		"\u0000\u0000\u0000\u1a95\u1a97\u0001\u0000\u0000\u0000\u1a96\u1a8f\u0001"+
		"\u0000\u0000\u0000\u1a97\u1a9a\u0001\u0000\u0000\u0000\u1a98\u1a96\u0001"+
		"\u0000\u0000\u0000\u1a98\u1a99\u0001\u0000\u0000\u0000\u1a99\u0285\u0001"+
		"\u0000\u0000\u0000\u1a9a\u1a98\u0001\u0000\u0000\u0000\u1a9b\u1aa0\u0003"+
		"\u0238\u011c\u0000\u1a9c\u1aa0\u0003\u0210\u0108\u0000\u1a9d\u1aa0\u0003"+
		"\u0260\u0130\u0000\u1a9e\u1aa0\u0003\u0288\u0144\u0000\u1a9f\u1a9b\u0001"+
		"\u0000\u0000\u0000\u1a9f\u1a9c\u0001\u0000\u0000\u0000\u1a9f\u1a9d\u0001"+
		"\u0000\u0000\u0000\u1a9f\u1a9e\u0001\u0000\u0000\u0000\u1aa0\u0287\u0001"+
		"\u0000\u0000\u0000\u1aa1\u1aa2\u0006\u0144\uffff\uffff\u0000\u1aa2\u1aa3"+
		"\u0007~\u0000\u0000\u1aa3\u1aad\u0003\u0288\u0144\u0004\u1aa4\u1aa5\u0003"+
		"\u028a\u0145\u0000\u1aa5\u1aa7\u0005X\u0000\u0000\u1aa6\u1aa8\u0005o\u0000"+
		"\u0000\u1aa7\u1aa6\u0001\u0000\u0000\u0000\u1aa7\u1aa8\u0001\u0000\u0000"+
		"\u0000\u1aa8\u1aa9\u0001\u0000\u0000\u0000\u1aa9\u1aaa\u0007\u007f\u0000"+
		"\u0000\u1aaa\u1aad\u0001\u0000\u0000\u0000\u1aab\u1aad\u0003\u028a\u0145"+
		"\u0000\u1aac\u1aa1\u0001\u0000\u0000\u0000\u1aac\u1aa4\u0001\u0000\u0000"+
		"\u0000\u1aac\u1aab\u0001\u0000\u0000\u0000\u1aad\u1ab4\u0001\u0000\u0000"+
		"\u0000\u1aae\u1aaf\n\u0003\u0000\u0000\u1aaf\u1ab0\u0003\u0294\u014a\u0000"+
		"\u1ab0\u1ab1\u0003\u0288\u0144\u0004\u1ab1\u1ab3\u0001\u0000\u0000\u0000"+
		"\u1ab2\u1aae\u0001\u0000\u0000\u0000\u1ab3\u1ab6\u0001\u0000\u0000\u0000"+
		"\u1ab4\u1ab2\u0001\u0000\u0000\u0000\u1ab4\u1ab5\u0001\u0000\u0000\u0000"+
		"\u1ab5\u0289\u0001\u0000\u0000\u0000\u1ab6\u1ab4\u0001\u0000\u0000\u0000"+
		"\u1ab7\u1aba\u0006\u0145\uffff\uffff\u0000\u1ab8\u1ab9\u0005\u0473\u0000"+
		"\u0000\u1ab9\u1abb\u0005\u043e\u0000\u0000\u1aba\u1ab8\u0001\u0000\u0000"+
		"\u0000\u1aba\u1abb\u0001\u0000\u0000\u0000\u1abb\u1abc\u0001\u0000\u0000"+
		"\u0000\u1abc\u1abd\u0003\u028c\u0146\u0000\u1abd\u1afe\u0001\u0000\u0000"+
		"\u0000\u1abe\u1abf\n\b\u0000\u0000\u1abf\u1ac0\u0003\u0292\u0149\u0000"+
		"\u1ac0\u1ac1\u0003\u028a\u0145\t\u1ac1\u1afd\u0001\u0000\u0000\u0000\u1ac2"+
		"\u1ac4\n\u0006\u0000\u0000\u1ac3\u1ac5\u0005o\u0000\u0000\u1ac4\u1ac3"+
		"\u0001\u0000\u0000\u0000\u1ac4\u1ac5\u0001\u0000\u0000\u0000\u1ac5\u1ac6"+
		"\u0001\u0000\u0000\u0000\u1ac6\u1ac7\u0005\u000f\u0000\u0000\u1ac7\u1ac8"+
		"\u0003\u028a\u0145\u0000\u1ac8\u1ac9\u0005\n\u0000\u0000\u1ac9\u1aca\u0003"+
		"\u028a\u0145\u0007\u1aca\u1afd\u0001\u0000\u0000\u0000\u1acb\u1acc\n\u0005"+
		"\u0000\u0000\u1acc\u1acd\u0005\u0253\u0000\u0000\u1acd\u1ace\u0005a\u0000"+
		"\u0000\u1ace\u1afd\u0003\u028a\u0145\u0006\u1acf\u1ad1\n\u0003\u0000\u0000"+
		"\u1ad0\u1ad2\u0005o\u0000\u0000\u1ad1\u1ad0\u0001\u0000\u0000\u0000\u1ad1"+
		"\u1ad2\u0001\u0000\u0000\u0000\u1ad2\u1ad3\u0001\u0000\u0000\u0000\u1ad3"+
		"\u1ad4\u0007\u0080\u0000\u0000\u1ad4\u1afd\u0003\u028a\u0145\u0004\u1ad5"+
		"\u1ad7\n\n\u0000\u0000\u1ad6\u1ad8\u0005o\u0000\u0000\u1ad7\u1ad6\u0001"+
		"\u0000\u0000\u0000\u1ad7\u1ad8\u0001\u0000\u0000\u0000\u1ad8\u1ad9\u0001"+
		"\u0000\u0000\u0000\u1ad9\u1ada\u0005P\u0000\u0000\u1ada\u1add\u0005\u0457"+
		"\u0000\u0000\u1adb\u1ade\u0003\u00c4b\u0000\u1adc\u1ade\u0003\u024c\u0126"+
		"\u0000\u1add\u1adb\u0001\u0000\u0000\u0000\u1add\u1adc\u0001\u0000\u0000"+
		"\u0000\u1ade\u1adf\u0001\u0000\u0000\u0000\u1adf\u1ae0\u0005\u0458\u0000"+
		"\u0000\u1ae0\u1afd\u0001\u0000\u0000\u0000\u1ae1\u1ae2\n\t\u0000\u0000"+
		"\u1ae2\u1ae3\u0005X\u0000\u0000\u1ae3\u1afd\u0003\u0236\u011b\u0000\u1ae4"+
		"\u1ae5\n\u0007\u0000\u0000\u1ae5\u1ae6\u0003\u0292\u0149\u0000\u1ae6\u1ae7"+
		"\u0007\u0081\u0000\u0000\u1ae7\u1ae8\u0005\u0457\u0000\u0000\u1ae8\u1ae9"+
		"\u0003\u00c4b\u0000\u1ae9\u1aea\u0005\u0458\u0000\u0000\u1aea\u1afd\u0001"+
		"\u0000\u0000\u0000\u1aeb\u1aed\n\u0004\u0000\u0000\u1aec\u1aee\u0005o"+
		"\u0000\u0000\u1aed\u1aec\u0001\u0000\u0000\u0000\u1aed\u1aee\u0001\u0000"+
		"\u0000\u0000\u1aee\u1aef\u0001\u0000\u0000\u0000\u1aef\u1af0\u0005a\u0000"+
		"\u0000\u1af0\u1af3\u0003\u028a\u0145\u0000\u1af1\u1af2\u0005\u0191\u0000"+
		"\u0000\u1af2\u1af4\u0005\u0466\u0000\u0000\u1af3\u1af1\u0001\u0000\u0000"+
		"\u0000\u1af3\u1af4\u0001\u0000\u0000\u0000\u1af4\u1afd\u0001\u0000\u0000"+
		"\u0000\u1af5\u1af6\n\u0001\u0000\u0000\u1af6\u1af7\u0005\u01ea\u0000\u0000"+
		"\u1af7\u1af8\u0005\u0202\u0000\u0000\u1af8\u1af9\u0005\u0457\u0000\u0000"+
		"\u1af9\u1afa\u0003\u028a\u0145\u0000\u1afa\u1afb\u0005\u0458\u0000\u0000"+
		"\u1afb\u1afd\u0001\u0000\u0000\u0000\u1afc\u1abe\u0001\u0000\u0000\u0000"+
		"\u1afc\u1ac2\u0001\u0000\u0000\u0000\u1afc\u1acb\u0001\u0000\u0000\u0000"+
		"\u1afc\u1acf\u0001\u0000\u0000\u0000\u1afc\u1ad5\u0001\u0000\u0000\u0000"+
		"\u1afc\u1ae1\u0001\u0000\u0000\u0000\u1afc\u1ae4\u0001\u0000\u0000\u0000"+
		"\u1afc\u1aeb\u0001\u0000\u0000\u0000\u1afc\u1af5\u0001\u0000\u0000\u0000"+
		"\u1afd\u1b00\u0001\u0000\u0000\u0000\u1afe\u1afc\u0001\u0000\u0000\u0000"+
		"\u1afe\u1aff\u0001\u0000\u0000\u0000\u1aff\u028b\u0001\u0000\u0000\u0000"+
		"\u1b00\u1afe\u0001\u0000\u0000\u0000\u1b01\u1b02\u0006\u0146\uffff\uffff"+
		"\u0000\u1b02\u1b30\u0003\u0238\u011c\u0000\u1b03\u1b30\u0003\u0210\u0108"+
		"\u0000\u1b04\u1b30\u0003\u0260";
	private static final String _serializedATNSegment3 =
		"\u0130\u0000\u1b05\u1b30\u0003\u0216\u010b\u0000\u1b06\u1b07\u0003\u0290"+
		"\u0148\u0000\u1b07\u1b08\u0003\u028c\u0146\u000b\u1b08\u1b30\u0001\u0000"+
		"\u0000\u0000\u1b09\u1b0a\u0005\u00dc\u0000\u0000\u1b0a\u1b30\u0003\u028c"+
		"\u0146\n\u1b0b\u1b0c\u0005\u0457\u0000\u0000\u1b0c\u1b11\u0003\u0288\u0144"+
		"\u0000\u1b0d\u1b0e\u0005\u0459\u0000\u0000\u1b0e\u1b10\u0003\u0288\u0144"+
		"\u0000\u1b0f\u1b0d\u0001\u0000\u0000\u0000\u1b10\u1b13\u0001\u0000\u0000"+
		"\u0000\u1b11\u1b0f\u0001\u0000\u0000\u0000\u1b11\u1b12\u0001\u0000\u0000"+
		"\u0000\u1b12\u1b14\u0001\u0000\u0000\u0000\u1b13\u1b11\u0001\u0000\u0000"+
		"\u0000\u1b14\u1b15\u0005\u0458\u0000\u0000\u1b15\u1b30\u0001\u0000\u0000"+
		"\u0000\u1b16\u1b17\u0005\u0240\u0000\u0000\u1b17\u1b18\u0005\u0457\u0000"+
		"\u0000\u1b18\u1b1b\u0003\u0288\u0144\u0000\u1b19\u1b1a\u0005\u0459\u0000"+
		"\u0000\u1b1a\u1b1c\u0003\u0288\u0144\u0000\u1b1b\u1b19\u0001\u0000\u0000"+
		"\u0000\u1b1c\u1b1d\u0001\u0000\u0000\u0000\u1b1d\u1b1b\u0001\u0000\u0000"+
		"\u0000\u1b1d\u1b1e\u0001\u0000\u0000\u0000\u1b1e\u1b1f\u0001\u0000\u0000"+
		"\u0000\u1b1f\u1b20\u0005\u0458\u0000\u0000\u1b20\u1b30\u0001\u0000\u0000"+
		"\u0000\u1b21\u1b22\u00059\u0000\u0000\u1b22\u1b23\u0005\u0457\u0000\u0000"+
		"\u1b23\u1b24\u0003\u00c4b\u0000\u1b24\u1b25\u0005\u0458\u0000\u0000\u1b25"+
		"\u1b30\u0001\u0000\u0000\u0000\u1b26\u1b27\u0005\u0457\u0000\u0000\u1b27"+
		"\u1b28\u0003\u00c4b\u0000\u1b28\u1b29\u0005\u0458\u0000\u0000\u1b29\u1b30"+
		"\u0001\u0000\u0000\u0000\u1b2a\u1b2b\u0005V\u0000\u0000\u1b2b\u1b2c\u0003"+
		"\u0288\u0144\u0000\u1b2c\u1b2d\u0003F#\u0000\u1b2d\u1b30\u0001\u0000\u0000"+
		"\u0000\u1b2e\u1b30\u0003\u028e\u0147\u0000\u1b2f\u1b01\u0001\u0000\u0000"+
		"\u0000\u1b2f\u1b03\u0001\u0000\u0000\u0000\u1b2f\u1b04\u0001\u0000\u0000"+
		"\u0000\u1b2f\u1b05\u0001\u0000\u0000\u0000\u1b2f\u1b06\u0001\u0000\u0000"+
		"\u0000\u1b2f\u1b09\u0001\u0000\u0000\u0000\u1b2f\u1b0b\u0001\u0000\u0000"+
		"\u0000\u1b2f\u1b16\u0001\u0000\u0000\u0000\u1b2f\u1b21\u0001\u0000\u0000"+
		"\u0000\u1b2f\u1b26\u0001\u0000\u0000\u0000\u1b2f\u1b2a\u0001\u0000\u0000"+
		"\u0000\u1b2f\u1b2e\u0001\u0000\u0000\u0000\u1b30\u1b42\u0001\u0000\u0000"+
		"\u0000\u1b31\u1b32\n\u0004\u0000\u0000\u1b32\u1b33\u0003\u0296\u014b\u0000"+
		"\u1b33\u1b34\u0003\u028c\u0146\u0005\u1b34\u1b41\u0001\u0000\u0000\u0000"+
		"\u1b35\u1b36\n\u0003\u0000\u0000\u1b36\u1b37\u0003\u0298\u014c\u0000\u1b37"+
		"\u1b38\u0003\u028c\u0146\u0004\u1b38\u1b41\u0001\u0000\u0000\u0000\u1b39"+
		"\u1b3a\n\u0002\u0000\u0000\u1b3a\u1b3b\u0003\u029a\u014d\u0000\u1b3b\u1b3c"+
		"\u0003\u028c\u0146\u0003\u1b3c\u1b41\u0001\u0000\u0000\u0000\u1b3d\u1b3e"+
		"\n\r\u0000\u0000\u1b3e\u1b3f\u0005\u001a\u0000\u0000\u1b3f\u1b41\u0003"+
		"\u021a\u010d\u0000\u1b40\u1b31\u0001\u0000\u0000\u0000\u1b40\u1b35\u0001"+
		"\u0000\u0000\u0000\u1b40\u1b39\u0001\u0000\u0000\u0000\u1b40\u1b3d\u0001"+
		"\u0000\u0000\u0000\u1b41\u1b44\u0001\u0000\u0000\u0000\u1b42\u1b40\u0001"+
		"\u0000\u0000\u0000\u1b42\u1b43\u0001\u0000\u0000\u0000\u1b43\u028d\u0001"+
		"\u0000\u0000\u0000\u1b44\u1b42\u0001\u0000\u0000\u0000\u1b45\u1b46\u0005"+
		":\u0000\u0000\u1b46\u1b47\u0005\u0457\u0000\u0000\u1b47\u1b48\u0003\u0210"+
		"\u0108\u0000\u1b48\u1b49\u0005\u0458\u0000\u0000\u1b49\u1b4f\u0001\u0000"+
		"\u0000\u0000\u1b4a\u1b4b\u0005;\u0000\u0000\u1b4b\u1b4c\u0005\u0457\u0000"+
		"\u0000\u1b4c\u1b4d\u0005\u0466\u0000\u0000\u1b4d\u1b4f\u0005\u0458\u0000"+
		"\u0000\u1b4e\u1b45\u0001\u0000\u0000\u0000\u1b4e\u1b4a\u0001\u0000\u0000"+
		"\u0000\u1b4f\u028f\u0001\u0000\u0000\u0000\u1b50\u1b51\u0007\u0082\u0000"+
		"\u0000\u1b51\u0291\u0001\u0000\u0000\u0000\u1b52\u1b61\u0005\u044e\u0000"+
		"\u0000\u1b53\u1b61\u0005\u044f\u0000\u0000\u1b54\u1b61\u0005\u0450\u0000"+
		"\u0000\u1b55\u1b56\u0005\u0450\u0000\u0000\u1b56\u1b61\u0005\u044e\u0000"+
		"\u0000\u1b57\u1b58\u0005\u044f\u0000\u0000\u1b58\u1b61\u0005\u044e\u0000"+
		"\u0000\u1b59\u1b5a\u0005\u0450\u0000\u0000\u1b5a\u1b61\u0005\u044f\u0000"+
		"\u0000\u1b5b\u1b5c\u0005\u0451\u0000\u0000\u1b5c\u1b61\u0005\u044e\u0000"+
		"\u0000\u1b5d\u1b5e\u0005\u0450\u0000\u0000\u1b5e\u1b5f\u0005\u044e\u0000"+
		"\u0000\u1b5f\u1b61\u0005\u044f\u0000\u0000\u1b60\u1b52\u0001\u0000\u0000"+
		"\u0000\u1b60\u1b53\u0001\u0000\u0000\u0000\u1b60\u1b54\u0001\u0000\u0000"+
		"\u0000\u1b60\u1b55\u0001\u0000\u0000\u0000\u1b60\u1b57\u0001\u0000\u0000"+
		"\u0000\u1b60\u1b59\u0001\u0000\u0000\u0000\u1b60\u1b5b\u0001\u0000\u0000"+
		"\u0000\u1b60\u1b5d\u0001\u0000\u0000\u0000\u1b61\u0293\u0001\u0000\u0000"+
		"\u0000\u1b62\u1b6a\u0005\n\u0000\u0000\u1b63\u1b64\u0005\u0454\u0000\u0000"+
		"\u1b64\u1b6a\u0005\u0454\u0000\u0000\u1b65\u1b6a\u0005\u00bc\u0000\u0000"+
		"\u1b66\u1b6a\u0005x\u0000\u0000\u1b67\u1b68\u0005\u0453\u0000\u0000\u1b68"+
		"\u1b6a\u0005\u0453\u0000\u0000\u1b69\u1b62\u0001\u0000\u0000\u0000\u1b69"+
		"\u1b63\u0001\u0000\u0000\u0000\u1b69\u1b65\u0001\u0000\u0000\u0000\u1b69"+
		"\u1b66\u0001\u0000\u0000\u0000\u1b69\u1b67\u0001\u0000\u0000\u0000\u1b6a"+
		"\u0295\u0001\u0000\u0000\u0000\u1b6b\u1b6c\u0005\u0450\u0000\u0000\u1b6c"+
		"\u1b73\u0005\u0450\u0000\u0000\u1b6d\u1b6e\u0005\u044f\u0000\u0000\u1b6e"+
		"\u1b73\u0005\u044f\u0000\u0000\u1b6f\u1b73\u0005\u0454\u0000\u0000\u1b70"+
		"\u1b73\u0005\u0455\u0000\u0000\u1b71\u1b73\u0005\u0453\u0000\u0000\u1b72"+
		"\u1b6b\u0001\u0000\u0000\u0000\u1b72\u1b6d\u0001\u0000\u0000\u0000\u1b72"+
		"\u1b6f\u0001\u0000\u0000\u0000\u1b72\u1b70\u0001\u0000\u0000\u0000\u1b72"+
		"\u1b71\u0001\u0000\u0000\u0000\u1b73\u0297\u0001\u0000\u0000\u0000\u1b74"+
		"\u1b75\u0007\u0083\u0000\u0000\u1b75\u0299\u0001\u0000\u0000\u0000\u1b76"+
		"\u1b77\u0005\u044b\u0000\u0000\u1b77\u1b7c\u0005\u044f\u0000\u0000\u1b78"+
		"\u1b79\u0005\u044b\u0000\u0000\u1b79\u1b7a\u0005\u044f\u0000\u0000\u1b7a"+
		"\u1b7c\u0005\u044f\u0000\u0000\u1b7b\u1b76\u0001\u0000\u0000\u0000\u1b7b"+
		"\u1b78\u0001\u0000\u0000\u0000\u1b7c\u029b\u0001\u0000\u0000\u0000\u1b7d"+
		"\u1b7e\u0007\u0084\u0000\u0000\u1b7e\u029d\u0001\u0000\u0000\u0000\u1b7f"+
		"\u1b80\u0007\u0085\u0000\u0000\u1b80\u029f\u0001\u0000\u0000\u0000\u1b81"+
		"\u1b82\u0007\u0086\u0000\u0000\u1b82\u02a1\u0001\u0000\u0000\u0000\u1b83"+
		"\u1b84\u0007\u0087\u0000\u0000\u1b84\u02a3\u0001\u0000\u0000\u0000\u1b85"+
		"\u1b86\u0007\u0088\u0000\u0000\u1b86\u02a5\u0001\u0000\u0000\u0000\u1b87"+
		"\u1b88\u0007\u0089\u0000\u0000\u1b88\u02a7\u0001\u0000\u0000\u0000\u1b89"+
		"\u1b8a\u0007\u008a\u0000\u0000\u1b8a\u02a9\u0001\u0000\u0000\u0000\u0400"+
		"\u02ab\u02af\u02b6\u02b9\u02bc\u02be\u02c4\u02c7\u02ca\u02d3\u02fd\u0309"+
		"\u0314\u0325\u032a\u0336\u0351\u035a\u035f\u0365\u036a\u036e\u0377\u037a"+
		"\u037d\u0381\u0389\u038c\u038f\u0395\u0399\u03a1\u03a6\u03ab\u03b0\u03b3"+
		"\u03b5\u03c1\u03c4\u03c8\u03cb\u03cf\u03d2\u03d6\u03d9\u03dc\u03e0\u03e3"+
		"\u03e7\u03ed\u03f3\u03f9\u0400\u0407\u040d\u0413\u041c\u0421\u0428\u042f"+
		"\u0440\u0448\u044b\u044f\u0459\u045e\u0461\u0465\u0469\u046d\u0472\u0475"+
		"\u0478\u047b\u047e\u0485\u0488\u048c\u0492\u0497\u049a\u049d\u049f\u04aa"+
		"\u04ae\u04b1\u04bf\u04c2\u04c6\u04c9\u04cd\u04d0\u04d4\u04d7\u04db\u04de"+
		"\u04e1\u04e5\u04e8\u04ec\u04f3\u04f6\u0503\u0509\u0514\u0519\u0521\u052a"+
		"\u052f\u0532\u0537\u053f\u0543\u0548\u054c\u054f\u0553\u0557\u055a\u055e"+
		"\u0561\u0568\u0570\u0572\u0579\u057f\u0587\u058a\u0591\u0594\u0596\u059c"+
		"\u05a2\u05b3\u05ba\u05c1\u05cd\u05d2\u05db\u05dd\u05e0\u05ed\u05fa\u05ff"+
		"\u060f\u0617\u0621\u0627\u0633\u0636\u063b\u0648\u064f\u0656\u0658\u065f"+
		"\u0663\u0665\u066a\u066d\u0673\u0678\u067a\u067e\u0681\u0684\u068a\u068f"+
		"\u0691\u0696\u069d\u069f\u06a6\u06ab\u06af\u06b2\u06ba\u06c2\u06c4\u06cc"+
		"\u06d0\u06d3\u06d9\u06de\u06e1\u06e7\u06ea\u06ee\u06f1\u06f5\u06fa\u06fe"+
		"\u0702\u0706\u070a\u070e\u0712\u0717\u071c\u0721\u0727\u072c\u0731\u0737"+
		"\u073c\u0741\u0746\u074b\u0750\u0755\u075a\u075f\u0764\u0769\u076f\u0777"+
		"\u077d\u0789\u0790\u0792\u079a\u079f\u07a2\u07aa\u07b0\u07c0\u07cc\u07ce"+
		"\u07d1\u07d9\u07df\u07e5\u07f2\u07f9\u0802\u0807\u0812\u081b\u0820\u082c"+
		"\u0833\u083c\u0841\u084d\u0854\u085d\u0862\u0869\u0872\u0877\u0879\u087e"+
		"\u0886\u088f\u0893\u0896\u089a\u089f\u08a5\u08ab\u08b0\u08b5\u08ba\u08bf"+
		"\u08c2\u08c7\u08cc\u08d6\u08da\u08e1\u08e6\u08e9\u08ee\u08f1\u08f5\u08f9"+
		"\u0901\u0914\u0917\u091a\u091e\u0928\u0935\u093c\u093f\u0948\u094b\u094e"+
		"\u0959\u095c\u0960\u0968\u096b\u0970\u0978\u097e\u0982\u0986\u098b\u0990"+
		"\u0993\u099a\u099e\u09a1\u09ac\u09b4\u09b7\u09ba\u09c0\u09c6\u09c8\u09cd"+
		"\u09d0\u09d6\u09dc\u09de\u09e2\u09e5\u09e8\u09ee\u09f4\u09f7\u09fd\u0a03"+
		"\u0a05\u0a0a\u0a0d\u0a15\u0a17\u0a20\u0a25\u0a2d\u0a31\u0a34\u0a3c\u0a46"+
		"\u0a4b\u0a4e\u0a55\u0a59\u0a5c\u0a60\u0a65\u0a79\u0a80\u0a89\u0a8d\u0a99"+
		"\u0a9c\u0aa5\u0ab1\u0ab9\u0ac1\u0ac8\u0acf\u0ad6\u0ae5\u0af2\u0af8\u0afe"+
		"\u0b04\u0b0a\u0b10\u0b16\u0b1b\u0b22\u0b29\u0b30\u0b35\u0b38\u0b3a\u0b48"+
		"\u0b4f\u0b56\u0b5c\u0b60\u0b64\u0b6b\u0b6e\u0b73\u0b7a\u0b81\u0b85\u0b8a"+
		"\u0b91\u0b9e\u0ba1\u0ba6\u0bab\u0baf\u0bb5\u0bbe\u0bc7\u0bd0\u0bd3\u0bd7"+
		"\u0be0\u0be4\u0be7\u0bea\u0bf0\u0bf3\u0bf9\u0c02\u0c05\u0c10\u0c13\u0c18"+
		"\u0c1b\u0c20\u0c2a\u0c2f\u0c35\u0c37\u0c3d\u0c3f\u0c45\u0c4d\u0c52\u0c5a"+
		"\u0c5d\u0c62\u0c65\u0c6a\u0c72\u0c7a\u0c80\u0c88\u0c8d\u0c95\u0c98\u0c9c"+
		"\u0c9f\u0ca7\u0cad\u0cb6\u0cb9\u0cbd\u0cc1\u0cc7\u0ccb\u0ccf\u0cd1\u0cd4"+
		"\u0cd7\u0cda\u0ce0\u0ce4\u0ce7\u0cea\u0ced\u0cf0\u0cf2\u0cf6\u0cfc\u0d02"+
		"\u0d07\u0d0a\u0d10\u0d14\u0d1c\u0d20\u0d23\u0d26\u0d2f\u0d33\u0d36\u0d3a"+
		"\u0d3e\u0d41\u0d44\u0d49\u0d4f\u0d53\u0d5d\u0d63\u0d67\u0d6d\u0d71\u0d77"+
		"\u0d7a\u0d86\u0d8a\u0d8e\u0d96\u0d9a\u0da2\u0da5\u0da9\u0dac\u0db4\u0db9"+
		"\u0dbc\u0dbf\u0dc3\u0dc6\u0dcf\u0dd4\u0ddd\u0de2\u0de9\u0df0\u0df8\u0dfd"+
		"\u0e05\u0e08\u0e0b\u0e12\u0e15\u0e1c\u0e1f\u0e27\u0e2d\u0e38\u0e3b\u0e46"+
		"\u0e4c\u0e50\u0e5b\u0e60\u0e62\u0e66\u0e70\u0e7a\u0e80\u0e85\u0e88\u0e8b"+
		"\u0e8e\u0e91\u0e94\u0e97\u0e9d\u0ea2\u0ea5\u0ea8\u0eab\u0eae\u0eb1\u0eb4"+
		"\u0eb6\u0ebc\u0ec1\u0ec4\u0ec7\u0eca\u0ecd\u0ed0\u0ed4\u0eda\u0ede\u0ee8"+
		"\u0eec\u0ef2\u0efb\u0efe\u0f02\u0f05\u0f09\u0f0d\u0f10\u0f12\u0f1a\u0f26"+
		"\u0f2c\u0f2e\u0f34\u0f36\u0f38\u0f3e\u0f46\u0f4e\u0f52\u0f56\u0f5f\u0f64"+
		"\u0f78\u0f7d\u0f83\u0f8a\u0f8f\u0f98\u0f9b\u0f9f\u0fa3\u0fa7\u0faa\u0fad"+
		"\u0fb0\u0fb4\u0fb8\u0fbb\u0fbe\u0fc1\u0fc8\u0fcc\u0fdb\u0fe8\u0ff0\u0ffa"+
		"\u0ffe\u1001\u1007\u100a\u100d\u1016\u101f\u1029\u102d\u1037\u1041\u1049"+
		"\u104c\u1055\u1058\u105c\u1061\u1065\u106e\u1071\u1090\u1093\u1096\u10ce"+
		"\u10d3\u10ef\u10fd\u1104\u1108\u110e\u1116\u1118\u1123\u112d\u1134\u113a"+
		"\u1142\u1147\u114f\u1157\u115f\u1167\u116d\u1170\u1174\u1179\u117e\u1184"+
		"\u1186\u1191\u1196\u119d\u119f\u11ad\u11b3\u11b8\u11bd\u11c3\u11ca\u11d2"+
		"\u11da\u11df\u11e5\u11e8\u11f0\u11f7\u1200\u1203\u1214\u121c\u1224\u1228"+
		"\u122f\u1235\u123d\u1246\u124c\u1253\u125a\u125f\u1262\u1264\u126a\u126c"+
		"\u1270\u1272\u1275\u127e\u1284\u128b\u1292\u1297\u129a\u129c\u12a2\u12a4"+
		"\u12a8\u12aa\u12ad\u12b2\u12b9\u12c2\u12c7\u12d0\u12d7\u12dc\u12df\u12e1"+
		"\u12e7\u12e9\u12ec\u12f4\u12f9\u12fe\u1302\u1308\u130d\u1311\u1317\u1319"+
		"\u1324\u1327\u132e\u1331\u133d\u1343\u134c\u1355\u135a\u1363\u1369\u1374"+
		"\u137d\u1383\u1388\u138c\u138f\u139b\u13a2\u13a7\u13b6\u13bd\u13c5\u13c8"+
		"\u13d2\u13dc\u13e6\u13f0\u13f4\u13f8\u1402\u1407\u1446\u1458\u1460\u146c"+
		"\u1473\u1475\u147f\u1482\u148a\u1491\u1495\u149c\u14a1\u14a4\u14a7\u14b0"+
		"\u14b4\u14cc\u14d3\u14d7\u14de\u14e5\u14e8\u14f8\u14fb\u1505\u1509\u150f"+
		"\u1512\u1517\u151b\u1522\u1525\u152b\u1543\u1546\u1552\u1555\u155f\u1567"+
		"\u156b\u1572\u1575\u157e\u1584\u158a\u1594\u1596\u159c\u159f\u15a2\u15ae"+
		"\u15b1\u15b7\u15ba\u15c2\u15ca\u15d0\u15d4\u15e2\u15ee\u15f5\u15f8\u15ff"+
		"\u1606\u160b\u1610\u1613\u161e\u1629\u162f\u1634\u1641\u1643\u1648\u164c"+
		"\u164f\u1651\u1658\u165f\u1662\u1665\u166b\u166f\u1675\u167b\u1688\u168d"+
		"\u1695\u1698\u169d\u16a2\u16aa\u16ad\u16b5\u16b9\u16c6\u16cc\u16d8\u16db"+
		"\u16e4\u16e9\u16ef\u16f5\u16fa\u16fc\u1701\u1703\u1707\u170d\u1710\u1713"+
		"\u171b\u1723\u1727\u173b\u1742\u1744\u174b\u174d\u1751\u1756\u1761\u1766"+
		"\u176c\u176f\u1773\u1778\u177b\u177f\u1783\u1785\u178a\u178f\u179c\u179f"+
		"\u17a3\u17a6\u17a9\u17ae\u17b3\u17b8\u17bb\u17c0\u17c3\u17c9\u17cc\u17d0"+
		"\u17d5\u17da\u17df\u17e4\u17e7\u17ec\u17f1\u17f6\u17fc\u1801\u1806\u180b"+
		"\u180e\u1813\u1817\u181b\u1823\u182a\u182e\u1833\u1838\u183c\u183e\u1841"+
		"\u1851\u185a\u1862\u186b\u1875\u187d\u1885\u188d\u1895\u18a1\u18a8\u18bb"+
		"\u18c0\u18c3\u18c8\u18cb\u18cf\u18de\u18e5\u18ea\u18ef\u1917\u191b\u1923"+
		"\u1927\u1930\u1938\u193d\u1945\u194a\u194f\u1951\u195a\u195f\u1967\u196c"+
		"\u1974\u197c\u197f\u1989\u199b\u19a1\u19a5\u19ab\u19af\u19b3\u19c0\u19c8"+
		"\u19cc\u19d1\u19d6\u19dc\u19e1\u19e5\u19ea\u19ef\u19f4\u19fe\u1a01\u1a05"+
		"\u1a09\u1a10\u1a14\u1a31\u1a36\u1a3a\u1a3d\u1a40\u1a43\u1a46\u1a51\u1a5f"+
		"\u1a68\u1a82\u1a8d\u1a94\u1a98\u1a9f\u1aa7\u1aac\u1ab4\u1aba\u1ac4\u1ad1"+
		"\u1ad7\u1add\u1aed\u1af3\u1afc\u1afe\u1b11\u1b1d\u1b2f\u1b40\u1b42\u1b4e"+
		"\u1b60\u1b69\u1b72\u1b7b";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}